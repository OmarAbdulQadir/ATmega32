
APP_37_LDR-sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00005d48  00005ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080018a  0080018a  00005f06  2**0
                  ALLOC
  3 .stab         00004590  00000000  00000000  00005f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001773  00000000  00000000  0000a498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000bdcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000bfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000e5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000fabf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00010dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00010fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000112b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011ccd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c4 2d 	jmp	0x5b88	; 0x5b88 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 07 	call	0xeea	; 0xeea <main>
      8a:	0c 94 a2 2e 	jmp	0x5d44	; 0x5d44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 2e 	jmp	0x5d0e	; 0x5d0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 2e 	jmp	0x5cee	; 0x5cee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 2e 	jmp	0x5cee	; 0x5cee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 2e 	jmp	0x5d0e	; 0x5d0e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e6       	ldi	r22, 0x68	; 104
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 77 2e 	jmp	0x5cee	; 0x5cee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 77 2e 	jmp	0x5cee	; 0x5cee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 77 2e 	jmp	0x5cee	; 0x5cee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 74 2e 	jmp	0x5ce8	; 0x5ce8 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 7b 2e 	jmp	0x5cf6	; 0x5cf6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 97 2e 	jmp	0x5d2e	; 0x5d2e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 8f 2e 	jmp	0x5d1e	; 0x5d1e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e0 59       	subi	r30, 0x90	; 144
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <main>:

#include "../../Drivers/HAL/LCD/LCD_interface.h"
#include "../../Drivers/HAL/LDR_sensor/LDR_sensor_interface.h"


int main(void){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <main+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62



	LCD_init();
     ef4:	0e 94 b4 21 	call	0x4368	; 0x4368 <LCD_init>
	LCD_write_str((u8*) "Value: ");
     ef8:	80 e6       	ldi	r24, 0x60	; 96
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 ba 28 	call	0x5174	; 0x5174 <LCD_write_str>

	LDRsensor_voidInit(0);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LDRsensor_voidInit>
	u8 intensity = LDRsensor_voidClcInt();
     f06:	0e 94 be 07 	call	0xf7c	; 0xf7c <LDRsensor_voidClcInt>
     f0a:	8a 83       	std	Y+2, r24	; 0x02
	u8 prev_int	=	0;
     f0c:	19 82       	std	Y+1, r1	; 0x01

	while(1){

		if(intensity != prev_int){
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	98 17       	cp	r25, r24
     f14:	b1 f0       	breq	.+44     	; 0xf42 <main+0x58>
			prev_int = intensity;
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
			LCD_set_cursor(0, 8);
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	68 e0       	ldi	r22, 0x08	; 8
     f1e:	0e 94 96 24 	call	0x492c	; 0x492c <LCD_set_cursor>
			LCD_write_float(prev_int, 2);
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a0 e0       	ldi	r26, 0x00	; 0
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	42 e0       	ldi	r20, 0x02	; 2
     f3e:	0e 94 7d 29 	call	0x52fa	; 0x52fa <LCD_write_float>
		}
		intensity = LDRsensor_voidClcInt();
     f42:	0e 94 be 07 	call	0xf7c	; 0xf7c <LDRsensor_voidClcInt>
     f46:	8a 83       	std	Y+2, r24	; 0x02
     f48:	e2 cf       	rjmp	.-60     	; 0xf0e <main+0x24>

00000f4a <LDRsensor_voidInit>:
ADC_config_struct LDR_sensor_config = {LDR_sensor_def_ch, LDR_sensor_Prescaler, LDR_sensor_ADATE, LDR_sensor_ADTS, LDR_sensor_ADIE};


/* Implementing of the driver functions */
// Initiate the sensor through a given ADC channel
void LDRsensor_voidInit(u8 copy_u8_ADC_ch){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if(copy_u8_ADC_ch <= LDR_sensor_max_ch){
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	50 f4       	brcc	.+20     	; 0xf70 <LDRsensor_voidInit+0x26>
		LDR_sensor_config.MUX = copy_u8_ADC_ch;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 71       	andi	r24, 0x1F	; 31
     f60:	98 2f       	mov	r25, r24
     f62:	9f 71       	andi	r25, 0x1F	; 31
     f64:	80 91 70 01 	lds	r24, 0x0170
     f68:	80 7e       	andi	r24, 0xE0	; 224
     f6a:	89 2b       	or	r24, r25
     f6c:	80 93 70 01 	sts	0x0170, r24
	}
	ADC_void_init();
     f70:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <ADC_void_init>
}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <LDRsensor_voidClcInt>:

// start calculating the voltage value
u8 LDRsensor_voidClcInt(void ){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	27 97       	sbiw	r28, 0x07	; 7
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	/*
	 *
	 */
	u16 LDR_sensor_Accumulator = LDR_sensor_Val_flour;
     f90:	1c 82       	std	Y+4, r1	; 0x04
     f92:	1b 82       	std	Y+3, r1	; 0x03
	u16 LDR_ADC_Data = LDR_sensor_Val_flour;
     f94:	1e 82       	std	Y+6, r1	; 0x06
     f96:	1d 82       	std	Y+5, r1	; 0x05
	for(u8 acc_counter= LDR_sensor_Val_flour; acc_counter < LDRsensor_Acc; acc_counter++){
     f98:	19 82       	std	Y+1, r1	; 0x01
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <LDRsensor_voidClcInt+0x3e>
		ADC_void_read_data(&LDR_ADC_Data);
     f9c:	ce 01       	movw	r24, r28
     f9e:	05 96       	adiw	r24, 0x05	; 5
     fa0:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <ADC_void_read_data>
		LDR_sensor_Accumulator += LDR_ADC_Data;
     fa4:	2d 81       	ldd	r18, Y+5	; 0x05
     fa6:	3e 81       	ldd	r19, Y+6	; 0x06
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	82 0f       	add	r24, r18
     fae:	93 1f       	adc	r25, r19
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *
	 */
	u16 LDR_sensor_Accumulator = LDR_sensor_Val_flour;
	u16 LDR_ADC_Data = LDR_sensor_Val_flour;
	for(u8 acc_counter= LDR_sensor_Val_flour; acc_counter < LDRsensor_Acc; acc_counter++){
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	8a 30       	cpi	r24, 0x0A	; 10
     fbe:	70 f3       	brcs	.-36     	; 0xf9c <LDRsensor_voidClcInt+0x20>
		ADC_void_read_data(&LDR_ADC_Data);
		LDR_sensor_Accumulator += LDR_ADC_Data;
	}
	LDR_ADC_Data = LDR_sensor_Accumulator/LDRsensor_Acc;
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	b9 01       	movw	r22, r18
     fca:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <__udivmodhi4>
     fce:	cb 01       	movw	r24, r22
     fd0:	9e 83       	std	Y+6, r25	; 0x06
     fd2:	8d 83       	std	Y+5, r24	; 0x05
	u8 voltageValue = (LDR_ADC_Data*Volt_ref)/LDR_sensor_ADC_MAX;
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	c9 01       	movw	r24, r18
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	82 0f       	add	r24, r18
     fe4:	93 1f       	adc	r25, r19
     fe6:	89 2f       	mov	r24, r25
     fe8:	99 27       	eor	r25, r25
     fea:	86 95       	lsr	r24
     fec:	86 95       	lsr	r24
     fee:	8a 83       	std	Y+2, r24	; 0x02
		else if (voltageValue < 500)
			return 1;
		else
			return 0;
	#elif LDR_connect == 0
		if(voltageValue < 50)
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	82 33       	cpi	r24, 0x32	; 50
     ff4:	10 f4       	brcc	.+4      	; 0xffa <LDRsensor_voidClcInt+0x7e>
			return 0;
     ff6:	1f 82       	std	Y+7, r1	; 0x07
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <LDRsensor_voidClcInt+0x8e>
		else if (voltageValue < 150)
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	86 39       	cpi	r24, 0x96	; 150
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <LDRsensor_voidClcInt+0x8a>
			return 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	8f 83       	std	Y+7, r24	; 0x07
    1004:	02 c0       	rjmp	.+4      	; 0x100a <LDRsensor_voidClcInt+0x8e>
		else if (voltageValue < 500)
			return 2;
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	8f 83       	std	Y+7, r24	; 0x07
    100a:	8f 81       	ldd	r24, Y+7	; 0x07
		else
			return 3;
	#else
		return 5;
	#endif
}
    100c:	27 96       	adiw	r28, 0x07	; 7
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <LCD_pow>:
#include "../../MCAL/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	27 97       	sbiw	r28, 0x07	; 7
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	8e 83       	std	Y+6, r24	; 0x06
    1034:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
    1036:	8e 81       	ldd	r24, Y+6	; 0x06
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	9b 83       	std	Y+3, r25	; 0x03
    1044:	ac 83       	std	Y+4, r26	; 0x04
    1046:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    1048:	19 82       	std	Y+1, r1	; 0x01
    104a:	16 c0       	rjmp	.+44     	; 0x1078 <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	ac 81       	ldd	r26, Y+4	; 0x04
    105c:	bd 81       	ldd	r27, Y+5	; 0x05
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <__mulsi3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	9b 83       	std	Y+3, r25	; 0x03
    106e:	ac 83       	std	Y+4, r26	; 0x04
    1070:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	28 17       	cp	r18, r24
    1088:	39 07       	cpc	r19, r25
    108a:	04 f3       	brlt	.-64     	; 0x104c <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	ac 81       	ldd	r26, Y+4	; 0x04
    1092:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	27 96       	adiw	r28, 0x07	; 7
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	e1 97       	sbiw	r28, 0x31	; 49
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e8       	ldi	r26, 0x80	; 128
    10d6:	bf e3       	ldi	r27, 0x3F	; 63
    10d8:	8d a7       	std	Y+45, r24	; 0x2d
    10da:	9e a7       	std	Y+46, r25	; 0x2e
    10dc:	af a7       	std	Y+47, r26	; 0x2f
    10de:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    10e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    10e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e6:	98 a9       	ldd	r25, Y+48	; 0x30
    10e8:	2b ea       	ldi	r18, 0xAB	; 171
    10ea:	3a ea       	ldi	r19, 0xAA	; 170
    10ec:	4a e2       	ldi	r20, 0x2A	; 42
    10ee:	50 e4       	ldi	r21, 0x40	; 64
    10f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	89 a7       	std	Y+41, r24	; 0x29
    10fa:	9a a7       	std	Y+42, r25	; 0x2a
    10fc:	ab a7       	std	Y+43, r26	; 0x2b
    10fe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1100:	69 a5       	ldd	r22, Y+41	; 0x29
    1102:	7a a5       	ldd	r23, Y+42	; 0x2a
    1104:	8b a5       	ldd	r24, Y+43	; 0x2b
    1106:	9c a5       	ldd	r25, Y+44	; 0x2c
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	5f e3       	ldi	r21, 0x3F	; 63
    1110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1114:	88 23       	and	r24, r24
    1116:	1c f4       	brge	.+6      	; 0x111e <LCD_write_data_8bit+0x74>
		__ticks = 1;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	88 a7       	std	Y+40, r24	; 0x28
    111c:	91 c0       	rjmp	.+290    	; 0x1240 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    111e:	69 a5       	ldd	r22, Y+41	; 0x29
    1120:	7a a5       	ldd	r23, Y+42	; 0x2a
    1122:	8b a5       	ldd	r24, Y+43	; 0x2b
    1124:	9c a5       	ldd	r25, Y+44	; 0x2c
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	53 e4       	ldi	r21, 0x43	; 67
    112e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1132:	18 16       	cp	r1, r24
    1134:	0c f0       	brlt	.+2      	; 0x1138 <LCD_write_data_8bit+0x8e>
    1136:	7b c0       	rjmp	.+246    	; 0x122e <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1138:	6d a5       	ldd	r22, Y+45	; 0x2d
    113a:	7e a5       	ldd	r23, Y+46	; 0x2e
    113c:	8f a5       	ldd	r24, Y+47	; 0x2f
    113e:	98 a9       	ldd	r25, Y+48	; 0x30
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a e7       	ldi	r20, 0x7A	; 122
    1146:	54 e4       	ldi	r21, 0x44	; 68
    1148:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	8c a3       	std	Y+36, r24	; 0x24
    1152:	9d a3       	std	Y+37, r25	; 0x25
    1154:	ae a3       	std	Y+38, r26	; 0x26
    1156:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	6c a1       	ldd	r22, Y+36	; 0x24
    115a:	7d a1       	ldd	r23, Y+37	; 0x25
    115c:	8e a1       	ldd	r24, Y+38	; 0x26
    115e:	9f a1       	ldd	r25, Y+39	; 0x27
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a ef       	ldi	r20, 0xFA	; 250
    1166:	54 e4       	ldi	r21, 0x44	; 68
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	88 a3       	std	Y+32, r24	; 0x20
    1172:	99 a3       	std	Y+33, r25	; 0x21
    1174:	aa a3       	std	Y+34, r26	; 0x22
    1176:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1178:	68 a1       	ldd	r22, Y+32	; 0x20
    117a:	79 a1       	ldd	r23, Y+33	; 0x21
    117c:	8a a1       	ldd	r24, Y+34	; 0x22
    117e:	9b a1       	ldd	r25, Y+35	; 0x23
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9f 8f       	std	Y+31, r25	; 0x1f
    1196:	8e 8f       	std	Y+30, r24	; 0x1e
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    119a:	68 a1       	ldd	r22, Y+32	; 0x20
    119c:	79 a1       	ldd	r23, Y+33	; 0x21
    119e:	8a a1       	ldd	r24, Y+34	; 0x22
    11a0:	9b a1       	ldd	r25, Y+35	; 0x23
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	6c a1       	ldd	r22, Y+36	; 0x24
    11b4:	7d a1       	ldd	r23, Y+37	; 0x25
    11b6:	8e a1       	ldd	r24, Y+38	; 0x26
    11b8:	9f a1       	ldd	r25, Y+39	; 0x27
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9f 8f       	std	Y+31, r25	; 0x1f
    11d8:	8e 8f       	std	Y+30, r24	; 0x1e
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <LCD_write_data_8bit+0x150>
    11dc:	88 ec       	ldi	r24, 0xC8	; 200
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9d 8f       	std	Y+29, r25	; 0x1d
    11e2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <LCD_write_data_8bit+0x13e>
    11ec:	9d 8f       	std	Y+29, r25	; 0x1d
    11ee:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9f 8f       	std	Y+31, r25	; 0x1f
    11f8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <LCD_write_data_8bit+0x132>
    1202:	24 c0       	rjmp	.+72     	; 0x124c <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	68 a1       	ldd	r22, Y+32	; 0x20
    1206:	79 a1       	ldd	r23, Y+33	; 0x21
    1208:	8a a1       	ldd	r24, Y+34	; 0x22
    120a:	9b a1       	ldd	r25, Y+35	; 0x23
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9f 8f       	std	Y+31, r25	; 0x1f
    1216:	8e 8f       	std	Y+30, r24	; 0x1e
    1218:	8e 8d       	ldd	r24, Y+30	; 0x1e
    121a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    121c:	9b 8f       	std	Y+27, r25	; 0x1b
    121e:	8a 8f       	std	Y+26, r24	; 0x1a
    1220:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1222:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCD_write_data_8bit+0x17a>
    1228:	9b 8f       	std	Y+27, r25	; 0x1b
    122a:	8a 8f       	std	Y+26, r24	; 0x1a
    122c:	0f c0       	rjmp	.+30     	; 0x124c <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    122e:	69 a5       	ldd	r22, Y+41	; 0x29
    1230:	7a a5       	ldd	r23, Y+42	; 0x2a
    1232:	8b a5       	ldd	r24, Y+43	; 0x2b
    1234:	9c a5       	ldd	r25, Y+44	; 0x2c
    1236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	88 a7       	std	Y+40, r24	; 0x28
    1240:	88 a5       	ldd	r24, Y+40	; 0x28
    1242:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1244:	89 8d       	ldd	r24, Y+25	; 0x19
    1246:	8a 95       	dec	r24
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_write_data_8bit+0x19c>
    124a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e8       	ldi	r26, 0x80	; 128
    125a:	bf e3       	ldi	r27, 0x3F	; 63
    125c:	8d 8b       	std	Y+21, r24	; 0x15
    125e:	9e 8b       	std	Y+22, r25	; 0x16
    1260:	af 8b       	std	Y+23, r26	; 0x17
    1262:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1264:	6d 89       	ldd	r22, Y+21	; 0x15
    1266:	7e 89       	ldd	r23, Y+22	; 0x16
    1268:	8f 89       	ldd	r24, Y+23	; 0x17
    126a:	98 8d       	ldd	r25, Y+24	; 0x18
    126c:	2b ea       	ldi	r18, 0xAB	; 171
    126e:	3a ea       	ldi	r19, 0xAA	; 170
    1270:	4a e2       	ldi	r20, 0x2A	; 42
    1272:	50 e4       	ldi	r21, 0x40	; 64
    1274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	89 8b       	std	Y+17, r24	; 0x11
    127e:	9a 8b       	std	Y+18, r25	; 0x12
    1280:	ab 8b       	std	Y+19, r26	; 0x13
    1282:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1284:	69 89       	ldd	r22, Y+17	; 0x11
    1286:	7a 89       	ldd	r23, Y+18	; 0x12
    1288:	8b 89       	ldd	r24, Y+19	; 0x13
    128a:	9c 89       	ldd	r25, Y+20	; 0x14
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1298:	88 23       	and	r24, r24
    129a:	1c f4       	brge	.+6      	; 0x12a2 <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	88 8b       	std	Y+16, r24	; 0x10
    12a0:	91 c0       	rjmp	.+290    	; 0x13c4 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    12a2:	69 89       	ldd	r22, Y+17	; 0x11
    12a4:	7a 89       	ldd	r23, Y+18	; 0x12
    12a6:	8b 89       	ldd	r24, Y+19	; 0x13
    12a8:	9c 89       	ldd	r25, Y+20	; 0x14
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	53 e4       	ldi	r21, 0x43	; 67
    12b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	0c f0       	brlt	.+2      	; 0x12bc <LCD_write_data_8bit+0x212>
    12ba:	7b c0       	rjmp	.+246    	; 0x13b2 <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    12bc:	6d 89       	ldd	r22, Y+21	; 0x15
    12be:	7e 89       	ldd	r23, Y+22	; 0x16
    12c0:	8f 89       	ldd	r24, Y+23	; 0x17
    12c2:	98 8d       	ldd	r25, Y+24	; 0x18
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a e7       	ldi	r20, 0x7A	; 122
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8c 87       	std	Y+12, r24	; 0x0c
    12d6:	9d 87       	std	Y+13, r25	; 0x0d
    12d8:	ae 87       	std	Y+14, r26	; 0x0e
    12da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    12de:	7d 85       	ldd	r23, Y+13	; 0x0d
    12e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a ef       	ldi	r20, 0xFA	; 250
    12ea:	54 e4       	ldi	r21, 0x44	; 68
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	88 87       	std	Y+8, r24	; 0x08
    12f6:	99 87       	std	Y+9, r25	; 0x09
    12f8:	aa 87       	std	Y+10, r26	; 0x0a
    12fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    12fc:	68 85       	ldd	r22, Y+8	; 0x08
    12fe:	79 85       	ldd	r23, Y+9	; 0x09
    1300:	8a 85       	ldd	r24, Y+10	; 0x0a
    1302:	9b 85       	ldd	r25, Y+11	; 0x0b
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9f 83       	std	Y+7, r25	; 0x07
    131a:	8e 83       	std	Y+6, r24	; 0x06
    131c:	3f c0       	rjmp	.+126    	; 0x139c <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    131e:	68 85       	ldd	r22, Y+8	; 0x08
    1320:	79 85       	ldd	r23, Y+9	; 0x09
    1322:	8a 85       	ldd	r24, Y+10	; 0x0a
    1324:	9b 85       	ldd	r25, Y+11	; 0x0b
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	6c 85       	ldd	r22, Y+12	; 0x0c
    1338:	7d 85       	ldd	r23, Y+13	; 0x0d
    133a:	8e 85       	ldd	r24, Y+14	; 0x0e
    133c:	9f 85       	ldd	r25, Y+15	; 0x0f
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9f 83       	std	Y+7, r25	; 0x07
    135c:	8e 83       	std	Y+6, r24	; 0x06
    135e:	0f c0       	rjmp	.+30     	; 0x137e <LCD_write_data_8bit+0x2d4>
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9d 83       	std	Y+5, r25	; 0x05
    1366:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_write_data_8bit+0x2c2>
    1370:	9d 83       	std	Y+5, r25	; 0x05
    1372:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	8e 81       	ldd	r24, Y+6	; 0x06
    1376:	9f 81       	ldd	r25, Y+7	; 0x07
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9f 83       	std	Y+7, r25	; 0x07
    137c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	8e 81       	ldd	r24, Y+6	; 0x06
    1380:	9f 81       	ldd	r25, Y+7	; 0x07
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <LCD_write_data_8bit+0x2b6>
    1386:	24 c0       	rjmp	.+72     	; 0x13d0 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	68 85       	ldd	r22, Y+8	; 0x08
    138a:	79 85       	ldd	r23, Y+9	; 0x09
    138c:	8a 85       	ldd	r24, Y+10	; 0x0a
    138e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9f 83       	std	Y+7, r25	; 0x07
    139a:	8e 83       	std	Y+6, r24	; 0x06
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	9b 83       	std	Y+3, r25	; 0x03
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	9b 81       	ldd	r25, Y+3	; 0x03
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <LCD_write_data_8bit+0x2fe>
    13ac:	9b 83       	std	Y+3, r25	; 0x03
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13b2:	69 89       	ldd	r22, Y+17	; 0x11
    13b4:	7a 89       	ldd	r23, Y+18	; 0x12
    13b6:	8b 89       	ldd	r24, Y+19	; 0x13
    13b8:	9c 89       	ldd	r25, Y+20	; 0x14
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	88 8b       	std	Y+16, r24	; 0x10
    13c4:	88 89       	ldd	r24, Y+16	; 0x10
    13c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	8a 95       	dec	r24
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <LCD_write_data_8bit+0x320>
    13ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	69 a9       	ldd	r22, Y+49	; 0x31
    13d4:	0e 94 8f 2b 	call	0x571e	; 0x571e <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
}
    13e0:	e1 96       	adiw	r28, 0x31	; 49
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	e1 97       	sbiw	r28, 0x31	; 49
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a0 e8       	ldi	r26, 0x80	; 128
    141e:	bf e3       	ldi	r27, 0x3F	; 63
    1420:	8d a7       	std	Y+45, r24	; 0x2d
    1422:	9e a7       	std	Y+46, r25	; 0x2e
    1424:	af a7       	std	Y+47, r26	; 0x2f
    1426:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1428:	6d a5       	ldd	r22, Y+45	; 0x2d
    142a:	7e a5       	ldd	r23, Y+46	; 0x2e
    142c:	8f a5       	ldd	r24, Y+47	; 0x2f
    142e:	98 a9       	ldd	r25, Y+48	; 0x30
    1430:	2b ea       	ldi	r18, 0xAB	; 171
    1432:	3a ea       	ldi	r19, 0xAA	; 170
    1434:	4a e2       	ldi	r20, 0x2A	; 42
    1436:	50 e4       	ldi	r21, 0x40	; 64
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	89 a7       	std	Y+41, r24	; 0x29
    1442:	9a a7       	std	Y+42, r25	; 0x2a
    1444:	ab a7       	std	Y+43, r26	; 0x2b
    1446:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1448:	69 a5       	ldd	r22, Y+41	; 0x29
    144a:	7a a5       	ldd	r23, Y+42	; 0x2a
    144c:	8b a5       	ldd	r24, Y+43	; 0x2b
    144e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    145c:	88 23       	and	r24, r24
    145e:	1c f4       	brge	.+6      	; 0x1466 <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	88 a7       	std	Y+40, r24	; 0x28
    1464:	91 c0       	rjmp	.+290    	; 0x1588 <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    1466:	69 a5       	ldd	r22, Y+41	; 0x29
    1468:	7a a5       	ldd	r23, Y+42	; 0x2a
    146a:	8b a5       	ldd	r24, Y+43	; 0x2b
    146c:	9c a5       	ldd	r25, Y+44	; 0x2c
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	53 e4       	ldi	r21, 0x43	; 67
    1476:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	0c f0       	brlt	.+2      	; 0x1480 <LCD_write_cmd_8bit+0x8e>
    147e:	7b c0       	rjmp	.+246    	; 0x1576 <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1480:	6d a5       	ldd	r22, Y+45	; 0x2d
    1482:	7e a5       	ldd	r23, Y+46	; 0x2e
    1484:	8f a5       	ldd	r24, Y+47	; 0x2f
    1486:	98 a9       	ldd	r25, Y+48	; 0x30
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a e7       	ldi	r20, 0x7A	; 122
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8c a3       	std	Y+36, r24	; 0x24
    149a:	9d a3       	std	Y+37, r25	; 0x25
    149c:	ae a3       	std	Y+38, r26	; 0x26
    149e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a0:	6c a1       	ldd	r22, Y+36	; 0x24
    14a2:	7d a1       	ldd	r23, Y+37	; 0x25
    14a4:	8e a1       	ldd	r24, Y+38	; 0x26
    14a6:	9f a1       	ldd	r25, Y+39	; 0x27
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	4a ef       	ldi	r20, 0xFA	; 250
    14ae:	54 e4       	ldi	r21, 0x44	; 68
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	88 a3       	std	Y+32, r24	; 0x20
    14ba:	99 a3       	std	Y+33, r25	; 0x21
    14bc:	aa a3       	std	Y+34, r26	; 0x22
    14be:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    14c0:	68 a1       	ldd	r22, Y+32	; 0x20
    14c2:	79 a1       	ldd	r23, Y+33	; 0x21
    14c4:	8a a1       	ldd	r24, Y+34	; 0x22
    14c6:	9b a1       	ldd	r25, Y+35	; 0x23
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9f 8f       	std	Y+31, r25	; 0x1f
    14de:	8e 8f       	std	Y+30, r24	; 0x1e
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    14e2:	68 a1       	ldd	r22, Y+32	; 0x20
    14e4:	79 a1       	ldd	r23, Y+33	; 0x21
    14e6:	8a a1       	ldd	r24, Y+34	; 0x22
    14e8:	9b a1       	ldd	r25, Y+35	; 0x23
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	3f ef       	ldi	r19, 0xFF	; 255
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	57 e4       	ldi	r21, 0x47	; 71
    14f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14f6:	18 16       	cp	r1, r24
    14f8:	4c f5       	brge	.+82     	; 0x154c <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fa:	6c a1       	ldd	r22, Y+36	; 0x24
    14fc:	7d a1       	ldd	r23, Y+37	; 0x25
    14fe:	8e a1       	ldd	r24, Y+38	; 0x26
    1500:	9f a1       	ldd	r25, Y+39	; 0x27
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e2       	ldi	r20, 0x20	; 32
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9f 8f       	std	Y+31, r25	; 0x1f
    1520:	8e 8f       	std	Y+30, r24	; 0x1e
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <LCD_write_cmd_8bit+0x150>
    1524:	88 ec       	ldi	r24, 0xC8	; 200
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9d 8f       	std	Y+29, r25	; 0x1d
    152a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    152c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    152e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <LCD_write_cmd_8bit+0x13e>
    1534:	9d 8f       	std	Y+29, r25	; 0x1d
    1536:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	8e 8d       	ldd	r24, Y+30	; 0x1e
    153a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	9f 8f       	std	Y+31, r25	; 0x1f
    1540:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1544:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f7       	brne	.-38     	; 0x1524 <LCD_write_cmd_8bit+0x132>
    154a:	24 c0       	rjmp	.+72     	; 0x1594 <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	68 a1       	ldd	r22, Y+32	; 0x20
    154e:	79 a1       	ldd	r23, Y+33	; 0x21
    1550:	8a a1       	ldd	r24, Y+34	; 0x22
    1552:	9b a1       	ldd	r25, Y+35	; 0x23
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9f 8f       	std	Y+31, r25	; 0x1f
    155e:	8e 8f       	std	Y+30, r24	; 0x1e
    1560:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1562:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1564:	9b 8f       	std	Y+27, r25	; 0x1b
    1566:	8a 8f       	std	Y+26, r24	; 0x1a
    1568:	8a 8d       	ldd	r24, Y+26	; 0x1a
    156a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <LCD_write_cmd_8bit+0x17a>
    1570:	9b 8f       	std	Y+27, r25	; 0x1b
    1572:	8a 8f       	std	Y+26, r24	; 0x1a
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1576:	69 a5       	ldd	r22, Y+41	; 0x29
    1578:	7a a5       	ldd	r23, Y+42	; 0x2a
    157a:	8b a5       	ldd	r24, Y+43	; 0x2b
    157c:	9c a5       	ldd	r25, Y+44	; 0x2c
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	88 a7       	std	Y+40, r24	; 0x28
    1588:	88 a5       	ldd	r24, Y+40	; 0x28
    158a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    158c:	89 8d       	ldd	r24, Y+25	; 0x19
    158e:	8a 95       	dec	r24
    1590:	f1 f7       	brne	.-4      	; 0x158e <LCD_write_cmd_8bit+0x19c>
    1592:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e8       	ldi	r26, 0x80	; 128
    15a2:	bf e3       	ldi	r27, 0x3F	; 63
    15a4:	8d 8b       	std	Y+21, r24	; 0x15
    15a6:	9e 8b       	std	Y+22, r25	; 0x16
    15a8:	af 8b       	std	Y+23, r26	; 0x17
    15aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15ac:	6d 89       	ldd	r22, Y+21	; 0x15
    15ae:	7e 89       	ldd	r23, Y+22	; 0x16
    15b0:	8f 89       	ldd	r24, Y+23	; 0x17
    15b2:	98 8d       	ldd	r25, Y+24	; 0x18
    15b4:	2b ea       	ldi	r18, 0xAB	; 171
    15b6:	3a ea       	ldi	r19, 0xAA	; 170
    15b8:	4a e2       	ldi	r20, 0x2A	; 42
    15ba:	50 e4       	ldi	r21, 0x40	; 64
    15bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	89 8b       	std	Y+17, r24	; 0x11
    15c6:	9a 8b       	std	Y+18, r25	; 0x12
    15c8:	ab 8b       	std	Y+19, r26	; 0x13
    15ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15cc:	69 89       	ldd	r22, Y+17	; 0x11
    15ce:	7a 89       	ldd	r23, Y+18	; 0x12
    15d0:	8b 89       	ldd	r24, Y+19	; 0x13
    15d2:	9c 89       	ldd	r25, Y+20	; 0x14
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	1c f4       	brge	.+6      	; 0x15ea <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	88 8b       	std	Y+16, r24	; 0x10
    15e8:	91 c0       	rjmp	.+290    	; 0x170c <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    15ea:	69 89       	ldd	r22, Y+17	; 0x11
    15ec:	7a 89       	ldd	r23, Y+18	; 0x12
    15ee:	8b 89       	ldd	r24, Y+19	; 0x13
    15f0:	9c 89       	ldd	r25, Y+20	; 0x14
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4f e7       	ldi	r20, 0x7F	; 127
    15f8:	53 e4       	ldi	r21, 0x43	; 67
    15fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15fe:	18 16       	cp	r1, r24
    1600:	0c f0       	brlt	.+2      	; 0x1604 <LCD_write_cmd_8bit+0x212>
    1602:	7b c0       	rjmp	.+246    	; 0x16fa <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1604:	6d 89       	ldd	r22, Y+21	; 0x15
    1606:	7e 89       	ldd	r23, Y+22	; 0x16
    1608:	8f 89       	ldd	r24, Y+23	; 0x17
    160a:	98 8d       	ldd	r25, Y+24	; 0x18
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4a e7       	ldi	r20, 0x7A	; 122
    1612:	54 e4       	ldi	r21, 0x44	; 68
    1614:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	8c 87       	std	Y+12, r24	; 0x0c
    161e:	9d 87       	std	Y+13, r25	; 0x0d
    1620:	ae 87       	std	Y+14, r26	; 0x0e
    1622:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	6c 85       	ldd	r22, Y+12	; 0x0c
    1626:	7d 85       	ldd	r23, Y+13	; 0x0d
    1628:	8e 85       	ldd	r24, Y+14	; 0x0e
    162a:	9f 85       	ldd	r25, Y+15	; 0x0f
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a ef       	ldi	r20, 0xFA	; 250
    1632:	54 e4       	ldi	r21, 0x44	; 68
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	88 87       	std	Y+8, r24	; 0x08
    163e:	99 87       	std	Y+9, r25	; 0x09
    1640:	aa 87       	std	Y+10, r26	; 0x0a
    1642:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1644:	68 85       	ldd	r22, Y+8	; 0x08
    1646:	79 85       	ldd	r23, Y+9	; 0x09
    1648:	8a 85       	ldd	r24, Y+10	; 0x0a
    164a:	9b 85       	ldd	r25, Y+11	; 0x0b
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9f 83       	std	Y+7, r25	; 0x07
    1662:	8e 83       	std	Y+6, r24	; 0x06
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    1666:	68 85       	ldd	r22, Y+8	; 0x08
    1668:	79 85       	ldd	r23, Y+9	; 0x09
    166a:	8a 85       	ldd	r24, Y+10	; 0x0a
    166c:	9b 85       	ldd	r25, Y+11	; 0x0b
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1680:	7d 85       	ldd	r23, Y+13	; 0x0d
    1682:	8e 85       	ldd	r24, Y+14	; 0x0e
    1684:	9f 85       	ldd	r25, Y+15	; 0x0f
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	8e 83       	std	Y+6, r24	; 0x06
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <LCD_write_cmd_8bit+0x2d4>
    16a8:	88 ec       	ldi	r24, 0xC8	; 200
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9d 83       	std	Y+5, r25	; 0x05
    16ae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_write_cmd_8bit+0x2c2>
    16b8:	9d 83       	std	Y+5, r25	; 0x05
    16ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	9f 81       	ldd	r25, Y+7	; 0x07
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9f 83       	std	Y+7, r25	; 0x07
    16c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	8e 81       	ldd	r24, Y+6	; 0x06
    16c8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <LCD_write_cmd_8bit+0x2b6>
    16ce:	24 c0       	rjmp	.+72     	; 0x1718 <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d0:	68 85       	ldd	r22, Y+8	; 0x08
    16d2:	79 85       	ldd	r23, Y+9	; 0x09
    16d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9f 83       	std	Y+7, r25	; 0x07
    16e2:	8e 83       	std	Y+6, r24	; 0x06
    16e4:	8e 81       	ldd	r24, Y+6	; 0x06
    16e6:	9f 81       	ldd	r25, Y+7	; 0x07
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_write_cmd_8bit+0x2fe>
    16f4:	9b 83       	std	Y+3, r25	; 0x03
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16fa:	69 89       	ldd	r22, Y+17	; 0x11
    16fc:	7a 89       	ldd	r23, Y+18	; 0x12
    16fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1700:	9c 89       	ldd	r25, Y+20	; 0x14
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	88 8b       	std	Y+16, r24	; 0x10
    170c:	88 89       	ldd	r24, Y+16	; 0x10
    170e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	8a 95       	dec	r24
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_write_cmd_8bit+0x320>
    1716:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	69 a9       	ldd	r22, Y+49	; 0x31
    171c:	0e 94 8f 2b 	call	0x571e	; 0x571e <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
}
    1728:	e1 96       	adiw	r28, 0x31	; 49
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	ef 97       	sbiw	r28, 0x3f	; 63
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <DIO_void_set_port_dir>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a8 e4       	ldi	r26, 0x48	; 72
    175c:	b2 e4       	ldi	r27, 0x42	; 66
    175e:	8b af       	std	Y+59, r24	; 0x3b
    1760:	9c af       	std	Y+60, r25	; 0x3c
    1762:	ad af       	std	Y+61, r26	; 0x3d
    1764:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1766:	6b ad       	ldd	r22, Y+59	; 0x3b
    1768:	7c ad       	ldd	r23, Y+60	; 0x3c
    176a:	8d ad       	ldd	r24, Y+61	; 0x3d
    176c:	9e ad       	ldd	r25, Y+62	; 0x3e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a ef       	ldi	r20, 0xFA	; 250
    1774:	54 e4       	ldi	r21, 0x44	; 68
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8f ab       	std	Y+55, r24	; 0x37
    1780:	98 af       	std	Y+56, r25	; 0x38
    1782:	a9 af       	std	Y+57, r26	; 0x39
    1784:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1786:	6f a9       	ldd	r22, Y+55	; 0x37
    1788:	78 ad       	ldd	r23, Y+56	; 0x38
    178a:	89 ad       	ldd	r24, Y+57	; 0x39
    178c:	9a ad       	ldd	r25, Y+58	; 0x3a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    179a:	88 23       	and	r24, r24
    179c:	2c f4       	brge	.+10     	; 0x17a8 <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9e ab       	std	Y+54, r25	; 0x36
    17a4:	8d ab       	std	Y+53, r24	; 0x35
    17a6:	3f c0       	rjmp	.+126    	; 0x1826 <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    17a8:	6f a9       	ldd	r22, Y+55	; 0x37
    17aa:	78 ad       	ldd	r23, Y+56	; 0x38
    17ac:	89 ad       	ldd	r24, Y+57	; 0x39
    17ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17bc:	18 16       	cp	r1, r24
    17be:	4c f5       	brge	.+82     	; 0x1812 <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c0:	6b ad       	ldd	r22, Y+59	; 0x3b
    17c2:	7c ad       	ldd	r23, Y+60	; 0x3c
    17c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9e ab       	std	Y+54, r25	; 0x36
    17e6:	8d ab       	std	Y+53, r24	; 0x35
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <LCD_read_address_8bit+0xce>
    17ea:	88 ec       	ldi	r24, 0xC8	; 200
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9c ab       	std	Y+52, r25	; 0x34
    17f0:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17f2:	8b a9       	ldd	r24, Y+51	; 0x33
    17f4:	9c a9       	ldd	r25, Y+52	; 0x34
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <LCD_read_address_8bit+0xbc>
    17fa:	9c ab       	std	Y+52, r25	; 0x34
    17fc:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	8d a9       	ldd	r24, Y+53	; 0x35
    1800:	9e a9       	ldd	r25, Y+54	; 0x36
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	9e ab       	std	Y+54, r25	; 0x36
    1806:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	8d a9       	ldd	r24, Y+53	; 0x35
    180a:	9e a9       	ldd	r25, Y+54	; 0x36
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	69 f7       	brne	.-38     	; 0x17ea <LCD_read_address_8bit+0xb0>
    1810:	14 c0       	rjmp	.+40     	; 0x183a <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1812:	6f a9       	ldd	r22, Y+55	; 0x37
    1814:	78 ad       	ldd	r23, Y+56	; 0x38
    1816:	89 ad       	ldd	r24, Y+57	; 0x39
    1818:	9a ad       	ldd	r25, Y+58	; 0x3a
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9e ab       	std	Y+54, r25	; 0x36
    1824:	8d ab       	std	Y+53, r24	; 0x35
    1826:	8d a9       	ldd	r24, Y+53	; 0x35
    1828:	9e a9       	ldd	r25, Y+54	; 0x36
    182a:	9a ab       	std	Y+50, r25	; 0x32
    182c:	89 ab       	std	Y+49, r24	; 0x31
    182e:	89 a9       	ldd	r24, Y+49	; 0x31
    1830:	9a a9       	ldd	r25, Y+50	; 0x32
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_read_address_8bit+0xf8>
    1836:	9a ab       	std	Y+50, r25	; 0x32
    1838:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	62 e0       	ldi	r22, 0x02	; 2
    183e:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e8       	ldi	r26, 0x80	; 128
    1850:	bf e3       	ldi	r27, 0x3F	; 63
    1852:	8d a7       	std	Y+45, r24	; 0x2d
    1854:	9e a7       	std	Y+46, r25	; 0x2e
    1856:	af a7       	std	Y+47, r26	; 0x2f
    1858:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    185a:	6d a5       	ldd	r22, Y+45	; 0x2d
    185c:	7e a5       	ldd	r23, Y+46	; 0x2e
    185e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1860:	98 a9       	ldd	r25, Y+48	; 0x30
    1862:	2b ea       	ldi	r18, 0xAB	; 171
    1864:	3a ea       	ldi	r19, 0xAA	; 170
    1866:	4a e2       	ldi	r20, 0x2A	; 42
    1868:	50 e4       	ldi	r21, 0x40	; 64
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	89 a7       	std	Y+41, r24	; 0x29
    1874:	9a a7       	std	Y+42, r25	; 0x2a
    1876:	ab a7       	std	Y+43, r26	; 0x2b
    1878:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    187a:	69 a5       	ldd	r22, Y+41	; 0x29
    187c:	7a a5       	ldd	r23, Y+42	; 0x2a
    187e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1880:	9c a5       	ldd	r25, Y+44	; 0x2c
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	1c f4       	brge	.+6      	; 0x1898 <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	88 a7       	std	Y+40, r24	; 0x28
    1896:	91 c0       	rjmp	.+290    	; 0x19ba <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    1898:	69 a5       	ldd	r22, Y+41	; 0x29
    189a:	7a a5       	ldd	r23, Y+42	; 0x2a
    189c:	8b a5       	ldd	r24, Y+43	; 0x2b
    189e:	9c a5       	ldd	r25, Y+44	; 0x2c
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	53 e4       	ldi	r21, 0x43	; 67
    18a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ac:	18 16       	cp	r1, r24
    18ae:	0c f0       	brlt	.+2      	; 0x18b2 <LCD_read_address_8bit+0x178>
    18b0:	7b c0       	rjmp	.+246    	; 0x19a8 <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    18b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    18b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a e7       	ldi	r20, 0x7A	; 122
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8c a3       	std	Y+36, r24	; 0x24
    18cc:	9d a3       	std	Y+37, r25	; 0x25
    18ce:	ae a3       	std	Y+38, r26	; 0x26
    18d0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6c a1       	ldd	r22, Y+36	; 0x24
    18d4:	7d a1       	ldd	r23, Y+37	; 0x25
    18d6:	8e a1       	ldd	r24, Y+38	; 0x26
    18d8:	9f a1       	ldd	r25, Y+39	; 0x27
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a ef       	ldi	r20, 0xFA	; 250
    18e0:	54 e4       	ldi	r21, 0x44	; 68
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	88 a3       	std	Y+32, r24	; 0x20
    18ec:	99 a3       	std	Y+33, r25	; 0x21
    18ee:	aa a3       	std	Y+34, r26	; 0x22
    18f0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    18f2:	68 a1       	ldd	r22, Y+32	; 0x20
    18f4:	79 a1       	ldd	r23, Y+33	; 0x21
    18f6:	8a a1       	ldd	r24, Y+34	; 0x22
    18f8:	9b a1       	ldd	r25, Y+35	; 0x23
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9f 8f       	std	Y+31, r25	; 0x1f
    1910:	8e 8f       	std	Y+30, r24	; 0x1e
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    1914:	68 a1       	ldd	r22, Y+32	; 0x20
    1916:	79 a1       	ldd	r23, Y+33	; 0x21
    1918:	8a a1       	ldd	r24, Y+34	; 0x22
    191a:	9b a1       	ldd	r25, Y+35	; 0x23
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6c a1       	ldd	r22, Y+36	; 0x24
    192e:	7d a1       	ldd	r23, Y+37	; 0x25
    1930:	8e a1       	ldd	r24, Y+38	; 0x26
    1932:	9f a1       	ldd	r25, Y+39	; 0x27
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9f 8f       	std	Y+31, r25	; 0x1f
    1952:	8e 8f       	std	Y+30, r24	; 0x1e
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_read_address_8bit+0x23a>
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9d 8f       	std	Y+29, r25	; 0x1d
    195c:	8c 8f       	std	Y+28, r24	; 0x1c
    195e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1960:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_read_address_8bit+0x228>
    1966:	9d 8f       	std	Y+29, r25	; 0x1d
    1968:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    196c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9f 8f       	std	Y+31, r25	; 0x1f
    1972:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1976:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_read_address_8bit+0x21c>
    197c:	24 c0       	rjmp	.+72     	; 0x19c6 <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	68 a1       	ldd	r22, Y+32	; 0x20
    1980:	79 a1       	ldd	r23, Y+33	; 0x21
    1982:	8a a1       	ldd	r24, Y+34	; 0x22
    1984:	9b a1       	ldd	r25, Y+35	; 0x23
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9f 8f       	std	Y+31, r25	; 0x1f
    1990:	8e 8f       	std	Y+30, r24	; 0x1e
    1992:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1994:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1996:	9b 8f       	std	Y+27, r25	; 0x1b
    1998:	8a 8f       	std	Y+26, r24	; 0x1a
    199a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    199c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_read_address_8bit+0x264>
    19a2:	9b 8f       	std	Y+27, r25	; 0x1b
    19a4:	8a 8f       	std	Y+26, r24	; 0x1a
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19a8:	69 a5       	ldd	r22, Y+41	; 0x29
    19aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    19ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    19ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	88 a7       	std	Y+40, r24	; 0x28
    19ba:	88 a5       	ldd	r24, Y+40	; 0x28
    19bc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19be:	89 8d       	ldd	r24, Y+25	; 0x19
    19c0:	8a 95       	dec	r24
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_read_address_8bit+0x286>
    19c4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e8       	ldi	r26, 0x80	; 128
    19d4:	bf e3       	ldi	r27, 0x3F	; 63
    19d6:	8d 8b       	std	Y+21, r24	; 0x15
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	af 8b       	std	Y+23, r26	; 0x17
    19dc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	2b ea       	ldi	r18, 0xAB	; 171
    19e8:	3a ea       	ldi	r19, 0xAA	; 170
    19ea:	4a e2       	ldi	r20, 0x2A	; 42
    19ec:	50 e4       	ldi	r21, 0x40	; 64
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	89 8b       	std	Y+17, r24	; 0x11
    19f8:	9a 8b       	std	Y+18, r25	; 0x12
    19fa:	ab 8b       	std	Y+19, r26	; 0x13
    19fc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19fe:	69 89       	ldd	r22, Y+17	; 0x11
    1a00:	7a 89       	ldd	r23, Y+18	; 0x12
    1a02:	8b 89       	ldd	r24, Y+19	; 0x13
    1a04:	9c 89       	ldd	r25, Y+20	; 0x14
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	1c f4       	brge	.+6      	; 0x1a1c <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	88 8b       	std	Y+16, r24	; 0x10
    1a1a:	91 c0       	rjmp	.+290    	; 0x1b3e <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    1a1c:	69 89       	ldd	r22, Y+17	; 0x11
    1a1e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	53 e4       	ldi	r21, 0x43	; 67
    1a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a30:	18 16       	cp	r1, r24
    1a32:	0c f0       	brlt	.+2      	; 0x1a36 <LCD_read_address_8bit+0x2fc>
    1a34:	7b c0       	rjmp	.+246    	; 0x1b2c <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    1a36:	6d 89       	ldd	r22, Y+21	; 0x15
    1a38:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	4a e7       	ldi	r20, 0x7A	; 122
    1a44:	54 e4       	ldi	r21, 0x44	; 68
    1a46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8c 87       	std	Y+12, r24	; 0x0c
    1a50:	9d 87       	std	Y+13, r25	; 0x0d
    1a52:	ae 87       	std	Y+14, r26	; 0x0e
    1a54:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a56:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a58:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4a ef       	ldi	r20, 0xFA	; 250
    1a64:	54 e4       	ldi	r21, 0x44	; 68
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	88 87       	std	Y+8, r24	; 0x08
    1a70:	99 87       	std	Y+9, r25	; 0x09
    1a72:	aa 87       	std	Y+10, r26	; 0x0a
    1a74:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a76:	68 85       	ldd	r22, Y+8	; 0x08
    1a78:	79 85       	ldd	r23, Y+9	; 0x09
    1a7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9f 83       	std	Y+7, r25	; 0x07
    1a94:	8e 83       	std	Y+6, r24	; 0x06
    1a96:	3f c0       	rjmp	.+126    	; 0x1b16 <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    1a98:	68 85       	ldd	r22, Y+8	; 0x08
    1a9a:	79 85       	ldd	r23, Y+9	; 0x09
    1a9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	3f ef       	ldi	r19, 0xFF	; 255
    1aa4:	4f e7       	ldi	r20, 0x7F	; 127
    1aa6:	57 e4       	ldi	r21, 0x47	; 71
    1aa8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aac:	18 16       	cp	r1, r24
    1aae:	4c f5       	brge	.+82     	; 0x1b02 <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ab2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ab4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	bc 01       	movw	r22, r24
    1aca:	cd 01       	movw	r24, r26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9f 83       	std	Y+7, r25	; 0x07
    1ad6:	8e 83       	std	Y+6, r24	; 0x06
    1ad8:	0f c0       	rjmp	.+30     	; 0x1af8 <LCD_read_address_8bit+0x3be>
    1ada:	88 ec       	ldi	r24, 0xC8	; 200
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9d 83       	std	Y+5, r25	; 0x05
    1ae0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_read_address_8bit+0x3ac>
    1aea:	9d 83       	std	Y+5, r25	; 0x05
    1aec:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	9f 81       	ldd	r25, Y+7	; 0x07
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9f 83       	std	Y+7, r25	; 0x07
    1af6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	9f 81       	ldd	r25, Y+7	; 0x07
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	69 f7       	brne	.-38     	; 0x1ada <LCD_read_address_8bit+0x3a0>
    1b00:	24 c0       	rjmp	.+72     	; 0x1b4a <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b02:	68 85       	ldd	r22, Y+8	; 0x08
    1b04:	79 85       	ldd	r23, Y+9	; 0x09
    1b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9f 83       	std	Y+7, r25	; 0x07
    1b14:	8e 83       	std	Y+6, r24	; 0x06
    1b16:	8e 81       	ldd	r24, Y+6	; 0x06
    1b18:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1a:	9b 83       	std	Y+3, r25	; 0x03
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	9b 81       	ldd	r25, Y+3	; 0x03
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_read_address_8bit+0x3e8>
    1b26:	9b 83       	std	Y+3, r25	; 0x03
    1b28:	8a 83       	std	Y+2, r24	; 0x02
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b2c:	69 89       	ldd	r22, Y+17	; 0x11
    1b2e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b30:	8b 89       	ldd	r24, Y+19	; 0x13
    1b32:	9c 89       	ldd	r25, Y+20	; 0x14
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	88 8b       	std	Y+16, r24	; 0x10
    1b3e:	88 89       	ldd	r24, Y+16	; 0x10
    1b40:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	8a 95       	dec	r24
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_read_address_8bit+0x40a>
    1b48:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	0e 94 95 2c 	call	0x592a	; 0x592a <DIO_u8_get_port>
    1b50:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    1b5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b5c:	8f 77       	andi	r24, 0x7F	; 127
    1b5e:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	6f ef       	ldi	r22, 0xFF	; 255
    1b64:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <DIO_void_set_port_dir>
	return address;
    1b68:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    1b6a:	ef 96       	adiw	r28, 0x3f	; 63
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	c3 56       	subi	r28, 0x63	; 99
    1b8a:	d0 40       	sbci	r29, 0x00	; 0
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	fe 01       	movw	r30, r28
    1b98:	ed 59       	subi	r30, 0x9D	; 157
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	62 e0       	ldi	r22, 0x02	; 2
    1ba2:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e3 5a       	subi	r30, 0xA3	; 163
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e8       	ldi	r26, 0x80	; 128
    1bba:	bf e3       	ldi	r27, 0x3F	; 63
    1bbc:	80 83       	st	Z, r24
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	a2 83       	std	Z+2, r26	; 0x02
    1bc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bc4:	8e 01       	movw	r16, r28
    1bc6:	07 5a       	subi	r16, 0xA7	; 167
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e3 5a       	subi	r30, 0xA3	; 163
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	2b ea       	ldi	r18, 0xAB	; 171
    1bda:	3a ea       	ldi	r19, 0xAA	; 170
    1bdc:	4a e2       	ldi	r20, 0x2A	; 42
    1bde:	50 e4       	ldi	r21, 0x40	; 64
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	f8 01       	movw	r30, r16
    1bea:	80 83       	st	Z, r24
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	a2 83       	std	Z+2, r26	; 0x02
    1bf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e7 5a       	subi	r30, 0xA7	; 167
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	34 f4       	brge	.+12     	; 0x1c1c <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1c10:	fe 01       	movw	r30, r28
    1c12:	e8 5a       	subi	r30, 0xA8	; 168
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	80 83       	st	Z, r24
    1c1a:	e0 c0       	rjmp	.+448    	; 0x1ddc <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e7 5a       	subi	r30, 0xA7	; 167
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	53 e4       	ldi	r21, 0x43	; 67
    1c32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	0c f0       	brlt	.+2      	; 0x1c3c <LCD_write_data_4bit+0xc0>
    1c3a:	c0 c0       	rjmp	.+384    	; 0x1dbc <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e3 5a       	subi	r30, 0xA3	; 163
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a e7       	ldi	r20, 0x7A	; 122
    1c50:	54 e4       	ldi	r21, 0x44	; 68
    1c52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ec 5a       	subi	r30, 0xAC	; 172
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 83       	st	Z, r24
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	a2 83       	std	Z+2, r26	; 0x02
    1c66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c68:	8e 01       	movw	r16, r28
    1c6a:	00 5b       	subi	r16, 0xB0	; 176
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	fe 01       	movw	r30, r28
    1c70:	ec 5a       	subi	r30, 0xAC	; 172
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	80 83       	st	Z, r24
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	a2 83       	std	Z+2, r26	; 0x02
    1c94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c96:	fe 01       	movw	r30, r28
    1c98:	e0 5b       	subi	r30, 0xB0	; 176
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	44 f4       	brge	.+16     	; 0x1cc4 <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e2 5b       	subi	r30, 0xB2	; 178
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	80 83       	st	Z, r24
    1cc2:	64 c0       	rjmp	.+200    	; 0x1d8c <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e0 5b       	subi	r30, 0xB0	; 176
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	0c f0       	brlt	.+2      	; 0x1ce4 <LCD_write_data_4bit+0x168>
    1ce2:	43 c0       	rjmp	.+134    	; 0x1d6a <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ec 5a       	subi	r30, 0xAC	; 172
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8e 01       	movw	r16, r28
    1d04:	02 5b       	subi	r16, 0xB2	; 178
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	f8 01       	movw	r30, r16
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	80 83       	st	Z, r24
    1d1a:	1f c0       	rjmp	.+62     	; 0x1d5a <LCD_write_data_4bit+0x1de>
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e4 5b       	subi	r30, 0xB4	; 180
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e4 5b       	subi	r30, 0xB4	; 180
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_write_data_4bit+0x1b8>
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e4 5b       	subi	r30, 0xB4	; 180
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	de 01       	movw	r26, r28
    1d44:	a2 5b       	subi	r26, 0xB2	; 178
    1d46:	bf 4f       	sbci	r27, 0xFF	; 255
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e2 5b       	subi	r30, 0xB2	; 178
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	11 96       	adiw	r26, 0x01	; 1
    1d56:	9c 93       	st	X, r25
    1d58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e2 5b       	subi	r30, 0xB2	; 178
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	d1 f6       	brne	.-76     	; 0x1d1c <LCD_write_data_4bit+0x1a0>
    1d68:	4b c0       	rjmp	.+150    	; 0x1e00 <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	8e 01       	movw	r16, r28
    1d6c:	02 5b       	subi	r16, 0xB2	; 178
    1d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d70:	fe 01       	movw	r30, r28
    1d72:	e0 5b       	subi	r30, 0xB0	; 176
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	f8 01       	movw	r30, r16
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	80 83       	st	Z, r24
    1d8c:	de 01       	movw	r26, r28
    1d8e:	a6 5b       	subi	r26, 0xB6	; 182
    1d90:	bf 4f       	sbci	r27, 0xFF	; 255
    1d92:	fe 01       	movw	r30, r28
    1d94:	e2 5b       	subi	r30, 0xB2	; 178
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 81       	ld	r24, Z
    1d9a:	91 81       	ldd	r25, Z+1	; 0x01
    1d9c:	11 96       	adiw	r26, 0x01	; 1
    1d9e:	9c 93       	st	X, r25
    1da0:	8e 93       	st	-X, r24
    1da2:	fe 01       	movw	r30, r28
    1da4:	e6 5b       	subi	r30, 0xB6	; 182
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_write_data_4bit+0x230>
    1db0:	fe 01       	movw	r30, r28
    1db2:	e6 5b       	subi	r30, 0xB6	; 182
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	80 83       	st	Z, r24
    1dba:	22 c0       	rjmp	.+68     	; 0x1e00 <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	08 5a       	subi	r16, 0xA8	; 168
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e7 5a       	subi	r30, 0xA7	; 167
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	f8 01       	movw	r30, r16
    1dda:	80 83       	st	Z, r24
    1ddc:	de 01       	movw	r26, r28
    1dde:	a7 5b       	subi	r26, 0xB7	; 183
    1de0:	bf 4f       	sbci	r27, 0xFF	; 255
    1de2:	fe 01       	movw	r30, r28
    1de4:	e8 5a       	subi	r30, 0xA8	; 168
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dec:	fe 01       	movw	r30, r28
    1dee:	e7 5b       	subi	r30, 0xB7	; 183
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
    1df4:	8a 95       	dec	r24
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_write_data_4bit+0x278>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5b       	subi	r30, 0xB7	; 183
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	eb 5b       	subi	r30, 0xBB	; 187
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	80 83       	st	Z, r24
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	a2 83       	std	Z+2, r26	; 0x02
    1e1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e1e:	8e 01       	movw	r16, r28
    1e20:	0f 5b       	subi	r16, 0xBF	; 191
    1e22:	1f 4f       	sbci	r17, 0xFF	; 255
    1e24:	fe 01       	movw	r30, r28
    1e26:	eb 5b       	subi	r30, 0xBB	; 187
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	2b ea       	ldi	r18, 0xAB	; 171
    1e34:	3a ea       	ldi	r19, 0xAA	; 170
    1e36:	4a e2       	ldi	r20, 0x2A	; 42
    1e38:	50 e4       	ldi	r21, 0x40	; 64
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	f8 01       	movw	r30, r16
    1e44:	80 83       	st	Z, r24
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	a2 83       	std	Z+2, r26	; 0x02
    1e4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ef 5b       	subi	r30, 0xBF	; 191
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	34 f4       	brge	.+12     	; 0x1e76 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e0 5c       	subi	r30, 0xC0	; 192
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 83       	st	Z, r24
    1e74:	9d c0       	rjmp	.+314    	; 0x1fb0 <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    1e76:	fe 01       	movw	r30, r28
    1e78:	ef 5b       	subi	r30, 0xBF	; 191
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	53 e4       	ldi	r21, 0x43	; 67
    1e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	0c f0       	brlt	.+2      	; 0x1e96 <LCD_write_data_4bit+0x31a>
    1e94:	7e c0       	rjmp	.+252    	; 0x1f92 <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    1e96:	fe 01       	movw	r30, r28
    1e98:	eb 5b       	subi	r30, 0xBB	; 187
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a e7       	ldi	r20, 0x7A	; 122
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8c af       	std	Y+60, r24	; 0x3c
    1eb6:	9d af       	std	Y+61, r25	; 0x3d
    1eb8:	ae af       	std	Y+62, r26	; 0x3e
    1eba:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ebe:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ec0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ec2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	88 af       	std	Y+56, r24	; 0x38
    1ed6:	99 af       	std	Y+57, r25	; 0x39
    1ed8:	aa af       	std	Y+58, r26	; 0x3a
    1eda:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1edc:	68 ad       	ldd	r22, Y+56	; 0x38
    1ede:	79 ad       	ldd	r23, Y+57	; 0x39
    1ee0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ee2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_write_data_4bit+0x382>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9f ab       	std	Y+55, r25	; 0x37
    1efa:	8e ab       	std	Y+54, r24	; 0x36
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    1efe:	68 ad       	ldd	r22, Y+56	; 0x38
    1f00:	79 ad       	ldd	r23, Y+57	; 0x39
    1f02:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f04:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f18:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9f ab       	std	Y+55, r25	; 0x37
    1f3c:	8e ab       	std	Y+54, r24	; 0x36
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_write_data_4bit+0x3e2>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9d ab       	std	Y+53, r25	; 0x35
    1f46:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f48:	8c a9       	ldd	r24, Y+52	; 0x34
    1f4a:	9d a9       	ldd	r25, Y+53	; 0x35
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_write_data_4bit+0x3d0>
    1f50:	9d ab       	std	Y+53, r25	; 0x35
    1f52:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8e a9       	ldd	r24, Y+54	; 0x36
    1f56:	9f a9       	ldd	r25, Y+55	; 0x37
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9f ab       	std	Y+55, r25	; 0x37
    1f5c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8e a9       	ldd	r24, Y+54	; 0x36
    1f60:	9f a9       	ldd	r25, Y+55	; 0x37
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_write_data_4bit+0x3c4>
    1f66:	2d c0       	rjmp	.+90     	; 0x1fc2 <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	68 ad       	ldd	r22, Y+56	; 0x38
    1f6a:	79 ad       	ldd	r23, Y+57	; 0x39
    1f6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f6e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9f ab       	std	Y+55, r25	; 0x37
    1f7a:	8e ab       	std	Y+54, r24	; 0x36
    1f7c:	8e a9       	ldd	r24, Y+54	; 0x36
    1f7e:	9f a9       	ldd	r25, Y+55	; 0x37
    1f80:	9b ab       	std	Y+51, r25	; 0x33
    1f82:	8a ab       	std	Y+50, r24	; 0x32
    1f84:	8a a9       	ldd	r24, Y+50	; 0x32
    1f86:	9b a9       	ldd	r25, Y+51	; 0x33
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_write_data_4bit+0x40c>
    1f8c:	9b ab       	std	Y+51, r25	; 0x33
    1f8e:	8a ab       	std	Y+50, r24	; 0x32
    1f90:	18 c0       	rjmp	.+48     	; 0x1fc2 <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f92:	fe 01       	movw	r30, r28
    1f94:	ef 5b       	subi	r30, 0xBF	; 191
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e0 5c       	subi	r30, 0xC0	; 192
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 83       	st	Z, r24
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e0 5c       	subi	r30, 0xC0	; 192
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fba:	89 a9       	ldd	r24, Y+49	; 0x31
    1fbc:	8a 95       	dec	r24
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_write_data_4bit+0x440>
    1fc0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ee 59       	subi	r30, 0x9E	; 158
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	80 83       	st	Z, r24
    1fcc:	26 c0       	rjmp	.+76     	; 0x201a <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ed 59       	subi	r30, 0x9D	; 157
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ee 59       	subi	r30, 0x9E	; 158
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <LCD_write_data_4bit+0x472>
    1fea:	55 95       	asr	r21
    1fec:	47 95       	ror	r20
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <LCD_write_data_4bit+0x46e>
    1ff2:	ca 01       	movw	r24, r20
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	91 70       	andi	r25, 0x01	; 1
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ee 59       	subi	r30, 0x9E	; 158
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	60 81       	ld	r22, Z
    2002:	49 2f       	mov	r20, r25
    2004:	0e 94 39 2c 	call	0x5872	; 0x5872 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2008:	de 01       	movw	r26, r28
    200a:	ae 59       	subi	r26, 0x9E	; 158
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	ee 59       	subi	r30, 0x9E	; 158
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	8f 5f       	subi	r24, 0xFF	; 255
    2018:	8c 93       	st	X, r24
    201a:	fe 01       	movw	r30, r28
    201c:	ee 59       	subi	r30, 0x9E	; 158
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 81       	ld	r24, Z
    2022:	88 30       	cpi	r24, 0x08	; 8
    2024:	a0 f2       	brcs	.-88     	; 0x1fce <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e2       	ldi	r26, 0x20	; 32
    2034:	b1 e4       	ldi	r27, 0x41	; 65
    2036:	8d a7       	std	Y+45, r24	; 0x2d
    2038:	9e a7       	std	Y+46, r25	; 0x2e
    203a:	af a7       	std	Y+47, r26	; 0x2f
    203c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    203e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2040:	7e a5       	ldd	r23, Y+46	; 0x2e
    2042:	8f a5       	ldd	r24, Y+47	; 0x2f
    2044:	98 a9       	ldd	r25, Y+48	; 0x30
    2046:	2b ea       	ldi	r18, 0xAB	; 171
    2048:	3a ea       	ldi	r19, 0xAA	; 170
    204a:	4a e2       	ldi	r20, 0x2A	; 42
    204c:	50 e4       	ldi	r21, 0x40	; 64
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	89 a7       	std	Y+41, r24	; 0x29
    2058:	9a a7       	std	Y+42, r25	; 0x2a
    205a:	ab a7       	std	Y+43, r26	; 0x2b
    205c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    205e:	69 a5       	ldd	r22, Y+41	; 0x29
    2060:	7a a5       	ldd	r23, Y+42	; 0x2a
    2062:	8b a5       	ldd	r24, Y+43	; 0x2b
    2064:	9c a5       	ldd	r25, Y+44	; 0x2c
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	1c f4       	brge	.+6      	; 0x207c <LCD_write_data_4bit+0x500>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	88 a7       	std	Y+40, r24	; 0x28
    207a:	91 c0       	rjmp	.+290    	; 0x219e <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    207c:	69 a5       	ldd	r22, Y+41	; 0x29
    207e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2080:	8b a5       	ldd	r24, Y+43	; 0x2b
    2082:	9c a5       	ldd	r25, Y+44	; 0x2c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	0c f0       	brlt	.+2      	; 0x2096 <LCD_write_data_4bit+0x51a>
    2094:	7b c0       	rjmp	.+246    	; 0x218c <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2096:	6d a5       	ldd	r22, Y+45	; 0x2d
    2098:	7e a5       	ldd	r23, Y+46	; 0x2e
    209a:	8f a5       	ldd	r24, Y+47	; 0x2f
    209c:	98 a9       	ldd	r25, Y+48	; 0x30
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	4a e7       	ldi	r20, 0x7A	; 122
    20a4:	54 e4       	ldi	r21, 0x44	; 68
    20a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8c a3       	std	Y+36, r24	; 0x24
    20b0:	9d a3       	std	Y+37, r25	; 0x25
    20b2:	ae a3       	std	Y+38, r26	; 0x26
    20b4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	6c a1       	ldd	r22, Y+36	; 0x24
    20b8:	7d a1       	ldd	r23, Y+37	; 0x25
    20ba:	8e a1       	ldd	r24, Y+38	; 0x26
    20bc:	9f a1       	ldd	r25, Y+39	; 0x27
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a ef       	ldi	r20, 0xFA	; 250
    20c4:	54 e4       	ldi	r21, 0x44	; 68
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	88 a3       	std	Y+32, r24	; 0x20
    20d0:	99 a3       	std	Y+33, r25	; 0x21
    20d2:	aa a3       	std	Y+34, r26	; 0x22
    20d4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    20d6:	68 a1       	ldd	r22, Y+32	; 0x20
    20d8:	79 a1       	ldd	r23, Y+33	; 0x21
    20da:	8a a1       	ldd	r24, Y+34	; 0x22
    20dc:	9b a1       	ldd	r25, Y+35	; 0x23
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	5f e3       	ldi	r21, 0x3F	; 63
    20e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9f 8f       	std	Y+31, r25	; 0x1f
    20f4:	8e 8f       	std	Y+30, r24	; 0x1e
    20f6:	3f c0       	rjmp	.+126    	; 0x2176 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    20f8:	68 a1       	ldd	r22, Y+32	; 0x20
    20fa:	79 a1       	ldd	r23, Y+33	; 0x21
    20fc:	8a a1       	ldd	r24, Y+34	; 0x22
    20fe:	9b a1       	ldd	r25, Y+35	; 0x23
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	57 e4       	ldi	r21, 0x47	; 71
    2108:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	4c f5       	brge	.+82     	; 0x2162 <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2110:	6c a1       	ldd	r22, Y+36	; 0x24
    2112:	7d a1       	ldd	r23, Y+37	; 0x25
    2114:	8e a1       	ldd	r24, Y+38	; 0x26
    2116:	9f a1       	ldd	r25, Y+39	; 0x27
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9f 8f       	std	Y+31, r25	; 0x1f
    2136:	8e 8f       	std	Y+30, r24	; 0x1e
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <LCD_write_data_4bit+0x5dc>
    213a:	88 ec       	ldi	r24, 0xC8	; 200
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9d 8f       	std	Y+29, r25	; 0x1d
    2140:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2142:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2144:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_write_data_4bit+0x5ca>
    214a:	9d 8f       	std	Y+29, r25	; 0x1d
    214c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2150:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9f 8f       	std	Y+31, r25	; 0x1f
    2156:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	8e 8d       	ldd	r24, Y+30	; 0x1e
    215a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f7       	brne	.-38     	; 0x213a <LCD_write_data_4bit+0x5be>
    2160:	24 c0       	rjmp	.+72     	; 0x21aa <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	68 a1       	ldd	r22, Y+32	; 0x20
    2164:	79 a1       	ldd	r23, Y+33	; 0x21
    2166:	8a a1       	ldd	r24, Y+34	; 0x22
    2168:	9b a1       	ldd	r25, Y+35	; 0x23
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9f 8f       	std	Y+31, r25	; 0x1f
    2174:	8e 8f       	std	Y+30, r24	; 0x1e
    2176:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2178:	9f 8d       	ldd	r25, Y+31	; 0x1f
    217a:	9b 8f       	std	Y+27, r25	; 0x1b
    217c:	8a 8f       	std	Y+26, r24	; 0x1a
    217e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2180:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_write_data_4bit+0x606>
    2186:	9b 8f       	std	Y+27, r25	; 0x1b
    2188:	8a 8f       	std	Y+26, r24	; 0x1a
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    218c:	69 a5       	ldd	r22, Y+41	; 0x29
    218e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2190:	8b a5       	ldd	r24, Y+43	; 0x2b
    2192:	9c a5       	ldd	r25, Y+44	; 0x2c
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	88 a7       	std	Y+40, r24	; 0x28
    219e:	88 a5       	ldd	r24, Y+40	; 0x28
    21a0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21a2:	89 8d       	ldd	r24, Y+25	; 0x19
    21a4:	8a 95       	dec	r24
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_write_data_4bit+0x628>
    21a8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e8       	ldi	r26, 0x80	; 128
    21b8:	bf e3       	ldi	r27, 0x3F	; 63
    21ba:	8d 8b       	std	Y+21, r24	; 0x15
    21bc:	9e 8b       	std	Y+22, r25	; 0x16
    21be:	af 8b       	std	Y+23, r26	; 0x17
    21c0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21c2:	6d 89       	ldd	r22, Y+21	; 0x15
    21c4:	7e 89       	ldd	r23, Y+22	; 0x16
    21c6:	8f 89       	ldd	r24, Y+23	; 0x17
    21c8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ca:	2b ea       	ldi	r18, 0xAB	; 171
    21cc:	3a ea       	ldi	r19, 0xAA	; 170
    21ce:	4a e2       	ldi	r20, 0x2A	; 42
    21d0:	50 e4       	ldi	r21, 0x40	; 64
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	89 8b       	std	Y+17, r24	; 0x11
    21dc:	9a 8b       	std	Y+18, r25	; 0x12
    21de:	ab 8b       	std	Y+19, r26	; 0x13
    21e0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21e2:	69 89       	ldd	r22, Y+17	; 0x11
    21e4:	7a 89       	ldd	r23, Y+18	; 0x12
    21e6:	8b 89       	ldd	r24, Y+19	; 0x13
    21e8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	1c f4       	brge	.+6      	; 0x2200 <LCD_write_data_4bit+0x684>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	88 8b       	std	Y+16, r24	; 0x10
    21fe:	91 c0       	rjmp	.+290    	; 0x2322 <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    2200:	69 89       	ldd	r22, Y+17	; 0x11
    2202:	7a 89       	ldd	r23, Y+18	; 0x12
    2204:	8b 89       	ldd	r24, Y+19	; 0x13
    2206:	9c 89       	ldd	r25, Y+20	; 0x14
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4f e7       	ldi	r20, 0x7F	; 127
    220e:	53 e4       	ldi	r21, 0x43	; 67
    2210:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2214:	18 16       	cp	r1, r24
    2216:	0c f0       	brlt	.+2      	; 0x221a <LCD_write_data_4bit+0x69e>
    2218:	7b c0       	rjmp	.+246    	; 0x2310 <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    221a:	6d 89       	ldd	r22, Y+21	; 0x15
    221c:	7e 89       	ldd	r23, Y+22	; 0x16
    221e:	8f 89       	ldd	r24, Y+23	; 0x17
    2220:	98 8d       	ldd	r25, Y+24	; 0x18
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a e7       	ldi	r20, 0x7A	; 122
    2228:	54 e4       	ldi	r21, 0x44	; 68
    222a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	8c 87       	std	Y+12, r24	; 0x0c
    2234:	9d 87       	std	Y+13, r25	; 0x0d
    2236:	ae 87       	std	Y+14, r26	; 0x0e
    2238:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	6c 85       	ldd	r22, Y+12	; 0x0c
    223c:	7d 85       	ldd	r23, Y+13	; 0x0d
    223e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2240:	9f 85       	ldd	r25, Y+15	; 0x0f
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a ef       	ldi	r20, 0xFA	; 250
    2248:	54 e4       	ldi	r21, 0x44	; 68
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	88 87       	std	Y+8, r24	; 0x08
    2254:	99 87       	std	Y+9, r25	; 0x09
    2256:	aa 87       	std	Y+10, r26	; 0x0a
    2258:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    225a:	68 85       	ldd	r22, Y+8	; 0x08
    225c:	79 85       	ldd	r23, Y+9	; 0x09
    225e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2260:	9b 85       	ldd	r25, Y+11	; 0x0b
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	2c f4       	brge	.+10     	; 0x227c <LCD_write_data_4bit+0x700>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9f 83       	std	Y+7, r25	; 0x07
    2278:	8e 83       	std	Y+6, r24	; 0x06
    227a:	3f c0       	rjmp	.+126    	; 0x22fa <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    227c:	68 85       	ldd	r22, Y+8	; 0x08
    227e:	79 85       	ldd	r23, Y+9	; 0x09
    2280:	8a 85       	ldd	r24, Y+10	; 0x0a
    2282:	9b 85       	ldd	r25, Y+11	; 0x0b
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	4f e7       	ldi	r20, 0x7F	; 127
    228a:	57 e4       	ldi	r21, 0x47	; 71
    228c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2290:	18 16       	cp	r1, r24
    2292:	4c f5       	brge	.+82     	; 0x22e6 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2294:	6c 85       	ldd	r22, Y+12	; 0x0c
    2296:	7d 85       	ldd	r23, Y+13	; 0x0d
    2298:	8e 85       	ldd	r24, Y+14	; 0x0e
    229a:	9f 85       	ldd	r25, Y+15	; 0x0f
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e2       	ldi	r20, 0x20	; 32
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9f 83       	std	Y+7, r25	; 0x07
    22ba:	8e 83       	std	Y+6, r24	; 0x06
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <LCD_write_data_4bit+0x760>
    22be:	88 ec       	ldi	r24, 0xC8	; 200
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9d 83       	std	Y+5, r25	; 0x05
    22c4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22c6:	8c 81       	ldd	r24, Y+4	; 0x04
    22c8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_write_data_4bit+0x74e>
    22ce:	9d 83       	std	Y+5, r25	; 0x05
    22d0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d2:	8e 81       	ldd	r24, Y+6	; 0x06
    22d4:	9f 81       	ldd	r25, Y+7	; 0x07
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	9f 83       	std	Y+7, r25	; 0x07
    22da:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22dc:	8e 81       	ldd	r24, Y+6	; 0x06
    22de:	9f 81       	ldd	r25, Y+7	; 0x07
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	69 f7       	brne	.-38     	; 0x22be <LCD_write_data_4bit+0x742>
    22e4:	24 c0       	rjmp	.+72     	; 0x232e <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e6:	68 85       	ldd	r22, Y+8	; 0x08
    22e8:	79 85       	ldd	r23, Y+9	; 0x09
    22ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9f 83       	std	Y+7, r25	; 0x07
    22f8:	8e 83       	std	Y+6, r24	; 0x06
    22fa:	8e 81       	ldd	r24, Y+6	; 0x06
    22fc:	9f 81       	ldd	r25, Y+7	; 0x07
    22fe:	9b 83       	std	Y+3, r25	; 0x03
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_write_data_4bit+0x78a>
    230a:	9b 83       	std	Y+3, r25	; 0x03
    230c:	8a 83       	std	Y+2, r24	; 0x02
    230e:	0f c0       	rjmp	.+30     	; 0x232e <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2310:	69 89       	ldd	r22, Y+17	; 0x11
    2312:	7a 89       	ldd	r23, Y+18	; 0x12
    2314:	8b 89       	ldd	r24, Y+19	; 0x13
    2316:	9c 89       	ldd	r25, Y+20	; 0x14
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	88 8b       	std	Y+16, r24	; 0x10
    2322:	88 89       	ldd	r24, Y+16	; 0x10
    2324:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	8a 95       	dec	r24
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_write_data_4bit+0x7ac>
    232c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    232e:	fe 01       	movw	r30, r28
    2330:	ef 59       	subi	r30, 0x9F	; 159
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	84 e0       	ldi	r24, 0x04	; 4
    2336:	80 83       	st	Z, r24
    2338:	27 c0       	rjmp	.+78     	; 0x2388 <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    233a:	fe 01       	movw	r30, r28
    233c:	ed 59       	subi	r30, 0x9D	; 157
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	fe 01       	movw	r30, r28
    2348:	ef 59       	subi	r30, 0x9F	; 159
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	04 97       	sbiw	r24, 0x04	; 4
    2354:	f9 01       	movw	r30, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <LCD_write_data_4bit+0x7e0>
    2358:	f5 95       	asr	r31
    235a:	e7 95       	ror	r30
    235c:	8a 95       	dec	r24
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <LCD_write_data_4bit+0x7dc>
    2360:	cf 01       	movw	r24, r30
    2362:	98 2f       	mov	r25, r24
    2364:	91 70       	andi	r25, 0x01	; 1
    2366:	fe 01       	movw	r30, r28
    2368:	ef 59       	subi	r30, 0x9F	; 159
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	60 81       	ld	r22, Z
    2370:	49 2f       	mov	r20, r25
    2372:	0e 94 39 2c 	call	0x5872	; 0x5872 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2376:	de 01       	movw	r26, r28
    2378:	af 59       	subi	r26, 0x9F	; 159
    237a:	bf 4f       	sbci	r27, 0xFF	; 255
    237c:	fe 01       	movw	r30, r28
    237e:	ef 59       	subi	r30, 0x9F	; 159
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	8c 93       	st	X, r24
    2388:	fe 01       	movw	r30, r28
    238a:	ef 59       	subi	r30, 0x9F	; 159
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	88 30       	cpi	r24, 0x08	; 8
    2392:	98 f2       	brcs	.-90     	; 0x233a <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
}
    239c:	cd 59       	subi	r28, 0x9D	; 157
    239e:	df 4f       	sbci	r29, 0xFF	; 255
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	08 95       	ret

000023b4 <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	c3 56       	subi	r28, 0x63	; 99
    23c2:	d0 40       	sbci	r29, 0x00	; 0
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	fe 01       	movw	r30, r28
    23d0:	ed 59       	subi	r30, 0x9D	; 157
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	62 e0       	ldi	r22, 0x02	; 2
    23da:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    23e6:	fe 01       	movw	r30, r28
    23e8:	e3 5a       	subi	r30, 0xA3	; 163
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e8       	ldi	r26, 0x80	; 128
    23f2:	bf e3       	ldi	r27, 0x3F	; 63
    23f4:	80 83       	st	Z, r24
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	a2 83       	std	Z+2, r26	; 0x02
    23fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23fc:	8e 01       	movw	r16, r28
    23fe:	07 5a       	subi	r16, 0xA7	; 167
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	fe 01       	movw	r30, r28
    2404:	e3 5a       	subi	r30, 0xA3	; 163
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	2b ea       	ldi	r18, 0xAB	; 171
    2412:	3a ea       	ldi	r19, 0xAA	; 170
    2414:	4a e2       	ldi	r20, 0x2A	; 42
    2416:	50 e4       	ldi	r21, 0x40	; 64
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	80 83       	st	Z, r24
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	a2 83       	std	Z+2, r26	; 0x02
    2428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242a:	fe 01       	movw	r30, r28
    242c:	e7 5a       	subi	r30, 0xA7	; 167
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	34 f4       	brge	.+12     	; 0x2454 <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    2448:	fe 01       	movw	r30, r28
    244a:	e8 5a       	subi	r30, 0xA8	; 168
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	80 83       	st	Z, r24
    2452:	e0 c0       	rjmp	.+448    	; 0x2614 <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    2454:	fe 01       	movw	r30, r28
    2456:	e7 5a       	subi	r30, 0xA7	; 167
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	53 e4       	ldi	r21, 0x43	; 67
    246a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	0c f0       	brlt	.+2      	; 0x2474 <LCD_write_cmd_4bit+0xc0>
    2472:	c0 c0       	rjmp	.+384    	; 0x25f4 <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    2474:	fe 01       	movw	r30, r28
    2476:	e3 5a       	subi	r30, 0xA3	; 163
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	4a e7       	ldi	r20, 0x7A	; 122
    2488:	54 e4       	ldi	r21, 0x44	; 68
    248a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	fe 01       	movw	r30, r28
    2494:	ec 5a       	subi	r30, 0xAC	; 172
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	8e 01       	movw	r16, r28
    24a2:	00 5b       	subi	r16, 0xB0	; 176
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	ec 5a       	subi	r30, 0xAC	; 172
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a ef       	ldi	r20, 0xFA	; 250
    24ba:	54 e4       	ldi	r21, 0x44	; 68
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	f8 01       	movw	r30, r16
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ce:	fe 01       	movw	r30, r28
    24d0:	e0 5b       	subi	r30, 0xB0	; 176
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	44 f4       	brge	.+16     	; 0x24fc <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    24ec:	fe 01       	movw	r30, r28
    24ee:	e2 5b       	subi	r30, 0xB2	; 178
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
    24fa:	64 c0       	rjmp	.+200    	; 0x25c4 <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    24fc:	fe 01       	movw	r30, r28
    24fe:	e0 5b       	subi	r30, 0xB0	; 176
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	0c f0       	brlt	.+2      	; 0x251c <LCD_write_cmd_4bit+0x168>
    251a:	43 c0       	rjmp	.+134    	; 0x25a2 <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251c:	fe 01       	movw	r30, r28
    251e:	ec 5a       	subi	r30, 0xAC	; 172
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8e 01       	movw	r16, r28
    253c:	02 5b       	subi	r16, 0xB2	; 178
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	f8 01       	movw	r30, r16
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    2552:	1f c0       	rjmp	.+62     	; 0x2592 <LCD_write_cmd_4bit+0x1de>
    2554:	fe 01       	movw	r30, r28
    2556:	e4 5b       	subi	r30, 0xB4	; 180
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	88 ec       	ldi	r24, 0xC8	; 200
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2562:	fe 01       	movw	r30, r28
    2564:	e4 5b       	subi	r30, 0xB4	; 180
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_write_cmd_4bit+0x1b8>
    2570:	fe 01       	movw	r30, r28
    2572:	e4 5b       	subi	r30, 0xB4	; 180
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	de 01       	movw	r26, r28
    257c:	a2 5b       	subi	r26, 0xB2	; 178
    257e:	bf 4f       	sbci	r27, 0xFF	; 255
    2580:	fe 01       	movw	r30, r28
    2582:	e2 5b       	subi	r30, 0xB2	; 178
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	11 96       	adiw	r26, 0x01	; 1
    258e:	9c 93       	st	X, r25
    2590:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	fe 01       	movw	r30, r28
    2594:	e2 5b       	subi	r30, 0xB2	; 178
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	d1 f6       	brne	.-76     	; 0x2554 <LCD_write_cmd_4bit+0x1a0>
    25a0:	4b c0       	rjmp	.+150    	; 0x2638 <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a2:	8e 01       	movw	r16, r28
    25a4:	02 5b       	subi	r16, 0xB2	; 178
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	fe 01       	movw	r30, r28
    25aa:	e0 5b       	subi	r30, 0xB0	; 176
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	de 01       	movw	r26, r28
    25c6:	a6 5b       	subi	r26, 0xB6	; 182
    25c8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	e2 5b       	subi	r30, 0xB2	; 178
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	11 96       	adiw	r26, 0x01	; 1
    25d6:	9c 93       	st	X, r25
    25d8:	8e 93       	st	-X, r24
    25da:	fe 01       	movw	r30, r28
    25dc:	e6 5b       	subi	r30, 0xB6	; 182
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_write_cmd_4bit+0x230>
    25e8:	fe 01       	movw	r30, r28
    25ea:	e6 5b       	subi	r30, 0xB6	; 182
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
    25f2:	22 c0       	rjmp	.+68     	; 0x2638 <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25f4:	8e 01       	movw	r16, r28
    25f6:	08 5a       	subi	r16, 0xA8	; 168
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	fe 01       	movw	r30, r28
    25fc:	e7 5a       	subi	r30, 0xA7	; 167
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	f8 01       	movw	r30, r16
    2612:	80 83       	st	Z, r24
    2614:	de 01       	movw	r26, r28
    2616:	a7 5b       	subi	r26, 0xB7	; 183
    2618:	bf 4f       	sbci	r27, 0xFF	; 255
    261a:	fe 01       	movw	r30, r28
    261c:	e8 5a       	subi	r30, 0xA8	; 168
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2624:	fe 01       	movw	r30, r28
    2626:	e7 5b       	subi	r30, 0xB7	; 183
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	8a 95       	dec	r24
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_write_cmd_4bit+0x278>
    2630:	fe 01       	movw	r30, r28
    2632:	e7 5b       	subi	r30, 0xB7	; 183
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    2640:	fe 01       	movw	r30, r28
    2642:	eb 5b       	subi	r30, 0xBB	; 187
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e8       	ldi	r26, 0x80	; 128
    264c:	bf e3       	ldi	r27, 0x3F	; 63
    264e:	80 83       	st	Z, r24
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	a2 83       	std	Z+2, r26	; 0x02
    2654:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2656:	8e 01       	movw	r16, r28
    2658:	0f 5b       	subi	r16, 0xBF	; 191
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	fe 01       	movw	r30, r28
    265e:	eb 5b       	subi	r30, 0xBB	; 187
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	2b ea       	ldi	r18, 0xAB	; 171
    266c:	3a ea       	ldi	r19, 0xAA	; 170
    266e:	4a e2       	ldi	r20, 0x2A	; 42
    2670:	50 e4       	ldi	r21, 0x40	; 64
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	f8 01       	movw	r30, r16
    267c:	80 83       	st	Z, r24
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	a2 83       	std	Z+2, r26	; 0x02
    2682:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2684:	fe 01       	movw	r30, r28
    2686:	ef 5b       	subi	r30, 0xBF	; 191
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	82 81       	ldd	r24, Z+2	; 0x02
    2690:	93 81       	ldd	r25, Z+3	; 0x03
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	34 f4       	brge	.+12     	; 0x26ae <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	fe 01       	movw	r30, r28
    26a6:	e0 5c       	subi	r30, 0xC0	; 192
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 83       	st	Z, r24
    26ac:	9d c0       	rjmp	.+314    	; 0x27e8 <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    26ae:	fe 01       	movw	r30, r28
    26b0:	ef 5b       	subi	r30, 0xBF	; 191
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	53 e4       	ldi	r21, 0x43	; 67
    26c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	0c f0       	brlt	.+2      	; 0x26ce <LCD_write_cmd_4bit+0x31a>
    26cc:	7e c0       	rjmp	.+252    	; 0x27ca <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    26ce:	fe 01       	movw	r30, r28
    26d0:	eb 5b       	subi	r30, 0xBB	; 187
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a e7       	ldi	r20, 0x7A	; 122
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8c af       	std	Y+60, r24	; 0x3c
    26ee:	9d af       	std	Y+61, r25	; 0x3d
    26f0:	ae af       	std	Y+62, r26	; 0x3e
    26f2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    26f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    26f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    26fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	88 af       	std	Y+56, r24	; 0x38
    270e:	99 af       	std	Y+57, r25	; 0x39
    2710:	aa af       	std	Y+58, r26	; 0x3a
    2712:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2714:	68 ad       	ldd	r22, Y+56	; 0x38
    2716:	79 ad       	ldd	r23, Y+57	; 0x39
    2718:	8a ad       	ldd	r24, Y+58	; 0x3a
    271a:	9b ad       	ldd	r25, Y+59	; 0x3b
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9f ab       	std	Y+55, r25	; 0x37
    2732:	8e ab       	std	Y+54, r24	; 0x36
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    2736:	68 ad       	ldd	r22, Y+56	; 0x38
    2738:	79 ad       	ldd	r23, Y+57	; 0x39
    273a:	8a ad       	ldd	r24, Y+58	; 0x3a
    273c:	9b ad       	ldd	r25, Y+59	; 0x3b
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2750:	7d ad       	ldd	r23, Y+61	; 0x3d
    2752:	8e ad       	ldd	r24, Y+62	; 0x3e
    2754:	9f ad       	ldd	r25, Y+63	; 0x3f
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9f ab       	std	Y+55, r25	; 0x37
    2774:	8e ab       	std	Y+54, r24	; 0x36
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_write_cmd_4bit+0x3e2>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9d ab       	std	Y+53, r25	; 0x35
    277e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2780:	8c a9       	ldd	r24, Y+52	; 0x34
    2782:	9d a9       	ldd	r25, Y+53	; 0x35
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_write_cmd_4bit+0x3d0>
    2788:	9d ab       	std	Y+53, r25	; 0x35
    278a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8e a9       	ldd	r24, Y+54	; 0x36
    278e:	9f a9       	ldd	r25, Y+55	; 0x37
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9f ab       	std	Y+55, r25	; 0x37
    2794:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8e a9       	ldd	r24, Y+54	; 0x36
    2798:	9f a9       	ldd	r25, Y+55	; 0x37
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <LCD_write_cmd_4bit+0x3c4>
    279e:	2d c0       	rjmp	.+90     	; 0x27fa <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	68 ad       	ldd	r22, Y+56	; 0x38
    27a2:	79 ad       	ldd	r23, Y+57	; 0x39
    27a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    27a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9f ab       	std	Y+55, r25	; 0x37
    27b2:	8e ab       	std	Y+54, r24	; 0x36
    27b4:	8e a9       	ldd	r24, Y+54	; 0x36
    27b6:	9f a9       	ldd	r25, Y+55	; 0x37
    27b8:	9b ab       	std	Y+51, r25	; 0x33
    27ba:	8a ab       	std	Y+50, r24	; 0x32
    27bc:	8a a9       	ldd	r24, Y+50	; 0x32
    27be:	9b a9       	ldd	r25, Y+51	; 0x33
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_write_cmd_4bit+0x40c>
    27c4:	9b ab       	std	Y+51, r25	; 0x33
    27c6:	8a ab       	std	Y+50, r24	; 0x32
    27c8:	18 c0       	rjmp	.+48     	; 0x27fa <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27ca:	fe 01       	movw	r30, r28
    27cc:	ef 5b       	subi	r30, 0xBF	; 191
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	fe 01       	movw	r30, r28
    27e2:	e0 5c       	subi	r30, 0xC0	; 192
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 83       	st	Z, r24
    27e8:	fe 01       	movw	r30, r28
    27ea:	e0 5c       	subi	r30, 0xC0	; 192
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27f2:	89 a9       	ldd	r24, Y+49	; 0x31
    27f4:	8a 95       	dec	r24
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_write_cmd_4bit+0x440>
    27f8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    27fa:	fe 01       	movw	r30, r28
    27fc:	ee 59       	subi	r30, 0x9E	; 158
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	84 e0       	ldi	r24, 0x04	; 4
    2802:	80 83       	st	Z, r24
    2804:	26 c0       	rjmp	.+76     	; 0x2852 <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    2806:	fe 01       	movw	r30, r28
    2808:	ed 59       	subi	r30, 0x9D	; 157
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	fe 01       	movw	r30, r28
    2814:	ee 59       	subi	r30, 0x9E	; 158
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a9 01       	movw	r20, r18
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <LCD_write_cmd_4bit+0x472>
    2822:	55 95       	asr	r21
    2824:	47 95       	ror	r20
    2826:	8a 95       	dec	r24
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <LCD_write_cmd_4bit+0x46e>
    282a:	ca 01       	movw	r24, r20
    282c:	98 2f       	mov	r25, r24
    282e:	91 70       	andi	r25, 0x01	; 1
    2830:	fe 01       	movw	r30, r28
    2832:	ee 59       	subi	r30, 0x9E	; 158
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	60 81       	ld	r22, Z
    283a:	49 2f       	mov	r20, r25
    283c:	0e 94 39 2c 	call	0x5872	; 0x5872 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2840:	de 01       	movw	r26, r28
    2842:	ae 59       	subi	r26, 0x9E	; 158
    2844:	bf 4f       	sbci	r27, 0xFF	; 255
    2846:	fe 01       	movw	r30, r28
    2848:	ee 59       	subi	r30, 0x9E	; 158
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	8f 5f       	subi	r24, 0xFF	; 255
    2850:	8c 93       	st	X, r24
    2852:	fe 01       	movw	r30, r28
    2854:	ee 59       	subi	r30, 0x9E	; 158
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	88 30       	cpi	r24, 0x08	; 8
    285c:	a0 f2       	brcs	.-88     	; 0x2806 <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a0 e2       	ldi	r26, 0x20	; 32
    286c:	b1 e4       	ldi	r27, 0x41	; 65
    286e:	8d a7       	std	Y+45, r24	; 0x2d
    2870:	9e a7       	std	Y+46, r25	; 0x2e
    2872:	af a7       	std	Y+47, r26	; 0x2f
    2874:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2876:	6d a5       	ldd	r22, Y+45	; 0x2d
    2878:	7e a5       	ldd	r23, Y+46	; 0x2e
    287a:	8f a5       	ldd	r24, Y+47	; 0x2f
    287c:	98 a9       	ldd	r25, Y+48	; 0x30
    287e:	2b ea       	ldi	r18, 0xAB	; 171
    2880:	3a ea       	ldi	r19, 0xAA	; 170
    2882:	4a e2       	ldi	r20, 0x2A	; 42
    2884:	50 e4       	ldi	r21, 0x40	; 64
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	89 a7       	std	Y+41, r24	; 0x29
    2890:	9a a7       	std	Y+42, r25	; 0x2a
    2892:	ab a7       	std	Y+43, r26	; 0x2b
    2894:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2896:	69 a5       	ldd	r22, Y+41	; 0x29
    2898:	7a a5       	ldd	r23, Y+42	; 0x2a
    289a:	8b a5       	ldd	r24, Y+43	; 0x2b
    289c:	9c a5       	ldd	r25, Y+44	; 0x2c
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e8       	ldi	r20, 0x80	; 128
    28a4:	5f e3       	ldi	r21, 0x3F	; 63
    28a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	1c f4       	brge	.+6      	; 0x28b4 <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	88 a7       	std	Y+40, r24	; 0x28
    28b2:	91 c0       	rjmp	.+290    	; 0x29d6 <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    28b4:	69 a5       	ldd	r22, Y+41	; 0x29
    28b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    28b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4f e7       	ldi	r20, 0x7F	; 127
    28c2:	53 e4       	ldi	r21, 0x43	; 67
    28c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c8:	18 16       	cp	r1, r24
    28ca:	0c f0       	brlt	.+2      	; 0x28ce <LCD_write_cmd_4bit+0x51a>
    28cc:	7b c0       	rjmp	.+246    	; 0x29c4 <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    28ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    28d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    28d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d4:	98 a9       	ldd	r25, Y+48	; 0x30
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a e7       	ldi	r20, 0x7A	; 122
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8c a3       	std	Y+36, r24	; 0x24
    28e8:	9d a3       	std	Y+37, r25	; 0x25
    28ea:	ae a3       	std	Y+38, r26	; 0x26
    28ec:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	6c a1       	ldd	r22, Y+36	; 0x24
    28f0:	7d a1       	ldd	r23, Y+37	; 0x25
    28f2:	8e a1       	ldd	r24, Y+38	; 0x26
    28f4:	9f a1       	ldd	r25, Y+39	; 0x27
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	4a ef       	ldi	r20, 0xFA	; 250
    28fc:	54 e4       	ldi	r21, 0x44	; 68
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	88 a3       	std	Y+32, r24	; 0x20
    2908:	99 a3       	std	Y+33, r25	; 0x21
    290a:	aa a3       	std	Y+34, r26	; 0x22
    290c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    290e:	68 a1       	ldd	r22, Y+32	; 0x20
    2910:	79 a1       	ldd	r23, Y+33	; 0x21
    2912:	8a a1       	ldd	r24, Y+34	; 0x22
    2914:	9b a1       	ldd	r25, Y+35	; 0x23
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e8       	ldi	r20, 0x80	; 128
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2922:	88 23       	and	r24, r24
    2924:	2c f4       	brge	.+10     	; 0x2930 <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	9f 8f       	std	Y+31, r25	; 0x1f
    292c:	8e 8f       	std	Y+30, r24	; 0x1e
    292e:	3f c0       	rjmp	.+126    	; 0x29ae <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    2930:	68 a1       	ldd	r22, Y+32	; 0x20
    2932:	79 a1       	ldd	r23, Y+33	; 0x21
    2934:	8a a1       	ldd	r24, Y+34	; 0x22
    2936:	9b a1       	ldd	r25, Y+35	; 0x23
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	3f ef       	ldi	r19, 0xFF	; 255
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	57 e4       	ldi	r21, 0x47	; 71
    2940:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2944:	18 16       	cp	r1, r24
    2946:	4c f5       	brge	.+82     	; 0x299a <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2948:	6c a1       	ldd	r22, Y+36	; 0x24
    294a:	7d a1       	ldd	r23, Y+37	; 0x25
    294c:	8e a1       	ldd	r24, Y+38	; 0x26
    294e:	9f a1       	ldd	r25, Y+39	; 0x27
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e2       	ldi	r20, 0x20	; 32
    2956:	51 e4       	ldi	r21, 0x41	; 65
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	9f 8f       	std	Y+31, r25	; 0x1f
    296e:	8e 8f       	std	Y+30, r24	; 0x1e
    2970:	0f c0       	rjmp	.+30     	; 0x2990 <LCD_write_cmd_4bit+0x5dc>
    2972:	88 ec       	ldi	r24, 0xC8	; 200
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9d 8f       	std	Y+29, r25	; 0x1d
    2978:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    297a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    297c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	f1 f7       	brne	.-4      	; 0x297e <LCD_write_cmd_4bit+0x5ca>
    2982:	9d 8f       	std	Y+29, r25	; 0x1d
    2984:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2986:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2988:	9f 8d       	ldd	r25, Y+31	; 0x1f
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	9f 8f       	std	Y+31, r25	; 0x1f
    298e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2990:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2992:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	69 f7       	brne	.-38     	; 0x2972 <LCD_write_cmd_4bit+0x5be>
    2998:	24 c0       	rjmp	.+72     	; 0x29e2 <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299a:	68 a1       	ldd	r22, Y+32	; 0x20
    299c:	79 a1       	ldd	r23, Y+33	; 0x21
    299e:	8a a1       	ldd	r24, Y+34	; 0x22
    29a0:	9b a1       	ldd	r25, Y+35	; 0x23
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9f 8f       	std	Y+31, r25	; 0x1f
    29ac:	8e 8f       	std	Y+30, r24	; 0x1e
    29ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29b2:	9b 8f       	std	Y+27, r25	; 0x1b
    29b4:	8a 8f       	std	Y+26, r24	; 0x1a
    29b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <LCD_write_cmd_4bit+0x606>
    29be:	9b 8f       	std	Y+27, r25	; 0x1b
    29c0:	8a 8f       	std	Y+26, r24	; 0x1a
    29c2:	0f c0       	rjmp	.+30     	; 0x29e2 <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29c4:	69 a5       	ldd	r22, Y+41	; 0x29
    29c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    29c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	88 a7       	std	Y+40, r24	; 0x28
    29d6:	88 a5       	ldd	r24, Y+40	; 0x28
    29d8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29da:	89 8d       	ldd	r24, Y+25	; 0x19
    29dc:	8a 95       	dec	r24
    29de:	f1 f7       	brne	.-4      	; 0x29dc <LCD_write_cmd_4bit+0x628>
    29e0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	a0 e8       	ldi	r26, 0x80	; 128
    29f0:	bf e3       	ldi	r27, 0x3F	; 63
    29f2:	8d 8b       	std	Y+21, r24	; 0x15
    29f4:	9e 8b       	std	Y+22, r25	; 0x16
    29f6:	af 8b       	std	Y+23, r26	; 0x17
    29f8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29fa:	6d 89       	ldd	r22, Y+21	; 0x15
    29fc:	7e 89       	ldd	r23, Y+22	; 0x16
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	2b ea       	ldi	r18, 0xAB	; 171
    2a04:	3a ea       	ldi	r19, 0xAA	; 170
    2a06:	4a e2       	ldi	r20, 0x2A	; 42
    2a08:	50 e4       	ldi	r21, 0x40	; 64
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	89 8b       	std	Y+17, r24	; 0x11
    2a14:	9a 8b       	std	Y+18, r25	; 0x12
    2a16:	ab 8b       	std	Y+19, r26	; 0x13
    2a18:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a1a:	69 89       	ldd	r22, Y+17	; 0x11
    2a1c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	5f e3       	ldi	r21, 0x3F	; 63
    2a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a2e:	88 23       	and	r24, r24
    2a30:	1c f4       	brge	.+6      	; 0x2a38 <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	88 8b       	std	Y+16, r24	; 0x10
    2a36:	91 c0       	rjmp	.+290    	; 0x2b5a <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    2a38:	69 89       	ldd	r22, Y+17	; 0x11
    2a3a:	7a 89       	ldd	r23, Y+18	; 0x12
    2a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	53 e4       	ldi	r21, 0x43	; 67
    2a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	0c f0       	brlt	.+2      	; 0x2a52 <LCD_write_cmd_4bit+0x69e>
    2a50:	7b c0       	rjmp	.+246    	; 0x2b48 <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2a52:	6d 89       	ldd	r22, Y+21	; 0x15
    2a54:	7e 89       	ldd	r23, Y+22	; 0x16
    2a56:	8f 89       	ldd	r24, Y+23	; 0x17
    2a58:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a e7       	ldi	r20, 0x7A	; 122
    2a60:	54 e4       	ldi	r21, 0x44	; 68
    2a62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8c 87       	std	Y+12, r24	; 0x0c
    2a6c:	9d 87       	std	Y+13, r25	; 0x0d
    2a6e:	ae 87       	std	Y+14, r26	; 0x0e
    2a70:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a74:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a76:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a78:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a ef       	ldi	r20, 0xFA	; 250
    2a80:	54 e4       	ldi	r21, 0x44	; 68
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	88 87       	std	Y+8, r24	; 0x08
    2a8c:	99 87       	std	Y+9, r25	; 0x09
    2a8e:	aa 87       	std	Y+10, r26	; 0x0a
    2a90:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a92:	68 85       	ldd	r22, Y+8	; 0x08
    2a94:	79 85       	ldd	r23, Y+9	; 0x09
    2a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	2c f4       	brge	.+10     	; 0x2ab4 <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9f 83       	std	Y+7, r25	; 0x07
    2ab0:	8e 83       	std	Y+6, r24	; 0x06
    2ab2:	3f c0       	rjmp	.+126    	; 0x2b32 <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    2ab4:	68 85       	ldd	r22, Y+8	; 0x08
    2ab6:	79 85       	ldd	r23, Y+9	; 0x09
    2ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	4c f5       	brge	.+82     	; 0x2b1e <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ace:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ad0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ad2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9f 83       	std	Y+7, r25	; 0x07
    2af2:	8e 83       	std	Y+6, r24	; 0x06
    2af4:	0f c0       	rjmp	.+30     	; 0x2b14 <LCD_write_cmd_4bit+0x760>
    2af6:	88 ec       	ldi	r24, 0xC8	; 200
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9d 83       	std	Y+5, r25	; 0x05
    2afc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2afe:	8c 81       	ldd	r24, Y+4	; 0x04
    2b00:	9d 81       	ldd	r25, Y+5	; 0x05
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_write_cmd_4bit+0x74e>
    2b06:	9d 83       	std	Y+5, r25	; 0x05
    2b08:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	9f 83       	std	Y+7, r25	; 0x07
    2b12:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b14:	8e 81       	ldd	r24, Y+6	; 0x06
    2b16:	9f 81       	ldd	r25, Y+7	; 0x07
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	69 f7       	brne	.-38     	; 0x2af6 <LCD_write_cmd_4bit+0x742>
    2b1c:	24 c0       	rjmp	.+72     	; 0x2b66 <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1e:	68 85       	ldd	r22, Y+8	; 0x08
    2b20:	79 85       	ldd	r23, Y+9	; 0x09
    2b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9f 83       	std	Y+7, r25	; 0x07
    2b30:	8e 83       	std	Y+6, r24	; 0x06
    2b32:	8e 81       	ldd	r24, Y+6	; 0x06
    2b34:	9f 81       	ldd	r25, Y+7	; 0x07
    2b36:	9b 83       	std	Y+3, r25	; 0x03
    2b38:	8a 83       	std	Y+2, r24	; 0x02
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_write_cmd_4bit+0x78a>
    2b42:	9b 83       	std	Y+3, r25	; 0x03
    2b44:	8a 83       	std	Y+2, r24	; 0x02
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b48:	69 89       	ldd	r22, Y+17	; 0x11
    2b4a:	7a 89       	ldd	r23, Y+18	; 0x12
    2b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	88 8b       	std	Y+16, r24	; 0x10
    2b5a:	88 89       	ldd	r24, Y+16	; 0x10
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	8a 95       	dec	r24
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <LCD_write_cmd_4bit+0x7ac>
    2b64:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2b66:	fe 01       	movw	r30, r28
    2b68:	ef 59       	subi	r30, 0x9F	; 159
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	80 83       	st	Z, r24
    2b70:	27 c0       	rjmp	.+78     	; 0x2bc0 <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    2b72:	fe 01       	movw	r30, r28
    2b74:	ed 59       	subi	r30, 0x9D	; 157
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	80 81       	ld	r24, Z
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 59       	subi	r30, 0x9F	; 159
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	88 2f       	mov	r24, r24
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	04 97       	sbiw	r24, 0x04	; 4
    2b8c:	f9 01       	movw	r30, r18
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <LCD_write_cmd_4bit+0x7e0>
    2b90:	f5 95       	asr	r31
    2b92:	e7 95       	ror	r30
    2b94:	8a 95       	dec	r24
    2b96:	e2 f7       	brpl	.-8      	; 0x2b90 <LCD_write_cmd_4bit+0x7dc>
    2b98:	cf 01       	movw	r24, r30
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	91 70       	andi	r25, 0x01	; 1
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	ef 59       	subi	r30, 0x9F	; 159
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	60 81       	ld	r22, Z
    2ba8:	49 2f       	mov	r20, r25
    2baa:	0e 94 39 2c 	call	0x5872	; 0x5872 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2bae:	de 01       	movw	r26, r28
    2bb0:	af 59       	subi	r26, 0x9F	; 159
    2bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ef 59       	subi	r30, 0x9F	; 159
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 81       	ld	r24, Z
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	8c 93       	st	X, r24
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	ef 59       	subi	r30, 0x9F	; 159
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 30       	cpi	r24, 0x08	; 8
    2bca:	98 f2       	brcs	.-90     	; 0x2b72 <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2bcc:	82 e0       	ldi	r24, 0x02	; 2
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
}
    2bd4:	cd 59       	subi	r28, 0x9D	; 157
    2bd6:	df 4f       	sbci	r29, 0xFF	; 255
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	08 95       	ret

00002bec <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	cb 5a       	subi	r28, 0xAB	; 171
    2bfa:	d0 40       	sbci	r29, 0x00	; 0
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	62 e0       	ldi	r22, 0x02	; 2
    2c0a:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    2c16:	fe 01       	movw	r30, r28
    2c18:	eb 55       	subi	r30, 0x5B	; 91
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	a0 e8       	ldi	r26, 0x80	; 128
    2c22:	bf e3       	ldi	r27, 0x3F	; 63
    2c24:	80 83       	st	Z, r24
    2c26:	91 83       	std	Z+1, r25	; 0x01
    2c28:	a2 83       	std	Z+2, r26	; 0x02
    2c2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c2c:	8e 01       	movw	r16, r28
    2c2e:	0f 55       	subi	r16, 0x5F	; 95
    2c30:	1f 4f       	sbci	r17, 0xFF	; 255
    2c32:	fe 01       	movw	r30, r28
    2c34:	eb 55       	subi	r30, 0x5B	; 91
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	2b ea       	ldi	r18, 0xAB	; 171
    2c42:	3a ea       	ldi	r19, 0xAA	; 170
    2c44:	4a e2       	ldi	r20, 0x2A	; 42
    2c46:	50 e4       	ldi	r21, 0x40	; 64
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	f8 01       	movw	r30, r16
    2c52:	80 83       	st	Z, r24
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	a2 83       	std	Z+2, r26	; 0x02
    2c58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ef 55       	subi	r30, 0x5F	; 95
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	82 81       	ldd	r24, Z+2	; 0x02
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e8       	ldi	r20, 0x80	; 128
    2c6e:	5f e3       	ldi	r21, 0x3F	; 63
    2c70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c74:	88 23       	and	r24, r24
    2c76:	34 f4       	brge	.+12     	; 0x2c84 <LCD_function_set_4bit+0x98>
		__ticks = 1;
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e0 56       	subi	r30, 0x60	; 96
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	80 83       	st	Z, r24
    2c82:	e0 c0       	rjmp	.+448    	; 0x2e44 <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    2c84:	fe 01       	movw	r30, r28
    2c86:	ef 55       	subi	r30, 0x5F	; 95
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	53 e4       	ldi	r21, 0x43	; 67
    2c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	0c f0       	brlt	.+2      	; 0x2ca4 <LCD_function_set_4bit+0xb8>
    2ca2:	c0 c0       	rjmp	.+384    	; 0x2e24 <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	eb 55       	subi	r30, 0x5B	; 91
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a e7       	ldi	r20, 0x7A	; 122
    2cb8:	54 e4       	ldi	r21, 0x44	; 68
    2cba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e4 56       	subi	r30, 0x64	; 100
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 83       	st	Z, r24
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	a2 83       	std	Z+2, r26	; 0x02
    2cce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	8e 01       	movw	r16, r28
    2cd2:	08 56       	subi	r16, 0x68	; 104
    2cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	e4 56       	subi	r30, 0x64	; 100
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	4a ef       	ldi	r20, 0xFA	; 250
    2cea:	54 e4       	ldi	r21, 0x44	; 68
    2cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	80 83       	st	Z, r24
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	a2 83       	std	Z+2, r26	; 0x02
    2cfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e8 56       	subi	r30, 0x68	; 104
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	44 f4       	brge	.+16     	; 0x2d2c <LCD_function_set_4bit+0x140>
		__ticks = 1;
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ea 56       	subi	r30, 0x6A	; 106
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
    2d2a:	64 c0       	rjmp	.+200    	; 0x2df4 <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	e8 56       	subi	r30, 0x68	; 104
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	3f ef       	ldi	r19, 0xFF	; 255
    2d3e:	4f e7       	ldi	r20, 0x7F	; 127
    2d40:	57 e4       	ldi	r21, 0x47	; 71
    2d42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d46:	18 16       	cp	r1, r24
    2d48:	0c f0       	brlt	.+2      	; 0x2d4c <LCD_function_set_4bit+0x160>
    2d4a:	43 c0       	rjmp	.+134    	; 0x2dd2 <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e4 56       	subi	r30, 0x64	; 100
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e2       	ldi	r20, 0x20	; 32
    2d60:	51 e4       	ldi	r21, 0x41	; 65
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	8e 01       	movw	r16, r28
    2d6c:	0a 56       	subi	r16, 0x6A	; 106
    2d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	91 83       	std	Z+1, r25	; 0x01
    2d80:	80 83       	st	Z, r24
    2d82:	1f c0       	rjmp	.+62     	; 0x2dc2 <LCD_function_set_4bit+0x1d6>
    2d84:	fe 01       	movw	r30, r28
    2d86:	ec 56       	subi	r30, 0x6C	; 108
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	88 ec       	ldi	r24, 0xC8	; 200
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d92:	fe 01       	movw	r30, r28
    2d94:	ec 56       	subi	r30, 0x6C	; 108
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_function_set_4bit+0x1b0>
    2da0:	fe 01       	movw	r30, r28
    2da2:	ec 56       	subi	r30, 0x6C	; 108
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	de 01       	movw	r26, r28
    2dac:	aa 56       	subi	r26, 0x6A	; 106
    2dae:	bf 4f       	sbci	r27, 0xFF	; 255
    2db0:	fe 01       	movw	r30, r28
    2db2:	ea 56       	subi	r30, 0x6A	; 106
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 81       	ld	r24, Z
    2db8:	91 81       	ldd	r25, Z+1	; 0x01
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	11 96       	adiw	r26, 0x01	; 1
    2dbe:	9c 93       	st	X, r25
    2dc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ea 56       	subi	r30, 0x6A	; 106
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	00 97       	sbiw	r24, 0x00	; 0
    2dce:	d1 f6       	brne	.-76     	; 0x2d84 <LCD_function_set_4bit+0x198>
    2dd0:	4b c0       	rjmp	.+150    	; 0x2e68 <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd2:	8e 01       	movw	r16, r28
    2dd4:	0a 56       	subi	r16, 0x6A	; 106
    2dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd8:	fe 01       	movw	r30, r28
    2dda:	e8 56       	subi	r30, 0x68	; 104
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	f8 01       	movw	r30, r16
    2df0:	91 83       	std	Z+1, r25	; 0x01
    2df2:	80 83       	st	Z, r24
    2df4:	de 01       	movw	r26, r28
    2df6:	ae 56       	subi	r26, 0x6E	; 110
    2df8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ea 56       	subi	r30, 0x6A	; 106
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	11 96       	adiw	r26, 0x01	; 1
    2e06:	9c 93       	st	X, r25
    2e08:	8e 93       	st	-X, r24
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ee 56       	subi	r30, 0x6E	; 110
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_function_set_4bit+0x228>
    2e18:	fe 01       	movw	r30, r28
    2e1a:	ee 56       	subi	r30, 0x6E	; 110
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24
    2e22:	22 c0       	rjmp	.+68     	; 0x2e68 <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e24:	8e 01       	movw	r16, r28
    2e26:	00 56       	subi	r16, 0x60	; 96
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ef 55       	subi	r30, 0x5F	; 95
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	80 83       	st	Z, r24
    2e44:	de 01       	movw	r26, r28
    2e46:	af 56       	subi	r26, 0x6F	; 111
    2e48:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e0 56       	subi	r30, 0x60	; 96
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e54:	fe 01       	movw	r30, r28
    2e56:	ef 56       	subi	r30, 0x6F	; 111
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8a 95       	dec	r24
    2e5e:	f1 f7       	brne	.-4      	; 0x2e5c <LCD_function_set_4bit+0x270>
    2e60:	fe 01       	movw	r30, r28
    2e62:	ef 56       	subi	r30, 0x6F	; 111
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    2e70:	fe 01       	movw	r30, r28
    2e72:	e3 57       	subi	r30, 0x73	; 115
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 e8       	ldi	r26, 0x80	; 128
    2e7c:	bf e3       	ldi	r27, 0x3F	; 63
    2e7e:	80 83       	st	Z, r24
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	a2 83       	std	Z+2, r26	; 0x02
    2e84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e86:	8e 01       	movw	r16, r28
    2e88:	07 57       	subi	r16, 0x77	; 119
    2e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e3 57       	subi	r30, 0x73	; 115
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	2b ea       	ldi	r18, 0xAB	; 171
    2e9c:	3a ea       	ldi	r19, 0xAA	; 170
    2e9e:	4a e2       	ldi	r20, 0x2A	; 42
    2ea0:	50 e4       	ldi	r21, 0x40	; 64
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	f8 01       	movw	r30, r16
    2eac:	80 83       	st	Z, r24
    2eae:	91 83       	std	Z+1, r25	; 0x01
    2eb0:	a2 83       	std	Z+2, r26	; 0x02
    2eb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e7 57       	subi	r30, 0x77	; 119
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	34 f4       	brge	.+12     	; 0x2ede <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e8 57       	subi	r30, 0x78	; 120
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	80 83       	st	Z, r24
    2edc:	e0 c0       	rjmp	.+448    	; 0x309e <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e7 57       	subi	r30, 0x77	; 119
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4f e7       	ldi	r20, 0x7F	; 127
    2ef2:	53 e4       	ldi	r21, 0x43	; 67
    2ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef8:	18 16       	cp	r1, r24
    2efa:	0c f0       	brlt	.+2      	; 0x2efe <LCD_function_set_4bit+0x312>
    2efc:	c0 c0       	rjmp	.+384    	; 0x307e <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2efe:	fe 01       	movw	r30, r28
    2f00:	e3 57       	subi	r30, 0x73	; 115
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	60 81       	ld	r22, Z
    2f06:	71 81       	ldd	r23, Z+1	; 0x01
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4a e7       	ldi	r20, 0x7A	; 122
    2f12:	54 e4       	ldi	r21, 0x44	; 68
    2f14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ec 57       	subi	r30, 0x7C	; 124
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 83       	st	Z, r24
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	a2 83       	std	Z+2, r26	; 0x02
    2f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	8e 01       	movw	r16, r28
    2f2c:	00 58       	subi	r16, 0x80	; 128
    2f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f30:	fe 01       	movw	r30, r28
    2f32:	ec 57       	subi	r30, 0x7C	; 124
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	4a ef       	ldi	r20, 0xFA	; 250
    2f44:	54 e4       	ldi	r21, 0x44	; 68
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	f8 01       	movw	r30, r16
    2f50:	80 83       	st	Z, r24
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	a2 83       	std	Z+2, r26	; 0x02
    2f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e0 58       	subi	r30, 0x80	; 128
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	44 f4       	brge	.+16     	; 0x2f86 <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    2f76:	fe 01       	movw	r30, r28
    2f78:	e2 58       	subi	r30, 0x82	; 130
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	64 c0       	rjmp	.+200    	; 0x304e <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    2f86:	fe 01       	movw	r30, r28
    2f88:	e0 58       	subi	r30, 0x80	; 128
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	0c f0       	brlt	.+2      	; 0x2fa6 <LCD_function_set_4bit+0x3ba>
    2fa4:	43 c0       	rjmp	.+134    	; 0x302c <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	ec 57       	subi	r30, 0x7C	; 124
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	40 e2       	ldi	r20, 0x20	; 32
    2fba:	51 e4       	ldi	r21, 0x41	; 65
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8e 01       	movw	r16, r28
    2fc6:	02 58       	subi	r16, 0x82	; 130
    2fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	1f c0       	rjmp	.+62     	; 0x301c <LCD_function_set_4bit+0x430>
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e4 58       	subi	r30, 0x84	; 132
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	88 ec       	ldi	r24, 0xC8	; 200
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fec:	fe 01       	movw	r30, r28
    2fee:	e4 58       	subi	r30, 0x84	; 132
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <LCD_function_set_4bit+0x40a>
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e4 58       	subi	r30, 0x84	; 132
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3004:	de 01       	movw	r26, r28
    3006:	a2 58       	subi	r26, 0x82	; 130
    3008:	bf 4f       	sbci	r27, 0xFF	; 255
    300a:	fe 01       	movw	r30, r28
    300c:	e2 58       	subi	r30, 0x82	; 130
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	80 81       	ld	r24, Z
    3012:	91 81       	ldd	r25, Z+1	; 0x01
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	11 96       	adiw	r26, 0x01	; 1
    3018:	9c 93       	st	X, r25
    301a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    301c:	fe 01       	movw	r30, r28
    301e:	e2 58       	subi	r30, 0x82	; 130
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	d1 f6       	brne	.-76     	; 0x2fde <LCD_function_set_4bit+0x3f2>
    302a:	4b c0       	rjmp	.+150    	; 0x30c2 <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302c:	8e 01       	movw	r16, r28
    302e:	02 58       	subi	r16, 0x82	; 130
    3030:	1f 4f       	sbci	r17, 0xFF	; 255
    3032:	fe 01       	movw	r30, r28
    3034:	e0 58       	subi	r30, 0x80	; 128
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	82 81       	ldd	r24, Z+2	; 0x02
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	f8 01       	movw	r30, r16
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	80 83       	st	Z, r24
    304e:	de 01       	movw	r26, r28
    3050:	a6 58       	subi	r26, 0x86	; 134
    3052:	bf 4f       	sbci	r27, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e2 58       	subi	r30, 0x82	; 130
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	11 96       	adiw	r26, 0x01	; 1
    3060:	9c 93       	st	X, r25
    3062:	8e 93       	st	-X, r24
    3064:	fe 01       	movw	r30, r28
    3066:	e6 58       	subi	r30, 0x86	; 134
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <LCD_function_set_4bit+0x482>
    3072:	fe 01       	movw	r30, r28
    3074:	e6 58       	subi	r30, 0x86	; 134
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	80 83       	st	Z, r24
    307c:	22 c0       	rjmp	.+68     	; 0x30c2 <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    307e:	8e 01       	movw	r16, r28
    3080:	08 57       	subi	r16, 0x78	; 120
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	fe 01       	movw	r30, r28
    3086:	e7 57       	subi	r30, 0x77	; 119
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	f8 01       	movw	r30, r16
    309c:	80 83       	st	Z, r24
    309e:	de 01       	movw	r26, r28
    30a0:	a7 58       	subi	r26, 0x87	; 135
    30a2:	bf 4f       	sbci	r27, 0xFF	; 255
    30a4:	fe 01       	movw	r30, r28
    30a6:	e8 57       	subi	r30, 0x78	; 120
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	80 81       	ld	r24, Z
    30ac:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30ae:	fe 01       	movw	r30, r28
    30b0:	e7 58       	subi	r30, 0x87	; 135
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 81       	ld	r24, Z
    30b6:	8a 95       	dec	r24
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <LCD_function_set_4bit+0x4ca>
    30ba:	fe 01       	movw	r30, r28
    30bc:	e7 58       	subi	r30, 0x87	; 135
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    30c2:	fe 01       	movw	r30, r28
    30c4:	e5 55       	subi	r30, 0x55	; 85
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	10 82       	st	Z, r1
    30ca:	23 c0       	rjmp	.+70     	; 0x3112 <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    30cc:	fe 01       	movw	r30, r28
    30ce:	e5 55       	subi	r30, 0x55	; 85
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	80 81       	ld	r24, Z
    30d4:	48 2f       	mov	r20, r24
    30d6:	4c 5f       	subi	r20, 0xFC	; 252
    30d8:	fe 01       	movw	r30, r28
    30da:	e5 55       	subi	r30, 0x55	; 85
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 81       	ld	r24, Z
    30e0:	28 2f       	mov	r18, r24
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	82 e0       	ldi	r24, 0x02	; 2
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <LCD_function_set_4bit+0x502>
    30ea:	95 95       	asr	r25
    30ec:	87 95       	ror	r24
    30ee:	2a 95       	dec	r18
    30f0:	e2 f7       	brpl	.-8      	; 0x30ea <LCD_function_set_4bit+0x4fe>
    30f2:	98 2f       	mov	r25, r24
    30f4:	91 70       	andi	r25, 0x01	; 1
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	64 2f       	mov	r22, r20
    30fa:	49 2f       	mov	r20, r25
    30fc:	0e 94 39 2c 	call	0x5872	; 0x5872 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    3100:	de 01       	movw	r26, r28
    3102:	a5 55       	subi	r26, 0x55	; 85
    3104:	bf 4f       	sbci	r27, 0xFF	; 255
    3106:	fe 01       	movw	r30, r28
    3108:	e5 55       	subi	r30, 0x55	; 85
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	8f 5f       	subi	r24, 0xFF	; 255
    3110:	8c 93       	st	X, r24
    3112:	fe 01       	movw	r30, r28
    3114:	e5 55       	subi	r30, 0x55	; 85
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	84 30       	cpi	r24, 0x04	; 4
    311c:	b8 f2       	brcs	.-82     	; 0x30cc <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    3126:	fe 01       	movw	r30, r28
    3128:	eb 58       	subi	r30, 0x8B	; 139
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a0 e2       	ldi	r26, 0x20	; 32
    3132:	b1 e4       	ldi	r27, 0x41	; 65
    3134:	80 83       	st	Z, r24
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	a2 83       	std	Z+2, r26	; 0x02
    313a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    313c:	8e 01       	movw	r16, r28
    313e:	0f 58       	subi	r16, 0x8F	; 143
    3140:	1f 4f       	sbci	r17, 0xFF	; 255
    3142:	fe 01       	movw	r30, r28
    3144:	eb 58       	subi	r30, 0x8B	; 139
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	2b ea       	ldi	r18, 0xAB	; 171
    3152:	3a ea       	ldi	r19, 0xAA	; 170
    3154:	4a e2       	ldi	r20, 0x2A	; 42
    3156:	50 e4       	ldi	r21, 0x40	; 64
    3158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	f8 01       	movw	r30, r16
    3162:	80 83       	st	Z, r24
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	a2 83       	std	Z+2, r26	; 0x02
    3168:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    316a:	fe 01       	movw	r30, r28
    316c:	ef 58       	subi	r30, 0x8F	; 143
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	34 f4       	brge	.+12     	; 0x3194 <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    3188:	fe 01       	movw	r30, r28
    318a:	e0 59       	subi	r30, 0x90	; 144
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	80 83       	st	Z, r24
    3192:	e0 c0       	rjmp	.+448    	; 0x3354 <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    3194:	fe 01       	movw	r30, r28
    3196:	ef 58       	subi	r30, 0x8F	; 143
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	60 81       	ld	r22, Z
    319c:	71 81       	ldd	r23, Z+1	; 0x01
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	4f e7       	ldi	r20, 0x7F	; 127
    31a8:	53 e4       	ldi	r21, 0x43	; 67
    31aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ae:	18 16       	cp	r1, r24
    31b0:	0c f0       	brlt	.+2      	; 0x31b4 <LCD_function_set_4bit+0x5c8>
    31b2:	c0 c0       	rjmp	.+384    	; 0x3334 <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    31b4:	fe 01       	movw	r30, r28
    31b6:	eb 58       	subi	r30, 0x8B	; 139
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	60 81       	ld	r22, Z
    31bc:	71 81       	ldd	r23, Z+1	; 0x01
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a e7       	ldi	r20, 0x7A	; 122
    31c8:	54 e4       	ldi	r21, 0x44	; 68
    31ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	fe 01       	movw	r30, r28
    31d4:	e4 59       	subi	r30, 0x94	; 148
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 83       	st	Z, r24
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	a2 83       	std	Z+2, r26	; 0x02
    31de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e0:	8e 01       	movw	r16, r28
    31e2:	08 59       	subi	r16, 0x98	; 152
    31e4:	1f 4f       	sbci	r17, 0xFF	; 255
    31e6:	fe 01       	movw	r30, r28
    31e8:	e4 59       	subi	r30, 0x94	; 148
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4a ef       	ldi	r20, 0xFA	; 250
    31fa:	54 e4       	ldi	r21, 0x44	; 68
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	f8 01       	movw	r30, r16
    3206:	80 83       	st	Z, r24
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	a2 83       	std	Z+2, r26	; 0x02
    320c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    320e:	fe 01       	movw	r30, r28
    3210:	e8 59       	subi	r30, 0x98	; 152
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	60 81       	ld	r22, Z
    3216:	71 81       	ldd	r23, Z+1	; 0x01
    3218:	82 81       	ldd	r24, Z+2	; 0x02
    321a:	93 81       	ldd	r25, Z+3	; 0x03
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3228:	88 23       	and	r24, r24
    322a:	44 f4       	brge	.+16     	; 0x323c <LCD_function_set_4bit+0x650>
		__ticks = 1;
    322c:	fe 01       	movw	r30, r28
    322e:	ea 59       	subi	r30, 0x9A	; 154
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
    323a:	64 c0       	rjmp	.+200    	; 0x3304 <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    323c:	fe 01       	movw	r30, r28
    323e:	e8 59       	subi	r30, 0x98	; 152
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	3f ef       	ldi	r19, 0xFF	; 255
    324e:	4f e7       	ldi	r20, 0x7F	; 127
    3250:	57 e4       	ldi	r21, 0x47	; 71
    3252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3256:	18 16       	cp	r1, r24
    3258:	0c f0       	brlt	.+2      	; 0x325c <LCD_function_set_4bit+0x670>
    325a:	43 c0       	rjmp	.+134    	; 0x32e2 <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	fe 01       	movw	r30, r28
    325e:	e4 59       	subi	r30, 0x94	; 148
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	60 81       	ld	r22, Z
    3264:	71 81       	ldd	r23, Z+1	; 0x01
    3266:	82 81       	ldd	r24, Z+2	; 0x02
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e2       	ldi	r20, 0x20	; 32
    3270:	51 e4       	ldi	r21, 0x41	; 65
    3272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	8e 01       	movw	r16, r28
    327c:	0a 59       	subi	r16, 0x9A	; 154
    327e:	1f 4f       	sbci	r17, 0xFF	; 255
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	f8 01       	movw	r30, r16
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	80 83       	st	Z, r24
    3292:	1f c0       	rjmp	.+62     	; 0x32d2 <LCD_function_set_4bit+0x6e6>
    3294:	fe 01       	movw	r30, r28
    3296:	ec 59       	subi	r30, 0x9C	; 156
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	88 ec       	ldi	r24, 0xC8	; 200
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	91 83       	std	Z+1, r25	; 0x01
    32a0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32a2:	fe 01       	movw	r30, r28
    32a4:	ec 59       	subi	r30, 0x9C	; 156
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <LCD_function_set_4bit+0x6c0>
    32b0:	fe 01       	movw	r30, r28
    32b2:	ec 59       	subi	r30, 0x9C	; 156
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ba:	de 01       	movw	r26, r28
    32bc:	aa 59       	subi	r26, 0x9A	; 154
    32be:	bf 4f       	sbci	r27, 0xFF	; 255
    32c0:	fe 01       	movw	r30, r28
    32c2:	ea 59       	subi	r30, 0x9A	; 154
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	11 96       	adiw	r26, 0x01	; 1
    32ce:	9c 93       	st	X, r25
    32d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d2:	fe 01       	movw	r30, r28
    32d4:	ea 59       	subi	r30, 0x9A	; 154
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	00 97       	sbiw	r24, 0x00	; 0
    32de:	d1 f6       	brne	.-76     	; 0x3294 <LCD_function_set_4bit+0x6a8>
    32e0:	4b c0       	rjmp	.+150    	; 0x3378 <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e2:	8e 01       	movw	r16, r28
    32e4:	0a 59       	subi	r16, 0x9A	; 154
    32e6:	1f 4f       	sbci	r17, 0xFF	; 255
    32e8:	fe 01       	movw	r30, r28
    32ea:	e8 59       	subi	r30, 0x98	; 152
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	60 81       	ld	r22, Z
    32f0:	71 81       	ldd	r23, Z+1	; 0x01
    32f2:	82 81       	ldd	r24, Z+2	; 0x02
    32f4:	93 81       	ldd	r25, Z+3	; 0x03
    32f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	f8 01       	movw	r30, r16
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
    3304:	de 01       	movw	r26, r28
    3306:	ae 59       	subi	r26, 0x9E	; 158
    3308:	bf 4f       	sbci	r27, 0xFF	; 255
    330a:	fe 01       	movw	r30, r28
    330c:	ea 59       	subi	r30, 0x9A	; 154
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	11 96       	adiw	r26, 0x01	; 1
    3316:	9c 93       	st	X, r25
    3318:	8e 93       	st	-X, r24
    331a:	fe 01       	movw	r30, r28
    331c:	ee 59       	subi	r30, 0x9E	; 158
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <LCD_function_set_4bit+0x738>
    3328:	fe 01       	movw	r30, r28
    332a:	ee 59       	subi	r30, 0x9E	; 158
    332c:	ff 4f       	sbci	r31, 0xFF	; 255
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	80 83       	st	Z, r24
    3332:	22 c0       	rjmp	.+68     	; 0x3378 <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3334:	8e 01       	movw	r16, r28
    3336:	00 59       	subi	r16, 0x90	; 144
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	fe 01       	movw	r30, r28
    333c:	ef 58       	subi	r30, 0x8F	; 143
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	93 81       	ldd	r25, Z+3	; 0x03
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	f8 01       	movw	r30, r16
    3352:	80 83       	st	Z, r24
    3354:	de 01       	movw	r26, r28
    3356:	af 59       	subi	r26, 0x9F	; 159
    3358:	bf 4f       	sbci	r27, 0xFF	; 255
    335a:	fe 01       	movw	r30, r28
    335c:	e0 59       	subi	r30, 0x90	; 144
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	80 81       	ld	r24, Z
    3362:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3364:	fe 01       	movw	r30, r28
    3366:	ef 59       	subi	r30, 0x9F	; 159
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	80 81       	ld	r24, Z
    336c:	8a 95       	dec	r24
    336e:	f1 f7       	brne	.-4      	; 0x336c <LCD_function_set_4bit+0x780>
    3370:	fe 01       	movw	r30, r28
    3372:	ef 59       	subi	r30, 0x9F	; 159
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3378:	82 e0       	ldi	r24, 0x02	; 2
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    3380:	fe 01       	movw	r30, r28
    3382:	e3 5a       	subi	r30, 0xA3	; 163
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 e8       	ldi	r26, 0x80	; 128
    338c:	bf e3       	ldi	r27, 0x3F	; 63
    338e:	80 83       	st	Z, r24
    3390:	91 83       	std	Z+1, r25	; 0x01
    3392:	a2 83       	std	Z+2, r26	; 0x02
    3394:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3396:	8e 01       	movw	r16, r28
    3398:	07 5a       	subi	r16, 0xA7	; 167
    339a:	1f 4f       	sbci	r17, 0xFF	; 255
    339c:	fe 01       	movw	r30, r28
    339e:	e3 5a       	subi	r30, 0xA3	; 163
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	2b ea       	ldi	r18, 0xAB	; 171
    33ac:	3a ea       	ldi	r19, 0xAA	; 170
    33ae:	4a e2       	ldi	r20, 0x2A	; 42
    33b0:	50 e4       	ldi	r21, 0x40	; 64
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	f8 01       	movw	r30, r16
    33bc:	80 83       	st	Z, r24
    33be:	91 83       	std	Z+1, r25	; 0x01
    33c0:	a2 83       	std	Z+2, r26	; 0x02
    33c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33c4:	fe 01       	movw	r30, r28
    33c6:	e7 5a       	subi	r30, 0xA7	; 167
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e8       	ldi	r20, 0x80	; 128
    33d8:	5f e3       	ldi	r21, 0x3F	; 63
    33da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33de:	88 23       	and	r24, r24
    33e0:	34 f4       	brge	.+12     	; 0x33ee <LCD_function_set_4bit+0x802>
		__ticks = 1;
    33e2:	fe 01       	movw	r30, r28
    33e4:	e8 5a       	subi	r30, 0xA8	; 168
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	80 83       	st	Z, r24
    33ec:	e0 c0       	rjmp	.+448    	; 0x35ae <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    33ee:	fe 01       	movw	r30, r28
    33f0:	e7 5a       	subi	r30, 0xA7	; 167
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	60 81       	ld	r22, Z
    33f6:	71 81       	ldd	r23, Z+1	; 0x01
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	93 81       	ldd	r25, Z+3	; 0x03
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	53 e4       	ldi	r21, 0x43	; 67
    3404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	0c f0       	brlt	.+2      	; 0x340e <LCD_function_set_4bit+0x822>
    340c:	c0 c0       	rjmp	.+384    	; 0x358e <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    340e:	fe 01       	movw	r30, r28
    3410:	e3 5a       	subi	r30, 0xA3	; 163
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	60 81       	ld	r22, Z
    3416:	71 81       	ldd	r23, Z+1	; 0x01
    3418:	82 81       	ldd	r24, Z+2	; 0x02
    341a:	93 81       	ldd	r25, Z+3	; 0x03
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a e7       	ldi	r20, 0x7A	; 122
    3422:	54 e4       	ldi	r21, 0x44	; 68
    3424:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	fe 01       	movw	r30, r28
    342e:	ec 5a       	subi	r30, 0xAC	; 172
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 83       	st	Z, r24
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	a2 83       	std	Z+2, r26	; 0x02
    3438:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343a:	8e 01       	movw	r16, r28
    343c:	00 5b       	subi	r16, 0xB0	; 176
    343e:	1f 4f       	sbci	r17, 0xFF	; 255
    3440:	fe 01       	movw	r30, r28
    3442:	ec 5a       	subi	r30, 0xAC	; 172
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	82 81       	ldd	r24, Z+2	; 0x02
    344c:	93 81       	ldd	r25, Z+3	; 0x03
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	4a ef       	ldi	r20, 0xFA	; 250
    3454:	54 e4       	ldi	r21, 0x44	; 68
    3456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	f8 01       	movw	r30, r16
    3460:	80 83       	st	Z, r24
    3462:	91 83       	std	Z+1, r25	; 0x01
    3464:	a2 83       	std	Z+2, r26	; 0x02
    3466:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3468:	fe 01       	movw	r30, r28
    346a:	e0 5b       	subi	r30, 0xB0	; 176
    346c:	ff 4f       	sbci	r31, 0xFF	; 255
    346e:	60 81       	ld	r22, Z
    3470:	71 81       	ldd	r23, Z+1	; 0x01
    3472:	82 81       	ldd	r24, Z+2	; 0x02
    3474:	93 81       	ldd	r25, Z+3	; 0x03
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e8       	ldi	r20, 0x80	; 128
    347c:	5f e3       	ldi	r21, 0x3F	; 63
    347e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3482:	88 23       	and	r24, r24
    3484:	44 f4       	brge	.+16     	; 0x3496 <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    3486:	fe 01       	movw	r30, r28
    3488:	e2 5b       	subi	r30, 0xB2	; 178
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	91 83       	std	Z+1, r25	; 0x01
    3492:	80 83       	st	Z, r24
    3494:	64 c0       	rjmp	.+200    	; 0x355e <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    3496:	fe 01       	movw	r30, r28
    3498:	e0 5b       	subi	r30, 0xB0	; 176
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	93 81       	ldd	r25, Z+3	; 0x03
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	3f ef       	ldi	r19, 0xFF	; 255
    34a8:	4f e7       	ldi	r20, 0x7F	; 127
    34aa:	57 e4       	ldi	r21, 0x47	; 71
    34ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b0:	18 16       	cp	r1, r24
    34b2:	0c f0       	brlt	.+2      	; 0x34b6 <LCD_function_set_4bit+0x8ca>
    34b4:	43 c0       	rjmp	.+134    	; 0x353c <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b6:	fe 01       	movw	r30, r28
    34b8:	ec 5a       	subi	r30, 0xAC	; 172
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	40 e2       	ldi	r20, 0x20	; 32
    34ca:	51 e4       	ldi	r21, 0x41	; 65
    34cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	8e 01       	movw	r16, r28
    34d6:	02 5b       	subi	r16, 0xB2	; 178
    34d8:	1f 4f       	sbci	r17, 0xFF	; 255
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	f8 01       	movw	r30, r16
    34e8:	91 83       	std	Z+1, r25	; 0x01
    34ea:	80 83       	st	Z, r24
    34ec:	1f c0       	rjmp	.+62     	; 0x352c <LCD_function_set_4bit+0x940>
    34ee:	fe 01       	movw	r30, r28
    34f0:	e4 5b       	subi	r30, 0xB4	; 180
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	88 ec       	ldi	r24, 0xC8	; 200
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34fc:	fe 01       	movw	r30, r28
    34fe:	e4 5b       	subi	r30, 0xB4	; 180
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	80 81       	ld	r24, Z
    3504:	91 81       	ldd	r25, Z+1	; 0x01
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <LCD_function_set_4bit+0x91a>
    350a:	fe 01       	movw	r30, r28
    350c:	e4 5b       	subi	r30, 0xB4	; 180
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3514:	de 01       	movw	r26, r28
    3516:	a2 5b       	subi	r26, 0xB2	; 178
    3518:	bf 4f       	sbci	r27, 0xFF	; 255
    351a:	fe 01       	movw	r30, r28
    351c:	e2 5b       	subi	r30, 0xB2	; 178
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 81       	ld	r24, Z
    3522:	91 81       	ldd	r25, Z+1	; 0x01
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	11 96       	adiw	r26, 0x01	; 1
    3528:	9c 93       	st	X, r25
    352a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352c:	fe 01       	movw	r30, r28
    352e:	e2 5b       	subi	r30, 0xB2	; 178
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	80 81       	ld	r24, Z
    3534:	91 81       	ldd	r25, Z+1	; 0x01
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	d1 f6       	brne	.-76     	; 0x34ee <LCD_function_set_4bit+0x902>
    353a:	4b c0       	rjmp	.+150    	; 0x35d2 <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353c:	8e 01       	movw	r16, r28
    353e:	02 5b       	subi	r16, 0xB2	; 178
    3540:	1f 4f       	sbci	r17, 0xFF	; 255
    3542:	fe 01       	movw	r30, r28
    3544:	e0 5b       	subi	r30, 0xB0	; 176
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	60 81       	ld	r22, Z
    354a:	71 81       	ldd	r23, Z+1	; 0x01
    354c:	82 81       	ldd	r24, Z+2	; 0x02
    354e:	93 81       	ldd	r25, Z+3	; 0x03
    3550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	f8 01       	movw	r30, r16
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
    355e:	de 01       	movw	r26, r28
    3560:	a6 5b       	subi	r26, 0xB6	; 182
    3562:	bf 4f       	sbci	r27, 0xFF	; 255
    3564:	fe 01       	movw	r30, r28
    3566:	e2 5b       	subi	r30, 0xB2	; 178
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	80 81       	ld	r24, Z
    356c:	91 81       	ldd	r25, Z+1	; 0x01
    356e:	11 96       	adiw	r26, 0x01	; 1
    3570:	9c 93       	st	X, r25
    3572:	8e 93       	st	-X, r24
    3574:	fe 01       	movw	r30, r28
    3576:	e6 5b       	subi	r30, 0xB6	; 182
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	80 81       	ld	r24, Z
    357c:	91 81       	ldd	r25, Z+1	; 0x01
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <LCD_function_set_4bit+0x992>
    3582:	fe 01       	movw	r30, r28
    3584:	e6 5b       	subi	r30, 0xB6	; 182
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	80 83       	st	Z, r24
    358c:	22 c0       	rjmp	.+68     	; 0x35d2 <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    358e:	8e 01       	movw	r16, r28
    3590:	08 5a       	subi	r16, 0xA8	; 168
    3592:	1f 4f       	sbci	r17, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	e7 5a       	subi	r30, 0xA7	; 167
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	f8 01       	movw	r30, r16
    35ac:	80 83       	st	Z, r24
    35ae:	de 01       	movw	r26, r28
    35b0:	a7 5b       	subi	r26, 0xB7	; 183
    35b2:	bf 4f       	sbci	r27, 0xFF	; 255
    35b4:	fe 01       	movw	r30, r28
    35b6:	e8 5a       	subi	r30, 0xA8	; 168
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	80 81       	ld	r24, Z
    35bc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35be:	fe 01       	movw	r30, r28
    35c0:	e7 5b       	subi	r30, 0xB7	; 183
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	8a 95       	dec	r24
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <LCD_function_set_4bit+0x9da>
    35ca:	fe 01       	movw	r30, r28
    35cc:	e7 5b       	subi	r30, 0xB7	; 183
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    35d2:	fe 01       	movw	r30, r28
    35d4:	e6 55       	subi	r30, 0x56	; 86
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	10 82       	st	Z, r1
    35da:	23 c0       	rjmp	.+70     	; 0x3622 <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    35dc:	fe 01       	movw	r30, r28
    35de:	e6 55       	subi	r30, 0x56	; 86
    35e0:	ff 4f       	sbci	r31, 0xFF	; 255
    35e2:	80 81       	ld	r24, Z
    35e4:	48 2f       	mov	r20, r24
    35e6:	4c 5f       	subi	r20, 0xFC	; 252
    35e8:	fe 01       	movw	r30, r28
    35ea:	e6 55       	subi	r30, 0x56	; 86
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <LCD_function_set_4bit+0xa12>
    35fa:	95 95       	asr	r25
    35fc:	87 95       	ror	r24
    35fe:	2a 95       	dec	r18
    3600:	e2 f7       	brpl	.-8      	; 0x35fa <LCD_function_set_4bit+0xa0e>
    3602:	98 2f       	mov	r25, r24
    3604:	91 70       	andi	r25, 0x01	; 1
    3606:	82 e0       	ldi	r24, 0x02	; 2
    3608:	64 2f       	mov	r22, r20
    360a:	49 2f       	mov	r20, r25
    360c:	0e 94 39 2c 	call	0x5872	; 0x5872 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    3610:	de 01       	movw	r26, r28
    3612:	a6 55       	subi	r26, 0x56	; 86
    3614:	bf 4f       	sbci	r27, 0xFF	; 255
    3616:	fe 01       	movw	r30, r28
    3618:	e6 55       	subi	r30, 0x56	; 86
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	8f 5f       	subi	r24, 0xFF	; 255
    3620:	8c 93       	st	X, r24
    3622:	fe 01       	movw	r30, r28
    3624:	e6 55       	subi	r30, 0x56	; 86
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 81       	ld	r24, Z
    362a:	84 30       	cpi	r24, 0x04	; 4
    362c:	b8 f2       	brcs	.-82     	; 0x35dc <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    362e:	82 e0       	ldi	r24, 0x02	; 2
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    3636:	fe 01       	movw	r30, r28
    3638:	eb 5b       	subi	r30, 0xBB	; 187
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	a0 e2       	ldi	r26, 0x20	; 32
    3642:	b1 e4       	ldi	r27, 0x41	; 65
    3644:	80 83       	st	Z, r24
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	a2 83       	std	Z+2, r26	; 0x02
    364a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    364c:	8e 01       	movw	r16, r28
    364e:	0f 5b       	subi	r16, 0xBF	; 191
    3650:	1f 4f       	sbci	r17, 0xFF	; 255
    3652:	fe 01       	movw	r30, r28
    3654:	eb 5b       	subi	r30, 0xBB	; 187
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	2b ea       	ldi	r18, 0xAB	; 171
    3662:	3a ea       	ldi	r19, 0xAA	; 170
    3664:	4a e2       	ldi	r20, 0x2A	; 42
    3666:	50 e4       	ldi	r21, 0x40	; 64
    3668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	f8 01       	movw	r30, r16
    3672:	80 83       	st	Z, r24
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	a2 83       	std	Z+2, r26	; 0x02
    3678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    367a:	fe 01       	movw	r30, r28
    367c:	ef 5b       	subi	r30, 0xBF	; 191
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e8       	ldi	r20, 0x80	; 128
    368e:	5f e3       	ldi	r21, 0x3F	; 63
    3690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3694:	88 23       	and	r24, r24
    3696:	34 f4       	brge	.+12     	; 0x36a4 <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	fe 01       	movw	r30, r28
    369c:	e0 5c       	subi	r30, 0xC0	; 192
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 83       	st	Z, r24
    36a2:	9d c0       	rjmp	.+314    	; 0x37de <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    36a4:	fe 01       	movw	r30, r28
    36a6:	ef 5b       	subi	r30, 0xBF	; 191
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	4f e7       	ldi	r20, 0x7F	; 127
    36b8:	53 e4       	ldi	r21, 0x43	; 67
    36ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36be:	18 16       	cp	r1, r24
    36c0:	0c f0       	brlt	.+2      	; 0x36c4 <LCD_function_set_4bit+0xad8>
    36c2:	7e c0       	rjmp	.+252    	; 0x37c0 <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    36c4:	fe 01       	movw	r30, r28
    36c6:	eb 5b       	subi	r30, 0xBB	; 187
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	60 81       	ld	r22, Z
    36cc:	71 81       	ldd	r23, Z+1	; 0x01
    36ce:	82 81       	ldd	r24, Z+2	; 0x02
    36d0:	93 81       	ldd	r25, Z+3	; 0x03
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4a e7       	ldi	r20, 0x7A	; 122
    36d8:	54 e4       	ldi	r21, 0x44	; 68
    36da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8c af       	std	Y+60, r24	; 0x3c
    36e4:	9d af       	std	Y+61, r25	; 0x3d
    36e6:	ae af       	std	Y+62, r26	; 0x3e
    36e8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    36ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    36ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    36f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	4a ef       	ldi	r20, 0xFA	; 250
    36f8:	54 e4       	ldi	r21, 0x44	; 68
    36fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	88 af       	std	Y+56, r24	; 0x38
    3704:	99 af       	std	Y+57, r25	; 0x39
    3706:	aa af       	std	Y+58, r26	; 0x3a
    3708:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    370a:	68 ad       	ldd	r22, Y+56	; 0x38
    370c:	79 ad       	ldd	r23, Y+57	; 0x39
    370e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3710:	9b ad       	ldd	r25, Y+59	; 0x3b
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e8       	ldi	r20, 0x80	; 128
    3718:	5f e3       	ldi	r21, 0x3F	; 63
    371a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371e:	88 23       	and	r24, r24
    3720:	2c f4       	brge	.+10     	; 0x372c <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	9f ab       	std	Y+55, r25	; 0x37
    3728:	8e ab       	std	Y+54, r24	; 0x36
    372a:	3f c0       	rjmp	.+126    	; 0x37aa <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    372c:	68 ad       	ldd	r22, Y+56	; 0x38
    372e:	79 ad       	ldd	r23, Y+57	; 0x39
    3730:	8a ad       	ldd	r24, Y+58	; 0x3a
    3732:	9b ad       	ldd	r25, Y+59	; 0x3b
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	3f ef       	ldi	r19, 0xFF	; 255
    3738:	4f e7       	ldi	r20, 0x7F	; 127
    373a:	57 e4       	ldi	r21, 0x47	; 71
    373c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3740:	18 16       	cp	r1, r24
    3742:	4c f5       	brge	.+82     	; 0x3796 <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3744:	6c ad       	ldd	r22, Y+60	; 0x3c
    3746:	7d ad       	ldd	r23, Y+61	; 0x3d
    3748:	8e ad       	ldd	r24, Y+62	; 0x3e
    374a:	9f ad       	ldd	r25, Y+63	; 0x3f
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e2       	ldi	r20, 0x20	; 32
    3752:	51 e4       	ldi	r21, 0x41	; 65
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	bc 01       	movw	r22, r24
    375e:	cd 01       	movw	r24, r26
    3760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	9f ab       	std	Y+55, r25	; 0x37
    376a:	8e ab       	std	Y+54, r24	; 0x36
    376c:	0f c0       	rjmp	.+30     	; 0x378c <LCD_function_set_4bit+0xba0>
    376e:	88 ec       	ldi	r24, 0xC8	; 200
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	9d ab       	std	Y+53, r25	; 0x35
    3774:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3776:	8c a9       	ldd	r24, Y+52	; 0x34
    3778:	9d a9       	ldd	r25, Y+53	; 0x35
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	f1 f7       	brne	.-4      	; 0x377a <LCD_function_set_4bit+0xb8e>
    377e:	9d ab       	std	Y+53, r25	; 0x35
    3780:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3782:	8e a9       	ldd	r24, Y+54	; 0x36
    3784:	9f a9       	ldd	r25, Y+55	; 0x37
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	9f ab       	std	Y+55, r25	; 0x37
    378a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378c:	8e a9       	ldd	r24, Y+54	; 0x36
    378e:	9f a9       	ldd	r25, Y+55	; 0x37
    3790:	00 97       	sbiw	r24, 0x00	; 0
    3792:	69 f7       	brne	.-38     	; 0x376e <LCD_function_set_4bit+0xb82>
    3794:	2d c0       	rjmp	.+90     	; 0x37f0 <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3796:	68 ad       	ldd	r22, Y+56	; 0x38
    3798:	79 ad       	ldd	r23, Y+57	; 0x39
    379a:	8a ad       	ldd	r24, Y+58	; 0x3a
    379c:	9b ad       	ldd	r25, Y+59	; 0x3b
    379e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	9f ab       	std	Y+55, r25	; 0x37
    37a8:	8e ab       	std	Y+54, r24	; 0x36
    37aa:	8e a9       	ldd	r24, Y+54	; 0x36
    37ac:	9f a9       	ldd	r25, Y+55	; 0x37
    37ae:	9b ab       	std	Y+51, r25	; 0x33
    37b0:	8a ab       	std	Y+50, r24	; 0x32
    37b2:	8a a9       	ldd	r24, Y+50	; 0x32
    37b4:	9b a9       	ldd	r25, Y+51	; 0x33
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <LCD_function_set_4bit+0xbca>
    37ba:	9b ab       	std	Y+51, r25	; 0x33
    37bc:	8a ab       	std	Y+50, r24	; 0x32
    37be:	18 c0       	rjmp	.+48     	; 0x37f0 <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37c0:	fe 01       	movw	r30, r28
    37c2:	ef 5b       	subi	r30, 0xBF	; 191
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	60 81       	ld	r22, Z
    37c8:	71 81       	ldd	r23, Z+1	; 0x01
    37ca:	82 81       	ldd	r24, Z+2	; 0x02
    37cc:	93 81       	ldd	r25, Z+3	; 0x03
    37ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	fe 01       	movw	r30, r28
    37d8:	e0 5c       	subi	r30, 0xC0	; 192
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	80 83       	st	Z, r24
    37de:	fe 01       	movw	r30, r28
    37e0:	e0 5c       	subi	r30, 0xC0	; 192
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37e8:	89 a9       	ldd	r24, Y+49	; 0x31
    37ea:	8a 95       	dec	r24
    37ec:	f1 f7       	brne	.-4      	; 0x37ea <LCD_function_set_4bit+0xbfe>
    37ee:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	a0 e8       	ldi	r26, 0x80	; 128
    37fe:	bf e3       	ldi	r27, 0x3F	; 63
    3800:	8d a7       	std	Y+45, r24	; 0x2d
    3802:	9e a7       	std	Y+46, r25	; 0x2e
    3804:	af a7       	std	Y+47, r26	; 0x2f
    3806:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3808:	6d a5       	ldd	r22, Y+45	; 0x2d
    380a:	7e a5       	ldd	r23, Y+46	; 0x2e
    380c:	8f a5       	ldd	r24, Y+47	; 0x2f
    380e:	98 a9       	ldd	r25, Y+48	; 0x30
    3810:	2b ea       	ldi	r18, 0xAB	; 171
    3812:	3a ea       	ldi	r19, 0xAA	; 170
    3814:	4a e2       	ldi	r20, 0x2A	; 42
    3816:	50 e4       	ldi	r21, 0x40	; 64
    3818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	89 a7       	std	Y+41, r24	; 0x29
    3822:	9a a7       	std	Y+42, r25	; 0x2a
    3824:	ab a7       	std	Y+43, r26	; 0x2b
    3826:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3828:	69 a5       	ldd	r22, Y+41	; 0x29
    382a:	7a a5       	ldd	r23, Y+42	; 0x2a
    382c:	8b a5       	ldd	r24, Y+43	; 0x2b
    382e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e8       	ldi	r20, 0x80	; 128
    3836:	5f e3       	ldi	r21, 0x3F	; 63
    3838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383c:	88 23       	and	r24, r24
    383e:	1c f4       	brge	.+6      	; 0x3846 <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	88 a7       	std	Y+40, r24	; 0x28
    3844:	91 c0       	rjmp	.+290    	; 0x3968 <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    3846:	69 a5       	ldd	r22, Y+41	; 0x29
    3848:	7a a5       	ldd	r23, Y+42	; 0x2a
    384a:	8b a5       	ldd	r24, Y+43	; 0x2b
    384c:	9c a5       	ldd	r25, Y+44	; 0x2c
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	4f e7       	ldi	r20, 0x7F	; 127
    3854:	53 e4       	ldi	r21, 0x43	; 67
    3856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    385a:	18 16       	cp	r1, r24
    385c:	0c f0       	brlt	.+2      	; 0x3860 <LCD_function_set_4bit+0xc74>
    385e:	7b c0       	rjmp	.+246    	; 0x3956 <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    3860:	6d a5       	ldd	r22, Y+45	; 0x2d
    3862:	7e a5       	ldd	r23, Y+46	; 0x2e
    3864:	8f a5       	ldd	r24, Y+47	; 0x2f
    3866:	98 a9       	ldd	r25, Y+48	; 0x30
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4a e7       	ldi	r20, 0x7A	; 122
    386e:	54 e4       	ldi	r21, 0x44	; 68
    3870:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	8c a3       	std	Y+36, r24	; 0x24
    387a:	9d a3       	std	Y+37, r25	; 0x25
    387c:	ae a3       	std	Y+38, r26	; 0x26
    387e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3880:	6c a1       	ldd	r22, Y+36	; 0x24
    3882:	7d a1       	ldd	r23, Y+37	; 0x25
    3884:	8e a1       	ldd	r24, Y+38	; 0x26
    3886:	9f a1       	ldd	r25, Y+39	; 0x27
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	4a ef       	ldi	r20, 0xFA	; 250
    388e:	54 e4       	ldi	r21, 0x44	; 68
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	88 a3       	std	Y+32, r24	; 0x20
    389a:	99 a3       	std	Y+33, r25	; 0x21
    389c:	aa a3       	std	Y+34, r26	; 0x22
    389e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    38a0:	68 a1       	ldd	r22, Y+32	; 0x20
    38a2:	79 a1       	ldd	r23, Y+33	; 0x21
    38a4:	8a a1       	ldd	r24, Y+34	; 0x22
    38a6:	9b a1       	ldd	r25, Y+35	; 0x23
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e8       	ldi	r20, 0x80	; 128
    38ae:	5f e3       	ldi	r21, 0x3F	; 63
    38b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38b4:	88 23       	and	r24, r24
    38b6:	2c f4       	brge	.+10     	; 0x38c2 <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	9f 8f       	std	Y+31, r25	; 0x1f
    38be:	8e 8f       	std	Y+30, r24	; 0x1e
    38c0:	3f c0       	rjmp	.+126    	; 0x3940 <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    38c2:	68 a1       	ldd	r22, Y+32	; 0x20
    38c4:	79 a1       	ldd	r23, Y+33	; 0x21
    38c6:	8a a1       	ldd	r24, Y+34	; 0x22
    38c8:	9b a1       	ldd	r25, Y+35	; 0x23
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	3f ef       	ldi	r19, 0xFF	; 255
    38ce:	4f e7       	ldi	r20, 0x7F	; 127
    38d0:	57 e4       	ldi	r21, 0x47	; 71
    38d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38d6:	18 16       	cp	r1, r24
    38d8:	4c f5       	brge	.+82     	; 0x392c <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38da:	6c a1       	ldd	r22, Y+36	; 0x24
    38dc:	7d a1       	ldd	r23, Y+37	; 0x25
    38de:	8e a1       	ldd	r24, Y+38	; 0x26
    38e0:	9f a1       	ldd	r25, Y+39	; 0x27
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e2       	ldi	r20, 0x20	; 32
    38e8:	51 e4       	ldi	r21, 0x41	; 65
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	9f 8f       	std	Y+31, r25	; 0x1f
    3900:	8e 8f       	std	Y+30, r24	; 0x1e
    3902:	0f c0       	rjmp	.+30     	; 0x3922 <LCD_function_set_4bit+0xd36>
    3904:	88 ec       	ldi	r24, 0xC8	; 200
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	9d 8f       	std	Y+29, r25	; 0x1d
    390a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    390c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    390e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <LCD_function_set_4bit+0xd24>
    3914:	9d 8f       	std	Y+29, r25	; 0x1d
    3916:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3918:	8e 8d       	ldd	r24, Y+30	; 0x1e
    391a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	9f 8f       	std	Y+31, r25	; 0x1f
    3920:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3922:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3924:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	69 f7       	brne	.-38     	; 0x3904 <LCD_function_set_4bit+0xd18>
    392a:	24 c0       	rjmp	.+72     	; 0x3974 <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392c:	68 a1       	ldd	r22, Y+32	; 0x20
    392e:	79 a1       	ldd	r23, Y+33	; 0x21
    3930:	8a a1       	ldd	r24, Y+34	; 0x22
    3932:	9b a1       	ldd	r25, Y+35	; 0x23
    3934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	9f 8f       	std	Y+31, r25	; 0x1f
    393e:	8e 8f       	std	Y+30, r24	; 0x1e
    3940:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3942:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3944:	9b 8f       	std	Y+27, r25	; 0x1b
    3946:	8a 8f       	std	Y+26, r24	; 0x1a
    3948:	8a 8d       	ldd	r24, Y+26	; 0x1a
    394a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <LCD_function_set_4bit+0xd60>
    3950:	9b 8f       	std	Y+27, r25	; 0x1b
    3952:	8a 8f       	std	Y+26, r24	; 0x1a
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3956:	69 a5       	ldd	r22, Y+41	; 0x29
    3958:	7a a5       	ldd	r23, Y+42	; 0x2a
    395a:	8b a5       	ldd	r24, Y+43	; 0x2b
    395c:	9c a5       	ldd	r25, Y+44	; 0x2c
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	88 a7       	std	Y+40, r24	; 0x28
    3968:	88 a5       	ldd	r24, Y+40	; 0x28
    396a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    396c:	89 8d       	ldd	r24, Y+25	; 0x19
    396e:	8a 95       	dec	r24
    3970:	f1 f7       	brne	.-4      	; 0x396e <LCD_function_set_4bit+0xd82>
    3972:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3974:	fe 01       	movw	r30, r28
    3976:	e7 55       	subi	r30, 0x57	; 87
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	10 82       	st	Z, r1
    397c:	23 c0       	rjmp	.+70     	; 0x39c4 <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    397e:	fe 01       	movw	r30, r28
    3980:	e7 55       	subi	r30, 0x57	; 87
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	80 81       	ld	r24, Z
    3986:	48 2f       	mov	r20, r24
    3988:	4c 5f       	subi	r20, 0xFC	; 252
    398a:	fe 01       	movw	r30, r28
    398c:	e7 55       	subi	r30, 0x57	; 87
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	80 81       	ld	r24, Z
    3992:	28 2f       	mov	r18, r24
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	88 e0       	ldi	r24, 0x08	; 8
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <LCD_function_set_4bit+0xdb4>
    399c:	95 95       	asr	r25
    399e:	87 95       	ror	r24
    39a0:	2a 95       	dec	r18
    39a2:	e2 f7       	brpl	.-8      	; 0x399c <LCD_function_set_4bit+0xdb0>
    39a4:	98 2f       	mov	r25, r24
    39a6:	91 70       	andi	r25, 0x01	; 1
    39a8:	82 e0       	ldi	r24, 0x02	; 2
    39aa:	64 2f       	mov	r22, r20
    39ac:	49 2f       	mov	r20, r25
    39ae:	0e 94 39 2c 	call	0x5872	; 0x5872 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    39b2:	de 01       	movw	r26, r28
    39b4:	a7 55       	subi	r26, 0x57	; 87
    39b6:	bf 4f       	sbci	r27, 0xFF	; 255
    39b8:	fe 01       	movw	r30, r28
    39ba:	e7 55       	subi	r30, 0x57	; 87
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 81       	ld	r24, Z
    39c0:	8f 5f       	subi	r24, 0xFF	; 255
    39c2:	8c 93       	st	X, r24
    39c4:	fe 01       	movw	r30, r28
    39c6:	e7 55       	subi	r30, 0x57	; 87
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 81       	ld	r24, Z
    39cc:	84 30       	cpi	r24, 0x04	; 4
    39ce:	b8 f2       	brcs	.-82     	; 0x397e <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    39d0:	82 e0       	ldi	r24, 0x02	; 2
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	a0 e2       	ldi	r26, 0x20	; 32
    39de:	b1 e4       	ldi	r27, 0x41	; 65
    39e0:	8d 8b       	std	Y+21, r24	; 0x15
    39e2:	9e 8b       	std	Y+22, r25	; 0x16
    39e4:	af 8b       	std	Y+23, r26	; 0x17
    39e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39e8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ea:	7e 89       	ldd	r23, Y+22	; 0x16
    39ec:	8f 89       	ldd	r24, Y+23	; 0x17
    39ee:	98 8d       	ldd	r25, Y+24	; 0x18
    39f0:	2b ea       	ldi	r18, 0xAB	; 171
    39f2:	3a ea       	ldi	r19, 0xAA	; 170
    39f4:	4a e2       	ldi	r20, 0x2A	; 42
    39f6:	50 e4       	ldi	r21, 0x40	; 64
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	89 8b       	std	Y+17, r24	; 0x11
    3a02:	9a 8b       	std	Y+18, r25	; 0x12
    3a04:	ab 8b       	std	Y+19, r26	; 0x13
    3a06:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3a08:	69 89       	ldd	r22, Y+17	; 0x11
    3a0a:	7a 89       	ldd	r23, Y+18	; 0x12
    3a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e8       	ldi	r20, 0x80	; 128
    3a16:	5f e3       	ldi	r21, 0x3F	; 63
    3a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a1c:	88 23       	and	r24, r24
    3a1e:	1c f4       	brge	.+6      	; 0x3a26 <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	88 8b       	std	Y+16, r24	; 0x10
    3a24:	91 c0       	rjmp	.+290    	; 0x3b48 <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    3a26:	69 89       	ldd	r22, Y+17	; 0x11
    3a28:	7a 89       	ldd	r23, Y+18	; 0x12
    3a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	4f e7       	ldi	r20, 0x7F	; 127
    3a34:	53 e4       	ldi	r21, 0x43	; 67
    3a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3a:	18 16       	cp	r1, r24
    3a3c:	0c f0       	brlt	.+2      	; 0x3a40 <LCD_function_set_4bit+0xe54>
    3a3e:	7b c0       	rjmp	.+246    	; 0x3b36 <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    3a40:	6d 89       	ldd	r22, Y+21	; 0x15
    3a42:	7e 89       	ldd	r23, Y+22	; 0x16
    3a44:	8f 89       	ldd	r24, Y+23	; 0x17
    3a46:	98 8d       	ldd	r25, Y+24	; 0x18
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	4a e7       	ldi	r20, 0x7A	; 122
    3a4e:	54 e4       	ldi	r21, 0x44	; 68
    3a50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	8c 87       	std	Y+12, r24	; 0x0c
    3a5a:	9d 87       	std	Y+13, r25	; 0x0d
    3a5c:	ae 87       	std	Y+14, r26	; 0x0e
    3a5e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a60:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a62:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a64:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a66:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	4a ef       	ldi	r20, 0xFA	; 250
    3a6e:	54 e4       	ldi	r21, 0x44	; 68
    3a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	88 87       	std	Y+8, r24	; 0x08
    3a7a:	99 87       	std	Y+9, r25	; 0x09
    3a7c:	aa 87       	std	Y+10, r26	; 0x0a
    3a7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a80:	68 85       	ldd	r22, Y+8	; 0x08
    3a82:	79 85       	ldd	r23, Y+9	; 0x09
    3a84:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a86:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e8       	ldi	r20, 0x80	; 128
    3a8e:	5f e3       	ldi	r21, 0x3F	; 63
    3a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a94:	88 23       	and	r24, r24
    3a96:	2c f4       	brge	.+10     	; 0x3aa2 <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	9f 83       	std	Y+7, r25	; 0x07
    3a9e:	8e 83       	std	Y+6, r24	; 0x06
    3aa0:	3f c0       	rjmp	.+126    	; 0x3b20 <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    3aa2:	68 85       	ldd	r22, Y+8	; 0x08
    3aa4:	79 85       	ldd	r23, Y+9	; 0x09
    3aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	3f ef       	ldi	r19, 0xFF	; 255
    3aae:	4f e7       	ldi	r20, 0x7F	; 127
    3ab0:	57 e4       	ldi	r21, 0x47	; 71
    3ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ab6:	18 16       	cp	r1, r24
    3ab8:	4c f5       	brge	.+82     	; 0x3b0c <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aba:	6c 85       	ldd	r22, Y+12	; 0x0c
    3abc:	7d 85       	ldd	r23, Y+13	; 0x0d
    3abe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ac0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	40 e2       	ldi	r20, 0x20	; 32
    3ac8:	51 e4       	ldi	r21, 0x41	; 65
    3aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	bc 01       	movw	r22, r24
    3ad4:	cd 01       	movw	r24, r26
    3ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	9f 83       	std	Y+7, r25	; 0x07
    3ae0:	8e 83       	std	Y+6, r24	; 0x06
    3ae2:	0f c0       	rjmp	.+30     	; 0x3b02 <LCD_function_set_4bit+0xf16>
    3ae4:	88 ec       	ldi	r24, 0xC8	; 200
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	9d 83       	std	Y+5, r25	; 0x05
    3aea:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aec:	8c 81       	ldd	r24, Y+4	; 0x04
    3aee:	9d 81       	ldd	r25, Y+5	; 0x05
    3af0:	01 97       	sbiw	r24, 0x01	; 1
    3af2:	f1 f7       	brne	.-4      	; 0x3af0 <LCD_function_set_4bit+0xf04>
    3af4:	9d 83       	std	Y+5, r25	; 0x05
    3af6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af8:	8e 81       	ldd	r24, Y+6	; 0x06
    3afa:	9f 81       	ldd	r25, Y+7	; 0x07
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	9f 83       	std	Y+7, r25	; 0x07
    3b00:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b02:	8e 81       	ldd	r24, Y+6	; 0x06
    3b04:	9f 81       	ldd	r25, Y+7	; 0x07
    3b06:	00 97       	sbiw	r24, 0x00	; 0
    3b08:	69 f7       	brne	.-38     	; 0x3ae4 <LCD_function_set_4bit+0xef8>
    3b0a:	24 c0       	rjmp	.+72     	; 0x3b54 <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b0c:	68 85       	ldd	r22, Y+8	; 0x08
    3b0e:	79 85       	ldd	r23, Y+9	; 0x09
    3b10:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b12:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	9f 83       	std	Y+7, r25	; 0x07
    3b1e:	8e 83       	std	Y+6, r24	; 0x06
    3b20:	8e 81       	ldd	r24, Y+6	; 0x06
    3b22:	9f 81       	ldd	r25, Y+7	; 0x07
    3b24:	9b 83       	std	Y+3, r25	; 0x03
    3b26:	8a 83       	std	Y+2, r24	; 0x02
    3b28:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2c:	01 97       	sbiw	r24, 0x01	; 1
    3b2e:	f1 f7       	brne	.-4      	; 0x3b2c <LCD_function_set_4bit+0xf40>
    3b30:	9b 83       	std	Y+3, r25	; 0x03
    3b32:	8a 83       	std	Y+2, r24	; 0x02
    3b34:	0f c0       	rjmp	.+30     	; 0x3b54 <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b36:	69 89       	ldd	r22, Y+17	; 0x11
    3b38:	7a 89       	ldd	r23, Y+18	; 0x12
    3b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	88 8b       	std	Y+16, r24	; 0x10
    3b48:	88 89       	ldd	r24, Y+16	; 0x10
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	8a 95       	dec	r24
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <LCD_function_set_4bit+0xf62>
    3b52:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    3b54:	c5 55       	subi	r28, 0x55	; 85
    3b56:	df 4f       	sbci	r29, 0xFF	; 255
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	1f 91       	pop	r17
    3b68:	0f 91       	pop	r16
    3b6a:	08 95       	ret

00003b6c <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    3b78:	c1 56       	subi	r28, 0x61	; 97
    3b7a:	d0 40       	sbci	r29, 0x00	; 0
    3b7c:	0f b6       	in	r0, 0x3f	; 63
    3b7e:	f8 94       	cli
    3b80:	de bf       	out	0x3e, r29	; 62
    3b82:	0f be       	out	0x3f, r0	; 63
    3b84:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    3b86:	82 e0       	ldi	r24, 0x02	; 2
    3b88:	67 e0       	ldi	r22, 0x07	; 7
    3b8a:	40 e0       	ldi	r20, 0x00	; 0
    3b8c:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    3b90:	82 e0       	ldi	r24, 0x02	; 2
    3b92:	66 e0       	ldi	r22, 0x06	; 6
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    3b9a:	82 e0       	ldi	r24, 0x02	; 2
    3b9c:	65 e0       	ldi	r22, 0x05	; 5
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    3ba4:	82 e0       	ldi	r24, 0x02	; 2
    3ba6:	64 e0       	ldi	r22, 0x04	; 4
    3ba8:	40 e0       	ldi	r20, 0x00	; 0
    3baa:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    3bae:	82 e0       	ldi	r24, 0x02	; 2
    3bb0:	62 e0       	ldi	r22, 0x02	; 2
    3bb2:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    3bb6:	82 e0       	ldi	r24, 0x02	; 2
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e3 5a       	subi	r30, 0xA3	; 163
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	a0 e8       	ldi	r26, 0x80	; 128
    3bca:	bf e3       	ldi	r27, 0x3F	; 63
    3bcc:	80 83       	st	Z, r24
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	a2 83       	std	Z+2, r26	; 0x02
    3bd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3bd4:	8e 01       	movw	r16, r28
    3bd6:	07 5a       	subi	r16, 0xA7	; 167
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e3 5a       	subi	r30, 0xA3	; 163
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	60 81       	ld	r22, Z
    3be2:	71 81       	ldd	r23, Z+1	; 0x01
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	93 81       	ldd	r25, Z+3	; 0x03
    3be8:	2b ea       	ldi	r18, 0xAB	; 171
    3bea:	3a ea       	ldi	r19, 0xAA	; 170
    3bec:	4a e2       	ldi	r20, 0x2A	; 42
    3bee:	50 e4       	ldi	r21, 0x40	; 64
    3bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	80 83       	st	Z, r24
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	a2 83       	std	Z+2, r26	; 0x02
    3c00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c02:	fe 01       	movw	r30, r28
    3c04:	e7 5a       	subi	r30, 0xA7	; 167
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e8       	ldi	r20, 0x80	; 128
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	34 f4       	brge	.+12     	; 0x3c2c <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    3c20:	fe 01       	movw	r30, r28
    3c22:	e8 5a       	subi	r30, 0xA8	; 168
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	80 83       	st	Z, r24
    3c2a:	e0 c0       	rjmp	.+448    	; 0x3dec <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e7 5a       	subi	r30, 0xA7	; 167
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4f e7       	ldi	r20, 0x7F	; 127
    3c40:	53 e4       	ldi	r21, 0x43	; 67
    3c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c46:	18 16       	cp	r1, r24
    3c48:	0c f0       	brlt	.+2      	; 0x3c4c <LCD_read_data_4bit+0xe0>
    3c4a:	c0 c0       	rjmp	.+384    	; 0x3dcc <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	e3 5a       	subi	r30, 0xA3	; 163
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	60 81       	ld	r22, Z
    3c54:	71 81       	ldd	r23, Z+1	; 0x01
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a e7       	ldi	r20, 0x7A	; 122
    3c60:	54 e4       	ldi	r21, 0x44	; 68
    3c62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	ec 5a       	subi	r30, 0xAC	; 172
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 83       	st	Z, r24
    3c72:	91 83       	std	Z+1, r25	; 0x01
    3c74:	a2 83       	std	Z+2, r26	; 0x02
    3c76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c78:	8e 01       	movw	r16, r28
    3c7a:	00 5b       	subi	r16, 0xB0	; 176
    3c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7e:	fe 01       	movw	r30, r28
    3c80:	ec 5a       	subi	r30, 0xAC	; 172
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	60 81       	ld	r22, Z
    3c86:	71 81       	ldd	r23, Z+1	; 0x01
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4a ef       	ldi	r20, 0xFA	; 250
    3c92:	54 e4       	ldi	r21, 0x44	; 68
    3c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	f8 01       	movw	r30, r16
    3c9e:	80 83       	st	Z, r24
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	a2 83       	std	Z+2, r26	; 0x02
    3ca4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	e0 5b       	subi	r30, 0xB0	; 176
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	60 81       	ld	r22, Z
    3cae:	71 81       	ldd	r23, Z+1	; 0x01
    3cb0:	82 81       	ldd	r24, Z+2	; 0x02
    3cb2:	93 81       	ldd	r25, Z+3	; 0x03
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e8       	ldi	r20, 0x80	; 128
    3cba:	5f e3       	ldi	r21, 0x3F	; 63
    3cbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cc0:	88 23       	and	r24, r24
    3cc2:	44 f4       	brge	.+16     	; 0x3cd4 <LCD_read_data_4bit+0x168>
		__ticks = 1;
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e2 5b       	subi	r30, 0xB2	; 178
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	80 83       	st	Z, r24
    3cd2:	64 c0       	rjmp	.+200    	; 0x3d9c <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e0 5b       	subi	r30, 0xB0	; 176
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	3f ef       	ldi	r19, 0xFF	; 255
    3ce6:	4f e7       	ldi	r20, 0x7F	; 127
    3ce8:	57 e4       	ldi	r21, 0x47	; 71
    3cea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cee:	18 16       	cp	r1, r24
    3cf0:	0c f0       	brlt	.+2      	; 0x3cf4 <LCD_read_data_4bit+0x188>
    3cf2:	43 c0       	rjmp	.+134    	; 0x3d7a <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ec 5a       	subi	r30, 0xAC	; 172
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e2       	ldi	r20, 0x20	; 32
    3d08:	51 e4       	ldi	r21, 0x41	; 65
    3d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0e:	dc 01       	movw	r26, r24
    3d10:	cb 01       	movw	r24, r22
    3d12:	8e 01       	movw	r16, r28
    3d14:	02 5b       	subi	r16, 0xB2	; 178
    3d16:	1f 4f       	sbci	r17, 0xFF	; 255
    3d18:	bc 01       	movw	r22, r24
    3d1a:	cd 01       	movw	r24, r26
    3d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	f8 01       	movw	r30, r16
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
    3d2a:	1f c0       	rjmp	.+62     	; 0x3d6a <LCD_read_data_4bit+0x1fe>
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	e4 5b       	subi	r30, 0xB4	; 180
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	88 ec       	ldi	r24, 0xC8	; 200
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	91 83       	std	Z+1, r25	; 0x01
    3d38:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	e4 5b       	subi	r30, 0xB4	; 180
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	80 81       	ld	r24, Z
    3d42:	91 81       	ldd	r25, Z+1	; 0x01
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	f1 f7       	brne	.-4      	; 0x3d44 <LCD_read_data_4bit+0x1d8>
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e4 5b       	subi	r30, 0xB4	; 180
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d52:	de 01       	movw	r26, r28
    3d54:	a2 5b       	subi	r26, 0xB2	; 178
    3d56:	bf 4f       	sbci	r27, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e2 5b       	subi	r30, 0xB2	; 178
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	11 96       	adiw	r26, 0x01	; 1
    3d66:	9c 93       	st	X, r25
    3d68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e2 5b       	subi	r30, 0xB2	; 178
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	80 81       	ld	r24, Z
    3d72:	91 81       	ldd	r25, Z+1	; 0x01
    3d74:	00 97       	sbiw	r24, 0x00	; 0
    3d76:	d1 f6       	brne	.-76     	; 0x3d2c <LCD_read_data_4bit+0x1c0>
    3d78:	4b c0       	rjmp	.+150    	; 0x3e10 <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d7a:	8e 01       	movw	r16, r28
    3d7c:	02 5b       	subi	r16, 0xB2	; 178
    3d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d80:	fe 01       	movw	r30, r28
    3d82:	e0 5b       	subi	r30, 0xB0	; 176
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	60 81       	ld	r22, Z
    3d88:	71 81       	ldd	r23, Z+1	; 0x01
    3d8a:	82 81       	ldd	r24, Z+2	; 0x02
    3d8c:	93 81       	ldd	r25, Z+3	; 0x03
    3d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	f8 01       	movw	r30, r16
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	80 83       	st	Z, r24
    3d9c:	de 01       	movw	r26, r28
    3d9e:	a6 5b       	subi	r26, 0xB6	; 182
    3da0:	bf 4f       	sbci	r27, 0xFF	; 255
    3da2:	fe 01       	movw	r30, r28
    3da4:	e2 5b       	subi	r30, 0xB2	; 178
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	80 81       	ld	r24, Z
    3daa:	91 81       	ldd	r25, Z+1	; 0x01
    3dac:	11 96       	adiw	r26, 0x01	; 1
    3dae:	9c 93       	st	X, r25
    3db0:	8e 93       	st	-X, r24
    3db2:	fe 01       	movw	r30, r28
    3db4:	e6 5b       	subi	r30, 0xB6	; 182
    3db6:	ff 4f       	sbci	r31, 0xFF	; 255
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <LCD_read_data_4bit+0x250>
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	e6 5b       	subi	r30, 0xB6	; 182
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	91 83       	std	Z+1, r25	; 0x01
    3dc8:	80 83       	st	Z, r24
    3dca:	22 c0       	rjmp	.+68     	; 0x3e10 <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dcc:	8e 01       	movw	r16, r28
    3dce:	08 5a       	subi	r16, 0xA8	; 168
    3dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	e7 5a       	subi	r30, 0xA7	; 167
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	60 81       	ld	r22, Z
    3dda:	71 81       	ldd	r23, Z+1	; 0x01
    3ddc:	82 81       	ldd	r24, Z+2	; 0x02
    3dde:	93 81       	ldd	r25, Z+3	; 0x03
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	f8 01       	movw	r30, r16
    3dea:	80 83       	st	Z, r24
    3dec:	de 01       	movw	r26, r28
    3dee:	a7 5b       	subi	r26, 0xB7	; 183
    3df0:	bf 4f       	sbci	r27, 0xFF	; 255
    3df2:	fe 01       	movw	r30, r28
    3df4:	e8 5a       	subi	r30, 0xA8	; 168
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	e7 5b       	subi	r30, 0xB7	; 183
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	80 81       	ld	r24, Z
    3e04:	8a 95       	dec	r24
    3e06:	f1 f7       	brne	.-4      	; 0x3e04 <LCD_read_data_4bit+0x298>
    3e08:	fe 01       	movw	r30, r28
    3e0a:	e7 5b       	subi	r30, 0xB7	; 183
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    3e18:	fe 01       	movw	r30, r28
    3e1a:	eb 5b       	subi	r30, 0xBB	; 187
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a0 e8       	ldi	r26, 0x80	; 128
    3e24:	bf e3       	ldi	r27, 0x3F	; 63
    3e26:	80 83       	st	Z, r24
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	a2 83       	std	Z+2, r26	; 0x02
    3e2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e2e:	8e 01       	movw	r16, r28
    3e30:	0f 5b       	subi	r16, 0xBF	; 191
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255
    3e34:	fe 01       	movw	r30, r28
    3e36:	eb 5b       	subi	r30, 0xBB	; 187
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	60 81       	ld	r22, Z
    3e3c:	71 81       	ldd	r23, Z+1	; 0x01
    3e3e:	82 81       	ldd	r24, Z+2	; 0x02
    3e40:	93 81       	ldd	r25, Z+3	; 0x03
    3e42:	2b ea       	ldi	r18, 0xAB	; 171
    3e44:	3a ea       	ldi	r19, 0xAA	; 170
    3e46:	4a e2       	ldi	r20, 0x2A	; 42
    3e48:	50 e4       	ldi	r21, 0x40	; 64
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	f8 01       	movw	r30, r16
    3e54:	80 83       	st	Z, r24
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	a2 83       	std	Z+2, r26	; 0x02
    3e5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	ef 5b       	subi	r30, 0xBF	; 191
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	60 81       	ld	r22, Z
    3e64:	71 81       	ldd	r23, Z+1	; 0x01
    3e66:	82 81       	ldd	r24, Z+2	; 0x02
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	40 e8       	ldi	r20, 0x80	; 128
    3e70:	5f e3       	ldi	r21, 0x3F	; 63
    3e72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e76:	88 23       	and	r24, r24
    3e78:	34 f4       	brge	.+12     	; 0x3e86 <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e0 5c       	subi	r30, 0xC0	; 192
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 83       	st	Z, r24
    3e84:	9d c0       	rjmp	.+314    	; 0x3fc0 <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    3e86:	fe 01       	movw	r30, r28
    3e88:	ef 5b       	subi	r30, 0xBF	; 191
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	60 81       	ld	r22, Z
    3e8e:	71 81       	ldd	r23, Z+1	; 0x01
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	53 e4       	ldi	r21, 0x43	; 67
    3e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	0c f0       	brlt	.+2      	; 0x3ea6 <LCD_read_data_4bit+0x33a>
    3ea4:	7e c0       	rjmp	.+252    	; 0x3fa2 <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	eb 5b       	subi	r30, 0xBB	; 187
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	4a e7       	ldi	r20, 0x7A	; 122
    3eba:	54 e4       	ldi	r21, 0x44	; 68
    3ebc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	8c af       	std	Y+60, r24	; 0x3c
    3ec6:	9d af       	std	Y+61, r25	; 0x3d
    3ec8:	ae af       	std	Y+62, r26	; 0x3e
    3eca:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ecc:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ece:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ed0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ed2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	4a ef       	ldi	r20, 0xFA	; 250
    3eda:	54 e4       	ldi	r21, 0x44	; 68
    3edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	88 af       	std	Y+56, r24	; 0x38
    3ee6:	99 af       	std	Y+57, r25	; 0x39
    3ee8:	aa af       	std	Y+58, r26	; 0x3a
    3eea:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3eec:	68 ad       	ldd	r22, Y+56	; 0x38
    3eee:	79 ad       	ldd	r23, Y+57	; 0x39
    3ef0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ef2:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	40 e8       	ldi	r20, 0x80	; 128
    3efa:	5f e3       	ldi	r21, 0x3F	; 63
    3efc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f00:	88 23       	and	r24, r24
    3f02:	2c f4       	brge	.+10     	; 0x3f0e <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	9f ab       	std	Y+55, r25	; 0x37
    3f0a:	8e ab       	std	Y+54, r24	; 0x36
    3f0c:	3f c0       	rjmp	.+126    	; 0x3f8c <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    3f0e:	68 ad       	ldd	r22, Y+56	; 0x38
    3f10:	79 ad       	ldd	r23, Y+57	; 0x39
    3f12:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f14:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	3f ef       	ldi	r19, 0xFF	; 255
    3f1a:	4f e7       	ldi	r20, 0x7F	; 127
    3f1c:	57 e4       	ldi	r21, 0x47	; 71
    3f1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f22:	18 16       	cp	r1, r24
    3f24:	4c f5       	brge	.+82     	; 0x3f78 <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f26:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f28:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	40 e2       	ldi	r20, 0x20	; 32
    3f34:	51 e4       	ldi	r21, 0x41	; 65
    3f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	bc 01       	movw	r22, r24
    3f40:	cd 01       	movw	r24, r26
    3f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	9f ab       	std	Y+55, r25	; 0x37
    3f4c:	8e ab       	std	Y+54, r24	; 0x36
    3f4e:	0f c0       	rjmp	.+30     	; 0x3f6e <LCD_read_data_4bit+0x402>
    3f50:	88 ec       	ldi	r24, 0xC8	; 200
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	9d ab       	std	Y+53, r25	; 0x35
    3f56:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f58:	8c a9       	ldd	r24, Y+52	; 0x34
    3f5a:	9d a9       	ldd	r25, Y+53	; 0x35
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	f1 f7       	brne	.-4      	; 0x3f5c <LCD_read_data_4bit+0x3f0>
    3f60:	9d ab       	std	Y+53, r25	; 0x35
    3f62:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f64:	8e a9       	ldd	r24, Y+54	; 0x36
    3f66:	9f a9       	ldd	r25, Y+55	; 0x37
    3f68:	01 97       	sbiw	r24, 0x01	; 1
    3f6a:	9f ab       	std	Y+55, r25	; 0x37
    3f6c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6e:	8e a9       	ldd	r24, Y+54	; 0x36
    3f70:	9f a9       	ldd	r25, Y+55	; 0x37
    3f72:	00 97       	sbiw	r24, 0x00	; 0
    3f74:	69 f7       	brne	.-38     	; 0x3f50 <LCD_read_data_4bit+0x3e4>
    3f76:	2d c0       	rjmp	.+90     	; 0x3fd2 <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f78:	68 ad       	ldd	r22, Y+56	; 0x38
    3f7a:	79 ad       	ldd	r23, Y+57	; 0x39
    3f7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f7e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	9f ab       	std	Y+55, r25	; 0x37
    3f8a:	8e ab       	std	Y+54, r24	; 0x36
    3f8c:	8e a9       	ldd	r24, Y+54	; 0x36
    3f8e:	9f a9       	ldd	r25, Y+55	; 0x37
    3f90:	9b ab       	std	Y+51, r25	; 0x33
    3f92:	8a ab       	std	Y+50, r24	; 0x32
    3f94:	8a a9       	ldd	r24, Y+50	; 0x32
    3f96:	9b a9       	ldd	r25, Y+51	; 0x33
    3f98:	01 97       	sbiw	r24, 0x01	; 1
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <LCD_read_data_4bit+0x42c>
    3f9c:	9b ab       	std	Y+51, r25	; 0x33
    3f9e:	8a ab       	std	Y+50, r24	; 0x32
    3fa0:	18 c0       	rjmp	.+48     	; 0x3fd2 <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	ef 5b       	subi	r30, 0xBF	; 191
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	60 81       	ld	r22, Z
    3faa:	71 81       	ldd	r23, Z+1	; 0x01
    3fac:	82 81       	ldd	r24, Z+2	; 0x02
    3fae:	93 81       	ldd	r25, Z+3	; 0x03
    3fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	fe 01       	movw	r30, r28
    3fba:	e0 5c       	subi	r30, 0xC0	; 192
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	80 83       	st	Z, r24
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e0 5c       	subi	r30, 0xC0	; 192
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	80 81       	ld	r24, Z
    3fc8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3fca:	89 a9       	ldd	r24, Y+49	; 0x31
    3fcc:	8a 95       	dec	r24
    3fce:	f1 f7       	brne	.-4      	; 0x3fcc <LCD_read_data_4bit+0x460>
    3fd0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    3fd2:	82 e0       	ldi	r24, 0x02	; 2
    3fd4:	0e 94 95 2c 	call	0x592a	; 0x592a <DIO_u8_get_port>
    3fd8:	fe 01       	movw	r30, r28
    3fda:	ef 59       	subi	r30, 0x9F	; 159
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	82 95       	swap	r24
    3fe0:	80 7f       	andi	r24, 0xF0	; 240
    3fe2:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3fe4:	82 e0       	ldi	r24, 0x02	; 2
    3fe6:	60 e0       	ldi	r22, 0x00	; 0
    3fe8:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	a0 e2       	ldi	r26, 0x20	; 32
    3ff2:	b1 e4       	ldi	r27, 0x41	; 65
    3ff4:	8d a7       	std	Y+45, r24	; 0x2d
    3ff6:	9e a7       	std	Y+46, r25	; 0x2e
    3ff8:	af a7       	std	Y+47, r26	; 0x2f
    3ffa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ffc:	6d a5       	ldd	r22, Y+45	; 0x2d
    3ffe:	7e a5       	ldd	r23, Y+46	; 0x2e
    4000:	8f a5       	ldd	r24, Y+47	; 0x2f
    4002:	98 a9       	ldd	r25, Y+48	; 0x30
    4004:	2b ea       	ldi	r18, 0xAB	; 171
    4006:	3a ea       	ldi	r19, 0xAA	; 170
    4008:	4a e2       	ldi	r20, 0x2A	; 42
    400a:	50 e4       	ldi	r21, 0x40	; 64
    400c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	89 a7       	std	Y+41, r24	; 0x29
    4016:	9a a7       	std	Y+42, r25	; 0x2a
    4018:	ab a7       	std	Y+43, r26	; 0x2b
    401a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    401c:	69 a5       	ldd	r22, Y+41	; 0x29
    401e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4020:	8b a5       	ldd	r24, Y+43	; 0x2b
    4022:	9c a5       	ldd	r25, Y+44	; 0x2c
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	1c f4       	brge	.+6      	; 0x403a <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	88 a7       	std	Y+40, r24	; 0x28
    4038:	91 c0       	rjmp	.+290    	; 0x415c <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    403a:	69 a5       	ldd	r22, Y+41	; 0x29
    403c:	7a a5       	ldd	r23, Y+42	; 0x2a
    403e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4040:	9c a5       	ldd	r25, Y+44	; 0x2c
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	4f e7       	ldi	r20, 0x7F	; 127
    4048:	53 e4       	ldi	r21, 0x43	; 67
    404a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    404e:	18 16       	cp	r1, r24
    4050:	0c f0       	brlt	.+2      	; 0x4054 <LCD_read_data_4bit+0x4e8>
    4052:	7b c0       	rjmp	.+246    	; 0x414a <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    4054:	6d a5       	ldd	r22, Y+45	; 0x2d
    4056:	7e a5       	ldd	r23, Y+46	; 0x2e
    4058:	8f a5       	ldd	r24, Y+47	; 0x2f
    405a:	98 a9       	ldd	r25, Y+48	; 0x30
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	4a e7       	ldi	r20, 0x7A	; 122
    4062:	54 e4       	ldi	r21, 0x44	; 68
    4064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	8c a3       	std	Y+36, r24	; 0x24
    406e:	9d a3       	std	Y+37, r25	; 0x25
    4070:	ae a3       	std	Y+38, r26	; 0x26
    4072:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4074:	6c a1       	ldd	r22, Y+36	; 0x24
    4076:	7d a1       	ldd	r23, Y+37	; 0x25
    4078:	8e a1       	ldd	r24, Y+38	; 0x26
    407a:	9f a1       	ldd	r25, Y+39	; 0x27
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	4a ef       	ldi	r20, 0xFA	; 250
    4082:	54 e4       	ldi	r21, 0x44	; 68
    4084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	88 a3       	std	Y+32, r24	; 0x20
    408e:	99 a3       	std	Y+33, r25	; 0x21
    4090:	aa a3       	std	Y+34, r26	; 0x22
    4092:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4094:	68 a1       	ldd	r22, Y+32	; 0x20
    4096:	79 a1       	ldd	r23, Y+33	; 0x21
    4098:	8a a1       	ldd	r24, Y+34	; 0x22
    409a:	9b a1       	ldd	r25, Y+35	; 0x23
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e8       	ldi	r20, 0x80	; 128
    40a2:	5f e3       	ldi	r21, 0x3F	; 63
    40a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a8:	88 23       	and	r24, r24
    40aa:	2c f4       	brge	.+10     	; 0x40b6 <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	9f 8f       	std	Y+31, r25	; 0x1f
    40b2:	8e 8f       	std	Y+30, r24	; 0x1e
    40b4:	3f c0       	rjmp	.+126    	; 0x4134 <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    40b6:	68 a1       	ldd	r22, Y+32	; 0x20
    40b8:	79 a1       	ldd	r23, Y+33	; 0x21
    40ba:	8a a1       	ldd	r24, Y+34	; 0x22
    40bc:	9b a1       	ldd	r25, Y+35	; 0x23
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	3f ef       	ldi	r19, 0xFF	; 255
    40c2:	4f e7       	ldi	r20, 0x7F	; 127
    40c4:	57 e4       	ldi	r21, 0x47	; 71
    40c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ca:	18 16       	cp	r1, r24
    40cc:	4c f5       	brge	.+82     	; 0x4120 <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ce:	6c a1       	ldd	r22, Y+36	; 0x24
    40d0:	7d a1       	ldd	r23, Y+37	; 0x25
    40d2:	8e a1       	ldd	r24, Y+38	; 0x26
    40d4:	9f a1       	ldd	r25, Y+39	; 0x27
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e2       	ldi	r20, 0x20	; 32
    40dc:	51 e4       	ldi	r21, 0x41	; 65
    40de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	bc 01       	movw	r22, r24
    40e8:	cd 01       	movw	r24, r26
    40ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	9f 8f       	std	Y+31, r25	; 0x1f
    40f4:	8e 8f       	std	Y+30, r24	; 0x1e
    40f6:	0f c0       	rjmp	.+30     	; 0x4116 <LCD_read_data_4bit+0x5aa>
    40f8:	88 ec       	ldi	r24, 0xC8	; 200
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	9d 8f       	std	Y+29, r25	; 0x1d
    40fe:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4100:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4102:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	f1 f7       	brne	.-4      	; 0x4104 <LCD_read_data_4bit+0x598>
    4108:	9d 8f       	std	Y+29, r25	; 0x1d
    410a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    410e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	9f 8f       	std	Y+31, r25	; 0x1f
    4114:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4118:	9f 8d       	ldd	r25, Y+31	; 0x1f
    411a:	00 97       	sbiw	r24, 0x00	; 0
    411c:	69 f7       	brne	.-38     	; 0x40f8 <LCD_read_data_4bit+0x58c>
    411e:	24 c0       	rjmp	.+72     	; 0x4168 <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4120:	68 a1       	ldd	r22, Y+32	; 0x20
    4122:	79 a1       	ldd	r23, Y+33	; 0x21
    4124:	8a a1       	ldd	r24, Y+34	; 0x22
    4126:	9b a1       	ldd	r25, Y+35	; 0x23
    4128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	9f 8f       	std	Y+31, r25	; 0x1f
    4132:	8e 8f       	std	Y+30, r24	; 0x1e
    4134:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4136:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4138:	9b 8f       	std	Y+27, r25	; 0x1b
    413a:	8a 8f       	std	Y+26, r24	; 0x1a
    413c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    413e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	f1 f7       	brne	.-4      	; 0x4140 <LCD_read_data_4bit+0x5d4>
    4144:	9b 8f       	std	Y+27, r25	; 0x1b
    4146:	8a 8f       	std	Y+26, r24	; 0x1a
    4148:	0f c0       	rjmp	.+30     	; 0x4168 <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    414a:	69 a5       	ldd	r22, Y+41	; 0x29
    414c:	7a a5       	ldd	r23, Y+42	; 0x2a
    414e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4150:	9c a5       	ldd	r25, Y+44	; 0x2c
    4152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	88 a7       	std	Y+40, r24	; 0x28
    415c:	88 a5       	ldd	r24, Y+40	; 0x28
    415e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4160:	89 8d       	ldd	r24, Y+25	; 0x19
    4162:	8a 95       	dec	r24
    4164:	f1 f7       	brne	.-4      	; 0x4162 <LCD_read_data_4bit+0x5f6>
    4166:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	60 e0       	ldi	r22, 0x00	; 0
    416c:	0e 94 a8 2b 	call	0x5750	; 0x5750 <DIO_void_set_pin>
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	a0 e8       	ldi	r26, 0x80	; 128
    4176:	bf e3       	ldi	r27, 0x3F	; 63
    4178:	8d 8b       	std	Y+21, r24	; 0x15
    417a:	9e 8b       	std	Y+22, r25	; 0x16
    417c:	af 8b       	std	Y+23, r26	; 0x17
    417e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4180:	6d 89       	ldd	r22, Y+21	; 0x15
    4182:	7e 89       	ldd	r23, Y+22	; 0x16
    4184:	8f 89       	ldd	r24, Y+23	; 0x17
    4186:	98 8d       	ldd	r25, Y+24	; 0x18
    4188:	2b ea       	ldi	r18, 0xAB	; 171
    418a:	3a ea       	ldi	r19, 0xAA	; 170
    418c:	4a e2       	ldi	r20, 0x2A	; 42
    418e:	50 e4       	ldi	r21, 0x40	; 64
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	89 8b       	std	Y+17, r24	; 0x11
    419a:	9a 8b       	std	Y+18, r25	; 0x12
    419c:	ab 8b       	std	Y+19, r26	; 0x13
    419e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    41a0:	69 89       	ldd	r22, Y+17	; 0x11
    41a2:	7a 89       	ldd	r23, Y+18	; 0x12
    41a4:	8b 89       	ldd	r24, Y+19	; 0x13
    41a6:	9c 89       	ldd	r25, Y+20	; 0x14
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	40 e8       	ldi	r20, 0x80	; 128
    41ae:	5f e3       	ldi	r21, 0x3F	; 63
    41b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b4:	88 23       	and	r24, r24
    41b6:	1c f4       	brge	.+6      	; 0x41be <LCD_read_data_4bit+0x652>
		__ticks = 1;
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	88 8b       	std	Y+16, r24	; 0x10
    41bc:	91 c0       	rjmp	.+290    	; 0x42e0 <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    41be:	69 89       	ldd	r22, Y+17	; 0x11
    41c0:	7a 89       	ldd	r23, Y+18	; 0x12
    41c2:	8b 89       	ldd	r24, Y+19	; 0x13
    41c4:	9c 89       	ldd	r25, Y+20	; 0x14
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	4f e7       	ldi	r20, 0x7F	; 127
    41cc:	53 e4       	ldi	r21, 0x43	; 67
    41ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d2:	18 16       	cp	r1, r24
    41d4:	0c f0       	brlt	.+2      	; 0x41d8 <LCD_read_data_4bit+0x66c>
    41d6:	7b c0       	rjmp	.+246    	; 0x42ce <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    41d8:	6d 89       	ldd	r22, Y+21	; 0x15
    41da:	7e 89       	ldd	r23, Y+22	; 0x16
    41dc:	8f 89       	ldd	r24, Y+23	; 0x17
    41de:	98 8d       	ldd	r25, Y+24	; 0x18
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	30 e0       	ldi	r19, 0x00	; 0
    41e4:	4a e7       	ldi	r20, 0x7A	; 122
    41e6:	54 e4       	ldi	r21, 0x44	; 68
    41e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	8c 87       	std	Y+12, r24	; 0x0c
    41f2:	9d 87       	std	Y+13, r25	; 0x0d
    41f4:	ae 87       	std	Y+14, r26	; 0x0e
    41f6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    41fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    41fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    41fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	4a ef       	ldi	r20, 0xFA	; 250
    4206:	54 e4       	ldi	r21, 0x44	; 68
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	88 87       	std	Y+8, r24	; 0x08
    4212:	99 87       	std	Y+9, r25	; 0x09
    4214:	aa 87       	std	Y+10, r26	; 0x0a
    4216:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4218:	68 85       	ldd	r22, Y+8	; 0x08
    421a:	79 85       	ldd	r23, Y+9	; 0x09
    421c:	8a 85       	ldd	r24, Y+10	; 0x0a
    421e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4220:	20 e0       	ldi	r18, 0x00	; 0
    4222:	30 e0       	ldi	r19, 0x00	; 0
    4224:	40 e8       	ldi	r20, 0x80	; 128
    4226:	5f e3       	ldi	r21, 0x3F	; 63
    4228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    422c:	88 23       	and	r24, r24
    422e:	2c f4       	brge	.+10     	; 0x423a <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	9f 83       	std	Y+7, r25	; 0x07
    4236:	8e 83       	std	Y+6, r24	; 0x06
    4238:	3f c0       	rjmp	.+126    	; 0x42b8 <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    423a:	68 85       	ldd	r22, Y+8	; 0x08
    423c:	79 85       	ldd	r23, Y+9	; 0x09
    423e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4240:	9b 85       	ldd	r25, Y+11	; 0x0b
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	3f ef       	ldi	r19, 0xFF	; 255
    4246:	4f e7       	ldi	r20, 0x7F	; 127
    4248:	57 e4       	ldi	r21, 0x47	; 71
    424a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    424e:	18 16       	cp	r1, r24
    4250:	4c f5       	brge	.+82     	; 0x42a4 <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4252:	6c 85       	ldd	r22, Y+12	; 0x0c
    4254:	7d 85       	ldd	r23, Y+13	; 0x0d
    4256:	8e 85       	ldd	r24, Y+14	; 0x0e
    4258:	9f 85       	ldd	r25, Y+15	; 0x0f
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	40 e2       	ldi	r20, 0x20	; 32
    4260:	51 e4       	ldi	r21, 0x41	; 65
    4262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4266:	dc 01       	movw	r26, r24
    4268:	cb 01       	movw	r24, r22
    426a:	bc 01       	movw	r22, r24
    426c:	cd 01       	movw	r24, r26
    426e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	9f 83       	std	Y+7, r25	; 0x07
    4278:	8e 83       	std	Y+6, r24	; 0x06
    427a:	0f c0       	rjmp	.+30     	; 0x429a <LCD_read_data_4bit+0x72e>
    427c:	88 ec       	ldi	r24, 0xC8	; 200
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	9d 83       	std	Y+5, r25	; 0x05
    4282:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4284:	8c 81       	ldd	r24, Y+4	; 0x04
    4286:	9d 81       	ldd	r25, Y+5	; 0x05
    4288:	01 97       	sbiw	r24, 0x01	; 1
    428a:	f1 f7       	brne	.-4      	; 0x4288 <LCD_read_data_4bit+0x71c>
    428c:	9d 83       	std	Y+5, r25	; 0x05
    428e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4290:	8e 81       	ldd	r24, Y+6	; 0x06
    4292:	9f 81       	ldd	r25, Y+7	; 0x07
    4294:	01 97       	sbiw	r24, 0x01	; 1
    4296:	9f 83       	std	Y+7, r25	; 0x07
    4298:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    429a:	8e 81       	ldd	r24, Y+6	; 0x06
    429c:	9f 81       	ldd	r25, Y+7	; 0x07
    429e:	00 97       	sbiw	r24, 0x00	; 0
    42a0:	69 f7       	brne	.-38     	; 0x427c <LCD_read_data_4bit+0x710>
    42a2:	24 c0       	rjmp	.+72     	; 0x42ec <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a4:	68 85       	ldd	r22, Y+8	; 0x08
    42a6:	79 85       	ldd	r23, Y+9	; 0x09
    42a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    42aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    42ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	9f 83       	std	Y+7, r25	; 0x07
    42b6:	8e 83       	std	Y+6, r24	; 0x06
    42b8:	8e 81       	ldd	r24, Y+6	; 0x06
    42ba:	9f 81       	ldd	r25, Y+7	; 0x07
    42bc:	9b 83       	std	Y+3, r25	; 0x03
    42be:	8a 83       	std	Y+2, r24	; 0x02
    42c0:	8a 81       	ldd	r24, Y+2	; 0x02
    42c2:	9b 81       	ldd	r25, Y+3	; 0x03
    42c4:	01 97       	sbiw	r24, 0x01	; 1
    42c6:	f1 f7       	brne	.-4      	; 0x42c4 <LCD_read_data_4bit+0x758>
    42c8:	9b 83       	std	Y+3, r25	; 0x03
    42ca:	8a 83       	std	Y+2, r24	; 0x02
    42cc:	0f c0       	rjmp	.+30     	; 0x42ec <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    42ce:	69 89       	ldd	r22, Y+17	; 0x11
    42d0:	7a 89       	ldd	r23, Y+18	; 0x12
    42d2:	8b 89       	ldd	r24, Y+19	; 0x13
    42d4:	9c 89       	ldd	r25, Y+20	; 0x14
    42d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	88 8b       	std	Y+16, r24	; 0x10
    42e0:	88 89       	ldd	r24, Y+16	; 0x10
    42e2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    42e4:	89 81       	ldd	r24, Y+1	; 0x01
    42e6:	8a 95       	dec	r24
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <LCD_read_data_4bit+0x77a>
    42ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    42ec:	82 e0       	ldi	r24, 0x02	; 2
    42ee:	0e 94 95 2c 	call	0x592a	; 0x592a <DIO_u8_get_port>
    42f2:	98 2f       	mov	r25, r24
    42f4:	de 01       	movw	r26, r28
    42f6:	af 59       	subi	r26, 0x9F	; 159
    42f8:	bf 4f       	sbci	r27, 0xFF	; 255
    42fa:	fe 01       	movw	r30, r28
    42fc:	ef 59       	subi	r30, 0x9F	; 159
    42fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4300:	80 81       	ld	r24, Z
    4302:	89 2b       	or	r24, r25
    4304:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4306:	82 e0       	ldi	r24, 0x02	; 2
    4308:	60 e0       	ldi	r22, 0x00	; 0
    430a:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    430e:	de 01       	movw	r26, r28
    4310:	af 59       	subi	r26, 0x9F	; 159
    4312:	bf 4f       	sbci	r27, 0xFF	; 255
    4314:	fe 01       	movw	r30, r28
    4316:	ef 59       	subi	r30, 0x9F	; 159
    4318:	ff 4f       	sbci	r31, 0xFF	; 255
    431a:	80 81       	ld	r24, Z
    431c:	8f 77       	andi	r24, 0x7F	; 127
    431e:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    4320:	82 e0       	ldi	r24, 0x02	; 2
    4322:	67 e0       	ldi	r22, 0x07	; 7
    4324:	4f ef       	ldi	r20, 0xFF	; 255
    4326:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    432a:	82 e0       	ldi	r24, 0x02	; 2
    432c:	66 e0       	ldi	r22, 0x06	; 6
    432e:	4f ef       	ldi	r20, 0xFF	; 255
    4330:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4334:	82 e0       	ldi	r24, 0x02	; 2
    4336:	65 e0       	ldi	r22, 0x05	; 5
    4338:	4f ef       	ldi	r20, 0xFF	; 255
    433a:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    433e:	82 e0       	ldi	r24, 0x02	; 2
    4340:	64 e0       	ldi	r22, 0x04	; 4
    4342:	4f ef       	ldi	r20, 0xFF	; 255
    4344:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    4348:	fe 01       	movw	r30, r28
    434a:	ef 59       	subi	r30, 0x9F	; 159
    434c:	ff 4f       	sbci	r31, 0xFF	; 255
    434e:	80 81       	ld	r24, Z
}
    4350:	cf 59       	subi	r28, 0x9F	; 159
    4352:	df 4f       	sbci	r29, 0xFF	; 255
    4354:	0f b6       	in	r0, 0x3f	; 63
    4356:	f8 94       	cli
    4358:	de bf       	out	0x3e, r29	; 62
    435a:	0f be       	out	0x3f, r0	; 63
    435c:	cd bf       	out	0x3d, r28	; 61
    435e:	cf 91       	pop	r28
    4360:	df 91       	pop	r29
    4362:	1f 91       	pop	r17
    4364:	0f 91       	pop	r16
    4366:	08 95       	ret

00004368 <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    4374:	cc 54       	subi	r28, 0x4C	; 76
    4376:	d0 40       	sbci	r29, 0x00	; 0
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	f8 94       	cli
    437c:	de bf       	out	0x3e, r29	; 62
    437e:	0f be       	out	0x3f, r0	; 63
    4380:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    4382:	82 e0       	ldi	r24, 0x02	; 2
    4384:	67 e0       	ldi	r22, 0x07	; 7
    4386:	4f ef       	ldi	r20, 0xFF	; 255
    4388:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    438c:	82 e0       	ldi	r24, 0x02	; 2
    438e:	66 e0       	ldi	r22, 0x06	; 6
    4390:	4f ef       	ldi	r20, 0xFF	; 255
    4392:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	65 e0       	ldi	r22, 0x05	; 5
    439a:	4f ef       	ldi	r20, 0xFF	; 255
    439c:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    43a0:	82 e0       	ldi	r24, 0x02	; 2
    43a2:	64 e0       	ldi	r22, 0x04	; 4
    43a4:	4f ef       	ldi	r20, 0xFF	; 255
    43a6:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    43aa:	82 e0       	ldi	r24, 0x02	; 2
    43ac:	60 e0       	ldi	r22, 0x00	; 0
    43ae:	4f ef       	ldi	r20, 0xFF	; 255
    43b0:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    43b4:	82 e0       	ldi	r24, 0x02	; 2
    43b6:	61 e0       	ldi	r22, 0x01	; 1
    43b8:	4f ef       	ldi	r20, 0xFF	; 255
    43ba:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    43be:	82 e0       	ldi	r24, 0x02	; 2
    43c0:	62 e0       	ldi	r22, 0x02	; 2
    43c2:	4f ef       	ldi	r20, 0xFF	; 255
    43c4:	0e 94 90 2a 	call	0x5520	; 0x5520 <DIO_void_set_pin_dir>
    43c8:	fe 01       	movw	r30, r28
    43ca:	e7 5b       	subi	r30, 0xB7	; 183
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	a8 e4       	ldi	r26, 0x48	; 72
    43d4:	b2 e4       	ldi	r27, 0x42	; 66
    43d6:	80 83       	st	Z, r24
    43d8:	91 83       	std	Z+1, r25	; 0x01
    43da:	a2 83       	std	Z+2, r26	; 0x02
    43dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43de:	8e 01       	movw	r16, r28
    43e0:	0b 5b       	subi	r16, 0xBB	; 187
    43e2:	1f 4f       	sbci	r17, 0xFF	; 255
    43e4:	fe 01       	movw	r30, r28
    43e6:	e7 5b       	subi	r30, 0xB7	; 183
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	60 81       	ld	r22, Z
    43ec:	71 81       	ldd	r23, Z+1	; 0x01
    43ee:	82 81       	ldd	r24, Z+2	; 0x02
    43f0:	93 81       	ldd	r25, Z+3	; 0x03
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	4a ef       	ldi	r20, 0xFA	; 250
    43f8:	54 e4       	ldi	r21, 0x44	; 68
    43fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fe:	dc 01       	movw	r26, r24
    4400:	cb 01       	movw	r24, r22
    4402:	f8 01       	movw	r30, r16
    4404:	80 83       	st	Z, r24
    4406:	91 83       	std	Z+1, r25	; 0x01
    4408:	a2 83       	std	Z+2, r26	; 0x02
    440a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    440c:	fe 01       	movw	r30, r28
    440e:	eb 5b       	subi	r30, 0xBB	; 187
    4410:	ff 4f       	sbci	r31, 0xFF	; 255
    4412:	60 81       	ld	r22, Z
    4414:	71 81       	ldd	r23, Z+1	; 0x01
    4416:	82 81       	ldd	r24, Z+2	; 0x02
    4418:	93 81       	ldd	r25, Z+3	; 0x03
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e8       	ldi	r20, 0x80	; 128
    4420:	5f e3       	ldi	r21, 0x3F	; 63
    4422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4426:	88 23       	and	r24, r24
    4428:	44 f4       	brge	.+16     	; 0x443a <LCD_init+0xd2>
		__ticks = 1;
    442a:	fe 01       	movw	r30, r28
    442c:	ed 5b       	subi	r30, 0xBD	; 189
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	91 83       	std	Z+1, r25	; 0x01
    4436:	80 83       	st	Z, r24
    4438:	64 c0       	rjmp	.+200    	; 0x4502 <LCD_init+0x19a>
	else if (__tmp > 65535)
    443a:	fe 01       	movw	r30, r28
    443c:	eb 5b       	subi	r30, 0xBB	; 187
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	60 81       	ld	r22, Z
    4442:	71 81       	ldd	r23, Z+1	; 0x01
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	93 81       	ldd	r25, Z+3	; 0x03
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	3f ef       	ldi	r19, 0xFF	; 255
    444c:	4f e7       	ldi	r20, 0x7F	; 127
    444e:	57 e4       	ldi	r21, 0x47	; 71
    4450:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4454:	18 16       	cp	r1, r24
    4456:	0c f0       	brlt	.+2      	; 0x445a <LCD_init+0xf2>
    4458:	43 c0       	rjmp	.+134    	; 0x44e0 <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    445a:	fe 01       	movw	r30, r28
    445c:	e7 5b       	subi	r30, 0xB7	; 183
    445e:	ff 4f       	sbci	r31, 0xFF	; 255
    4460:	60 81       	ld	r22, Z
    4462:	71 81       	ldd	r23, Z+1	; 0x01
    4464:	82 81       	ldd	r24, Z+2	; 0x02
    4466:	93 81       	ldd	r25, Z+3	; 0x03
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e2       	ldi	r20, 0x20	; 32
    446e:	51 e4       	ldi	r21, 0x41	; 65
    4470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	8e 01       	movw	r16, r28
    447a:	0d 5b       	subi	r16, 0xBD	; 189
    447c:	1f 4f       	sbci	r17, 0xFF	; 255
    447e:	bc 01       	movw	r22, r24
    4480:	cd 01       	movw	r24, r26
    4482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	f8 01       	movw	r30, r16
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	80 83       	st	Z, r24
    4490:	1f c0       	rjmp	.+62     	; 0x44d0 <LCD_init+0x168>
    4492:	fe 01       	movw	r30, r28
    4494:	ef 5b       	subi	r30, 0xBF	; 191
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	88 ec       	ldi	r24, 0xC8	; 200
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	91 83       	std	Z+1, r25	; 0x01
    449e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44a0:	fe 01       	movw	r30, r28
    44a2:	ef 5b       	subi	r30, 0xBF	; 191
    44a4:	ff 4f       	sbci	r31, 0xFF	; 255
    44a6:	80 81       	ld	r24, Z
    44a8:	91 81       	ldd	r25, Z+1	; 0x01
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	f1 f7       	brne	.-4      	; 0x44aa <LCD_init+0x142>
    44ae:	fe 01       	movw	r30, r28
    44b0:	ef 5b       	subi	r30, 0xBF	; 191
    44b2:	ff 4f       	sbci	r31, 0xFF	; 255
    44b4:	91 83       	std	Z+1, r25	; 0x01
    44b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b8:	de 01       	movw	r26, r28
    44ba:	ad 5b       	subi	r26, 0xBD	; 189
    44bc:	bf 4f       	sbci	r27, 0xFF	; 255
    44be:	fe 01       	movw	r30, r28
    44c0:	ed 5b       	subi	r30, 0xBD	; 189
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	80 81       	ld	r24, Z
    44c6:	91 81       	ldd	r25, Z+1	; 0x01
    44c8:	01 97       	sbiw	r24, 0x01	; 1
    44ca:	11 96       	adiw	r26, 0x01	; 1
    44cc:	9c 93       	st	X, r25
    44ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d0:	fe 01       	movw	r30, r28
    44d2:	ed 5b       	subi	r30, 0xBD	; 189
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	80 81       	ld	r24, Z
    44d8:	91 81       	ldd	r25, Z+1	; 0x01
    44da:	00 97       	sbiw	r24, 0x00	; 0
    44dc:	d1 f6       	brne	.-76     	; 0x4492 <LCD_init+0x12a>
    44de:	24 c0       	rjmp	.+72     	; 0x4528 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e0:	8e 01       	movw	r16, r28
    44e2:	0d 5b       	subi	r16, 0xBD	; 189
    44e4:	1f 4f       	sbci	r17, 0xFF	; 255
    44e6:	fe 01       	movw	r30, r28
    44e8:	eb 5b       	subi	r30, 0xBB	; 187
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	60 81       	ld	r22, Z
    44ee:	71 81       	ldd	r23, Z+1	; 0x01
    44f0:	82 81       	ldd	r24, Z+2	; 0x02
    44f2:	93 81       	ldd	r25, Z+3	; 0x03
    44f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	f8 01       	movw	r30, r16
    44fe:	91 83       	std	Z+1, r25	; 0x01
    4500:	80 83       	st	Z, r24
    4502:	fe 01       	movw	r30, r28
    4504:	ed 5b       	subi	r30, 0xBD	; 189
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	80 81       	ld	r24, Z
    450a:	91 81       	ldd	r25, Z+1	; 0x01
    450c:	fe 01       	movw	r30, r28
    450e:	ff 96       	adiw	r30, 0x3f	; 63
    4510:	91 83       	std	Z+1, r25	; 0x01
    4512:	80 83       	st	Z, r24
    4514:	fe 01       	movw	r30, r28
    4516:	ff 96       	adiw	r30, 0x3f	; 63
    4518:	80 81       	ld	r24, Z
    451a:	91 81       	ldd	r25, Z+1	; 0x01
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	f1 f7       	brne	.-4      	; 0x451c <LCD_init+0x1b4>
    4520:	fe 01       	movw	r30, r28
    4522:	ff 96       	adiw	r30, 0x3f	; 63
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    4528:	0e 94 f6 15 	call	0x2bec	; 0x2bec <LCD_function_set_4bit>
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	a8 e4       	ldi	r26, 0x48	; 72
    4532:	b2 e4       	ldi	r27, 0x42	; 66
    4534:	8b af       	std	Y+59, r24	; 0x3b
    4536:	9c af       	std	Y+60, r25	; 0x3c
    4538:	ad af       	std	Y+61, r26	; 0x3d
    453a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    453c:	6b ad       	ldd	r22, Y+59	; 0x3b
    453e:	7c ad       	ldd	r23, Y+60	; 0x3c
    4540:	8d ad       	ldd	r24, Y+61	; 0x3d
    4542:	9e ad       	ldd	r25, Y+62	; 0x3e
    4544:	2b ea       	ldi	r18, 0xAB	; 171
    4546:	3a ea       	ldi	r19, 0xAA	; 170
    4548:	4a e2       	ldi	r20, 0x2A	; 42
    454a:	50 e4       	ldi	r21, 0x40	; 64
    454c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	8f ab       	std	Y+55, r24	; 0x37
    4556:	98 af       	std	Y+56, r25	; 0x38
    4558:	a9 af       	std	Y+57, r26	; 0x39
    455a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    455c:	6f a9       	ldd	r22, Y+55	; 0x37
    455e:	78 ad       	ldd	r23, Y+56	; 0x38
    4560:	89 ad       	ldd	r24, Y+57	; 0x39
    4562:	9a ad       	ldd	r25, Y+58	; 0x3a
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	40 e8       	ldi	r20, 0x80	; 128
    456a:	5f e3       	ldi	r21, 0x3F	; 63
    456c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4570:	88 23       	and	r24, r24
    4572:	1c f4       	brge	.+6      	; 0x457a <LCD_init+0x212>
		__ticks = 1;
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	8e ab       	std	Y+54, r24	; 0x36
    4578:	91 c0       	rjmp	.+290    	; 0x469c <LCD_init+0x334>
	else if (__tmp > 255)
    457a:	6f a9       	ldd	r22, Y+55	; 0x37
    457c:	78 ad       	ldd	r23, Y+56	; 0x38
    457e:	89 ad       	ldd	r24, Y+57	; 0x39
    4580:	9a ad       	ldd	r25, Y+58	; 0x3a
    4582:	20 e0       	ldi	r18, 0x00	; 0
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	4f e7       	ldi	r20, 0x7F	; 127
    4588:	53 e4       	ldi	r21, 0x43	; 67
    458a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    458e:	18 16       	cp	r1, r24
    4590:	0c f0       	brlt	.+2      	; 0x4594 <LCD_init+0x22c>
    4592:	7b c0       	rjmp	.+246    	; 0x468a <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    4594:	6b ad       	ldd	r22, Y+59	; 0x3b
    4596:	7c ad       	ldd	r23, Y+60	; 0x3c
    4598:	8d ad       	ldd	r24, Y+61	; 0x3d
    459a:	9e ad       	ldd	r25, Y+62	; 0x3e
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	4a e7       	ldi	r20, 0x7A	; 122
    45a2:	54 e4       	ldi	r21, 0x44	; 68
    45a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	8a ab       	std	Y+50, r24	; 0x32
    45ae:	9b ab       	std	Y+51, r25	; 0x33
    45b0:	ac ab       	std	Y+52, r26	; 0x34
    45b2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45b4:	6a a9       	ldd	r22, Y+50	; 0x32
    45b6:	7b a9       	ldd	r23, Y+51	; 0x33
    45b8:	8c a9       	ldd	r24, Y+52	; 0x34
    45ba:	9d a9       	ldd	r25, Y+53	; 0x35
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	4a ef       	ldi	r20, 0xFA	; 250
    45c2:	54 e4       	ldi	r21, 0x44	; 68
    45c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c8:	dc 01       	movw	r26, r24
    45ca:	cb 01       	movw	r24, r22
    45cc:	8e a7       	std	Y+46, r24	; 0x2e
    45ce:	9f a7       	std	Y+47, r25	; 0x2f
    45d0:	a8 ab       	std	Y+48, r26	; 0x30
    45d2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    45d4:	6e a5       	ldd	r22, Y+46	; 0x2e
    45d6:	7f a5       	ldd	r23, Y+47	; 0x2f
    45d8:	88 a9       	ldd	r24, Y+48	; 0x30
    45da:	99 a9       	ldd	r25, Y+49	; 0x31
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	40 e8       	ldi	r20, 0x80	; 128
    45e2:	5f e3       	ldi	r21, 0x3F	; 63
    45e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e8:	88 23       	and	r24, r24
    45ea:	2c f4       	brge	.+10     	; 0x45f6 <LCD_init+0x28e>
		__ticks = 1;
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	9d a7       	std	Y+45, r25	; 0x2d
    45f2:	8c a7       	std	Y+44, r24	; 0x2c
    45f4:	3f c0       	rjmp	.+126    	; 0x4674 <LCD_init+0x30c>
	else if (__tmp > 65535)
    45f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    45f8:	7f a5       	ldd	r23, Y+47	; 0x2f
    45fa:	88 a9       	ldd	r24, Y+48	; 0x30
    45fc:	99 a9       	ldd	r25, Y+49	; 0x31
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	3f ef       	ldi	r19, 0xFF	; 255
    4602:	4f e7       	ldi	r20, 0x7F	; 127
    4604:	57 e4       	ldi	r21, 0x47	; 71
    4606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    460a:	18 16       	cp	r1, r24
    460c:	4c f5       	brge	.+82     	; 0x4660 <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    460e:	6a a9       	ldd	r22, Y+50	; 0x32
    4610:	7b a9       	ldd	r23, Y+51	; 0x33
    4612:	8c a9       	ldd	r24, Y+52	; 0x34
    4614:	9d a9       	ldd	r25, Y+53	; 0x35
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	40 e2       	ldi	r20, 0x20	; 32
    461c:	51 e4       	ldi	r21, 0x41	; 65
    461e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	bc 01       	movw	r22, r24
    4628:	cd 01       	movw	r24, r26
    462a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462e:	dc 01       	movw	r26, r24
    4630:	cb 01       	movw	r24, r22
    4632:	9d a7       	std	Y+45, r25	; 0x2d
    4634:	8c a7       	std	Y+44, r24	; 0x2c
    4636:	0f c0       	rjmp	.+30     	; 0x4656 <LCD_init+0x2ee>
    4638:	88 ec       	ldi	r24, 0xC8	; 200
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	9b a7       	std	Y+43, r25	; 0x2b
    463e:	8a a7       	std	Y+42, r24	; 0x2a
    4640:	8a a5       	ldd	r24, Y+42	; 0x2a
    4642:	9b a5       	ldd	r25, Y+43	; 0x2b
    4644:	01 97       	sbiw	r24, 0x01	; 1
    4646:	f1 f7       	brne	.-4      	; 0x4644 <LCD_init+0x2dc>
    4648:	9b a7       	std	Y+43, r25	; 0x2b
    464a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    464c:	8c a5       	ldd	r24, Y+44	; 0x2c
    464e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4650:	01 97       	sbiw	r24, 0x01	; 1
    4652:	9d a7       	std	Y+45, r25	; 0x2d
    4654:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4656:	8c a5       	ldd	r24, Y+44	; 0x2c
    4658:	9d a5       	ldd	r25, Y+45	; 0x2d
    465a:	00 97       	sbiw	r24, 0x00	; 0
    465c:	69 f7       	brne	.-38     	; 0x4638 <LCD_init+0x2d0>
    465e:	24 c0       	rjmp	.+72     	; 0x46a8 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4660:	6e a5       	ldd	r22, Y+46	; 0x2e
    4662:	7f a5       	ldd	r23, Y+47	; 0x2f
    4664:	88 a9       	ldd	r24, Y+48	; 0x30
    4666:	99 a9       	ldd	r25, Y+49	; 0x31
    4668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	9d a7       	std	Y+45, r25	; 0x2d
    4672:	8c a7       	std	Y+44, r24	; 0x2c
    4674:	8c a5       	ldd	r24, Y+44	; 0x2c
    4676:	9d a5       	ldd	r25, Y+45	; 0x2d
    4678:	99 a7       	std	Y+41, r25	; 0x29
    467a:	88 a7       	std	Y+40, r24	; 0x28
    467c:	88 a5       	ldd	r24, Y+40	; 0x28
    467e:	99 a5       	ldd	r25, Y+41	; 0x29
    4680:	01 97       	sbiw	r24, 0x01	; 1
    4682:	f1 f7       	brne	.-4      	; 0x4680 <LCD_init+0x318>
    4684:	99 a7       	std	Y+41, r25	; 0x29
    4686:	88 a7       	std	Y+40, r24	; 0x28
    4688:	0f c0       	rjmp	.+30     	; 0x46a8 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    468a:	6f a9       	ldd	r22, Y+55	; 0x37
    468c:	78 ad       	ldd	r23, Y+56	; 0x38
    468e:	89 ad       	ldd	r24, Y+57	; 0x39
    4690:	9a ad       	ldd	r25, Y+58	; 0x3a
    4692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	8e ab       	std	Y+54, r24	; 0x36
    469c:	8e a9       	ldd	r24, Y+54	; 0x36
    469e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46a0:	8f a1       	ldd	r24, Y+39	; 0x27
    46a2:	8a 95       	dec	r24
    46a4:	f1 f7       	brne	.-4      	; 0x46a2 <LCD_init+0x33a>
    46a6:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    46a8:	8c e0       	ldi	r24, 0x0C	; 12
    46aa:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_write_cmd_4bit>
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	a8 e4       	ldi	r26, 0x48	; 72
    46b4:	b2 e4       	ldi	r27, 0x42	; 66
    46b6:	8b a3       	std	Y+35, r24	; 0x23
    46b8:	9c a3       	std	Y+36, r25	; 0x24
    46ba:	ad a3       	std	Y+37, r26	; 0x25
    46bc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    46be:	6b a1       	ldd	r22, Y+35	; 0x23
    46c0:	7c a1       	ldd	r23, Y+36	; 0x24
    46c2:	8d a1       	ldd	r24, Y+37	; 0x25
    46c4:	9e a1       	ldd	r25, Y+38	; 0x26
    46c6:	2b ea       	ldi	r18, 0xAB	; 171
    46c8:	3a ea       	ldi	r19, 0xAA	; 170
    46ca:	4a e2       	ldi	r20, 0x2A	; 42
    46cc:	50 e4       	ldi	r21, 0x40	; 64
    46ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	8f 8f       	std	Y+31, r24	; 0x1f
    46d8:	98 a3       	std	Y+32, r25	; 0x20
    46da:	a9 a3       	std	Y+33, r26	; 0x21
    46dc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    46de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    46e0:	78 a1       	ldd	r23, Y+32	; 0x20
    46e2:	89 a1       	ldd	r24, Y+33	; 0x21
    46e4:	9a a1       	ldd	r25, Y+34	; 0x22
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e8       	ldi	r20, 0x80	; 128
    46ec:	5f e3       	ldi	r21, 0x3F	; 63
    46ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46f2:	88 23       	and	r24, r24
    46f4:	1c f4       	brge	.+6      	; 0x46fc <LCD_init+0x394>
		__ticks = 1;
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	8e 8f       	std	Y+30, r24	; 0x1e
    46fa:	91 c0       	rjmp	.+290    	; 0x481e <LCD_init+0x4b6>
	else if (__tmp > 255)
    46fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    46fe:	78 a1       	ldd	r23, Y+32	; 0x20
    4700:	89 a1       	ldd	r24, Y+33	; 0x21
    4702:	9a a1       	ldd	r25, Y+34	; 0x22
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	4f e7       	ldi	r20, 0x7F	; 127
    470a:	53 e4       	ldi	r21, 0x43	; 67
    470c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4710:	18 16       	cp	r1, r24
    4712:	0c f0       	brlt	.+2      	; 0x4716 <LCD_init+0x3ae>
    4714:	7b c0       	rjmp	.+246    	; 0x480c <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    4716:	6b a1       	ldd	r22, Y+35	; 0x23
    4718:	7c a1       	ldd	r23, Y+36	; 0x24
    471a:	8d a1       	ldd	r24, Y+37	; 0x25
    471c:	9e a1       	ldd	r25, Y+38	; 0x26
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	4a e7       	ldi	r20, 0x7A	; 122
    4724:	54 e4       	ldi	r21, 0x44	; 68
    4726:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	8a 8f       	std	Y+26, r24	; 0x1a
    4730:	9b 8f       	std	Y+27, r25	; 0x1b
    4732:	ac 8f       	std	Y+28, r26	; 0x1c
    4734:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4736:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4738:	7b 8d       	ldd	r23, Y+27	; 0x1b
    473a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    473c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	4a ef       	ldi	r20, 0xFA	; 250
    4744:	54 e4       	ldi	r21, 0x44	; 68
    4746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474a:	dc 01       	movw	r26, r24
    474c:	cb 01       	movw	r24, r22
    474e:	8e 8b       	std	Y+22, r24	; 0x16
    4750:	9f 8b       	std	Y+23, r25	; 0x17
    4752:	a8 8f       	std	Y+24, r26	; 0x18
    4754:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4756:	6e 89       	ldd	r22, Y+22	; 0x16
    4758:	7f 89       	ldd	r23, Y+23	; 0x17
    475a:	88 8d       	ldd	r24, Y+24	; 0x18
    475c:	99 8d       	ldd	r25, Y+25	; 0x19
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e8       	ldi	r20, 0x80	; 128
    4764:	5f e3       	ldi	r21, 0x3F	; 63
    4766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    476a:	88 23       	and	r24, r24
    476c:	2c f4       	brge	.+10     	; 0x4778 <LCD_init+0x410>
		__ticks = 1;
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	9d 8b       	std	Y+21, r25	; 0x15
    4774:	8c 8b       	std	Y+20, r24	; 0x14
    4776:	3f c0       	rjmp	.+126    	; 0x47f6 <LCD_init+0x48e>
	else if (__tmp > 65535)
    4778:	6e 89       	ldd	r22, Y+22	; 0x16
    477a:	7f 89       	ldd	r23, Y+23	; 0x17
    477c:	88 8d       	ldd	r24, Y+24	; 0x18
    477e:	99 8d       	ldd	r25, Y+25	; 0x19
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	3f ef       	ldi	r19, 0xFF	; 255
    4784:	4f e7       	ldi	r20, 0x7F	; 127
    4786:	57 e4       	ldi	r21, 0x47	; 71
    4788:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    478c:	18 16       	cp	r1, r24
    478e:	4c f5       	brge	.+82     	; 0x47e2 <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4790:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4792:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4794:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4796:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	40 e2       	ldi	r20, 0x20	; 32
    479e:	51 e4       	ldi	r21, 0x41	; 65
    47a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	bc 01       	movw	r22, r24
    47aa:	cd 01       	movw	r24, r26
    47ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	9d 8b       	std	Y+21, r25	; 0x15
    47b6:	8c 8b       	std	Y+20, r24	; 0x14
    47b8:	0f c0       	rjmp	.+30     	; 0x47d8 <LCD_init+0x470>
    47ba:	88 ec       	ldi	r24, 0xC8	; 200
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	9b 8b       	std	Y+19, r25	; 0x13
    47c0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47c2:	8a 89       	ldd	r24, Y+18	; 0x12
    47c4:	9b 89       	ldd	r25, Y+19	; 0x13
    47c6:	01 97       	sbiw	r24, 0x01	; 1
    47c8:	f1 f7       	brne	.-4      	; 0x47c6 <LCD_init+0x45e>
    47ca:	9b 8b       	std	Y+19, r25	; 0x13
    47cc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ce:	8c 89       	ldd	r24, Y+20	; 0x14
    47d0:	9d 89       	ldd	r25, Y+21	; 0x15
    47d2:	01 97       	sbiw	r24, 0x01	; 1
    47d4:	9d 8b       	std	Y+21, r25	; 0x15
    47d6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47d8:	8c 89       	ldd	r24, Y+20	; 0x14
    47da:	9d 89       	ldd	r25, Y+21	; 0x15
    47dc:	00 97       	sbiw	r24, 0x00	; 0
    47de:	69 f7       	brne	.-38     	; 0x47ba <LCD_init+0x452>
    47e0:	24 c0       	rjmp	.+72     	; 0x482a <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47e2:	6e 89       	ldd	r22, Y+22	; 0x16
    47e4:	7f 89       	ldd	r23, Y+23	; 0x17
    47e6:	88 8d       	ldd	r24, Y+24	; 0x18
    47e8:	99 8d       	ldd	r25, Y+25	; 0x19
    47ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ee:	dc 01       	movw	r26, r24
    47f0:	cb 01       	movw	r24, r22
    47f2:	9d 8b       	std	Y+21, r25	; 0x15
    47f4:	8c 8b       	std	Y+20, r24	; 0x14
    47f6:	8c 89       	ldd	r24, Y+20	; 0x14
    47f8:	9d 89       	ldd	r25, Y+21	; 0x15
    47fa:	99 8b       	std	Y+17, r25	; 0x11
    47fc:	88 8b       	std	Y+16, r24	; 0x10
    47fe:	88 89       	ldd	r24, Y+16	; 0x10
    4800:	99 89       	ldd	r25, Y+17	; 0x11
    4802:	01 97       	sbiw	r24, 0x01	; 1
    4804:	f1 f7       	brne	.-4      	; 0x4802 <LCD_init+0x49a>
    4806:	99 8b       	std	Y+17, r25	; 0x11
    4808:	88 8b       	std	Y+16, r24	; 0x10
    480a:	0f c0       	rjmp	.+30     	; 0x482a <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    480c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    480e:	78 a1       	ldd	r23, Y+32	; 0x20
    4810:	89 a1       	ldd	r24, Y+33	; 0x21
    4812:	9a a1       	ldd	r25, Y+34	; 0x22
    4814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	8e 8f       	std	Y+30, r24	; 0x1e
    481e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4820:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4822:	8f 85       	ldd	r24, Y+15	; 0x0f
    4824:	8a 95       	dec	r24
    4826:	f1 f7       	brne	.-4      	; 0x4824 <LCD_init+0x4bc>
    4828:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_write_cmd_4bit>
    4830:	80 e0       	ldi	r24, 0x00	; 0
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	a0 e0       	ldi	r26, 0x00	; 0
    4836:	b0 e4       	ldi	r27, 0x40	; 64
    4838:	8b 87       	std	Y+11, r24	; 0x0b
    483a:	9c 87       	std	Y+12, r25	; 0x0c
    483c:	ad 87       	std	Y+13, r26	; 0x0d
    483e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4840:	6b 85       	ldd	r22, Y+11	; 0x0b
    4842:	7c 85       	ldd	r23, Y+12	; 0x0c
    4844:	8d 85       	ldd	r24, Y+13	; 0x0d
    4846:	9e 85       	ldd	r25, Y+14	; 0x0e
    4848:	20 e0       	ldi	r18, 0x00	; 0
    484a:	30 e0       	ldi	r19, 0x00	; 0
    484c:	4a ef       	ldi	r20, 0xFA	; 250
    484e:	54 e4       	ldi	r21, 0x44	; 68
    4850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4854:	dc 01       	movw	r26, r24
    4856:	cb 01       	movw	r24, r22
    4858:	8f 83       	std	Y+7, r24	; 0x07
    485a:	98 87       	std	Y+8, r25	; 0x08
    485c:	a9 87       	std	Y+9, r26	; 0x09
    485e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4860:	6f 81       	ldd	r22, Y+7	; 0x07
    4862:	78 85       	ldd	r23, Y+8	; 0x08
    4864:	89 85       	ldd	r24, Y+9	; 0x09
    4866:	9a 85       	ldd	r25, Y+10	; 0x0a
    4868:	20 e0       	ldi	r18, 0x00	; 0
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	40 e8       	ldi	r20, 0x80	; 128
    486e:	5f e3       	ldi	r21, 0x3F	; 63
    4870:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4874:	88 23       	and	r24, r24
    4876:	2c f4       	brge	.+10     	; 0x4882 <LCD_init+0x51a>
		__ticks = 1;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	9e 83       	std	Y+6, r25	; 0x06
    487e:	8d 83       	std	Y+5, r24	; 0x05
    4880:	3f c0       	rjmp	.+126    	; 0x4900 <LCD_init+0x598>
	else if (__tmp > 65535)
    4882:	6f 81       	ldd	r22, Y+7	; 0x07
    4884:	78 85       	ldd	r23, Y+8	; 0x08
    4886:	89 85       	ldd	r24, Y+9	; 0x09
    4888:	9a 85       	ldd	r25, Y+10	; 0x0a
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	3f ef       	ldi	r19, 0xFF	; 255
    488e:	4f e7       	ldi	r20, 0x7F	; 127
    4890:	57 e4       	ldi	r21, 0x47	; 71
    4892:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4896:	18 16       	cp	r1, r24
    4898:	4c f5       	brge	.+82     	; 0x48ec <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    489a:	6b 85       	ldd	r22, Y+11	; 0x0b
    489c:	7c 85       	ldd	r23, Y+12	; 0x0c
    489e:	8d 85       	ldd	r24, Y+13	; 0x0d
    48a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	40 e2       	ldi	r20, 0x20	; 32
    48a8:	51 e4       	ldi	r21, 0x41	; 65
    48aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	bc 01       	movw	r22, r24
    48b4:	cd 01       	movw	r24, r26
    48b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ba:	dc 01       	movw	r26, r24
    48bc:	cb 01       	movw	r24, r22
    48be:	9e 83       	std	Y+6, r25	; 0x06
    48c0:	8d 83       	std	Y+5, r24	; 0x05
    48c2:	0f c0       	rjmp	.+30     	; 0x48e2 <LCD_init+0x57a>
    48c4:	88 ec       	ldi	r24, 0xC8	; 200
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	9c 83       	std	Y+4, r25	; 0x04
    48ca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    48cc:	8b 81       	ldd	r24, Y+3	; 0x03
    48ce:	9c 81       	ldd	r25, Y+4	; 0x04
    48d0:	01 97       	sbiw	r24, 0x01	; 1
    48d2:	f1 f7       	brne	.-4      	; 0x48d0 <LCD_init+0x568>
    48d4:	9c 83       	std	Y+4, r25	; 0x04
    48d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d8:	8d 81       	ldd	r24, Y+5	; 0x05
    48da:	9e 81       	ldd	r25, Y+6	; 0x06
    48dc:	01 97       	sbiw	r24, 0x01	; 1
    48de:	9e 83       	std	Y+6, r25	; 0x06
    48e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48e2:	8d 81       	ldd	r24, Y+5	; 0x05
    48e4:	9e 81       	ldd	r25, Y+6	; 0x06
    48e6:	00 97       	sbiw	r24, 0x00	; 0
    48e8:	69 f7       	brne	.-38     	; 0x48c4 <LCD_init+0x55c>
    48ea:	14 c0       	rjmp	.+40     	; 0x4914 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ec:	6f 81       	ldd	r22, Y+7	; 0x07
    48ee:	78 85       	ldd	r23, Y+8	; 0x08
    48f0:	89 85       	ldd	r24, Y+9	; 0x09
    48f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	9e 83       	std	Y+6, r25	; 0x06
    48fe:	8d 83       	std	Y+5, r24	; 0x05
    4900:	8d 81       	ldd	r24, Y+5	; 0x05
    4902:	9e 81       	ldd	r25, Y+6	; 0x06
    4904:	9a 83       	std	Y+2, r25	; 0x02
    4906:	89 83       	std	Y+1, r24	; 0x01
    4908:	89 81       	ldd	r24, Y+1	; 0x01
    490a:	9a 81       	ldd	r25, Y+2	; 0x02
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	f1 f7       	brne	.-4      	; 0x490c <LCD_init+0x5a4>
    4910:	9a 83       	std	Y+2, r25	; 0x02
    4912:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    4914:	c4 5b       	subi	r28, 0xB4	; 180
    4916:	df 4f       	sbci	r29, 0xFF	; 255
    4918:	0f b6       	in	r0, 0x3f	; 63
    491a:	f8 94       	cli
    491c:	de bf       	out	0x3e, r29	; 62
    491e:	0f be       	out	0x3f, r0	; 63
    4920:	cd bf       	out	0x3d, r28	; 61
    4922:	cf 91       	pop	r28
    4924:	df 91       	pop	r29
    4926:	1f 91       	pop	r17
    4928:	0f 91       	pop	r16
    492a:	08 95       	ret

0000492c <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    492c:	df 93       	push	r29
    492e:	cf 93       	push	r28
    4930:	cd b7       	in	r28, 0x3d	; 61
    4932:	de b7       	in	r29, 0x3e	; 62
    4934:	6b 97       	sbiw	r28, 0x1b	; 27
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	8a 8f       	std	Y+26, r24	; 0x1a
    4942:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    4944:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4946:	88 2f       	mov	r24, r24
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	02 96       	adiw	r24, 0x02	; 2
    494c:	00 24       	eor	r0, r0
    494e:	96 95       	lsr	r25
    4950:	87 95       	ror	r24
    4952:	07 94       	ror	r0
    4954:	96 95       	lsr	r25
    4956:	87 95       	ror	r24
    4958:	07 94       	ror	r0
    495a:	98 2f       	mov	r25, r24
    495c:	80 2d       	mov	r24, r0
    495e:	98 2f       	mov	r25, r24
    4960:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4962:	89 0f       	add	r24, r25
    4964:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    4966:	89 8d       	ldd	r24, Y+25	; 0x19
    4968:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_write_cmd_4bit>
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	a8 e4       	ldi	r26, 0x48	; 72
    4972:	b2 e4       	ldi	r27, 0x42	; 66
    4974:	8d 8b       	std	Y+21, r24	; 0x15
    4976:	9e 8b       	std	Y+22, r25	; 0x16
    4978:	af 8b       	std	Y+23, r26	; 0x17
    497a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    497c:	6d 89       	ldd	r22, Y+21	; 0x15
    497e:	7e 89       	ldd	r23, Y+22	; 0x16
    4980:	8f 89       	ldd	r24, Y+23	; 0x17
    4982:	98 8d       	ldd	r25, Y+24	; 0x18
    4984:	2b ea       	ldi	r18, 0xAB	; 171
    4986:	3a ea       	ldi	r19, 0xAA	; 170
    4988:	4a e2       	ldi	r20, 0x2A	; 42
    498a:	50 e4       	ldi	r21, 0x40	; 64
    498c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4990:	dc 01       	movw	r26, r24
    4992:	cb 01       	movw	r24, r22
    4994:	89 8b       	std	Y+17, r24	; 0x11
    4996:	9a 8b       	std	Y+18, r25	; 0x12
    4998:	ab 8b       	std	Y+19, r26	; 0x13
    499a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    499c:	69 89       	ldd	r22, Y+17	; 0x11
    499e:	7a 89       	ldd	r23, Y+18	; 0x12
    49a0:	8b 89       	ldd	r24, Y+19	; 0x13
    49a2:	9c 89       	ldd	r25, Y+20	; 0x14
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	40 e8       	ldi	r20, 0x80	; 128
    49aa:	5f e3       	ldi	r21, 0x3F	; 63
    49ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49b0:	88 23       	and	r24, r24
    49b2:	1c f4       	brge	.+6      	; 0x49ba <LCD_set_cursor+0x8e>
		__ticks = 1;
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	88 8b       	std	Y+16, r24	; 0x10
    49b8:	91 c0       	rjmp	.+290    	; 0x4adc <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    49ba:	69 89       	ldd	r22, Y+17	; 0x11
    49bc:	7a 89       	ldd	r23, Y+18	; 0x12
    49be:	8b 89       	ldd	r24, Y+19	; 0x13
    49c0:	9c 89       	ldd	r25, Y+20	; 0x14
    49c2:	20 e0       	ldi	r18, 0x00	; 0
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	4f e7       	ldi	r20, 0x7F	; 127
    49c8:	53 e4       	ldi	r21, 0x43	; 67
    49ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49ce:	18 16       	cp	r1, r24
    49d0:	0c f0       	brlt	.+2      	; 0x49d4 <LCD_set_cursor+0xa8>
    49d2:	7b c0       	rjmp	.+246    	; 0x4aca <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    49d4:	6d 89       	ldd	r22, Y+21	; 0x15
    49d6:	7e 89       	ldd	r23, Y+22	; 0x16
    49d8:	8f 89       	ldd	r24, Y+23	; 0x17
    49da:	98 8d       	ldd	r25, Y+24	; 0x18
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	4a e7       	ldi	r20, 0x7A	; 122
    49e2:	54 e4       	ldi	r21, 0x44	; 68
    49e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    49e8:	dc 01       	movw	r26, r24
    49ea:	cb 01       	movw	r24, r22
    49ec:	8c 87       	std	Y+12, r24	; 0x0c
    49ee:	9d 87       	std	Y+13, r25	; 0x0d
    49f0:	ae 87       	std	Y+14, r26	; 0x0e
    49f2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    49f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    49f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    49fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	4a ef       	ldi	r20, 0xFA	; 250
    4a02:	54 e4       	ldi	r21, 0x44	; 68
    4a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a08:	dc 01       	movw	r26, r24
    4a0a:	cb 01       	movw	r24, r22
    4a0c:	88 87       	std	Y+8, r24	; 0x08
    4a0e:	99 87       	std	Y+9, r25	; 0x09
    4a10:	aa 87       	std	Y+10, r26	; 0x0a
    4a12:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4a14:	68 85       	ldd	r22, Y+8	; 0x08
    4a16:	79 85       	ldd	r23, Y+9	; 0x09
    4a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	40 e8       	ldi	r20, 0x80	; 128
    4a22:	5f e3       	ldi	r21, 0x3F	; 63
    4a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a28:	88 23       	and	r24, r24
    4a2a:	2c f4       	brge	.+10     	; 0x4a36 <LCD_set_cursor+0x10a>
		__ticks = 1;
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	9f 83       	std	Y+7, r25	; 0x07
    4a32:	8e 83       	std	Y+6, r24	; 0x06
    4a34:	3f c0       	rjmp	.+126    	; 0x4ab4 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4a36:	68 85       	ldd	r22, Y+8	; 0x08
    4a38:	79 85       	ldd	r23, Y+9	; 0x09
    4a3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	3f ef       	ldi	r19, 0xFF	; 255
    4a42:	4f e7       	ldi	r20, 0x7F	; 127
    4a44:	57 e4       	ldi	r21, 0x47	; 71
    4a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a4a:	18 16       	cp	r1, r24
    4a4c:	4c f5       	brge	.+82     	; 0x4aa0 <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a50:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a52:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a54:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	30 e0       	ldi	r19, 0x00	; 0
    4a5a:	40 e2       	ldi	r20, 0x20	; 32
    4a5c:	51 e4       	ldi	r21, 0x41	; 65
    4a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	bc 01       	movw	r22, r24
    4a68:	cd 01       	movw	r24, r26
    4a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	9f 83       	std	Y+7, r25	; 0x07
    4a74:	8e 83       	std	Y+6, r24	; 0x06
    4a76:	0f c0       	rjmp	.+30     	; 0x4a96 <LCD_set_cursor+0x16a>
    4a78:	88 ec       	ldi	r24, 0xC8	; 200
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	9d 83       	std	Y+5, r25	; 0x05
    4a7e:	8c 83       	std	Y+4, r24	; 0x04
    4a80:	8c 81       	ldd	r24, Y+4	; 0x04
    4a82:	9d 81       	ldd	r25, Y+5	; 0x05
    4a84:	01 97       	sbiw	r24, 0x01	; 1
    4a86:	f1 f7       	brne	.-4      	; 0x4a84 <LCD_set_cursor+0x158>
    4a88:	9d 83       	std	Y+5, r25	; 0x05
    4a8a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a90:	01 97       	sbiw	r24, 0x01	; 1
    4a92:	9f 83       	std	Y+7, r25	; 0x07
    4a94:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a96:	8e 81       	ldd	r24, Y+6	; 0x06
    4a98:	9f 81       	ldd	r25, Y+7	; 0x07
    4a9a:	00 97       	sbiw	r24, 0x00	; 0
    4a9c:	69 f7       	brne	.-38     	; 0x4a78 <LCD_set_cursor+0x14c>
    4a9e:	24 c0       	rjmp	.+72     	; 0x4ae8 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aa0:	68 85       	ldd	r22, Y+8	; 0x08
    4aa2:	79 85       	ldd	r23, Y+9	; 0x09
    4aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aac:	dc 01       	movw	r26, r24
    4aae:	cb 01       	movw	r24, r22
    4ab0:	9f 83       	std	Y+7, r25	; 0x07
    4ab2:	8e 83       	std	Y+6, r24	; 0x06
    4ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ab6:	9f 81       	ldd	r25, Y+7	; 0x07
    4ab8:	9b 83       	std	Y+3, r25	; 0x03
    4aba:	8a 83       	std	Y+2, r24	; 0x02
    4abc:	8a 81       	ldd	r24, Y+2	; 0x02
    4abe:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac0:	01 97       	sbiw	r24, 0x01	; 1
    4ac2:	f1 f7       	brne	.-4      	; 0x4ac0 <LCD_set_cursor+0x194>
    4ac4:	9b 83       	std	Y+3, r25	; 0x03
    4ac6:	8a 83       	std	Y+2, r24	; 0x02
    4ac8:	0f c0       	rjmp	.+30     	; 0x4ae8 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4aca:	69 89       	ldd	r22, Y+17	; 0x11
    4acc:	7a 89       	ldd	r23, Y+18	; 0x12
    4ace:	8b 89       	ldd	r24, Y+19	; 0x13
    4ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	88 8b       	std	Y+16, r24	; 0x10
    4adc:	88 89       	ldd	r24, Y+16	; 0x10
    4ade:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ae0:	89 81       	ldd	r24, Y+1	; 0x01
    4ae2:	8a 95       	dec	r24
    4ae4:	f1 f7       	brne	.-4      	; 0x4ae2 <LCD_set_cursor+0x1b6>
    4ae6:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    4ae8:	6b 96       	adiw	r28, 0x1b	; 27
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	de bf       	out	0x3e, r29	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	cd bf       	out	0x3d, r28	; 61
    4af4:	cf 91       	pop	r28
    4af6:	df 91       	pop	r29
    4af8:	08 95       	ret

00004afa <LCD_clear>:

void LCD_clear(void){
    4afa:	df 93       	push	r29
    4afc:	cf 93       	push	r28
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	6c 97       	sbiw	r28, 0x1c	; 28
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	de bf       	out	0x3e, r29	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    4b0e:	81 e0       	ldi	r24, 0x01	; 1
    4b10:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_write_cmd_4bit>
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	a0 e0       	ldi	r26, 0x00	; 0
    4b1a:	b0 e4       	ldi	r27, 0x40	; 64
    4b1c:	89 8f       	std	Y+25, r24	; 0x19
    4b1e:	9a 8f       	std	Y+26, r25	; 0x1a
    4b20:	ab 8f       	std	Y+27, r26	; 0x1b
    4b22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b24:	69 8d       	ldd	r22, Y+25	; 0x19
    4b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	4a ef       	ldi	r20, 0xFA	; 250
    4b32:	54 e4       	ldi	r21, 0x44	; 68
    4b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b38:	dc 01       	movw	r26, r24
    4b3a:	cb 01       	movw	r24, r22
    4b3c:	8d 8b       	std	Y+21, r24	; 0x15
    4b3e:	9e 8b       	std	Y+22, r25	; 0x16
    4b40:	af 8b       	std	Y+23, r26	; 0x17
    4b42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b44:	6d 89       	ldd	r22, Y+21	; 0x15
    4b46:	7e 89       	ldd	r23, Y+22	; 0x16
    4b48:	8f 89       	ldd	r24, Y+23	; 0x17
    4b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e8       	ldi	r20, 0x80	; 128
    4b52:	5f e3       	ldi	r21, 0x3F	; 63
    4b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b58:	88 23       	and	r24, r24
    4b5a:	2c f4       	brge	.+10     	; 0x4b66 <LCD_clear+0x6c>
		__ticks = 1;
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	9c 8b       	std	Y+20, r25	; 0x14
    4b62:	8b 8b       	std	Y+19, r24	; 0x13
    4b64:	3f c0       	rjmp	.+126    	; 0x4be4 <LCD_clear+0xea>
	else if (__tmp > 65535)
    4b66:	6d 89       	ldd	r22, Y+21	; 0x15
    4b68:	7e 89       	ldd	r23, Y+22	; 0x16
    4b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b6e:	20 e0       	ldi	r18, 0x00	; 0
    4b70:	3f ef       	ldi	r19, 0xFF	; 255
    4b72:	4f e7       	ldi	r20, 0x7F	; 127
    4b74:	57 e4       	ldi	r21, 0x47	; 71
    4b76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b7a:	18 16       	cp	r1, r24
    4b7c:	4c f5       	brge	.+82     	; 0x4bd0 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7e:	69 8d       	ldd	r22, Y+25	; 0x19
    4b80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b86:	20 e0       	ldi	r18, 0x00	; 0
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e2       	ldi	r20, 0x20	; 32
    4b8c:	51 e4       	ldi	r21, 0x41	; 65
    4b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	bc 01       	movw	r22, r24
    4b98:	cd 01       	movw	r24, r26
    4b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	9c 8b       	std	Y+20, r25	; 0x14
    4ba4:	8b 8b       	std	Y+19, r24	; 0x13
    4ba6:	0f c0       	rjmp	.+30     	; 0x4bc6 <LCD_clear+0xcc>
    4ba8:	88 ec       	ldi	r24, 0xC8	; 200
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	9a 8b       	std	Y+18, r25	; 0x12
    4bae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4bb0:	89 89       	ldd	r24, Y+17	; 0x11
    4bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    4bb4:	01 97       	sbiw	r24, 0x01	; 1
    4bb6:	f1 f7       	brne	.-4      	; 0x4bb4 <LCD_clear+0xba>
    4bb8:	9a 8b       	std	Y+18, r25	; 0x12
    4bba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    4bc0:	01 97       	sbiw	r24, 0x01	; 1
    4bc2:	9c 8b       	std	Y+20, r25	; 0x14
    4bc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    4bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    4bca:	00 97       	sbiw	r24, 0x00	; 0
    4bcc:	69 f7       	brne	.-38     	; 0x4ba8 <LCD_clear+0xae>
    4bce:	14 c0       	rjmp	.+40     	; 0x4bf8 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    4bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    4bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	9c 8b       	std	Y+20, r25	; 0x14
    4be2:	8b 8b       	std	Y+19, r24	; 0x13
    4be4:	8b 89       	ldd	r24, Y+19	; 0x13
    4be6:	9c 89       	ldd	r25, Y+20	; 0x14
    4be8:	98 8b       	std	Y+16, r25	; 0x10
    4bea:	8f 87       	std	Y+15, r24	; 0x0f
    4bec:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bee:	98 89       	ldd	r25, Y+16	; 0x10
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <LCD_clear+0xf6>
    4bf4:	98 8b       	std	Y+16, r25	; 0x10
    4bf6:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    4bf8:	82 e0       	ldi	r24, 0x02	; 2
    4bfa:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_write_cmd_4bit>
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	a0 e0       	ldi	r26, 0x00	; 0
    4c04:	b0 e4       	ldi	r27, 0x40	; 64
    4c06:	8b 87       	std	Y+11, r24	; 0x0b
    4c08:	9c 87       	std	Y+12, r25	; 0x0c
    4c0a:	ad 87       	std	Y+13, r26	; 0x0d
    4c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	4a ef       	ldi	r20, 0xFA	; 250
    4c1c:	54 e4       	ldi	r21, 0x44	; 68
    4c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	8f 83       	std	Y+7, r24	; 0x07
    4c28:	98 87       	std	Y+8, r25	; 0x08
    4c2a:	a9 87       	std	Y+9, r26	; 0x09
    4c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c30:	78 85       	ldd	r23, Y+8	; 0x08
    4c32:	89 85       	ldd	r24, Y+9	; 0x09
    4c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	40 e8       	ldi	r20, 0x80	; 128
    4c3c:	5f e3       	ldi	r21, 0x3F	; 63
    4c3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c42:	88 23       	and	r24, r24
    4c44:	2c f4       	brge	.+10     	; 0x4c50 <LCD_clear+0x156>
		__ticks = 1;
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	9e 83       	std	Y+6, r25	; 0x06
    4c4c:	8d 83       	std	Y+5, r24	; 0x05
    4c4e:	3f c0       	rjmp	.+126    	; 0x4cce <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    4c50:	6f 81       	ldd	r22, Y+7	; 0x07
    4c52:	78 85       	ldd	r23, Y+8	; 0x08
    4c54:	89 85       	ldd	r24, Y+9	; 0x09
    4c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	3f ef       	ldi	r19, 0xFF	; 255
    4c5c:	4f e7       	ldi	r20, 0x7F	; 127
    4c5e:	57 e4       	ldi	r21, 0x47	; 71
    4c60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c64:	18 16       	cp	r1, r24
    4c66:	4c f5       	brge	.+82     	; 0x4cba <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	40 e2       	ldi	r20, 0x20	; 32
    4c76:	51 e4       	ldi	r21, 0x41	; 65
    4c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7c:	dc 01       	movw	r26, r24
    4c7e:	cb 01       	movw	r24, r22
    4c80:	bc 01       	movw	r22, r24
    4c82:	cd 01       	movw	r24, r26
    4c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	9e 83       	std	Y+6, r25	; 0x06
    4c8e:	8d 83       	std	Y+5, r24	; 0x05
    4c90:	0f c0       	rjmp	.+30     	; 0x4cb0 <LCD_clear+0x1b6>
    4c92:	88 ec       	ldi	r24, 0xC8	; 200
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	9c 83       	std	Y+4, r25	; 0x04
    4c98:	8b 83       	std	Y+3, r24	; 0x03
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <LCD_clear+0x1a4>
    4ca2:	9c 83       	std	Y+4, r25	; 0x04
    4ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    4caa:	01 97       	sbiw	r24, 0x01	; 1
    4cac:	9e 83       	std	Y+6, r25	; 0x06
    4cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	69 f7       	brne	.-38     	; 0x4c92 <LCD_clear+0x198>
    4cb8:	14 c0       	rjmp	.+40     	; 0x4ce2 <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cba:	6f 81       	ldd	r22, Y+7	; 0x07
    4cbc:	78 85       	ldd	r23, Y+8	; 0x08
    4cbe:	89 85       	ldd	r24, Y+9	; 0x09
    4cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	9e 83       	std	Y+6, r25	; 0x06
    4ccc:	8d 83       	std	Y+5, r24	; 0x05
    4cce:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd2:	9a 83       	std	Y+2, r25	; 0x02
    4cd4:	89 83       	std	Y+1, r24	; 0x01
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
    4cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cda:	01 97       	sbiw	r24, 0x01	; 1
    4cdc:	f1 f7       	brne	.-4      	; 0x4cda <LCD_clear+0x1e0>
    4cde:	9a 83       	std	Y+2, r25	; 0x02
    4ce0:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    4ce2:	6c 96       	adiw	r28, 0x1c	; 28
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	cf 91       	pop	r28
    4cf0:	df 91       	pop	r29
    4cf2:	08 95       	ret

00004cf4 <LCD_off>:

void LCD_off(void ){
    4cf4:	df 93       	push	r29
    4cf6:	cf 93       	push	r28
    4cf8:	cd b7       	in	r28, 0x3d	; 61
    4cfa:	de b7       	in	r29, 0x3e	; 62
    4cfc:	2e 97       	sbiw	r28, 0x0e	; 14
    4cfe:	0f b6       	in	r0, 0x3f	; 63
    4d00:	f8 94       	cli
    4d02:	de bf       	out	0x3e, r29	; 62
    4d04:	0f be       	out	0x3f, r0	; 63
    4d06:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    4d08:	88 e0       	ldi	r24, 0x08	; 8
    4d0a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_write_cmd_4bit>
    4d0e:	80 e0       	ldi	r24, 0x00	; 0
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	a8 e4       	ldi	r26, 0x48	; 72
    4d14:	b2 e4       	ldi	r27, 0x42	; 66
    4d16:	8b 87       	std	Y+11, r24	; 0x0b
    4d18:	9c 87       	std	Y+12, r25	; 0x0c
    4d1a:	ad 87       	std	Y+13, r26	; 0x0d
    4d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	4a ef       	ldi	r20, 0xFA	; 250
    4d2c:	54 e4       	ldi	r21, 0x44	; 68
    4d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	8f 83       	std	Y+7, r24	; 0x07
    4d38:	98 87       	std	Y+8, r25	; 0x08
    4d3a:	a9 87       	std	Y+9, r26	; 0x09
    4d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    4d40:	78 85       	ldd	r23, Y+8	; 0x08
    4d42:	89 85       	ldd	r24, Y+9	; 0x09
    4d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	40 e8       	ldi	r20, 0x80	; 128
    4d4c:	5f e3       	ldi	r21, 0x3F	; 63
    4d4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d52:	88 23       	and	r24, r24
    4d54:	2c f4       	brge	.+10     	; 0x4d60 <LCD_off+0x6c>
		__ticks = 1;
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	9e 83       	std	Y+6, r25	; 0x06
    4d5c:	8d 83       	std	Y+5, r24	; 0x05
    4d5e:	3f c0       	rjmp	.+126    	; 0x4dde <LCD_off+0xea>
	else if (__tmp > 65535)
    4d60:	6f 81       	ldd	r22, Y+7	; 0x07
    4d62:	78 85       	ldd	r23, Y+8	; 0x08
    4d64:	89 85       	ldd	r24, Y+9	; 0x09
    4d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	3f ef       	ldi	r19, 0xFF	; 255
    4d6c:	4f e7       	ldi	r20, 0x7F	; 127
    4d6e:	57 e4       	ldi	r21, 0x47	; 71
    4d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d74:	18 16       	cp	r1, r24
    4d76:	4c f5       	brge	.+82     	; 0x4dca <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	40 e2       	ldi	r20, 0x20	; 32
    4d86:	51 e4       	ldi	r21, 0x41	; 65
    4d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d8c:	dc 01       	movw	r26, r24
    4d8e:	cb 01       	movw	r24, r22
    4d90:	bc 01       	movw	r22, r24
    4d92:	cd 01       	movw	r24, r26
    4d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d98:	dc 01       	movw	r26, r24
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	9e 83       	std	Y+6, r25	; 0x06
    4d9e:	8d 83       	std	Y+5, r24	; 0x05
    4da0:	0f c0       	rjmp	.+30     	; 0x4dc0 <LCD_off+0xcc>
    4da2:	88 ec       	ldi	r24, 0xC8	; 200
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	9c 83       	std	Y+4, r25	; 0x04
    4da8:	8b 83       	std	Y+3, r24	; 0x03
    4daa:	8b 81       	ldd	r24, Y+3	; 0x03
    4dac:	9c 81       	ldd	r25, Y+4	; 0x04
    4dae:	01 97       	sbiw	r24, 0x01	; 1
    4db0:	f1 f7       	brne	.-4      	; 0x4dae <LCD_off+0xba>
    4db2:	9c 83       	std	Y+4, r25	; 0x04
    4db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4db6:	8d 81       	ldd	r24, Y+5	; 0x05
    4db8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dba:	01 97       	sbiw	r24, 0x01	; 1
    4dbc:	9e 83       	std	Y+6, r25	; 0x06
    4dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc4:	00 97       	sbiw	r24, 0x00	; 0
    4dc6:	69 f7       	brne	.-38     	; 0x4da2 <LCD_off+0xae>
    4dc8:	14 c0       	rjmp	.+40     	; 0x4df2 <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dca:	6f 81       	ldd	r22, Y+7	; 0x07
    4dcc:	78 85       	ldd	r23, Y+8	; 0x08
    4dce:	89 85       	ldd	r24, Y+9	; 0x09
    4dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	9e 83       	std	Y+6, r25	; 0x06
    4ddc:	8d 83       	std	Y+5, r24	; 0x05
    4dde:	8d 81       	ldd	r24, Y+5	; 0x05
    4de0:	9e 81       	ldd	r25, Y+6	; 0x06
    4de2:	9a 83       	std	Y+2, r25	; 0x02
    4de4:	89 83       	std	Y+1, r24	; 0x01
    4de6:	89 81       	ldd	r24, Y+1	; 0x01
    4de8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dea:	01 97       	sbiw	r24, 0x01	; 1
    4dec:	f1 f7       	brne	.-4      	; 0x4dea <LCD_off+0xf6>
    4dee:	9a 83       	std	Y+2, r25	; 0x02
    4df0:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    4df2:	2e 96       	adiw	r28, 0x0e	; 14
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	f8 94       	cli
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	cf 91       	pop	r28
    4e00:	df 91       	pop	r29
    4e02:	08 95       	ret

00004e04 <LCD_on>:

void LCD_on(void ){
    4e04:	df 93       	push	r29
    4e06:	cf 93       	push	r28
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	68 97       	sbiw	r28, 0x18	; 24
    4e0e:	0f b6       	in	r0, 0x3f	; 63
    4e10:	f8 94       	cli
    4e12:	de bf       	out	0x3e, r29	; 62
    4e14:	0f be       	out	0x3f, r0	; 63
    4e16:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    4e18:	8c e0       	ldi	r24, 0x0C	; 12
    4e1a:	0e 94 da 11 	call	0x23b4	; 0x23b4 <LCD_write_cmd_4bit>
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	a8 e4       	ldi	r26, 0x48	; 72
    4e24:	b2 e4       	ldi	r27, 0x42	; 66
    4e26:	8d 8b       	std	Y+21, r24	; 0x15
    4e28:	9e 8b       	std	Y+22, r25	; 0x16
    4e2a:	af 8b       	std	Y+23, r26	; 0x17
    4e2c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4e30:	7e 89       	ldd	r23, Y+22	; 0x16
    4e32:	8f 89       	ldd	r24, Y+23	; 0x17
    4e34:	98 8d       	ldd	r25, Y+24	; 0x18
    4e36:	2b ea       	ldi	r18, 0xAB	; 171
    4e38:	3a ea       	ldi	r19, 0xAA	; 170
    4e3a:	4a e2       	ldi	r20, 0x2A	; 42
    4e3c:	50 e4       	ldi	r21, 0x40	; 64
    4e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	89 8b       	std	Y+17, r24	; 0x11
    4e48:	9a 8b       	std	Y+18, r25	; 0x12
    4e4a:	ab 8b       	std	Y+19, r26	; 0x13
    4e4c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4e4e:	69 89       	ldd	r22, Y+17	; 0x11
    4e50:	7a 89       	ldd	r23, Y+18	; 0x12
    4e52:	8b 89       	ldd	r24, Y+19	; 0x13
    4e54:	9c 89       	ldd	r25, Y+20	; 0x14
    4e56:	20 e0       	ldi	r18, 0x00	; 0
    4e58:	30 e0       	ldi	r19, 0x00	; 0
    4e5a:	40 e8       	ldi	r20, 0x80	; 128
    4e5c:	5f e3       	ldi	r21, 0x3F	; 63
    4e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e62:	88 23       	and	r24, r24
    4e64:	1c f4       	brge	.+6      	; 0x4e6c <LCD_on+0x68>
		__ticks = 1;
    4e66:	81 e0       	ldi	r24, 0x01	; 1
    4e68:	88 8b       	std	Y+16, r24	; 0x10
    4e6a:	91 c0       	rjmp	.+290    	; 0x4f8e <LCD_on+0x18a>
	else if (__tmp > 255)
    4e6c:	69 89       	ldd	r22, Y+17	; 0x11
    4e6e:	7a 89       	ldd	r23, Y+18	; 0x12
    4e70:	8b 89       	ldd	r24, Y+19	; 0x13
    4e72:	9c 89       	ldd	r25, Y+20	; 0x14
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	4f e7       	ldi	r20, 0x7F	; 127
    4e7a:	53 e4       	ldi	r21, 0x43	; 67
    4e7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e80:	18 16       	cp	r1, r24
    4e82:	0c f0       	brlt	.+2      	; 0x4e86 <LCD_on+0x82>
    4e84:	7b c0       	rjmp	.+246    	; 0x4f7c <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    4e86:	6d 89       	ldd	r22, Y+21	; 0x15
    4e88:	7e 89       	ldd	r23, Y+22	; 0x16
    4e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	4a e7       	ldi	r20, 0x7A	; 122
    4e94:	54 e4       	ldi	r21, 0x44	; 68
    4e96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	8c 87       	std	Y+12, r24	; 0x0c
    4ea0:	9d 87       	std	Y+13, r25	; 0x0d
    4ea2:	ae 87       	std	Y+14, r26	; 0x0e
    4ea4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ea6:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ea8:	7d 85       	ldd	r23, Y+13	; 0x0d
    4eaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    4eac:	9f 85       	ldd	r25, Y+15	; 0x0f
    4eae:	20 e0       	ldi	r18, 0x00	; 0
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	4a ef       	ldi	r20, 0xFA	; 250
    4eb4:	54 e4       	ldi	r21, 0x44	; 68
    4eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eba:	dc 01       	movw	r26, r24
    4ebc:	cb 01       	movw	r24, r22
    4ebe:	88 87       	std	Y+8, r24	; 0x08
    4ec0:	99 87       	std	Y+9, r25	; 0x09
    4ec2:	aa 87       	std	Y+10, r26	; 0x0a
    4ec4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4ec6:	68 85       	ldd	r22, Y+8	; 0x08
    4ec8:	79 85       	ldd	r23, Y+9	; 0x09
    4eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ecc:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ece:	20 e0       	ldi	r18, 0x00	; 0
    4ed0:	30 e0       	ldi	r19, 0x00	; 0
    4ed2:	40 e8       	ldi	r20, 0x80	; 128
    4ed4:	5f e3       	ldi	r21, 0x3F	; 63
    4ed6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eda:	88 23       	and	r24, r24
    4edc:	2c f4       	brge	.+10     	; 0x4ee8 <LCD_on+0xe4>
		__ticks = 1;
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	9f 83       	std	Y+7, r25	; 0x07
    4ee4:	8e 83       	std	Y+6, r24	; 0x06
    4ee6:	3f c0       	rjmp	.+126    	; 0x4f66 <LCD_on+0x162>
	else if (__tmp > 65535)
    4ee8:	68 85       	ldd	r22, Y+8	; 0x08
    4eea:	79 85       	ldd	r23, Y+9	; 0x09
    4eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    4eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ef0:	20 e0       	ldi	r18, 0x00	; 0
    4ef2:	3f ef       	ldi	r19, 0xFF	; 255
    4ef4:	4f e7       	ldi	r20, 0x7F	; 127
    4ef6:	57 e4       	ldi	r21, 0x47	; 71
    4ef8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4efc:	18 16       	cp	r1, r24
    4efe:	4c f5       	brge	.+82     	; 0x4f52 <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f00:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f02:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f04:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f06:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f08:	20 e0       	ldi	r18, 0x00	; 0
    4f0a:	30 e0       	ldi	r19, 0x00	; 0
    4f0c:	40 e2       	ldi	r20, 0x20	; 32
    4f0e:	51 e4       	ldi	r21, 0x41	; 65
    4f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	bc 01       	movw	r22, r24
    4f1a:	cd 01       	movw	r24, r26
    4f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f20:	dc 01       	movw	r26, r24
    4f22:	cb 01       	movw	r24, r22
    4f24:	9f 83       	std	Y+7, r25	; 0x07
    4f26:	8e 83       	std	Y+6, r24	; 0x06
    4f28:	0f c0       	rjmp	.+30     	; 0x4f48 <LCD_on+0x144>
    4f2a:	88 ec       	ldi	r24, 0xC8	; 200
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	9d 83       	std	Y+5, r25	; 0x05
    4f30:	8c 83       	std	Y+4, r24	; 0x04
    4f32:	8c 81       	ldd	r24, Y+4	; 0x04
    4f34:	9d 81       	ldd	r25, Y+5	; 0x05
    4f36:	01 97       	sbiw	r24, 0x01	; 1
    4f38:	f1 f7       	brne	.-4      	; 0x4f36 <LCD_on+0x132>
    4f3a:	9d 83       	std	Y+5, r25	; 0x05
    4f3c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f40:	9f 81       	ldd	r25, Y+7	; 0x07
    4f42:	01 97       	sbiw	r24, 0x01	; 1
    4f44:	9f 83       	std	Y+7, r25	; 0x07
    4f46:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f48:	8e 81       	ldd	r24, Y+6	; 0x06
    4f4a:	9f 81       	ldd	r25, Y+7	; 0x07
    4f4c:	00 97       	sbiw	r24, 0x00	; 0
    4f4e:	69 f7       	brne	.-38     	; 0x4f2a <LCD_on+0x126>
    4f50:	24 c0       	rjmp	.+72     	; 0x4f9a <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f52:	68 85       	ldd	r22, Y+8	; 0x08
    4f54:	79 85       	ldd	r23, Y+9	; 0x09
    4f56:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f58:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f5e:	dc 01       	movw	r26, r24
    4f60:	cb 01       	movw	r24, r22
    4f62:	9f 83       	std	Y+7, r25	; 0x07
    4f64:	8e 83       	std	Y+6, r24	; 0x06
    4f66:	8e 81       	ldd	r24, Y+6	; 0x06
    4f68:	9f 81       	ldd	r25, Y+7	; 0x07
    4f6a:	9b 83       	std	Y+3, r25	; 0x03
    4f6c:	8a 83       	std	Y+2, r24	; 0x02
    4f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f70:	9b 81       	ldd	r25, Y+3	; 0x03
    4f72:	01 97       	sbiw	r24, 0x01	; 1
    4f74:	f1 f7       	brne	.-4      	; 0x4f72 <LCD_on+0x16e>
    4f76:	9b 83       	std	Y+3, r25	; 0x03
    4f78:	8a 83       	std	Y+2, r24	; 0x02
    4f7a:	0f c0       	rjmp	.+30     	; 0x4f9a <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4f7c:	69 89       	ldd	r22, Y+17	; 0x11
    4f7e:	7a 89       	ldd	r23, Y+18	; 0x12
    4f80:	8b 89       	ldd	r24, Y+19	; 0x13
    4f82:	9c 89       	ldd	r25, Y+20	; 0x14
    4f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f88:	dc 01       	movw	r26, r24
    4f8a:	cb 01       	movw	r24, r22
    4f8c:	88 8b       	std	Y+16, r24	; 0x10
    4f8e:	88 89       	ldd	r24, Y+16	; 0x10
    4f90:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4f92:	89 81       	ldd	r24, Y+1	; 0x01
    4f94:	8a 95       	dec	r24
    4f96:	f1 f7       	brne	.-4      	; 0x4f94 <LCD_on+0x190>
    4f98:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    4f9a:	68 96       	adiw	r28, 0x18	; 24
    4f9c:	0f b6       	in	r0, 0x3f	; 63
    4f9e:	f8 94       	cli
    4fa0:	de bf       	out	0x3e, r29	; 62
    4fa2:	0f be       	out	0x3f, r0	; 63
    4fa4:	cd bf       	out	0x3d, r28	; 61
    4fa6:	cf 91       	pop	r28
    4fa8:	df 91       	pop	r29
    4faa:	08 95       	ret

00004fac <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    4fac:	df 93       	push	r29
    4fae:	cf 93       	push	r28
    4fb0:	00 d0       	rcall	.+0      	; 0x4fb2 <LCD_create_char+0x6>
    4fb2:	0f 92       	push	r0
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	9a 83       	std	Y+2, r25	; 0x02
    4fba:	89 83       	std	Y+1, r24	; 0x01
    4fbc:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    4fbe:	0f 90       	pop	r0
    4fc0:	0f 90       	pop	r0
    4fc2:	0f 90       	pop	r0
    4fc4:	cf 91       	pop	r28
    4fc6:	df 91       	pop	r29
    4fc8:	08 95       	ret

00004fca <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    4fca:	df 93       	push	r29
    4fcc:	cf 93       	push	r28
    4fce:	cd b7       	in	r28, 0x3d	; 61
    4fd0:	de b7       	in	r29, 0x3e	; 62
    4fd2:	69 97       	sbiw	r28, 0x19	; 25
    4fd4:	0f b6       	in	r0, 0x3f	; 63
    4fd6:	f8 94       	cli
    4fd8:	de bf       	out	0x3e, r29	; 62
    4fda:	0f be       	out	0x3f, r0	; 63
    4fdc:	cd bf       	out	0x3d, r28	; 61
    4fde:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    4fe0:	89 8d       	ldd	r24, Y+25	; 0x19
    4fe2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_write_data_4bit>
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	a8 e4       	ldi	r26, 0x48	; 72
    4fec:	b2 e4       	ldi	r27, 0x42	; 66
    4fee:	8d 8b       	std	Y+21, r24	; 0x15
    4ff0:	9e 8b       	std	Y+22, r25	; 0x16
    4ff2:	af 8b       	std	Y+23, r26	; 0x17
    4ff4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    4ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    4ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ffe:	2b ea       	ldi	r18, 0xAB	; 171
    5000:	3a ea       	ldi	r19, 0xAA	; 170
    5002:	4a e2       	ldi	r20, 0x2A	; 42
    5004:	50 e4       	ldi	r21, 0x40	; 64
    5006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    500a:	dc 01       	movw	r26, r24
    500c:	cb 01       	movw	r24, r22
    500e:	89 8b       	std	Y+17, r24	; 0x11
    5010:	9a 8b       	std	Y+18, r25	; 0x12
    5012:	ab 8b       	std	Y+19, r26	; 0x13
    5014:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5016:	69 89       	ldd	r22, Y+17	; 0x11
    5018:	7a 89       	ldd	r23, Y+18	; 0x12
    501a:	8b 89       	ldd	r24, Y+19	; 0x13
    501c:	9c 89       	ldd	r25, Y+20	; 0x14
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	40 e8       	ldi	r20, 0x80	; 128
    5024:	5f e3       	ldi	r21, 0x3F	; 63
    5026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    502a:	88 23       	and	r24, r24
    502c:	1c f4       	brge	.+6      	; 0x5034 <LCD_write_char+0x6a>
		__ticks = 1;
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	88 8b       	std	Y+16, r24	; 0x10
    5032:	91 c0       	rjmp	.+290    	; 0x5156 <LCD_write_char+0x18c>
	else if (__tmp > 255)
    5034:	69 89       	ldd	r22, Y+17	; 0x11
    5036:	7a 89       	ldd	r23, Y+18	; 0x12
    5038:	8b 89       	ldd	r24, Y+19	; 0x13
    503a:	9c 89       	ldd	r25, Y+20	; 0x14
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	4f e7       	ldi	r20, 0x7F	; 127
    5042:	53 e4       	ldi	r21, 0x43	; 67
    5044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5048:	18 16       	cp	r1, r24
    504a:	0c f0       	brlt	.+2      	; 0x504e <LCD_write_char+0x84>
    504c:	7b c0       	rjmp	.+246    	; 0x5144 <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    504e:	6d 89       	ldd	r22, Y+21	; 0x15
    5050:	7e 89       	ldd	r23, Y+22	; 0x16
    5052:	8f 89       	ldd	r24, Y+23	; 0x17
    5054:	98 8d       	ldd	r25, Y+24	; 0x18
    5056:	20 e0       	ldi	r18, 0x00	; 0
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	4a e7       	ldi	r20, 0x7A	; 122
    505c:	54 e4       	ldi	r21, 0x44	; 68
    505e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5062:	dc 01       	movw	r26, r24
    5064:	cb 01       	movw	r24, r22
    5066:	8c 87       	std	Y+12, r24	; 0x0c
    5068:	9d 87       	std	Y+13, r25	; 0x0d
    506a:	ae 87       	std	Y+14, r26	; 0x0e
    506c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    506e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5070:	7d 85       	ldd	r23, Y+13	; 0x0d
    5072:	8e 85       	ldd	r24, Y+14	; 0x0e
    5074:	9f 85       	ldd	r25, Y+15	; 0x0f
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	4a ef       	ldi	r20, 0xFA	; 250
    507c:	54 e4       	ldi	r21, 0x44	; 68
    507e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	88 87       	std	Y+8, r24	; 0x08
    5088:	99 87       	std	Y+9, r25	; 0x09
    508a:	aa 87       	std	Y+10, r26	; 0x0a
    508c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    508e:	68 85       	ldd	r22, Y+8	; 0x08
    5090:	79 85       	ldd	r23, Y+9	; 0x09
    5092:	8a 85       	ldd	r24, Y+10	; 0x0a
    5094:	9b 85       	ldd	r25, Y+11	; 0x0b
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	40 e8       	ldi	r20, 0x80	; 128
    509c:	5f e3       	ldi	r21, 0x3F	; 63
    509e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50a2:	88 23       	and	r24, r24
    50a4:	2c f4       	brge	.+10     	; 0x50b0 <LCD_write_char+0xe6>
		__ticks = 1;
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	9f 83       	std	Y+7, r25	; 0x07
    50ac:	8e 83       	std	Y+6, r24	; 0x06
    50ae:	3f c0       	rjmp	.+126    	; 0x512e <LCD_write_char+0x164>
	else if (__tmp > 65535)
    50b0:	68 85       	ldd	r22, Y+8	; 0x08
    50b2:	79 85       	ldd	r23, Y+9	; 0x09
    50b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    50b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    50b8:	20 e0       	ldi	r18, 0x00	; 0
    50ba:	3f ef       	ldi	r19, 0xFF	; 255
    50bc:	4f e7       	ldi	r20, 0x7F	; 127
    50be:	57 e4       	ldi	r21, 0x47	; 71
    50c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50c4:	18 16       	cp	r1, r24
    50c6:	4c f5       	brge	.+82     	; 0x511a <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    50ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    50cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    50ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	40 e2       	ldi	r20, 0x20	; 32
    50d6:	51 e4       	ldi	r21, 0x41	; 65
    50d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50dc:	dc 01       	movw	r26, r24
    50de:	cb 01       	movw	r24, r22
    50e0:	bc 01       	movw	r22, r24
    50e2:	cd 01       	movw	r24, r26
    50e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e8:	dc 01       	movw	r26, r24
    50ea:	cb 01       	movw	r24, r22
    50ec:	9f 83       	std	Y+7, r25	; 0x07
    50ee:	8e 83       	std	Y+6, r24	; 0x06
    50f0:	0f c0       	rjmp	.+30     	; 0x5110 <LCD_write_char+0x146>
    50f2:	88 ec       	ldi	r24, 0xC8	; 200
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	9d 83       	std	Y+5, r25	; 0x05
    50f8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    50fa:	8c 81       	ldd	r24, Y+4	; 0x04
    50fc:	9d 81       	ldd	r25, Y+5	; 0x05
    50fe:	01 97       	sbiw	r24, 0x01	; 1
    5100:	f1 f7       	brne	.-4      	; 0x50fe <LCD_write_char+0x134>
    5102:	9d 83       	std	Y+5, r25	; 0x05
    5104:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5106:	8e 81       	ldd	r24, Y+6	; 0x06
    5108:	9f 81       	ldd	r25, Y+7	; 0x07
    510a:	01 97       	sbiw	r24, 0x01	; 1
    510c:	9f 83       	std	Y+7, r25	; 0x07
    510e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5110:	8e 81       	ldd	r24, Y+6	; 0x06
    5112:	9f 81       	ldd	r25, Y+7	; 0x07
    5114:	00 97       	sbiw	r24, 0x00	; 0
    5116:	69 f7       	brne	.-38     	; 0x50f2 <LCD_write_char+0x128>
    5118:	24 c0       	rjmp	.+72     	; 0x5162 <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    511a:	68 85       	ldd	r22, Y+8	; 0x08
    511c:	79 85       	ldd	r23, Y+9	; 0x09
    511e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5120:	9b 85       	ldd	r25, Y+11	; 0x0b
    5122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	9f 83       	std	Y+7, r25	; 0x07
    512c:	8e 83       	std	Y+6, r24	; 0x06
    512e:	8e 81       	ldd	r24, Y+6	; 0x06
    5130:	9f 81       	ldd	r25, Y+7	; 0x07
    5132:	9b 83       	std	Y+3, r25	; 0x03
    5134:	8a 83       	std	Y+2, r24	; 0x02
    5136:	8a 81       	ldd	r24, Y+2	; 0x02
    5138:	9b 81       	ldd	r25, Y+3	; 0x03
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	f1 f7       	brne	.-4      	; 0x513a <LCD_write_char+0x170>
    513e:	9b 83       	std	Y+3, r25	; 0x03
    5140:	8a 83       	std	Y+2, r24	; 0x02
    5142:	0f c0       	rjmp	.+30     	; 0x5162 <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5144:	69 89       	ldd	r22, Y+17	; 0x11
    5146:	7a 89       	ldd	r23, Y+18	; 0x12
    5148:	8b 89       	ldd	r24, Y+19	; 0x13
    514a:	9c 89       	ldd	r25, Y+20	; 0x14
    514c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5150:	dc 01       	movw	r26, r24
    5152:	cb 01       	movw	r24, r22
    5154:	88 8b       	std	Y+16, r24	; 0x10
    5156:	88 89       	ldd	r24, Y+16	; 0x10
    5158:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    515a:	89 81       	ldd	r24, Y+1	; 0x01
    515c:	8a 95       	dec	r24
    515e:	f1 f7       	brne	.-4      	; 0x515c <LCD_write_char+0x192>
    5160:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    5162:	69 96       	adiw	r28, 0x19	; 25
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	de bf       	out	0x3e, r29	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	cd bf       	out	0x3d, r28	; 61
    516e:	cf 91       	pop	r28
    5170:	df 91       	pop	r29
    5172:	08 95       	ret

00005174 <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    5174:	df 93       	push	r29
    5176:	cf 93       	push	r28
    5178:	00 d0       	rcall	.+0      	; 0x517a <LCD_write_str+0x6>
    517a:	0f 92       	push	r0
    517c:	cd b7       	in	r28, 0x3d	; 61
    517e:	de b7       	in	r29, 0x3e	; 62
    5180:	9b 83       	std	Y+3, r25	; 0x03
    5182:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    5184:	19 82       	std	Y+1, r1	; 0x01
    5186:	0e c0       	rjmp	.+28     	; 0x51a4 <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    5188:	89 81       	ldd	r24, Y+1	; 0x01
    518a:	28 2f       	mov	r18, r24
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	8a 81       	ldd	r24, Y+2	; 0x02
    5190:	9b 81       	ldd	r25, Y+3	; 0x03
    5192:	fc 01       	movw	r30, r24
    5194:	e2 0f       	add	r30, r18
    5196:	f3 1f       	adc	r31, r19
    5198:	80 81       	ld	r24, Z
    519a:	0e 94 e5 27 	call	0x4fca	; 0x4fca <LCD_write_char>
		// Increment the string index
		i++;
    519e:	89 81       	ldd	r24, Y+1	; 0x01
    51a0:	8f 5f       	subi	r24, 0xFF	; 255
    51a2:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    51a4:	89 81       	ldd	r24, Y+1	; 0x01
    51a6:	28 2f       	mov	r18, r24
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	8a 81       	ldd	r24, Y+2	; 0x02
    51ac:	9b 81       	ldd	r25, Y+3	; 0x03
    51ae:	fc 01       	movw	r30, r24
    51b0:	e2 0f       	add	r30, r18
    51b2:	f3 1f       	adc	r31, r19
    51b4:	80 81       	ld	r24, Z
    51b6:	88 23       	and	r24, r24
    51b8:	39 f7       	brne	.-50     	; 0x5188 <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    51ba:	0f 90       	pop	r0
    51bc:	0f 90       	pop	r0
    51be:	0f 90       	pop	r0
    51c0:	cf 91       	pop	r28
    51c2:	df 91       	pop	r29
    51c4:	08 95       	ret

000051c6 <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    51c6:	0f 93       	push	r16
    51c8:	1f 93       	push	r17
    51ca:	df 93       	push	r29
    51cc:	cf 93       	push	r28
    51ce:	cd b7       	in	r28, 0x3d	; 61
    51d0:	de b7       	in	r29, 0x3e	; 62
    51d2:	60 97       	sbiw	r28, 0x10	; 16
    51d4:	0f b6       	in	r0, 0x3f	; 63
    51d6:	f8 94       	cli
    51d8:	de bf       	out	0x3e, r29	; 62
    51da:	0f be       	out	0x3f, r0	; 63
    51dc:	cd bf       	out	0x3d, r28	; 61
    51de:	6d 87       	std	Y+13, r22	; 0x0d
    51e0:	7e 87       	std	Y+14, r23	; 0x0e
    51e2:	8f 87       	std	Y+15, r24	; 0x0f
    51e4:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    51e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    51e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ea:	af 85       	ldd	r26, Y+15	; 0x0f
    51ec:	b8 89       	ldd	r27, Y+16	; 0x10
    51ee:	00 97       	sbiw	r24, 0x00	; 0
    51f0:	a1 05       	cpc	r26, r1
    51f2:	b1 05       	cpc	r27, r1
    51f4:	21 f4       	brne	.+8      	; 0x51fe <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    51f6:	80 e3       	ldi	r24, 0x30	; 48
    51f8:	0e 94 e5 27 	call	0x4fca	; 0x4fca <LCD_write_char>
    51fc:	18 c0       	rjmp	.+48     	; 0x522e <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    51fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5200:	9e 85       	ldd	r25, Y+14	; 0x0e
    5202:	af 85       	ldd	r26, Y+15	; 0x0f
    5204:	b8 89       	ldd	r27, Y+16	; 0x10
    5206:	bb 23       	and	r27, r27
    5208:	94 f4       	brge	.+36     	; 0x522e <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    520a:	8d e2       	ldi	r24, 0x2D	; 45
    520c:	0e 94 e5 27 	call	0x4fca	; 0x4fca <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    5210:	8d 85       	ldd	r24, Y+13	; 0x0d
    5212:	9e 85       	ldd	r25, Y+14	; 0x0e
    5214:	af 85       	ldd	r26, Y+15	; 0x0f
    5216:	b8 89       	ldd	r27, Y+16	; 0x10
    5218:	b0 95       	com	r27
    521a:	a0 95       	com	r26
    521c:	90 95       	com	r25
    521e:	81 95       	neg	r24
    5220:	9f 4f       	sbci	r25, 0xFF	; 255
    5222:	af 4f       	sbci	r26, 0xFF	; 255
    5224:	bf 4f       	sbci	r27, 0xFF	; 255
    5226:	8d 87       	std	Y+13, r24	; 0x0d
    5228:	9e 87       	std	Y+14, r25	; 0x0e
    522a:	af 87       	std	Y+15, r26	; 0x0f
    522c:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    522e:	1a 82       	std	Y+2, r1	; 0x02
    5230:	2d c0       	rjmp	.+90     	; 0x528c <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    5232:	8a 81       	ldd	r24, Y+2	; 0x02
    5234:	08 2f       	mov	r16, r24
    5236:	10 e0       	ldi	r17, 0x00	; 0
    5238:	8d 85       	ldd	r24, Y+13	; 0x0d
    523a:	9e 85       	ldd	r25, Y+14	; 0x0e
    523c:	af 85       	ldd	r26, Y+15	; 0x0f
    523e:	b8 89       	ldd	r27, Y+16	; 0x10
    5240:	2a e0       	ldi	r18, 0x0A	; 10
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	40 e0       	ldi	r20, 0x00	; 0
    5246:	50 e0       	ldi	r21, 0x00	; 0
    5248:	bc 01       	movw	r22, r24
    524a:	cd 01       	movw	r24, r26
    524c:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__divmodsi4>
    5250:	dc 01       	movw	r26, r24
    5252:	cb 01       	movw	r24, r22
    5254:	28 2f       	mov	r18, r24
    5256:	ce 01       	movw	r24, r28
    5258:	03 96       	adiw	r24, 0x03	; 3
    525a:	fc 01       	movw	r30, r24
    525c:	e0 0f       	add	r30, r16
    525e:	f1 1f       	adc	r31, r17
    5260:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    5262:	8d 85       	ldd	r24, Y+13	; 0x0d
    5264:	9e 85       	ldd	r25, Y+14	; 0x0e
    5266:	af 85       	ldd	r26, Y+15	; 0x0f
    5268:	b8 89       	ldd	r27, Y+16	; 0x10
    526a:	2a e0       	ldi	r18, 0x0A	; 10
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	40 e0       	ldi	r20, 0x00	; 0
    5270:	50 e0       	ldi	r21, 0x00	; 0
    5272:	bc 01       	movw	r22, r24
    5274:	cd 01       	movw	r24, r26
    5276:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <__divmodsi4>
    527a:	da 01       	movw	r26, r20
    527c:	c9 01       	movw	r24, r18
    527e:	8d 87       	std	Y+13, r24	; 0x0d
    5280:	9e 87       	std	Y+14, r25	; 0x0e
    5282:	af 87       	std	Y+15, r26	; 0x0f
    5284:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    5286:	8a 81       	ldd	r24, Y+2	; 0x02
    5288:	8f 5f       	subi	r24, 0xFF	; 255
    528a:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    528c:	8a 81       	ldd	r24, Y+2	; 0x02
    528e:	8b 30       	cpi	r24, 0x0B	; 11
    5290:	40 f4       	brcc	.+16     	; 0x52a2 <LCD_write_s32_number+0xdc>
    5292:	8d 85       	ldd	r24, Y+13	; 0x0d
    5294:	9e 85       	ldd	r25, Y+14	; 0x0e
    5296:	af 85       	ldd	r26, Y+15	; 0x0f
    5298:	b8 89       	ldd	r27, Y+16	; 0x10
    529a:	00 97       	sbiw	r24, 0x00	; 0
    529c:	a1 05       	cpc	r26, r1
    529e:	b1 05       	cpc	r27, r1
    52a0:	41 f6       	brne	.-112    	; 0x5232 <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    52a2:	81 e0       	ldi	r24, 0x01	; 1
    52a4:	89 83       	std	Y+1, r24	; 0x01
    52a6:	14 c0       	rjmp	.+40     	; 0x52d0 <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    52a8:	8a 81       	ldd	r24, Y+2	; 0x02
    52aa:	28 2f       	mov	r18, r24
    52ac:	30 e0       	ldi	r19, 0x00	; 0
    52ae:	89 81       	ldd	r24, Y+1	; 0x01
    52b0:	88 2f       	mov	r24, r24
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	28 1b       	sub	r18, r24
    52b6:	39 0b       	sbc	r19, r25
    52b8:	ce 01       	movw	r24, r28
    52ba:	03 96       	adiw	r24, 0x03	; 3
    52bc:	fc 01       	movw	r30, r24
    52be:	e2 0f       	add	r30, r18
    52c0:	f3 1f       	adc	r31, r19
    52c2:	80 81       	ld	r24, Z
    52c4:	80 5d       	subi	r24, 0xD0	; 208
    52c6:	0e 94 e5 27 	call	0x4fca	; 0x4fca <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    52ca:	89 81       	ldd	r24, Y+1	; 0x01
    52cc:	8f 5f       	subi	r24, 0xFF	; 255
    52ce:	89 83       	std	Y+1, r24	; 0x01
    52d0:	89 81       	ldd	r24, Y+1	; 0x01
    52d2:	28 2f       	mov	r18, r24
    52d4:	30 e0       	ldi	r19, 0x00	; 0
    52d6:	8a 81       	ldd	r24, Y+2	; 0x02
    52d8:	88 2f       	mov	r24, r24
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	01 96       	adiw	r24, 0x01	; 1
    52de:	28 17       	cp	r18, r24
    52e0:	39 07       	cpc	r19, r25
    52e2:	14 f3       	brlt	.-60     	; 0x52a8 <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    52e4:	60 96       	adiw	r28, 0x10	; 16
    52e6:	0f b6       	in	r0, 0x3f	; 63
    52e8:	f8 94       	cli
    52ea:	de bf       	out	0x3e, r29	; 62
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	cf 91       	pop	r28
    52f2:	df 91       	pop	r29
    52f4:	1f 91       	pop	r17
    52f6:	0f 91       	pop	r16
    52f8:	08 95       	ret

000052fa <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    52fa:	ef 92       	push	r14
    52fc:	ff 92       	push	r15
    52fe:	0f 93       	push	r16
    5300:	1f 93       	push	r17
    5302:	df 93       	push	r29
    5304:	cf 93       	push	r28
    5306:	cd b7       	in	r28, 0x3d	; 61
    5308:	de b7       	in	r29, 0x3e	; 62
    530a:	2d 97       	sbiw	r28, 0x0d	; 13
    530c:	0f b6       	in	r0, 0x3f	; 63
    530e:	f8 94       	cli
    5310:	de bf       	out	0x3e, r29	; 62
    5312:	0f be       	out	0x3f, r0	; 63
    5314:	cd bf       	out	0x3d, r28	; 61
    5316:	69 87       	std	Y+9, r22	; 0x09
    5318:	7a 87       	std	Y+10, r23	; 0x0a
    531a:	8b 87       	std	Y+11, r24	; 0x0b
    531c:	9c 87       	std	Y+12, r25	; 0x0c
    531e:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    5320:	69 85       	ldd	r22, Y+9	; 0x09
    5322:	7a 85       	ldd	r23, Y+10	; 0x0a
    5324:	8b 85       	ldd	r24, Y+11	; 0x0b
    5326:	9c 85       	ldd	r25, Y+12	; 0x0c
    5328:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    532c:	dc 01       	movw	r26, r24
    532e:	cb 01       	movw	r24, r22
    5330:	8d 83       	std	Y+5, r24	; 0x05
    5332:	9e 83       	std	Y+6, r25	; 0x06
    5334:	af 83       	std	Y+7, r26	; 0x07
    5336:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    5338:	6d 81       	ldd	r22, Y+5	; 0x05
    533a:	7e 81       	ldd	r23, Y+6	; 0x06
    533c:	8f 81       	ldd	r24, Y+7	; 0x07
    533e:	98 85       	ldd	r25, Y+8	; 0x08
    5340:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5344:	9b 01       	movw	r18, r22
    5346:	ac 01       	movw	r20, r24
    5348:	69 85       	ldd	r22, Y+9	; 0x09
    534a:	7a 85       	ldd	r23, Y+10	; 0x0a
    534c:	8b 85       	ldd	r24, Y+11	; 0x0b
    534e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5350:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5354:	dc 01       	movw	r26, r24
    5356:	cb 01       	movw	r24, r22
    5358:	7c 01       	movw	r14, r24
    535a:	8d 01       	movw	r16, r26
    535c:	8a e0       	ldi	r24, 0x0A	; 10
    535e:	6d 85       	ldd	r22, Y+13	; 0x0d
    5360:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_pow>
    5364:	dc 01       	movw	r26, r24
    5366:	cb 01       	movw	r24, r22
    5368:	bc 01       	movw	r22, r24
    536a:	cd 01       	movw	r24, r26
    536c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5370:	9b 01       	movw	r18, r22
    5372:	ac 01       	movw	r20, r24
    5374:	c8 01       	movw	r24, r16
    5376:	b7 01       	movw	r22, r14
    5378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    537c:	dc 01       	movw	r26, r24
    537e:	cb 01       	movw	r24, r22
    5380:	bc 01       	movw	r22, r24
    5382:	cd 01       	movw	r24, r26
    5384:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	89 83       	std	Y+1, r24	; 0x01
    538e:	9a 83       	std	Y+2, r25	; 0x02
    5390:	ab 83       	std	Y+3, r26	; 0x03
    5392:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    5394:	8d 81       	ldd	r24, Y+5	; 0x05
    5396:	9e 81       	ldd	r25, Y+6	; 0x06
    5398:	af 81       	ldd	r26, Y+7	; 0x07
    539a:	b8 85       	ldd	r27, Y+8	; 0x08
    539c:	bc 01       	movw	r22, r24
    539e:	cd 01       	movw	r24, r26
    53a0:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    53a4:	8e e2       	ldi	r24, 0x2E	; 46
    53a6:	0e 94 e5 27 	call	0x4fca	; 0x4fca <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	9a 81       	ldd	r25, Y+2	; 0x02
    53ae:	ab 81       	ldd	r26, Y+3	; 0x03
    53b0:	bc 81       	ldd	r27, Y+4	; 0x04
    53b2:	8f 77       	andi	r24, 0x7F	; 127
    53b4:	bc 01       	movw	r22, r24
    53b6:	cd 01       	movw	r24, r26
    53b8:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    53bc:	2d 96       	adiw	r28, 0x0d	; 13
    53be:	0f b6       	in	r0, 0x3f	; 63
    53c0:	f8 94       	cli
    53c2:	de bf       	out	0x3e, r29	; 62
    53c4:	0f be       	out	0x3f, r0	; 63
    53c6:	cd bf       	out	0x3d, r28	; 61
    53c8:	cf 91       	pop	r28
    53ca:	df 91       	pop	r29
    53cc:	1f 91       	pop	r17
    53ce:	0f 91       	pop	r16
    53d0:	ff 90       	pop	r15
    53d2:	ef 90       	pop	r14
    53d4:	08 95       	ret

000053d6 <EEPROM_write_data>:

//Global variables

/* Implementing of the driver functions */
// EEPROM write data on specific location
void EEPROM_write_data(u16 copy_u16_write_add, u8 copy_u8_write_data){
    53d6:	df 93       	push	r29
    53d8:	cf 93       	push	r28
    53da:	00 d0       	rcall	.+0      	; 0x53dc <EEPROM_write_data+0x6>
    53dc:	0f 92       	push	r0
    53de:	cd b7       	in	r28, 0x3d	; 61
    53e0:	de b7       	in	r29, 0x3e	; 62
    53e2:	9a 83       	std	Y+2, r25	; 0x02
    53e4:	89 83       	std	Y+1, r24	; 0x01
    53e6:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 *
	 */
	if(copy_u16_write_add <= EEPROM_max_add){
    53e8:	89 81       	ldd	r24, Y+1	; 0x01
    53ea:	9a 81       	ldd	r25, Y+2	; 0x02
    53ec:	24 e0       	ldi	r18, 0x04	; 4
    53ee:	80 30       	cpi	r24, 0x00	; 0
    53f0:	92 07       	cpc	r25, r18
    53f2:	10 f5       	brcc	.+68     	; 0x5438 <EEPROM_write_data+0x62>
		while(get_bit(EEPROM_EECR, EEPROM_EEWE) != 0);
    53f4:	ec e3       	ldi	r30, 0x3C	; 60
    53f6:	f0 e0       	ldi	r31, 0x00	; 0
    53f8:	80 81       	ld	r24, Z
    53fa:	86 95       	lsr	r24
    53fc:	88 2f       	mov	r24, r24
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	81 70       	andi	r24, 0x01	; 1
    5402:	90 70       	andi	r25, 0x00	; 0
    5404:	88 23       	and	r24, r24
    5406:	b1 f7       	brne	.-20     	; 0x53f4 <EEPROM_write_data+0x1e>
		EEPROM_EEAR = copy_u16_write_add;
    5408:	ee e3       	ldi	r30, 0x3E	; 62
    540a:	f0 e0       	ldi	r31, 0x00	; 0
    540c:	89 81       	ldd	r24, Y+1	; 0x01
    540e:	9a 81       	ldd	r25, Y+2	; 0x02
    5410:	91 83       	std	Z+1, r25	; 0x01
    5412:	80 83       	st	Z, r24
		EEPROM_EEDR = copy_u8_write_data;
    5414:	ed e3       	ldi	r30, 0x3D	; 61
    5416:	f0 e0       	ldi	r31, 0x00	; 0
    5418:	8b 81       	ldd	r24, Y+3	; 0x03
    541a:	80 83       	st	Z, r24
		set_bit(EEPROM_EECR, EEPROM_EEMWE);
    541c:	ac e3       	ldi	r26, 0x3C	; 60
    541e:	b0 e0       	ldi	r27, 0x00	; 0
    5420:	ec e3       	ldi	r30, 0x3C	; 60
    5422:	f0 e0       	ldi	r31, 0x00	; 0
    5424:	80 81       	ld	r24, Z
    5426:	84 60       	ori	r24, 0x04	; 4
    5428:	8c 93       	st	X, r24
		set_bit(EEPROM_EECR, EEPROM_EEWE);
    542a:	ac e3       	ldi	r26, 0x3C	; 60
    542c:	b0 e0       	ldi	r27, 0x00	; 0
    542e:	ec e3       	ldi	r30, 0x3C	; 60
    5430:	f0 e0       	ldi	r31, 0x00	; 0
    5432:	80 81       	ld	r24, Z
    5434:	82 60       	ori	r24, 0x02	; 2
    5436:	8c 93       	st	X, r24
	}
	else{

	}
}
    5438:	0f 90       	pop	r0
    543a:	0f 90       	pop	r0
    543c:	0f 90       	pop	r0
    543e:	cf 91       	pop	r28
    5440:	df 91       	pop	r29
    5442:	08 95       	ret

00005444 <EEPROM_read_data>:


// EEPROM read data from specific location
u8 EEPROM_read_data(u16 copy_u16_read_add){
    5444:	df 93       	push	r29
    5446:	cf 93       	push	r28
    5448:	00 d0       	rcall	.+0      	; 0x544a <EEPROM_read_data+0x6>
    544a:	0f 92       	push	r0
    544c:	cd b7       	in	r28, 0x3d	; 61
    544e:	de b7       	in	r29, 0x3e	; 62
    5450:	9b 83       	std	Y+3, r25	; 0x03
    5452:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *
	 */
	u8 EEPROM_read_data = 0;
    5454:	19 82       	std	Y+1, r1	; 0x01
	while(get_bit(EEPROM_EECR, EEPROM_EEWE) != 0);
    5456:	ec e3       	ldi	r30, 0x3C	; 60
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	80 81       	ld	r24, Z
    545c:	86 95       	lsr	r24
    545e:	88 2f       	mov	r24, r24
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	81 70       	andi	r24, 0x01	; 1
    5464:	90 70       	andi	r25, 0x00	; 0
    5466:	88 23       	and	r24, r24
    5468:	b1 f7       	brne	.-20     	; 0x5456 <EEPROM_read_data+0x12>
	EEPROM_EEAR |= copy_u16_read_add;
    546a:	ae e3       	ldi	r26, 0x3E	; 62
    546c:	b0 e0       	ldi	r27, 0x00	; 0
    546e:	ee e3       	ldi	r30, 0x3E	; 62
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	20 81       	ld	r18, Z
    5474:	31 81       	ldd	r19, Z+1	; 0x01
    5476:	8a 81       	ldd	r24, Y+2	; 0x02
    5478:	9b 81       	ldd	r25, Y+3	; 0x03
    547a:	82 2b       	or	r24, r18
    547c:	93 2b       	or	r25, r19
    547e:	11 96       	adiw	r26, 0x01	; 1
    5480:	9c 93       	st	X, r25
    5482:	8e 93       	st	-X, r24
	set_bit(EEPROM_EECR, EEPROM_EERE);
    5484:	ac e3       	ldi	r26, 0x3C	; 60
    5486:	b0 e0       	ldi	r27, 0x00	; 0
    5488:	ec e3       	ldi	r30, 0x3C	; 60
    548a:	f0 e0       	ldi	r31, 0x00	; 0
    548c:	80 81       	ld	r24, Z
    548e:	81 60       	ori	r24, 0x01	; 1
    5490:	8c 93       	st	X, r24
	EEPROM_read_data = EEPROM_EEDR;
    5492:	ed e3       	ldi	r30, 0x3D	; 61
    5494:	f0 e0       	ldi	r31, 0x00	; 0
    5496:	80 81       	ld	r24, Z
    5498:	89 83       	std	Y+1, r24	; 0x01
	return EEPROM_read_data;
    549a:	89 81       	ldd	r24, Y+1	; 0x01
}
    549c:	0f 90       	pop	r0
    549e:	0f 90       	pop	r0
    54a0:	0f 90       	pop	r0
    54a2:	cf 91       	pop	r28
    54a4:	df 91       	pop	r29
    54a6:	08 95       	ret

000054a8 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    54a8:	df 93       	push	r29
    54aa:	cf 93       	push	r28
    54ac:	00 d0       	rcall	.+0      	; 0x54ae <DIO_void_set_port_dir+0x6>
    54ae:	cd b7       	in	r28, 0x3d	; 61
    54b0:	de b7       	in	r29, 0x3e	; 62
    54b2:	89 83       	std	Y+1, r24	; 0x01
    54b4:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	88 2f       	mov	r24, r24
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	88 0f       	add	r24, r24
    54be:	99 1f       	adc	r25, r25
    54c0:	fc 01       	movw	r30, r24
    54c2:	e6 58       	subi	r30, 0x86	; 134
    54c4:	fe 4f       	sbci	r31, 0xFE	; 254
    54c6:	01 90       	ld	r0, Z+
    54c8:	f0 81       	ld	r31, Z
    54ca:	e0 2d       	mov	r30, r0
    54cc:	8a 81       	ldd	r24, Y+2	; 0x02
    54ce:	80 83       	st	Z, r24
}
    54d0:	0f 90       	pop	r0
    54d2:	0f 90       	pop	r0
    54d4:	cf 91       	pop	r28
    54d6:	df 91       	pop	r29
    54d8:	08 95       	ret

000054da <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    54da:	df 93       	push	r29
    54dc:	cf 93       	push	r28
    54de:	0f 92       	push	r0
    54e0:	cd b7       	in	r28, 0x3d	; 61
    54e2:	de b7       	in	r29, 0x3e	; 62
    54e4:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	88 2f       	mov	r24, r24
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	88 0f       	add	r24, r24
    54ee:	99 1f       	adc	r25, r25
    54f0:	fc 01       	movw	r30, r24
    54f2:	e6 58       	subi	r30, 0x86	; 134
    54f4:	fe 4f       	sbci	r31, 0xFE	; 254
    54f6:	01 90       	ld	r0, Z+
    54f8:	f0 81       	ld	r31, Z
    54fa:	e0 2d       	mov	r30, r0
    54fc:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	88 2f       	mov	r24, r24
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	88 0f       	add	r24, r24
    5506:	99 1f       	adc	r25, r25
    5508:	fc 01       	movw	r30, r24
    550a:	ee 57       	subi	r30, 0x7E	; 126
    550c:	fe 4f       	sbci	r31, 0xFE	; 254
    550e:	01 90       	ld	r0, Z+
    5510:	f0 81       	ld	r31, Z
    5512:	e0 2d       	mov	r30, r0
    5514:	8f ef       	ldi	r24, 0xFF	; 255
    5516:	80 83       	st	Z, r24
}
    5518:	0f 90       	pop	r0
    551a:	cf 91       	pop	r28
    551c:	df 91       	pop	r29
    551e:	08 95       	ret

00005520 <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    5520:	df 93       	push	r29
    5522:	cf 93       	push	r28
    5524:	00 d0       	rcall	.+0      	; 0x5526 <DIO_void_set_pin_dir+0x6>
    5526:	0f 92       	push	r0
    5528:	cd b7       	in	r28, 0x3d	; 61
    552a:	de b7       	in	r29, 0x3e	; 62
    552c:	89 83       	std	Y+1, r24	; 0x01
    552e:	6a 83       	std	Y+2, r22	; 0x02
    5530:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    5532:	8b 81       	ldd	r24, Y+3	; 0x03
    5534:	88 23       	and	r24, r24
    5536:	29 f1       	breq	.+74     	; 0x5582 <DIO_void_set_pin_dir+0x62>
    5538:	89 81       	ldd	r24, Y+1	; 0x01
    553a:	88 2f       	mov	r24, r24
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	88 0f       	add	r24, r24
    5540:	99 1f       	adc	r25, r25
    5542:	fc 01       	movw	r30, r24
    5544:	e6 58       	subi	r30, 0x86	; 134
    5546:	fe 4f       	sbci	r31, 0xFE	; 254
    5548:	a0 81       	ld	r26, Z
    554a:	b1 81       	ldd	r27, Z+1	; 0x01
    554c:	89 81       	ldd	r24, Y+1	; 0x01
    554e:	88 2f       	mov	r24, r24
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	fc 01       	movw	r30, r24
    5558:	e6 58       	subi	r30, 0x86	; 134
    555a:	fe 4f       	sbci	r31, 0xFE	; 254
    555c:	01 90       	ld	r0, Z+
    555e:	f0 81       	ld	r31, Z
    5560:	e0 2d       	mov	r30, r0
    5562:	80 81       	ld	r24, Z
    5564:	48 2f       	mov	r20, r24
    5566:	8a 81       	ldd	r24, Y+2	; 0x02
    5568:	28 2f       	mov	r18, r24
    556a:	30 e0       	ldi	r19, 0x00	; 0
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	02 2e       	mov	r0, r18
    5572:	02 c0       	rjmp	.+4      	; 0x5578 <DIO_void_set_pin_dir+0x58>
    5574:	88 0f       	add	r24, r24
    5576:	99 1f       	adc	r25, r25
    5578:	0a 94       	dec	r0
    557a:	e2 f7       	brpl	.-8      	; 0x5574 <DIO_void_set_pin_dir+0x54>
    557c:	84 2b       	or	r24, r20
    557e:	8c 93       	st	X, r24
    5580:	25 c0       	rjmp	.+74     	; 0x55cc <DIO_void_set_pin_dir+0xac>
    5582:	89 81       	ldd	r24, Y+1	; 0x01
    5584:	88 2f       	mov	r24, r24
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	88 0f       	add	r24, r24
    558a:	99 1f       	adc	r25, r25
    558c:	fc 01       	movw	r30, r24
    558e:	e6 58       	subi	r30, 0x86	; 134
    5590:	fe 4f       	sbci	r31, 0xFE	; 254
    5592:	a0 81       	ld	r26, Z
    5594:	b1 81       	ldd	r27, Z+1	; 0x01
    5596:	89 81       	ldd	r24, Y+1	; 0x01
    5598:	88 2f       	mov	r24, r24
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	88 0f       	add	r24, r24
    559e:	99 1f       	adc	r25, r25
    55a0:	fc 01       	movw	r30, r24
    55a2:	e6 58       	subi	r30, 0x86	; 134
    55a4:	fe 4f       	sbci	r31, 0xFE	; 254
    55a6:	01 90       	ld	r0, Z+
    55a8:	f0 81       	ld	r31, Z
    55aa:	e0 2d       	mov	r30, r0
    55ac:	80 81       	ld	r24, Z
    55ae:	48 2f       	mov	r20, r24
    55b0:	8a 81       	ldd	r24, Y+2	; 0x02
    55b2:	28 2f       	mov	r18, r24
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	02 2e       	mov	r0, r18
    55bc:	02 c0       	rjmp	.+4      	; 0x55c2 <DIO_void_set_pin_dir+0xa2>
    55be:	88 0f       	add	r24, r24
    55c0:	99 1f       	adc	r25, r25
    55c2:	0a 94       	dec	r0
    55c4:	e2 f7       	brpl	.-8      	; 0x55be <DIO_void_set_pin_dir+0x9e>
    55c6:	80 95       	com	r24
    55c8:	84 23       	and	r24, r20
    55ca:	8c 93       	st	X, r24
}
    55cc:	0f 90       	pop	r0
    55ce:	0f 90       	pop	r0
    55d0:	0f 90       	pop	r0
    55d2:	cf 91       	pop	r28
    55d4:	df 91       	pop	r29
    55d6:	08 95       	ret

000055d8 <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    55d8:	df 93       	push	r29
    55da:	cf 93       	push	r28
    55dc:	00 d0       	rcall	.+0      	; 0x55de <DIO_void_set_pin_in_pullUP+0x6>
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
    55e2:	89 83       	std	Y+1, r24	; 0x01
    55e4:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    55e6:	89 81       	ldd	r24, Y+1	; 0x01
    55e8:	88 2f       	mov	r24, r24
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	88 0f       	add	r24, r24
    55ee:	99 1f       	adc	r25, r25
    55f0:	fc 01       	movw	r30, r24
    55f2:	e6 58       	subi	r30, 0x86	; 134
    55f4:	fe 4f       	sbci	r31, 0xFE	; 254
    55f6:	a0 81       	ld	r26, Z
    55f8:	b1 81       	ldd	r27, Z+1	; 0x01
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	88 2f       	mov	r24, r24
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	88 0f       	add	r24, r24
    5602:	99 1f       	adc	r25, r25
    5604:	fc 01       	movw	r30, r24
    5606:	e6 58       	subi	r30, 0x86	; 134
    5608:	fe 4f       	sbci	r31, 0xFE	; 254
    560a:	01 90       	ld	r0, Z+
    560c:	f0 81       	ld	r31, Z
    560e:	e0 2d       	mov	r30, r0
    5610:	80 81       	ld	r24, Z
    5612:	48 2f       	mov	r20, r24
    5614:	8a 81       	ldd	r24, Y+2	; 0x02
    5616:	28 2f       	mov	r18, r24
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	81 e0       	ldi	r24, 0x01	; 1
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	02 c0       	rjmp	.+4      	; 0x5624 <DIO_void_set_pin_in_pullUP+0x4c>
    5620:	88 0f       	add	r24, r24
    5622:	99 1f       	adc	r25, r25
    5624:	2a 95       	dec	r18
    5626:	e2 f7       	brpl	.-8      	; 0x5620 <DIO_void_set_pin_in_pullUP+0x48>
    5628:	80 95       	com	r24
    562a:	84 23       	and	r24, r20
    562c:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    562e:	89 81       	ldd	r24, Y+1	; 0x01
    5630:	88 2f       	mov	r24, r24
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	88 0f       	add	r24, r24
    5636:	99 1f       	adc	r25, r25
    5638:	fc 01       	movw	r30, r24
    563a:	ee 57       	subi	r30, 0x7E	; 126
    563c:	fe 4f       	sbci	r31, 0xFE	; 254
    563e:	a0 81       	ld	r26, Z
    5640:	b1 81       	ldd	r27, Z+1	; 0x01
    5642:	89 81       	ldd	r24, Y+1	; 0x01
    5644:	88 2f       	mov	r24, r24
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	88 0f       	add	r24, r24
    564a:	99 1f       	adc	r25, r25
    564c:	fc 01       	movw	r30, r24
    564e:	ee 57       	subi	r30, 0x7E	; 126
    5650:	fe 4f       	sbci	r31, 0xFE	; 254
    5652:	01 90       	ld	r0, Z+
    5654:	f0 81       	ld	r31, Z
    5656:	e0 2d       	mov	r30, r0
    5658:	80 81       	ld	r24, Z
    565a:	48 2f       	mov	r20, r24
    565c:	8a 81       	ldd	r24, Y+2	; 0x02
    565e:	28 2f       	mov	r18, r24
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	81 e0       	ldi	r24, 0x01	; 1
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	02 2e       	mov	r0, r18
    5668:	02 c0       	rjmp	.+4      	; 0x566e <DIO_void_set_pin_in_pullUP+0x96>
    566a:	88 0f       	add	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	0a 94       	dec	r0
    5670:	e2 f7       	brpl	.-8      	; 0x566a <DIO_void_set_pin_in_pullUP+0x92>
    5672:	84 2b       	or	r24, r20
    5674:	8c 93       	st	X, r24
}
    5676:	0f 90       	pop	r0
    5678:	0f 90       	pop	r0
    567a:	cf 91       	pop	r28
    567c:	df 91       	pop	r29
    567e:	08 95       	ret

00005680 <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    5680:	df 93       	push	r29
    5682:	cf 93       	push	r28
    5684:	0f 92       	push	r0
    5686:	cd b7       	in	r28, 0x3d	; 61
    5688:	de b7       	in	r29, 0x3e	; 62
    568a:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    568c:	89 81       	ldd	r24, Y+1	; 0x01
    568e:	88 2f       	mov	r24, r24
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	88 0f       	add	r24, r24
    5694:	99 1f       	adc	r25, r25
    5696:	fc 01       	movw	r30, r24
    5698:	ee 57       	subi	r30, 0x7E	; 126
    569a:	fe 4f       	sbci	r31, 0xFE	; 254
    569c:	01 90       	ld	r0, Z+
    569e:	f0 81       	ld	r31, Z
    56a0:	e0 2d       	mov	r30, r0
    56a2:	8f ef       	ldi	r24, 0xFF	; 255
    56a4:	80 83       	st	Z, r24
}
    56a6:	0f 90       	pop	r0
    56a8:	cf 91       	pop	r28
    56aa:	df 91       	pop	r29
    56ac:	08 95       	ret

000056ae <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    56ae:	df 93       	push	r29
    56b0:	cf 93       	push	r28
    56b2:	0f 92       	push	r0
    56b4:	cd b7       	in	r28, 0x3d	; 61
    56b6:	de b7       	in	r29, 0x3e	; 62
    56b8:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    56ba:	89 81       	ldd	r24, Y+1	; 0x01
    56bc:	88 2f       	mov	r24, r24
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	88 0f       	add	r24, r24
    56c2:	99 1f       	adc	r25, r25
    56c4:	fc 01       	movw	r30, r24
    56c6:	ee 57       	subi	r30, 0x7E	; 126
    56c8:	fe 4f       	sbci	r31, 0xFE	; 254
    56ca:	01 90       	ld	r0, Z+
    56cc:	f0 81       	ld	r31, Z
    56ce:	e0 2d       	mov	r30, r0
    56d0:	10 82       	st	Z, r1
}
    56d2:	0f 90       	pop	r0
    56d4:	cf 91       	pop	r28
    56d6:	df 91       	pop	r29
    56d8:	08 95       	ret

000056da <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    56da:	df 93       	push	r29
    56dc:	cf 93       	push	r28
    56de:	0f 92       	push	r0
    56e0:	cd b7       	in	r28, 0x3d	; 61
    56e2:	de b7       	in	r29, 0x3e	; 62
    56e4:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    56e6:	89 81       	ldd	r24, Y+1	; 0x01
    56e8:	88 2f       	mov	r24, r24
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	88 0f       	add	r24, r24
    56ee:	99 1f       	adc	r25, r25
    56f0:	fc 01       	movw	r30, r24
    56f2:	ee 57       	subi	r30, 0x7E	; 126
    56f4:	fe 4f       	sbci	r31, 0xFE	; 254
    56f6:	a0 81       	ld	r26, Z
    56f8:	b1 81       	ldd	r27, Z+1	; 0x01
    56fa:	89 81       	ldd	r24, Y+1	; 0x01
    56fc:	88 2f       	mov	r24, r24
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	88 0f       	add	r24, r24
    5702:	99 1f       	adc	r25, r25
    5704:	fc 01       	movw	r30, r24
    5706:	ee 57       	subi	r30, 0x7E	; 126
    5708:	fe 4f       	sbci	r31, 0xFE	; 254
    570a:	01 90       	ld	r0, Z+
    570c:	f0 81       	ld	r31, Z
    570e:	e0 2d       	mov	r30, r0
    5710:	80 81       	ld	r24, Z
    5712:	80 95       	com	r24
    5714:	8c 93       	st	X, r24
}
    5716:	0f 90       	pop	r0
    5718:	cf 91       	pop	r28
    571a:	df 91       	pop	r29
    571c:	08 95       	ret

0000571e <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    571e:	df 93       	push	r29
    5720:	cf 93       	push	r28
    5722:	00 d0       	rcall	.+0      	; 0x5724 <DIO_void_assign_port+0x6>
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	89 83       	std	Y+1, r24	; 0x01
    572a:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    572c:	89 81       	ldd	r24, Y+1	; 0x01
    572e:	88 2f       	mov	r24, r24
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	88 0f       	add	r24, r24
    5734:	99 1f       	adc	r25, r25
    5736:	fc 01       	movw	r30, r24
    5738:	ee 57       	subi	r30, 0x7E	; 126
    573a:	fe 4f       	sbci	r31, 0xFE	; 254
    573c:	01 90       	ld	r0, Z+
    573e:	f0 81       	ld	r31, Z
    5740:	e0 2d       	mov	r30, r0
    5742:	8a 81       	ldd	r24, Y+2	; 0x02
    5744:	80 83       	st	Z, r24
}
    5746:	0f 90       	pop	r0
    5748:	0f 90       	pop	r0
    574a:	cf 91       	pop	r28
    574c:	df 91       	pop	r29
    574e:	08 95       	ret

00005750 <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5750:	df 93       	push	r29
    5752:	cf 93       	push	r28
    5754:	00 d0       	rcall	.+0      	; 0x5756 <DIO_void_set_pin+0x6>
    5756:	cd b7       	in	r28, 0x3d	; 61
    5758:	de b7       	in	r29, 0x3e	; 62
    575a:	89 83       	std	Y+1, r24	; 0x01
    575c:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    575e:	89 81       	ldd	r24, Y+1	; 0x01
    5760:	88 2f       	mov	r24, r24
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	88 0f       	add	r24, r24
    5766:	99 1f       	adc	r25, r25
    5768:	fc 01       	movw	r30, r24
    576a:	ee 57       	subi	r30, 0x7E	; 126
    576c:	fe 4f       	sbci	r31, 0xFE	; 254
    576e:	a0 81       	ld	r26, Z
    5770:	b1 81       	ldd	r27, Z+1	; 0x01
    5772:	89 81       	ldd	r24, Y+1	; 0x01
    5774:	88 2f       	mov	r24, r24
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	88 0f       	add	r24, r24
    577a:	99 1f       	adc	r25, r25
    577c:	fc 01       	movw	r30, r24
    577e:	ee 57       	subi	r30, 0x7E	; 126
    5780:	fe 4f       	sbci	r31, 0xFE	; 254
    5782:	01 90       	ld	r0, Z+
    5784:	f0 81       	ld	r31, Z
    5786:	e0 2d       	mov	r30, r0
    5788:	80 81       	ld	r24, Z
    578a:	48 2f       	mov	r20, r24
    578c:	8a 81       	ldd	r24, Y+2	; 0x02
    578e:	28 2f       	mov	r18, r24
    5790:	30 e0       	ldi	r19, 0x00	; 0
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	02 2e       	mov	r0, r18
    5798:	02 c0       	rjmp	.+4      	; 0x579e <DIO_void_set_pin+0x4e>
    579a:	88 0f       	add	r24, r24
    579c:	99 1f       	adc	r25, r25
    579e:	0a 94       	dec	r0
    57a0:	e2 f7       	brpl	.-8      	; 0x579a <DIO_void_set_pin+0x4a>
    57a2:	84 2b       	or	r24, r20
    57a4:	8c 93       	st	X, r24
}
    57a6:	0f 90       	pop	r0
    57a8:	0f 90       	pop	r0
    57aa:	cf 91       	pop	r28
    57ac:	df 91       	pop	r29
    57ae:	08 95       	ret

000057b0 <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    57b0:	df 93       	push	r29
    57b2:	cf 93       	push	r28
    57b4:	00 d0       	rcall	.+0      	; 0x57b6 <DIO_void_clear_pin+0x6>
    57b6:	cd b7       	in	r28, 0x3d	; 61
    57b8:	de b7       	in	r29, 0x3e	; 62
    57ba:	89 83       	std	Y+1, r24	; 0x01
    57bc:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    57be:	89 81       	ldd	r24, Y+1	; 0x01
    57c0:	88 2f       	mov	r24, r24
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	fc 01       	movw	r30, r24
    57ca:	ee 57       	subi	r30, 0x7E	; 126
    57cc:	fe 4f       	sbci	r31, 0xFE	; 254
    57ce:	a0 81       	ld	r26, Z
    57d0:	b1 81       	ldd	r27, Z+1	; 0x01
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	88 2f       	mov	r24, r24
    57d6:	90 e0       	ldi	r25, 0x00	; 0
    57d8:	88 0f       	add	r24, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	fc 01       	movw	r30, r24
    57de:	ee 57       	subi	r30, 0x7E	; 126
    57e0:	fe 4f       	sbci	r31, 0xFE	; 254
    57e2:	01 90       	ld	r0, Z+
    57e4:	f0 81       	ld	r31, Z
    57e6:	e0 2d       	mov	r30, r0
    57e8:	80 81       	ld	r24, Z
    57ea:	48 2f       	mov	r20, r24
    57ec:	8a 81       	ldd	r24, Y+2	; 0x02
    57ee:	28 2f       	mov	r18, r24
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	81 e0       	ldi	r24, 0x01	; 1
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	02 2e       	mov	r0, r18
    57f8:	02 c0       	rjmp	.+4      	; 0x57fe <DIO_void_clear_pin+0x4e>
    57fa:	88 0f       	add	r24, r24
    57fc:	99 1f       	adc	r25, r25
    57fe:	0a 94       	dec	r0
    5800:	e2 f7       	brpl	.-8      	; 0x57fa <DIO_void_clear_pin+0x4a>
    5802:	80 95       	com	r24
    5804:	84 23       	and	r24, r20
    5806:	8c 93       	st	X, r24
}
    5808:	0f 90       	pop	r0
    580a:	0f 90       	pop	r0
    580c:	cf 91       	pop	r28
    580e:	df 91       	pop	r29
    5810:	08 95       	ret

00005812 <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5812:	df 93       	push	r29
    5814:	cf 93       	push	r28
    5816:	00 d0       	rcall	.+0      	; 0x5818 <DIO_void_toggle_pin+0x6>
    5818:	cd b7       	in	r28, 0x3d	; 61
    581a:	de b7       	in	r29, 0x3e	; 62
    581c:	89 83       	std	Y+1, r24	; 0x01
    581e:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5820:	89 81       	ldd	r24, Y+1	; 0x01
    5822:	88 2f       	mov	r24, r24
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	88 0f       	add	r24, r24
    5828:	99 1f       	adc	r25, r25
    582a:	fc 01       	movw	r30, r24
    582c:	ee 57       	subi	r30, 0x7E	; 126
    582e:	fe 4f       	sbci	r31, 0xFE	; 254
    5830:	a0 81       	ld	r26, Z
    5832:	b1 81       	ldd	r27, Z+1	; 0x01
    5834:	89 81       	ldd	r24, Y+1	; 0x01
    5836:	88 2f       	mov	r24, r24
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	88 0f       	add	r24, r24
    583c:	99 1f       	adc	r25, r25
    583e:	fc 01       	movw	r30, r24
    5840:	ee 57       	subi	r30, 0x7E	; 126
    5842:	fe 4f       	sbci	r31, 0xFE	; 254
    5844:	01 90       	ld	r0, Z+
    5846:	f0 81       	ld	r31, Z
    5848:	e0 2d       	mov	r30, r0
    584a:	80 81       	ld	r24, Z
    584c:	48 2f       	mov	r20, r24
    584e:	8a 81       	ldd	r24, Y+2	; 0x02
    5850:	28 2f       	mov	r18, r24
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	81 e0       	ldi	r24, 0x01	; 1
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	02 2e       	mov	r0, r18
    585a:	02 c0       	rjmp	.+4      	; 0x5860 <DIO_void_toggle_pin+0x4e>
    585c:	88 0f       	add	r24, r24
    585e:	99 1f       	adc	r25, r25
    5860:	0a 94       	dec	r0
    5862:	e2 f7       	brpl	.-8      	; 0x585c <DIO_void_toggle_pin+0x4a>
    5864:	84 27       	eor	r24, r20
    5866:	8c 93       	st	X, r24
}
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	cf 91       	pop	r28
    586e:	df 91       	pop	r29
    5870:	08 95       	ret

00005872 <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    5872:	df 93       	push	r29
    5874:	cf 93       	push	r28
    5876:	00 d0       	rcall	.+0      	; 0x5878 <DIO_void_assign_pin+0x6>
    5878:	0f 92       	push	r0
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
    587e:	89 83       	std	Y+1, r24	; 0x01
    5880:	6a 83       	std	Y+2, r22	; 0x02
    5882:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    5884:	8b 81       	ldd	r24, Y+3	; 0x03
    5886:	88 23       	and	r24, r24
    5888:	29 f1       	breq	.+74     	; 0x58d4 <DIO_void_assign_pin+0x62>
    588a:	89 81       	ldd	r24, Y+1	; 0x01
    588c:	88 2f       	mov	r24, r24
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	88 0f       	add	r24, r24
    5892:	99 1f       	adc	r25, r25
    5894:	fc 01       	movw	r30, r24
    5896:	ee 57       	subi	r30, 0x7E	; 126
    5898:	fe 4f       	sbci	r31, 0xFE	; 254
    589a:	a0 81       	ld	r26, Z
    589c:	b1 81       	ldd	r27, Z+1	; 0x01
    589e:	89 81       	ldd	r24, Y+1	; 0x01
    58a0:	88 2f       	mov	r24, r24
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	88 0f       	add	r24, r24
    58a6:	99 1f       	adc	r25, r25
    58a8:	fc 01       	movw	r30, r24
    58aa:	ee 57       	subi	r30, 0x7E	; 126
    58ac:	fe 4f       	sbci	r31, 0xFE	; 254
    58ae:	01 90       	ld	r0, Z+
    58b0:	f0 81       	ld	r31, Z
    58b2:	e0 2d       	mov	r30, r0
    58b4:	80 81       	ld	r24, Z
    58b6:	48 2f       	mov	r20, r24
    58b8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ba:	28 2f       	mov	r18, r24
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	81 e0       	ldi	r24, 0x01	; 1
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	02 2e       	mov	r0, r18
    58c4:	02 c0       	rjmp	.+4      	; 0x58ca <DIO_void_assign_pin+0x58>
    58c6:	88 0f       	add	r24, r24
    58c8:	99 1f       	adc	r25, r25
    58ca:	0a 94       	dec	r0
    58cc:	e2 f7       	brpl	.-8      	; 0x58c6 <DIO_void_assign_pin+0x54>
    58ce:	84 2b       	or	r24, r20
    58d0:	8c 93       	st	X, r24
    58d2:	25 c0       	rjmp	.+74     	; 0x591e <DIO_void_assign_pin+0xac>
    58d4:	89 81       	ldd	r24, Y+1	; 0x01
    58d6:	88 2f       	mov	r24, r24
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	88 0f       	add	r24, r24
    58dc:	99 1f       	adc	r25, r25
    58de:	fc 01       	movw	r30, r24
    58e0:	ee 57       	subi	r30, 0x7E	; 126
    58e2:	fe 4f       	sbci	r31, 0xFE	; 254
    58e4:	a0 81       	ld	r26, Z
    58e6:	b1 81       	ldd	r27, Z+1	; 0x01
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	88 2f       	mov	r24, r24
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	88 0f       	add	r24, r24
    58f0:	99 1f       	adc	r25, r25
    58f2:	fc 01       	movw	r30, r24
    58f4:	ee 57       	subi	r30, 0x7E	; 126
    58f6:	fe 4f       	sbci	r31, 0xFE	; 254
    58f8:	01 90       	ld	r0, Z+
    58fa:	f0 81       	ld	r31, Z
    58fc:	e0 2d       	mov	r30, r0
    58fe:	80 81       	ld	r24, Z
    5900:	48 2f       	mov	r20, r24
    5902:	8a 81       	ldd	r24, Y+2	; 0x02
    5904:	28 2f       	mov	r18, r24
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	81 e0       	ldi	r24, 0x01	; 1
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	02 2e       	mov	r0, r18
    590e:	02 c0       	rjmp	.+4      	; 0x5914 <DIO_void_assign_pin+0xa2>
    5910:	88 0f       	add	r24, r24
    5912:	99 1f       	adc	r25, r25
    5914:	0a 94       	dec	r0
    5916:	e2 f7       	brpl	.-8      	; 0x5910 <DIO_void_assign_pin+0x9e>
    5918:	80 95       	com	r24
    591a:	84 23       	and	r24, r20
    591c:	8c 93       	st	X, r24
}
    591e:	0f 90       	pop	r0
    5920:	0f 90       	pop	r0
    5922:	0f 90       	pop	r0
    5924:	cf 91       	pop	r28
    5926:	df 91       	pop	r29
    5928:	08 95       	ret

0000592a <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    592a:	df 93       	push	r29
    592c:	cf 93       	push	r28
    592e:	0f 92       	push	r0
    5930:	cd b7       	in	r28, 0x3d	; 61
    5932:	de b7       	in	r29, 0x3e	; 62
    5934:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    5936:	89 81       	ldd	r24, Y+1	; 0x01
    5938:	88 2f       	mov	r24, r24
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	88 0f       	add	r24, r24
    593e:	99 1f       	adc	r25, r25
    5940:	fc 01       	movw	r30, r24
    5942:	ee 58       	subi	r30, 0x8E	; 142
    5944:	fe 4f       	sbci	r31, 0xFE	; 254
    5946:	01 90       	ld	r0, Z+
    5948:	f0 81       	ld	r31, Z
    594a:	e0 2d       	mov	r30, r0
    594c:	80 81       	ld	r24, Z
}
    594e:	0f 90       	pop	r0
    5950:	cf 91       	pop	r28
    5952:	df 91       	pop	r29
    5954:	08 95       	ret

00005956 <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5956:	df 93       	push	r29
    5958:	cf 93       	push	r28
    595a:	00 d0       	rcall	.+0      	; 0x595c <DIO_u8_get_pin+0x6>
    595c:	cd b7       	in	r28, 0x3d	; 61
    595e:	de b7       	in	r29, 0x3e	; 62
    5960:	89 83       	std	Y+1, r24	; 0x01
    5962:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5964:	89 81       	ldd	r24, Y+1	; 0x01
    5966:	88 2f       	mov	r24, r24
    5968:	90 e0       	ldi	r25, 0x00	; 0
    596a:	88 0f       	add	r24, r24
    596c:	99 1f       	adc	r25, r25
    596e:	fc 01       	movw	r30, r24
    5970:	ee 58       	subi	r30, 0x8E	; 142
    5972:	fe 4f       	sbci	r31, 0xFE	; 254
    5974:	01 90       	ld	r0, Z+
    5976:	f0 81       	ld	r31, Z
    5978:	e0 2d       	mov	r30, r0
    597a:	80 81       	ld	r24, Z
    597c:	28 2f       	mov	r18, r24
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	8a 81       	ldd	r24, Y+2	; 0x02
    5982:	88 2f       	mov	r24, r24
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	a9 01       	movw	r20, r18
    5988:	02 c0       	rjmp	.+4      	; 0x598e <DIO_u8_get_pin+0x38>
    598a:	55 95       	asr	r21
    598c:	47 95       	ror	r20
    598e:	8a 95       	dec	r24
    5990:	e2 f7       	brpl	.-8      	; 0x598a <DIO_u8_get_pin+0x34>
    5992:	ca 01       	movw	r24, r20
    5994:	81 70       	andi	r24, 0x01	; 1
}
    5996:	0f 90       	pop	r0
    5998:	0f 90       	pop	r0
    599a:	cf 91       	pop	r28
    599c:	df 91       	pop	r29
    599e:	08 95       	ret

000059a0 <ADC_void_init>:

//Global variables
static void (*callback_functions_address)(u16 )= NULL;

/* Implementing of the driver functions */
void ADC_void_init(void ){
    59a0:	df 93       	push	r29
    59a2:	cf 93       	push	r28
    59a4:	cd b7       	in	r28, 0x3d	; 61
    59a6:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Assign the value of the left adjust bit
	agn_bit(ADC_ADMUX, ADC_ADLAR_pin, ADC_ADLAR);
    59a8:	a7 e2       	ldi	r26, 0x27	; 39
    59aa:	b0 e0       	ldi	r27, 0x00	; 0
    59ac:	e7 e2       	ldi	r30, 0x27	; 39
    59ae:	f0 e0       	ldi	r31, 0x00	; 0
    59b0:	80 81       	ld	r24, Z
    59b2:	8f 7d       	andi	r24, 0xDF	; 223
    59b4:	8c 93       	st	X, r24

	// Assign the values of the reference selection regesters
	agn_bit(ADC_ADMUX, ADC_REFS0_pin, ADC_REFS0);
    59b6:	a7 e2       	ldi	r26, 0x27	; 39
    59b8:	b0 e0       	ldi	r27, 0x00	; 0
    59ba:	e7 e2       	ldi	r30, 0x27	; 39
    59bc:	f0 e0       	ldi	r31, 0x00	; 0
    59be:	80 81       	ld	r24, Z
    59c0:	80 64       	ori	r24, 0x40	; 64
    59c2:	8c 93       	st	X, r24
	agn_bit(ADC_ADMUX, ADC_REFS1_pin, ADC_REFS1);
    59c4:	a7 e2       	ldi	r26, 0x27	; 39
    59c6:	b0 e0       	ldi	r27, 0x00	; 0
    59c8:	e7 e2       	ldi	r30, 0x27	; 39
    59ca:	f0 e0       	ldi	r31, 0x00	; 0
    59cc:	80 81       	ld	r24, Z
    59ce:	8f 77       	andi	r24, 0x7F	; 127
    59d0:	8c 93       	st	X, r24

	// Assign the value of the enable bit
	agn_bit(ADC_ADCSRA, ADC_ADEN_pin, ADC_ADEN);
    59d2:	a6 e2       	ldi	r26, 0x26	; 38
    59d4:	b0 e0       	ldi	r27, 0x00	; 0
    59d6:	e6 e2       	ldi	r30, 0x26	; 38
    59d8:	f0 e0       	ldi	r31, 0x00	; 0
    59da:	80 81       	ld	r24, Z
    59dc:	80 68       	ori	r24, 0x80	; 128
    59de:	8c 93       	st	X, r24
}
    59e0:	cf 91       	pop	r28
    59e2:	df 91       	pop	r29
    59e4:	08 95       	ret

000059e6 <ADC_void_config>:


void ADC_void_config(ADC_config_struct* ptr_config){
    59e6:	df 93       	push	r29
    59e8:	cf 93       	push	r28
    59ea:	00 d0       	rcall	.+0      	; 0x59ec <ADC_void_config+0x6>
    59ec:	cd b7       	in	r28, 0x3d	; 61
    59ee:	de b7       	in	r29, 0x3e	; 62
    59f0:	9a 83       	std	Y+2, r25	; 0x02
    59f2:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_config>> Pointer to ADC configurations Struct.
	 *	
	 *	Function does not return any values, Hence it needs to be called every time you need to reconfigure the ADC.
	 */
	// Configure the analog channel and gain selection bits
	ADC_ADMUX &= ADC_MUX_clear;
    59f4:	a7 e2       	ldi	r26, 0x27	; 39
    59f6:	b0 e0       	ldi	r27, 0x00	; 0
    59f8:	e7 e2       	ldi	r30, 0x27	; 39
    59fa:	f0 e0       	ldi	r31, 0x00	; 0
    59fc:	80 81       	ld	r24, Z
    59fe:	80 7e       	andi	r24, 0xE0	; 224
    5a00:	8c 93       	st	X, r24
	ADC_ADMUX |= ptr_config -> MUX;
    5a02:	a7 e2       	ldi	r26, 0x27	; 39
    5a04:	b0 e0       	ldi	r27, 0x00	; 0
    5a06:	e7 e2       	ldi	r30, 0x27	; 39
    5a08:	f0 e0       	ldi	r31, 0x00	; 0
    5a0a:	90 81       	ld	r25, Z
    5a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    5a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    5a10:	80 81       	ld	r24, Z
    5a12:	8f 71       	andi	r24, 0x1F	; 31
    5a14:	89 2b       	or	r24, r25
    5a16:	8c 93       	st	X, r24

	// Configure the ADC prescaler select bits
	ADC_ADCSRA &= ADC_ADPS_clear;
    5a18:	a6 e2       	ldi	r26, 0x26	; 38
    5a1a:	b0 e0       	ldi	r27, 0x00	; 0
    5a1c:	e6 e2       	ldi	r30, 0x26	; 38
    5a1e:	f0 e0       	ldi	r31, 0x00	; 0
    5a20:	80 81       	ld	r24, Z
    5a22:	88 7f       	andi	r24, 0xF8	; 248
    5a24:	8c 93       	st	X, r24
	ADC_ADCSRA |= ptr_config -> ADPS;
    5a26:	a6 e2       	ldi	r26, 0x26	; 38
    5a28:	b0 e0       	ldi	r27, 0x00	; 0
    5a2a:	e6 e2       	ldi	r30, 0x26	; 38
    5a2c:	f0 e0       	ldi	r31, 0x00	; 0
    5a2e:	90 81       	ld	r25, Z
    5a30:	e9 81       	ldd	r30, Y+1	; 0x01
    5a32:	fa 81       	ldd	r31, Y+2	; 0x02
    5a34:	80 81       	ld	r24, Z
    5a36:	82 95       	swap	r24
    5a38:	86 95       	lsr	r24
    5a3a:	87 70       	andi	r24, 0x07	; 7
    5a3c:	89 2b       	or	r24, r25
    5a3e:	8c 93       	st	X, r24

	// Configure the ADC auto trigger source bits
	ADC_SFIOR &= ADC_ADTS_clear;
    5a40:	a0 e5       	ldi	r26, 0x50	; 80
    5a42:	b0 e0       	ldi	r27, 0x00	; 0
    5a44:	e0 e5       	ldi	r30, 0x50	; 80
    5a46:	f0 e0       	ldi	r31, 0x00	; 0
    5a48:	80 81       	ld	r24, Z
    5a4a:	8f 71       	andi	r24, 0x1F	; 31
    5a4c:	8c 93       	st	X, r24
	ADC_SFIOR |= ptr_config -> ADTS;
    5a4e:	a0 e5       	ldi	r26, 0x50	; 80
    5a50:	b0 e0       	ldi	r27, 0x00	; 0
    5a52:	e0 e5       	ldi	r30, 0x50	; 80
    5a54:	f0 e0       	ldi	r31, 0x00	; 0
    5a56:	90 81       	ld	r25, Z
    5a58:	e9 81       	ldd	r30, Y+1	; 0x01
    5a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    5a5c:	81 81       	ldd	r24, Z+1	; 0x01
    5a5e:	86 95       	lsr	r24
    5a60:	87 70       	andi	r24, 0x07	; 7
    5a62:	89 2b       	or	r24, r25
    5a64:	8c 93       	st	X, r24

	// Configure the ADC auto trigger enable bit
	agn_bit(ADC_ADCSRA, ADC_ADATE_pin, ptr_config -> ADATE);
    5a66:	e9 81       	ldd	r30, Y+1	; 0x01
    5a68:	fa 81       	ldd	r31, Y+2	; 0x02
    5a6a:	81 81       	ldd	r24, Z+1	; 0x01
    5a6c:	81 70       	andi	r24, 0x01	; 1
    5a6e:	88 23       	and	r24, r24
    5a70:	41 f0       	breq	.+16     	; 0x5a82 <ADC_void_config+0x9c>
    5a72:	a6 e2       	ldi	r26, 0x26	; 38
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	e6 e2       	ldi	r30, 0x26	; 38
    5a78:	f0 e0       	ldi	r31, 0x00	; 0
    5a7a:	80 81       	ld	r24, Z
    5a7c:	80 62       	ori	r24, 0x20	; 32
    5a7e:	8c 93       	st	X, r24
    5a80:	07 c0       	rjmp	.+14     	; 0x5a90 <ADC_void_config+0xaa>
    5a82:	a6 e2       	ldi	r26, 0x26	; 38
    5a84:	b0 e0       	ldi	r27, 0x00	; 0
    5a86:	e6 e2       	ldi	r30, 0x26	; 38
    5a88:	f0 e0       	ldi	r31, 0x00	; 0
    5a8a:	80 81       	ld	r24, Z
    5a8c:	8f 7d       	andi	r24, 0xDF	; 223
    5a8e:	8c 93       	st	X, r24

	// Configure the ADC interrupt enable bit
	agn_bit(ADC_ADCSRA, ADC_ADIE_pin, ptr_config -> ADIE);
    5a90:	e9 81       	ldd	r30, Y+1	; 0x01
    5a92:	fa 81       	ldd	r31, Y+2	; 0x02
    5a94:	81 81       	ldd	r24, Z+1	; 0x01
    5a96:	80 71       	andi	r24, 0x10	; 16
    5a98:	88 23       	and	r24, r24
    5a9a:	41 f0       	breq	.+16     	; 0x5aac <ADC_void_config+0xc6>
    5a9c:	a6 e2       	ldi	r26, 0x26	; 38
    5a9e:	b0 e0       	ldi	r27, 0x00	; 0
    5aa0:	e6 e2       	ldi	r30, 0x26	; 38
    5aa2:	f0 e0       	ldi	r31, 0x00	; 0
    5aa4:	80 81       	ld	r24, Z
    5aa6:	88 60       	ori	r24, 0x08	; 8
    5aa8:	8c 93       	st	X, r24
    5aaa:	07 c0       	rjmp	.+14     	; 0x5aba <ADC_void_config+0xd4>
    5aac:	a6 e2       	ldi	r26, 0x26	; 38
    5aae:	b0 e0       	ldi	r27, 0x00	; 0
    5ab0:	e6 e2       	ldi	r30, 0x26	; 38
    5ab2:	f0 e0       	ldi	r31, 0x00	; 0
    5ab4:	80 81       	ld	r24, Z
    5ab6:	87 7f       	andi	r24, 0xF7	; 247
    5ab8:	8c 93       	st	X, r24

	// Configure the Global interupt bit
	agn_bit(ADC_SREG, ADC_Global_INT, ptr_config -> ADIE);
    5aba:	e9 81       	ldd	r30, Y+1	; 0x01
    5abc:	fa 81       	ldd	r31, Y+2	; 0x02
    5abe:	81 81       	ldd	r24, Z+1	; 0x01
    5ac0:	80 71       	andi	r24, 0x10	; 16
    5ac2:	88 23       	and	r24, r24
    5ac4:	41 f0       	breq	.+16     	; 0x5ad6 <ADC_void_config+0xf0>
    5ac6:	af e5       	ldi	r26, 0x5F	; 95
    5ac8:	b0 e0       	ldi	r27, 0x00	; 0
    5aca:	ef e5       	ldi	r30, 0x5F	; 95
    5acc:	f0 e0       	ldi	r31, 0x00	; 0
    5ace:	80 81       	ld	r24, Z
    5ad0:	80 68       	ori	r24, 0x80	; 128
    5ad2:	8c 93       	st	X, r24
    5ad4:	07 c0       	rjmp	.+14     	; 0x5ae4 <ADC_void_config+0xfe>
    5ad6:	af e5       	ldi	r26, 0x5F	; 95
    5ad8:	b0 e0       	ldi	r27, 0x00	; 0
    5ada:	ef e5       	ldi	r30, 0x5F	; 95
    5adc:	f0 e0       	ldi	r31, 0x00	; 0
    5ade:	80 81       	ld	r24, Z
    5ae0:	8f 77       	andi	r24, 0x7F	; 127
    5ae2:	8c 93       	st	X, r24
}
    5ae4:	0f 90       	pop	r0
    5ae6:	0f 90       	pop	r0
    5ae8:	cf 91       	pop	r28
    5aea:	df 91       	pop	r29
    5aec:	08 95       	ret

00005aee <ADC_void_start_conv>:

void ADC_void_start_conv(void){
    5aee:	df 93       	push	r29
    5af0:	cf 93       	push	r28
    5af2:	cd b7       	in	r28, 0x3d	; 61
    5af4:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    5af6:	a6 e2       	ldi	r26, 0x26	; 38
    5af8:	b0 e0       	ldi	r27, 0x00	; 0
    5afa:	e6 e2       	ldi	r30, 0x26	; 38
    5afc:	f0 e0       	ldi	r31, 0x00	; 0
    5afe:	80 81       	ld	r24, Z
    5b00:	80 64       	ori	r24, 0x40	; 64
    5b02:	8c 93       	st	X, r24
}
    5b04:	cf 91       	pop	r28
    5b06:	df 91       	pop	r29
    5b08:	08 95       	ret

00005b0a <ADC_void_read_data>:

void ADC_void_read_data(u16* ptr_result){
    5b0a:	df 93       	push	r29
    5b0c:	cf 93       	push	r28
    5b0e:	00 d0       	rcall	.+0      	; 0x5b10 <ADC_void_read_data+0x6>
    5b10:	cd b7       	in	r28, 0x3d	; 61
    5b12:	de b7       	in	r29, 0x3e	; 62
    5b14:	9a 83       	std	Y+2, r25	; 0x02
    5b16:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_result>> pointer to the ADC value container variable.
	 *	
	 *	Function does not retuen any data, Hence it needs to be called when a value update is needed.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    5b18:	a6 e2       	ldi	r26, 0x26	; 38
    5b1a:	b0 e0       	ldi	r27, 0x00	; 0
    5b1c:	e6 e2       	ldi	r30, 0x26	; 38
    5b1e:	f0 e0       	ldi	r31, 0x00	; 0
    5b20:	80 81       	ld	r24, Z
    5b22:	80 64       	ori	r24, 0x40	; 64
    5b24:	8c 93       	st	X, r24

	// Polling on the ADC interrupt flag bit
	while(get_bit(ADC_ADCSRA, ADC_ADIF_pin) == 0);
    5b26:	e6 e2       	ldi	r30, 0x26	; 38
    5b28:	f0 e0       	ldi	r31, 0x00	; 0
    5b2a:	80 81       	ld	r24, Z
    5b2c:	82 95       	swap	r24
    5b2e:	8f 70       	andi	r24, 0x0F	; 15
    5b30:	88 2f       	mov	r24, r24
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	81 70       	andi	r24, 0x01	; 1
    5b36:	90 70       	andi	r25, 0x00	; 0
    5b38:	00 97       	sbiw	r24, 0x00	; 0
    5b3a:	a9 f3       	breq	.-22     	; 0x5b26 <ADC_void_read_data+0x1c>

	// Resit the ADC interrupt flag bit
	set_bit(ADC_ADCSRA, ADC_ADIF_pin);
    5b3c:	a6 e2       	ldi	r26, 0x26	; 38
    5b3e:	b0 e0       	ldi	r27, 0x00	; 0
    5b40:	e6 e2       	ldi	r30, 0x26	; 38
    5b42:	f0 e0       	ldi	r31, 0x00	; 0
    5b44:	80 81       	ld	r24, Z
    5b46:	80 61       	ori	r24, 0x10	; 16
    5b48:	8c 93       	st	X, r24

	// Return the digital value
	*(ptr_result)= ADC_ADCD_16bit;
    5b4a:	e4 e2       	ldi	r30, 0x24	; 36
    5b4c:	f0 e0       	ldi	r31, 0x00	; 0
    5b4e:	80 81       	ld	r24, Z
    5b50:	91 81       	ldd	r25, Z+1	; 0x01
    5b52:	e9 81       	ldd	r30, Y+1	; 0x01
    5b54:	fa 81       	ldd	r31, Y+2	; 0x02
    5b56:	91 83       	std	Z+1, r25	; 0x01
    5b58:	80 83       	st	Z, r24
}
    5b5a:	0f 90       	pop	r0
    5b5c:	0f 90       	pop	r0
    5b5e:	cf 91       	pop	r28
    5b60:	df 91       	pop	r29
    5b62:	08 95       	ret

00005b64 <ADC_void_INIT_callback>:


void ADC_void_INIT_callback(void (*ptr_callback_function)(u16 ) ){
    5b64:	df 93       	push	r29
    5b66:	cf 93       	push	r28
    5b68:	00 d0       	rcall	.+0      	; 0x5b6a <ADC_void_INIT_callback+0x6>
    5b6a:	cd b7       	in	r28, 0x3d	; 61
    5b6c:	de b7       	in	r29, 0x3e	; 62
    5b6e:	9a 83       	std	Y+2, r25	; 0x02
    5b70:	89 83       	std	Y+1, r24	; 0x01
	 *	Inputs::
	 *		ptr_callback_function>> pointer to the callback function.
	 *
	 *	Function does not return any value and anly called when addressing the callback function.
	 */
	callback_functions_address= ptr_callback_function;
    5b72:	89 81       	ldd	r24, Y+1	; 0x01
    5b74:	9a 81       	ldd	r25, Y+2	; 0x02
    5b76:	90 93 8b 01 	sts	0x018B, r25
    5b7a:	80 93 8a 01 	sts	0x018A, r24
}
    5b7e:	0f 90       	pop	r0
    5b80:	0f 90       	pop	r0
    5b82:	cf 91       	pop	r28
    5b84:	df 91       	pop	r29
    5b86:	08 95       	ret

00005b88 <__vector_16>:

void __vector_16(void){
    5b88:	1f 92       	push	r1
    5b8a:	0f 92       	push	r0
    5b8c:	0f b6       	in	r0, 0x3f	; 63
    5b8e:	0f 92       	push	r0
    5b90:	11 24       	eor	r1, r1
    5b92:	2f 93       	push	r18
    5b94:	3f 93       	push	r19
    5b96:	4f 93       	push	r20
    5b98:	5f 93       	push	r21
    5b9a:	6f 93       	push	r22
    5b9c:	7f 93       	push	r23
    5b9e:	8f 93       	push	r24
    5ba0:	9f 93       	push	r25
    5ba2:	af 93       	push	r26
    5ba4:	bf 93       	push	r27
    5ba6:	ef 93       	push	r30
    5ba8:	ff 93       	push	r31
    5baa:	df 93       	push	r29
    5bac:	cf 93       	push	r28
    5bae:	cd b7       	in	r28, 0x3d	; 61
    5bb0:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	ADC flag ISR
	 */
	if(callback_functions_address != NULL){
    5bb2:	80 91 8a 01 	lds	r24, 0x018A
    5bb6:	90 91 8b 01 	lds	r25, 0x018B
    5bba:	00 97       	sbiw	r24, 0x00	; 0
    5bbc:	49 f0       	breq	.+18     	; 0x5bd0 <__vector_16+0x48>
		callback_functions_address(ADC_ADCD_16bit);
    5bbe:	e0 91 8a 01 	lds	r30, 0x018A
    5bc2:	f0 91 8b 01 	lds	r31, 0x018B
    5bc6:	a4 e2       	ldi	r26, 0x24	; 36
    5bc8:	b0 e0       	ldi	r27, 0x00	; 0
    5bca:	8d 91       	ld	r24, X+
    5bcc:	9c 91       	ld	r25, X
    5bce:	09 95       	icall
	}
}
    5bd0:	cf 91       	pop	r28
    5bd2:	df 91       	pop	r29
    5bd4:	ff 91       	pop	r31
    5bd6:	ef 91       	pop	r30
    5bd8:	bf 91       	pop	r27
    5bda:	af 91       	pop	r26
    5bdc:	9f 91       	pop	r25
    5bde:	8f 91       	pop	r24
    5be0:	7f 91       	pop	r23
    5be2:	6f 91       	pop	r22
    5be4:	5f 91       	pop	r21
    5be6:	4f 91       	pop	r20
    5be8:	3f 91       	pop	r19
    5bea:	2f 91       	pop	r18
    5bec:	0f 90       	pop	r0
    5bee:	0f be       	out	0x3f, r0	; 63
    5bf0:	0f 90       	pop	r0
    5bf2:	1f 90       	pop	r1
    5bf4:	18 95       	reti

00005bf6 <__mulsi3>:
    5bf6:	62 9f       	mul	r22, r18
    5bf8:	d0 01       	movw	r26, r0
    5bfa:	73 9f       	mul	r23, r19
    5bfc:	f0 01       	movw	r30, r0
    5bfe:	82 9f       	mul	r24, r18
    5c00:	e0 0d       	add	r30, r0
    5c02:	f1 1d       	adc	r31, r1
    5c04:	64 9f       	mul	r22, r20
    5c06:	e0 0d       	add	r30, r0
    5c08:	f1 1d       	adc	r31, r1
    5c0a:	92 9f       	mul	r25, r18
    5c0c:	f0 0d       	add	r31, r0
    5c0e:	83 9f       	mul	r24, r19
    5c10:	f0 0d       	add	r31, r0
    5c12:	74 9f       	mul	r23, r20
    5c14:	f0 0d       	add	r31, r0
    5c16:	65 9f       	mul	r22, r21
    5c18:	f0 0d       	add	r31, r0
    5c1a:	99 27       	eor	r25, r25
    5c1c:	72 9f       	mul	r23, r18
    5c1e:	b0 0d       	add	r27, r0
    5c20:	e1 1d       	adc	r30, r1
    5c22:	f9 1f       	adc	r31, r25
    5c24:	63 9f       	mul	r22, r19
    5c26:	b0 0d       	add	r27, r0
    5c28:	e1 1d       	adc	r30, r1
    5c2a:	f9 1f       	adc	r31, r25
    5c2c:	bd 01       	movw	r22, r26
    5c2e:	cf 01       	movw	r24, r30
    5c30:	11 24       	eor	r1, r1
    5c32:	08 95       	ret

00005c34 <__udivmodhi4>:
    5c34:	aa 1b       	sub	r26, r26
    5c36:	bb 1b       	sub	r27, r27
    5c38:	51 e1       	ldi	r21, 0x11	; 17
    5c3a:	07 c0       	rjmp	.+14     	; 0x5c4a <__udivmodhi4_ep>

00005c3c <__udivmodhi4_loop>:
    5c3c:	aa 1f       	adc	r26, r26
    5c3e:	bb 1f       	adc	r27, r27
    5c40:	a6 17       	cp	r26, r22
    5c42:	b7 07       	cpc	r27, r23
    5c44:	10 f0       	brcs	.+4      	; 0x5c4a <__udivmodhi4_ep>
    5c46:	a6 1b       	sub	r26, r22
    5c48:	b7 0b       	sbc	r27, r23

00005c4a <__udivmodhi4_ep>:
    5c4a:	88 1f       	adc	r24, r24
    5c4c:	99 1f       	adc	r25, r25
    5c4e:	5a 95       	dec	r21
    5c50:	a9 f7       	brne	.-22     	; 0x5c3c <__udivmodhi4_loop>
    5c52:	80 95       	com	r24
    5c54:	90 95       	com	r25
    5c56:	bc 01       	movw	r22, r24
    5c58:	cd 01       	movw	r24, r26
    5c5a:	08 95       	ret

00005c5c <__divmodsi4>:
    5c5c:	97 fb       	bst	r25, 7
    5c5e:	09 2e       	mov	r0, r25
    5c60:	05 26       	eor	r0, r21
    5c62:	0e d0       	rcall	.+28     	; 0x5c80 <__divmodsi4_neg1>
    5c64:	57 fd       	sbrc	r21, 7
    5c66:	04 d0       	rcall	.+8      	; 0x5c70 <__divmodsi4_neg2>
    5c68:	14 d0       	rcall	.+40     	; 0x5c92 <__udivmodsi4>
    5c6a:	0a d0       	rcall	.+20     	; 0x5c80 <__divmodsi4_neg1>
    5c6c:	00 1c       	adc	r0, r0
    5c6e:	38 f4       	brcc	.+14     	; 0x5c7e <__divmodsi4_exit>

00005c70 <__divmodsi4_neg2>:
    5c70:	50 95       	com	r21
    5c72:	40 95       	com	r20
    5c74:	30 95       	com	r19
    5c76:	21 95       	neg	r18
    5c78:	3f 4f       	sbci	r19, 0xFF	; 255
    5c7a:	4f 4f       	sbci	r20, 0xFF	; 255
    5c7c:	5f 4f       	sbci	r21, 0xFF	; 255

00005c7e <__divmodsi4_exit>:
    5c7e:	08 95       	ret

00005c80 <__divmodsi4_neg1>:
    5c80:	f6 f7       	brtc	.-4      	; 0x5c7e <__divmodsi4_exit>
    5c82:	90 95       	com	r25
    5c84:	80 95       	com	r24
    5c86:	70 95       	com	r23
    5c88:	61 95       	neg	r22
    5c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c90:	08 95       	ret

00005c92 <__udivmodsi4>:
    5c92:	a1 e2       	ldi	r26, 0x21	; 33
    5c94:	1a 2e       	mov	r1, r26
    5c96:	aa 1b       	sub	r26, r26
    5c98:	bb 1b       	sub	r27, r27
    5c9a:	fd 01       	movw	r30, r26
    5c9c:	0d c0       	rjmp	.+26     	; 0x5cb8 <__udivmodsi4_ep>

00005c9e <__udivmodsi4_loop>:
    5c9e:	aa 1f       	adc	r26, r26
    5ca0:	bb 1f       	adc	r27, r27
    5ca2:	ee 1f       	adc	r30, r30
    5ca4:	ff 1f       	adc	r31, r31
    5ca6:	a2 17       	cp	r26, r18
    5ca8:	b3 07       	cpc	r27, r19
    5caa:	e4 07       	cpc	r30, r20
    5cac:	f5 07       	cpc	r31, r21
    5cae:	20 f0       	brcs	.+8      	; 0x5cb8 <__udivmodsi4_ep>
    5cb0:	a2 1b       	sub	r26, r18
    5cb2:	b3 0b       	sbc	r27, r19
    5cb4:	e4 0b       	sbc	r30, r20
    5cb6:	f5 0b       	sbc	r31, r21

00005cb8 <__udivmodsi4_ep>:
    5cb8:	66 1f       	adc	r22, r22
    5cba:	77 1f       	adc	r23, r23
    5cbc:	88 1f       	adc	r24, r24
    5cbe:	99 1f       	adc	r25, r25
    5cc0:	1a 94       	dec	r1
    5cc2:	69 f7       	brne	.-38     	; 0x5c9e <__udivmodsi4_loop>
    5cc4:	60 95       	com	r22
    5cc6:	70 95       	com	r23
    5cc8:	80 95       	com	r24
    5cca:	90 95       	com	r25
    5ccc:	9b 01       	movw	r18, r22
    5cce:	ac 01       	movw	r20, r24
    5cd0:	bd 01       	movw	r22, r26
    5cd2:	cf 01       	movw	r24, r30
    5cd4:	08 95       	ret

00005cd6 <__prologue_saves__>:
    5cd6:	2f 92       	push	r2
    5cd8:	3f 92       	push	r3
    5cda:	4f 92       	push	r4
    5cdc:	5f 92       	push	r5
    5cde:	6f 92       	push	r6
    5ce0:	7f 92       	push	r7
    5ce2:	8f 92       	push	r8
    5ce4:	9f 92       	push	r9
    5ce6:	af 92       	push	r10
    5ce8:	bf 92       	push	r11
    5cea:	cf 92       	push	r12
    5cec:	df 92       	push	r13
    5cee:	ef 92       	push	r14
    5cf0:	ff 92       	push	r15
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	cf 93       	push	r28
    5cf8:	df 93       	push	r29
    5cfa:	cd b7       	in	r28, 0x3d	; 61
    5cfc:	de b7       	in	r29, 0x3e	; 62
    5cfe:	ca 1b       	sub	r28, r26
    5d00:	db 0b       	sbc	r29, r27
    5d02:	0f b6       	in	r0, 0x3f	; 63
    5d04:	f8 94       	cli
    5d06:	de bf       	out	0x3e, r29	; 62
    5d08:	0f be       	out	0x3f, r0	; 63
    5d0a:	cd bf       	out	0x3d, r28	; 61
    5d0c:	09 94       	ijmp

00005d0e <__epilogue_restores__>:
    5d0e:	2a 88       	ldd	r2, Y+18	; 0x12
    5d10:	39 88       	ldd	r3, Y+17	; 0x11
    5d12:	48 88       	ldd	r4, Y+16	; 0x10
    5d14:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d16:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d18:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d20:	b9 84       	ldd	r11, Y+9	; 0x09
    5d22:	c8 84       	ldd	r12, Y+8	; 0x08
    5d24:	df 80       	ldd	r13, Y+7	; 0x07
    5d26:	ee 80       	ldd	r14, Y+6	; 0x06
    5d28:	fd 80       	ldd	r15, Y+5	; 0x05
    5d2a:	0c 81       	ldd	r16, Y+4	; 0x04
    5d2c:	1b 81       	ldd	r17, Y+3	; 0x03
    5d2e:	aa 81       	ldd	r26, Y+2	; 0x02
    5d30:	b9 81       	ldd	r27, Y+1	; 0x01
    5d32:	ce 0f       	add	r28, r30
    5d34:	d1 1d       	adc	r29, r1
    5d36:	0f b6       	in	r0, 0x3f	; 63
    5d38:	f8 94       	cli
    5d3a:	de bf       	out	0x3e, r29	; 62
    5d3c:	0f be       	out	0x3f, r0	; 63
    5d3e:	cd bf       	out	0x3d, r28	; 61
    5d40:	ed 01       	movw	r28, r26
    5d42:	08 95       	ret

00005d44 <_exit>:
    5d44:	f8 94       	cli

00005d46 <__stop_program>:
    5d46:	ff cf       	rjmp	.-2      	; 0x5d46 <__stop_program>
