
APP_26_UART-testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000002a0  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000035d  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
u8 UART_u8_recive_char(void );

// Global variables and structs section


int main(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	// Setup section
	UART_void_init();
  74:	0e 94 49 00 	call	0x92	; 0x92 <UART_void_init>
	UART_void_transmit_char('o');
  78:	8f e6       	ldi	r24, 0x6F	; 111
  7a:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_void_transmit_char>
	UART_void_transmit_char('m');
  7e:	8d e6       	ldi	r24, 0x6D	; 109
  80:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_void_transmit_char>
	UART_void_transmit_char('a');
  84:	81 e6       	ldi	r24, 0x61	; 97
  86:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_void_transmit_char>
	UART_void_transmit_char('r');
  8a:	82 e7       	ldi	r24, 0x72	; 114
  8c:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_void_transmit_char>
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x24>

00000092 <UART_void_init>:
	}
	return 0;
}


void UART_void_init(void ){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	UART_UBRRH= 0;
  9a:	e0 e4       	ldi	r30, 0x40	; 64
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	10 82       	st	Z, r1
	UART_UBRRL= 51;
  a0:	e9 e2       	ldi	r30, 0x29	; 41
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	83 e3       	ldi	r24, 0x33	; 51
  a6:	80 83       	st	Z, r24

	UART_UCSRC= 0b10000110;
  a8:	e0 e4       	ldi	r30, 0x40	; 64
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 83       	st	Z, r24
	UART_UCSRB= 0b00011000;
  b0:	ea e2       	ldi	r30, 0x2A	; 42
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 83       	st	Z, r24
}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <UART_void_transmit_char>:

void UART_void_transmit_char(u8 word){
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	0f 92       	push	r0
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	while(get_bit(UART_UCSRA, 5) == 0);
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 95       	swap	r24
  d2:	86 95       	lsr	r24
  d4:	87 70       	andi	r24, 0x07	; 7
  d6:	88 2f       	mov	r24, r24
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	81 70       	andi	r24, 0x01	; 1
  dc:	90 70       	andi	r25, 0x00	; 0
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	a1 f3       	breq	.-24     	; 0xca <UART_void_transmit_char+0xc>
	UART_UDR= word;
  e2:	ec e2       	ldi	r30, 0x2C	; 44
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	80 83       	st	Z, r24
}
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <UART_u8_recive_char>:

u8 UART_u8_recive_char(void ){
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	while(get_bit(UART_UCSRA, 7) == 0);
  fa:	eb e2       	ldi	r30, 0x2B	; 43
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 23       	and	r24, r24
 102:	dc f7       	brge	.-10     	; 0xfa <UART_u8_recive_char+0x8>
	return UART_UDR;
 104:	ec e2       	ldi	r30, 0x2C	; 44
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
}
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
