
APP_30_RTOS-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000d2a  00000dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800078  00800078  00000dd6  2**0
                  ALLOC
  3 .stab         000010a4  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b73  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_4>
  14:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_7>
  20:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_8>
  24:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_9>
  28:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_10>
  2c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 03 	call	0x71e	; 0x71e <main>
  8a:	0c 94 93 06 	jmp	0xd26	; 0xd26 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_init>:
// pointer to temporary configuration struct
static timer_config* copy_ptr_temp_timer_config = NULL;


/* Implementing of the driver functions */
void TIMER_init(timer_config* ptr_timer_config){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <TIMER_init+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	copy_ptr_temp_timer_config = ptr_timer_config;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	90 93 79 00 	sts	0x0079, r25
  a8:	80 93 78 00 	sts	0x0078, r24
}
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <TIMER_set_callback>:

void TIMER_set_callback(u8 copy_int_ref, void (*copy_ptr_call_back_function)(void) ){
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	00 d0       	rcall	.+0      	; 0xbc <TIMER_set_callback+0x6>
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	7b 83       	std	Y+3, r23	; 0x03
  c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 *
	 */
	if((copy_int_ref >= 0)&&(copy_int_ref <= 6))
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	87 30       	cpi	r24, 0x07	; 7
  cc:	60 f4       	brcc	.+24     	; 0xe6 <TIMER_set_callback+0x30>
		call_back_function[copy_int_ref] = copy_ptr_call_back_function;
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	fc 01       	movw	r30, r24
  da:	e6 58       	subi	r30, 0x86	; 134
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	9b 81       	ldd	r25, Y+3	; 0x03
  e2:	91 83       	std	Z+1, r25	; 0x01
  e4:	80 83       	st	Z, r24
}
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <TIMER_config>:

void TIMER_config(void ){
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	00 d0       	rcall	.+0      	; 0xf8 <TIMER_config+0x6>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if (copy_ptr_temp_timer_config != NULL){
  fc:	80 91 78 00 	lds	r24, 0x0078
 100:	90 91 79 00 	lds	r25, 0x0079
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	09 f4       	brne	.+2      	; 0x10a <TIMER_config+0x18>
 108:	12 c1       	rjmp	.+548    	; 0x32e <TIMER_config+0x23c>
		if((copy_ptr_temp_timer_config -> WGM) <= TIMER0_sep){
 10a:	e0 91 78 00 	lds	r30, 0x0078
 10e:	f0 91 79 00 	lds	r31, 0x0079
 112:	80 81       	ld	r24, Z
 114:	87 70       	andi	r24, 0x07	; 7
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	91 05       	cpc	r25, r1
 11e:	0c f0       	brlt	.+2      	; 0x122 <TIMER_config+0x30>
 120:	78 c0       	rjmp	.+240    	; 0x212 <TIMER_config+0x120>
			// Set preload value of the TCNT register (1)
			TIMER_TCNT0 = *((u8*)(copy_ptr_temp_timer_config -> preload));
 122:	a2 e5       	ldi	r26, 0x52	; 82
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 91 78 00 	lds	r30, 0x0078
 12a:	f0 91 79 00 	lds	r31, 0x0079
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	92 81       	ldd	r25, Z+2	; 0x02
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	8c 93       	st	X, r24
			// Set preload value of the OCR or ICR register (2)
			TIMER_OCR0 = *(((u8*)(copy_ptr_temp_timer_config -> preload))+1);
 138:	ac e5       	ldi	r26, 0x5C	; 92
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e0 91 78 00 	lds	r30, 0x0078
 140:	f0 91 79 00 	lds	r31, 0x0079
 144:	81 81       	ldd	r24, Z+1	; 0x01
 146:	92 81       	ldd	r25, Z+2	; 0x02
 148:	fc 01       	movw	r30, r24
 14a:	31 96       	adiw	r30, 0x01	; 1
 14c:	80 81       	ld	r24, Z
 14e:	8c 93       	st	X, r24
			// Reset timer control register (3)
			TIMER_TCCR0 &= TIMER0_TCCR_Reset;
 150:	e3 e5       	ldi	r30, 0x53	; 83
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	e3 e5       	ldi	r30, 0x53	; 83
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
			// Reset timer interrupt mask register (timer 0 interrupt bits) (4)
			TIMER_TIMSK &= TIMER0_TIMSK_Reset;
 15c:	a9 e5       	ldi	r26, 0x59	; 89
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e9 e5       	ldi	r30, 0x59	; 89
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8c 7f       	andi	r24, 0xFC	; 252
 168:	8c 93       	st	X, r24
			// Set wave form generation mode (5)
			// Enable the interrupt bit (6)
			if((copy_ptr_temp_timer_config -> WGM) == 0){
 16a:	e0 91 78 00 	lds	r30, 0x0078
 16e:	f0 91 79 00 	lds	r31, 0x0079
 172:	80 81       	ld	r24, Z
 174:	87 70       	andi	r24, 0x07	; 7
 176:	88 23       	and	r24, r24
 178:	71 f4       	brne	.+28     	; 0x196 <TIMER_config+0xa4>
				// Normal mode 
				TIMER_TCCR0 |= ((get_bit(TIMER0_NORM, 1) << TIMER_WGM01) | (get_bit(TIMER0_NORM, 0) << TIMER_WGM00));	//0b0000000
 17a:	a3 e5       	ldi	r26, 0x53	; 83
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e3 e5       	ldi	r30, 0x53	; 83
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8c 93       	st	X, r24
				// In normal mode the overflow interrupt is enabled
				TIMER_TIMSK |= ((TIMER_DISABLE << TIMER_OCIE0) | (TIMER_ENABLE << TIMER_TOIE0));	//0bxxxxxx01
 186:	a9 e5       	ldi	r26, 0x59	; 89
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e9 e5       	ldi	r30, 0x59	; 89
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8c 93       	st	X, r24
 194:	0e c0       	rjmp	.+28     	; 0x1b2 <TIMER_config+0xc0>
			}
			else{
				// Clear timer on compare mode
				TIMER_TCCR0 |= ((get_bit(TIMER0_CTC, 1) << TIMER_WGM01) | (get_bit(TIMER0_CTC, 0) << TIMER_WGM00));	//0b00001000
 196:	a3 e5       	ldi	r26, 0x53	; 83
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e3 e5       	ldi	r30, 0x53	; 83
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	8c 93       	st	X, r24
				// In compare match mode the compare match interrupt is enabled
				TIMER_TIMSK |= ((TIMER_ENABLE << TIMER_OCIE0) | (TIMER_DISABLE << TIMER_TOIE0));	//0bxxxxxx10
 1a4:	a9 e5       	ldi	r26, 0x59	; 89
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e9 e5       	ldi	r30, 0x59	; 89
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	8c 93       	st	X, r24
			}
			// Set output compare mode (7)
			TIMER_TCCR0 |= ((copy_ptr_temp_timer_config -> COM) << TIMER_COM00);
 1b2:	a3 e5       	ldi	r26, 0x53	; 83
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e3 e5       	ldi	r30, 0x53	; 83
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	28 2f       	mov	r18, r24
 1be:	e0 91 78 00 	lds	r30, 0x0078
 1c2:	f0 91 79 00 	lds	r31, 0x0079
 1c6:	80 81       	ld	r24, Z
 1c8:	86 95       	lsr	r24
 1ca:	86 95       	lsr	r24
 1cc:	86 95       	lsr	r24
 1ce:	83 70       	andi	r24, 0x03	; 3
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	82 95       	swap	r24
 1d6:	92 95       	swap	r25
 1d8:	90 7f       	andi	r25, 0xF0	; 240
 1da:	98 27       	eor	r25, r24
 1dc:	80 7f       	andi	r24, 0xF0	; 240
 1de:	98 27       	eor	r25, r24
 1e0:	82 2b       	or	r24, r18
 1e2:	8c 93       	st	X, r24
			// Set prescaler value (8)
			TIMER_TCCR0 |= (copy_ptr_temp_timer_config -> CS);
 1e4:	a3 e5       	ldi	r26, 0x53	; 83
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e3 e5       	ldi	r30, 0x53	; 83
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	90 81       	ld	r25, Z
 1ee:	e0 91 78 00 	lds	r30, 0x0078
 1f2:	f0 91 79 00 	lds	r31, 0x0079
 1f6:	80 81       	ld	r24, Z
 1f8:	82 95       	swap	r24
 1fa:	86 95       	lsr	r24
 1fc:	87 70       	andi	r24, 0x07	; 7
 1fe:	89 2b       	or	r24, r25
 200:	8c 93       	st	X, r24
			// Enable Global interrupt (9)
			TIMER_SREG |= (TIMER_ENABLE << TIMER_Glob_Init_bit);
 202:	af e5       	ldi	r26, 0x5F	; 95
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	ef e5       	ldi	r30, 0x5F	; 95
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	8c 93       	st	X, r24
 210:	8e c0       	rjmp	.+284    	; 0x32e <TIMER_config+0x23c>
		}
		else if(((copy_ptr_temp_timer_config -> WGM) > TIMER0_sep) && ((copy_ptr_temp_timer_config -> WGM) <= TIMER1_sep)){
 212:	e0 91 78 00 	lds	r30, 0x0078
 216:	f0 91 79 00 	lds	r31, 0x0079
 21a:	80 81       	ld	r24, Z
 21c:	87 70       	andi	r24, 0x07	; 7
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	91 05       	cpc	r25, r1
 226:	64 f0       	brlt	.+24     	; 0x240 <TIMER_config+0x14e>
 228:	e0 91 78 00 	lds	r30, 0x0078
 22c:	f0 91 79 00 	lds	r31, 0x0079
 230:	80 81       	ld	r24, Z
 232:	87 70       	andi	r24, 0x07	; 7
 234:	88 2f       	mov	r24, r24
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	85 30       	cpi	r24, 0x05	; 5
 23a:	91 05       	cpc	r25, r1
 23c:	0c f4       	brge	.+2      	; 0x240 <TIMER_config+0x14e>
 23e:	77 c0       	rjmp	.+238    	; 0x32e <TIMER_config+0x23c>

		}
		else{
			// Set preload value of the TCNT register (1)
			TIMER_TCNT2 = *((u8*)(copy_ptr_temp_timer_config -> preload));
 240:	a4 e4       	ldi	r26, 0x44	; 68
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e0 91 78 00 	lds	r30, 0x0078
 248:	f0 91 79 00 	lds	r31, 0x0079
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	92 81       	ldd	r25, Z+2	; 0x02
 250:	fc 01       	movw	r30, r24
 252:	80 81       	ld	r24, Z
 254:	8c 93       	st	X, r24
			// Set preload value of the OCR or ICR register (2)
			TIMER_OCR2 = *(((u8*)(copy_ptr_temp_timer_config -> preload))+1);
 256:	a3 e4       	ldi	r26, 0x43	; 67
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e0 91 78 00 	lds	r30, 0x0078
 25e:	f0 91 79 00 	lds	r31, 0x0079
 262:	81 81       	ldd	r24, Z+1	; 0x01
 264:	92 81       	ldd	r25, Z+2	; 0x02
 266:	fc 01       	movw	r30, r24
 268:	31 96       	adiw	r30, 0x01	; 1
 26a:	80 81       	ld	r24, Z
 26c:	8c 93       	st	X, r24
			// Reset timer control register (3)
			TIMER_TCCR2 &= TIMER2_TCCR_Reset;
 26e:	e5 e4       	ldi	r30, 0x45	; 69
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	e5 e4       	ldi	r30, 0x45	; 69
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	10 82       	st	Z, r1
			// Reset timer interrupt mask register (timer 2 interrupt bits) (4)
			TIMER_TIMSK &= TIMER2_TIMSK_Reset;
 27a:	a9 e5       	ldi	r26, 0x59	; 89
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e9 e5       	ldi	r30, 0x59	; 89
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	8f 73       	andi	r24, 0x3F	; 63
 286:	8c 93       	st	X, r24
			// Set wave form generation mode (5)
			// Enable the interrupt bit (6)
			if((copy_ptr_temp_timer_config -> WGM) == 5){
 288:	e0 91 78 00 	lds	r30, 0x0078
 28c:	f0 91 79 00 	lds	r31, 0x0079
 290:	80 81       	ld	r24, Z
 292:	87 70       	andi	r24, 0x07	; 7
 294:	85 30       	cpi	r24, 0x05	; 5
 296:	71 f4       	brne	.+28     	; 0x2b4 <TIMER_config+0x1c2>
				// Normal mode
				TIMER_TCCR2 |= ((get_bit(TIMER2_NORM, 1) << TIMER_WGM21) | (get_bit(TIMER2_NORM, 0) << TIMER_WGM20));
 298:	a5 e4       	ldi	r26, 0x45	; 69
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e5 e4       	ldi	r30, 0x45	; 69
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	8c 93       	st	X, r24
				// In normal mode the overflow interrupt is enabled
				TIMER_TIMSK |= ((TIMER_DISABLE << TIMER_OCIE2) | (TIMER_ENABLE << TIMER_TOIE2));
 2a4:	a9 e5       	ldi	r26, 0x59	; 89
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e9 e5       	ldi	r30, 0x59	; 89
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	8c 93       	st	X, r24
 2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <TIMER_config+0x1de>
			}
			else{
				// Clear timer on compare mode
				TIMER_TCCR2 |= ((get_bit(TIMER2_CTC, 1) << TIMER_WGM21) | (get_bit(TIMER2_CTC, 0) << TIMER_WGM20));
 2b4:	a5 e4       	ldi	r26, 0x45	; 69
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e5 e4       	ldi	r30, 0x45	; 69
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	8c 93       	st	X, r24
				// In compare match mode the compare match interrupt is enabled
				TIMER_TIMSK |= ((TIMER_ENABLE << TIMER_OCIE2) | (TIMER_DISABLE << TIMER_TOIE2));
 2c2:	a9 e5       	ldi	r26, 0x59	; 89
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e9 e5       	ldi	r30, 0x59	; 89
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	8c 93       	st	X, r24
			}
			// Set output compare mode (7)
			TIMER_TCCR2 |= ((copy_ptr_temp_timer_config -> COM) << TIMER_COM20);
 2d0:	a5 e4       	ldi	r26, 0x45	; 69
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	e5 e4       	ldi	r30, 0x45	; 69
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	28 2f       	mov	r18, r24
 2dc:	e0 91 78 00 	lds	r30, 0x0078
 2e0:	f0 91 79 00 	lds	r31, 0x0079
 2e4:	80 81       	ld	r24, Z
 2e6:	86 95       	lsr	r24
 2e8:	86 95       	lsr	r24
 2ea:	86 95       	lsr	r24
 2ec:	83 70       	andi	r24, 0x03	; 3
 2ee:	88 2f       	mov	r24, r24
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	82 95       	swap	r24
 2f4:	92 95       	swap	r25
 2f6:	90 7f       	andi	r25, 0xF0	; 240
 2f8:	98 27       	eor	r25, r24
 2fa:	80 7f       	andi	r24, 0xF0	; 240
 2fc:	98 27       	eor	r25, r24
 2fe:	82 2b       	or	r24, r18
 300:	8c 93       	st	X, r24
			// Set prescaler value (8)
			TIMER_TCCR2 |= (copy_ptr_temp_timer_config -> CS);
 302:	a5 e4       	ldi	r26, 0x45	; 69
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	e5 e4       	ldi	r30, 0x45	; 69
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	90 81       	ld	r25, Z
 30c:	e0 91 78 00 	lds	r30, 0x0078
 310:	f0 91 79 00 	lds	r31, 0x0079
 314:	80 81       	ld	r24, Z
 316:	82 95       	swap	r24
 318:	86 95       	lsr	r24
 31a:	87 70       	andi	r24, 0x07	; 7
 31c:	89 2b       	or	r24, r25
 31e:	8c 93       	st	X, r24
			// Enable Global interrupt (9)
			TIMER_SREG |= (TIMER_ENABLE << TIMER_Glob_Init_bit);
 320:	af e5       	ldi	r26, 0x5F	; 95
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	ef e5       	ldi	r30, 0x5F	; 95
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	8c 93       	st	X, r24
		}
	}
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	cf 91       	pop	r28
 334:	df 91       	pop	r29
 336:	08 95       	ret

00000338 <TIMER_stop>:

void TIMER_stop(void ){
 338:	df 93       	push	r29
 33a:	cf 93       	push	r28
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if (copy_ptr_temp_timer_config != NULL){
 340:	80 91 78 00 	lds	r24, 0x0078
 344:	90 91 79 00 	lds	r25, 0x0079
 348:	00 97       	sbiw	r24, 0x00	; 0
 34a:	81 f1       	breq	.+96     	; 0x3ac <TIMER_stop+0x74>
		if((copy_ptr_temp_timer_config -> WGM) <= TIMER0_sep){
 34c:	e0 91 78 00 	lds	r30, 0x0078
 350:	f0 91 79 00 	lds	r31, 0x0079
 354:	80 81       	ld	r24, Z
 356:	87 70       	andi	r24, 0x07	; 7
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	91 05       	cpc	r25, r1
 360:	44 f4       	brge	.+16     	; 0x372 <TIMER_stop+0x3a>
			TIMER_TCCR0 &= TIMER_STOP_MASK;
 362:	a3 e5       	ldi	r26, 0x53	; 83
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e3 e5       	ldi	r30, 0x53	; 83
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	88 7f       	andi	r24, 0xF8	; 248
 36e:	8c 93       	st	X, r24
 370:	1d c0       	rjmp	.+58     	; 0x3ac <TIMER_stop+0x74>
		}
		else if(((copy_ptr_temp_timer_config -> WGM) > TIMER0_sep) && ((copy_ptr_temp_timer_config -> WGM) <= TIMER1_sep)){
 372:	e0 91 78 00 	lds	r30, 0x0078
 376:	f0 91 79 00 	lds	r31, 0x0079
 37a:	80 81       	ld	r24, Z
 37c:	87 70       	andi	r24, 0x07	; 7
 37e:	88 2f       	mov	r24, r24
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	91 05       	cpc	r25, r1
 386:	5c f0       	brlt	.+22     	; 0x39e <TIMER_stop+0x66>
 388:	e0 91 78 00 	lds	r30, 0x0078
 38c:	f0 91 79 00 	lds	r31, 0x0079
 390:	80 81       	ld	r24, Z
 392:	87 70       	andi	r24, 0x07	; 7
 394:	88 2f       	mov	r24, r24
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	85 30       	cpi	r24, 0x05	; 5
 39a:	91 05       	cpc	r25, r1
 39c:	3c f0       	brlt	.+14     	; 0x3ac <TIMER_stop+0x74>
			
		}
		else{
			TIMER_TCCR2 &= TIMER_STOP_MASK;
 39e:	a5 e4       	ldi	r26, 0x45	; 69
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	e5 e4       	ldi	r30, 0x45	; 69
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	88 7f       	andi	r24, 0xF8	; 248
 3aa:	8c 93       	st	X, r24
		}
	}
}
 3ac:	cf 91       	pop	r28
 3ae:	df 91       	pop	r29
 3b0:	08 95       	ret

000003b2 <__vector_11>:

void __vector_11(void){
 3b2:	1f 92       	push	r1
 3b4:	0f 92       	push	r0
 3b6:	0f b6       	in	r0, 0x3f	; 63
 3b8:	0f 92       	push	r0
 3ba:	11 24       	eor	r1, r1
 3bc:	2f 93       	push	r18
 3be:	3f 93       	push	r19
 3c0:	4f 93       	push	r20
 3c2:	5f 93       	push	r21
 3c4:	6f 93       	push	r22
 3c6:	7f 93       	push	r23
 3c8:	8f 93       	push	r24
 3ca:	9f 93       	push	r25
 3cc:	af 93       	push	r26
 3ce:	bf 93       	push	r27
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31
 3d4:	df 93       	push	r29
 3d6:	cf 93       	push	r28
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER0_OVF] != NULL)
 3dc:	80 91 7a 00 	lds	r24, 0x007A
 3e0:	90 91 7b 00 	lds	r25, 0x007B
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	29 f0       	breq	.+10     	; 0x3f2 <__vector_11+0x40>
		call_back_function[ref_TIMER0_OVF]();
 3e8:	e0 91 7a 00 	lds	r30, 0x007A
 3ec:	f0 91 7b 00 	lds	r31, 0x007B
 3f0:	09 95       	icall
}
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	ff 91       	pop	r31
 3f8:	ef 91       	pop	r30
 3fa:	bf 91       	pop	r27
 3fc:	af 91       	pop	r26
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	7f 91       	pop	r23
 404:	6f 91       	pop	r22
 406:	5f 91       	pop	r21
 408:	4f 91       	pop	r20
 40a:	3f 91       	pop	r19
 40c:	2f 91       	pop	r18
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <__vector_10>:

void __vector_10(void){
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
 43a:	df 93       	push	r29
 43c:	cf 93       	push	r28
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER0_COMP] != NULL)
 442:	80 91 7c 00 	lds	r24, 0x007C
 446:	90 91 7d 00 	lds	r25, 0x007D
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	29 f0       	breq	.+10     	; 0x458 <__vector_10+0x40>
		call_back_function[ref_TIMER0_COMP]();
 44e:	e0 91 7c 00 	lds	r30, 0x007C
 452:	f0 91 7d 00 	lds	r31, 0x007D
 456:	09 95       	icall
}
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__vector_9>:

void __vector_9(void){
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
 4a0:	df 93       	push	r29
 4a2:	cf 93       	push	r28
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER1_OVF] != NULL)
 4a8:	80 91 7e 00 	lds	r24, 0x007E
 4ac:	90 91 7f 00 	lds	r25, 0x007F
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	29 f0       	breq	.+10     	; 0x4be <__vector_9+0x40>
		call_back_function[ref_TIMER1_OVF]();
 4b4:	e0 91 7e 00 	lds	r30, 0x007E
 4b8:	f0 91 7f 00 	lds	r31, 0x007F
 4bc:	09 95       	icall
}
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <__vector_8>:

void __vector_8(void){
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
 506:	df 93       	push	r29
 508:	cf 93       	push	r28
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER1_COMPB] != NULL)
 50e:	80 91 80 00 	lds	r24, 0x0080
 512:	90 91 81 00 	lds	r25, 0x0081
 516:	00 97       	sbiw	r24, 0x00	; 0
 518:	29 f0       	breq	.+10     	; 0x524 <__vector_8+0x40>
		call_back_function[ref_TIMER1_COMPB]();
 51a:	e0 91 80 00 	lds	r30, 0x0080
 51e:	f0 91 81 00 	lds	r31, 0x0081
 522:	09 95       	icall
}
 524:	cf 91       	pop	r28
 526:	df 91       	pop	r29
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_7>:

void __vector_7(void){
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER1_COMPA] != NULL)
 574:	80 91 82 00 	lds	r24, 0x0082
 578:	90 91 83 00 	lds	r25, 0x0083
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	29 f0       	breq	.+10     	; 0x58a <__vector_7+0x40>
		call_back_function[ref_TIMER1_COMPA]();
 580:	e0 91 82 00 	lds	r30, 0x0082
 584:	f0 91 83 00 	lds	r31, 0x0083
 588:	09 95       	icall
}
 58a:	cf 91       	pop	r28
 58c:	df 91       	pop	r29
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_5>:

void __vector_5(void){
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
 5d2:	df 93       	push	r29
 5d4:	cf 93       	push	r28
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER2_OVF] != NULL)
 5da:	80 91 84 00 	lds	r24, 0x0084
 5de:	90 91 85 00 	lds	r25, 0x0085
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	29 f0       	breq	.+10     	; 0x5f0 <__vector_5+0x40>
		call_back_function[ref_TIMER2_OVF]();
 5e6:	e0 91 84 00 	lds	r30, 0x0084
 5ea:	f0 91 85 00 	lds	r31, 0x0085
 5ee:	09 95       	icall
}
 5f0:	cf 91       	pop	r28
 5f2:	df 91       	pop	r29
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__vector_4>:

void __vector_4(void){
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
 638:	df 93       	push	r29
 63a:	cf 93       	push	r28
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER2_COMP] != NULL)
 640:	80 91 86 00 	lds	r24, 0x0086
 644:	90 91 87 00 	lds	r25, 0x0087
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	29 f0       	breq	.+10     	; 0x656 <__vector_4+0x40>
		call_back_function[ref_TIMER2_COMP]();
 64c:	e0 91 86 00 	lds	r30, 0x0086
 650:	f0 91 87 00 	lds	r31, 0x0087
 654:	09 95       	icall
}
 656:	cf 91       	pop	r28
 658:	df 91       	pop	r29
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <create_task>:
// Global variables
static Task task_arr[no_tasks];
static u8 Task_count= 0;
extern u8 tick_count;

void create_task(u8 copy_task_periodicety, void(*copy_callback_ptr)(void)){
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	00 d0       	rcall	.+0      	; 0x682 <create_task+0x6>
 682:	0f 92       	push	r0
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	89 83       	std	Y+1, r24	; 0x01
 68a:	7b 83       	std	Y+3, r23	; 0x03
 68c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 *
	 */
	if(Task_count < no_tasks){
 68e:	80 91 88 00 	lds	r24, 0x0088
 692:	83 30       	cpi	r24, 0x03	; 3
 694:	48 f4       	brcc	.+18     	; 0x6a8 <create_task+0x2c>
		task_arr[no_tasks].task_periodicety = copy_task_periodicety;
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	80 93 92 00 	sts	0x0092, r24
		task_arr[no_tasks].task_callback_ptr = copy_callback_ptr;
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	9b 81       	ldd	r25, Y+3	; 0x03
 6a0:	90 93 94 00 	sts	0x0094, r25
 6a4:	80 93 93 00 	sts	0x0093, r24
	}
}
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <scheduler>:


void scheduler(void ){
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	0f 92       	push	r0
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	for(u8 i= 0; i < no_tasks; i++){
 6be:	19 82       	std	Y+1, r1	; 0x01
 6c0:	27 c0       	rjmp	.+78     	; 0x710 <scheduler+0x5c>
		if((tick_count % (task_arr[i].task_periodicety)) == 0){
 6c2:	40 91 92 00 	lds	r20, 0x0092
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	c9 01       	movw	r24, r18
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	82 0f       	add	r24, r18
 6d4:	93 1f       	adc	r25, r19
 6d6:	fc 01       	movw	r30, r24
 6d8:	e7 57       	subi	r30, 0x77	; 119
 6da:	ff 4f       	sbci	r31, 0xFF	; 255
 6dc:	90 81       	ld	r25, Z
 6de:	84 2f       	mov	r24, r20
 6e0:	69 2f       	mov	r22, r25
 6e2:	0e 94 87 06 	call	0xd0e	; 0xd0e <__udivmodqi4>
 6e6:	89 2f       	mov	r24, r25
 6e8:	88 23       	and	r24, r24
 6ea:	79 f4       	brne	.+30     	; 0x70a <scheduler+0x56>
			task_arr[i].task_callback_ptr();
 6ec:	89 81       	ldd	r24, Y+1	; 0x01
 6ee:	28 2f       	mov	r18, r24
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	c9 01       	movw	r24, r18
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	82 0f       	add	r24, r18
 6fa:	93 1f       	adc	r25, r19
 6fc:	fc 01       	movw	r30, r24
 6fe:	e6 57       	subi	r30, 0x76	; 118
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	01 90       	ld	r0, Z+
 704:	f0 81       	ld	r31, Z
 706:	e0 2d       	mov	r30, r0
 708:	09 95       	icall

void scheduler(void ){
	/*
	 *
	 */
	for(u8 i= 0; i < no_tasks; i++){
 70a:	89 81       	ldd	r24, Y+1	; 0x01
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	89 83       	std	Y+1, r24	; 0x01
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	83 30       	cpi	r24, 0x03	; 3
 714:	b0 f2       	brcs	.-84     	; 0x6c2 <scheduler+0xe>
		if((tick_count % (task_arr[i].task_periodicety)) == 0){
			task_arr[i].task_callback_ptr();
		}
	}
}
 716:	0f 90       	pop	r0
 718:	cf 91       	pop	r28
 71a:	df 91       	pop	r29
 71c:	08 95       	ret

0000071e <main>:

// Global variables section
u8 tick_count= 0;

// Main function
int main(void ){
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	00 d0       	rcall	.+0      	; 0x724 <main+0x6>
 724:	00 d0       	rcall	.+0      	; 0x726 <main+0x8>
 726:	0f 92       	push	r0
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
	// Setup section

	init_tasks();
 72c:	0e 94 c2 03 	call	0x784	; 0x784 <init_tasks>

	u8 preload_timer0_val[] = {192, 0};
 730:	80 ec       	ldi	r24, 0xC0	; 192
 732:	89 83       	std	Y+1, r24	; 0x01
 734:	1a 82       	std	Y+2, r1	; 0x02
	timer_config timer0_config_1sec = {
		ref_TIMER0_WGM_NORM,
		ref_TIMER_COM_NORM,
		TIMER_8PRE,
		preload_timer0_val
	};
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	88 7f       	andi	r24, 0xF8	; 248
 73a:	8b 83       	std	Y+3, r24	; 0x03
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	87 7e       	andi	r24, 0xE7	; 231
 740:	8b 83       	std	Y+3, r24	; 0x03
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	8f 71       	andi	r24, 0x1F	; 31
 746:	80 64       	ori	r24, 0x40	; 64
 748:	8b 83       	std	Y+3, r24	; 0x03
 74a:	ce 01       	movw	r24, r28
 74c:	01 96       	adiw	r24, 0x01	; 1
 74e:	9d 83       	std	Y+5, r25	; 0x05
 750:	8c 83       	std	Y+4, r24	; 0x04

	TIMER_init(&timer0_config_1sec);
 752:	ce 01       	movw	r24, r28
 754:	03 96       	adiw	r24, 0x03	; 3
 756:	0e 94 49 00 	call	0x92	; 0x92 <TIMER_init>
	TIMER_set_callback(ref_TIMER0_OVF, timer_count_OVF_callback);
 75a:	26 eb       	ldi	r18, 0xB6	; 182
 75c:	33 e0       	ldi	r19, 0x03	; 3
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	b9 01       	movw	r22, r18
 762:	0e 94 5b 00 	call	0xb6	; 0xb6 <TIMER_set_callback>
	TIMER_config();
 766:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER_config>
 76a:	ff cf       	rjmp	.-2      	; 0x76a <main+0x4c>

0000076c <timer_count_OVF_callback>:
	return 0;
}


// Functions implementation
void timer_count_OVF_callback(void ){
 76c:	df 93       	push	r29
 76e:	cf 93       	push	r28
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
		TIMER_config();
		tick_count++;
		scheduler();
	}
	else{
		OVF_counter ++;
 774:	80 91 93 00 	lds	r24, 0x0093
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	80 93 93 00 	sts	0x0093, r24
	}
}
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <init_tasks>:


void init_tasks(void ){
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
	create_task(1, Task1);
 78c:	2a ee       	ldi	r18, 0xEA	; 234
 78e:	33 e0       	ldi	r19, 0x03	; 3
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	b9 01       	movw	r22, r18
 794:	0e 94 3e 03 	call	0x67c	; 0x67c <create_task>
	create_task(2, Task2);
 798:	25 ef       	ldi	r18, 0xF5	; 245
 79a:	33 e0       	ldi	r19, 0x03	; 3
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	b9 01       	movw	r22, r18
 7a0:	0e 94 3e 03 	call	0x67c	; 0x67c <create_task>
	create_task(3, Task3);
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	34 e0       	ldi	r19, 0x04	; 4
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	b9 01       	movw	r22, r18
 7ac:	0e 94 3e 03 	call	0x67c	; 0x67c <create_task>

	DIO_void_set_pin_dir(PORTC, B0, OUTPUT);
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	4f ef       	ldi	r20, 0xFF	; 255
 7b6:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(PORTC, B1, OUTPUT);
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	4f ef       	ldi	r20, 0xFF	; 255
 7c0:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(PORTC, B2, OUTPUT);
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	62 e0       	ldi	r22, 0x02	; 2
 7c8:	4f ef       	ldi	r20, 0xFF	; 255
 7ca:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_void_set_pin_dir>
}
 7ce:	cf 91       	pop	r28
 7d0:	df 91       	pop	r29
 7d2:	08 95       	ret

000007d4 <Task1>:


void Task1(void ){
 7d4:	df 93       	push	r29
 7d6:	cf 93       	push	r28
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
	DIO_void_toggle_pin(PORTC, B0);
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	0e 94 c0 05 	call	0xb80	; 0xb80 <DIO_void_toggle_pin>
}
 7e4:	cf 91       	pop	r28
 7e6:	df 91       	pop	r29
 7e8:	08 95       	ret

000007ea <Task2>:


void Task2(void ){
 7ea:	df 93       	push	r29
 7ec:	cf 93       	push	r28
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
	DIO_void_toggle_pin(PORTC, B1);
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	0e 94 c0 05 	call	0xb80	; 0xb80 <DIO_void_toggle_pin>
}
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	08 95       	ret

00000800 <Task3>:


void Task3(void ){
 800:	df 93       	push	r29
 802:	cf 93       	push	r28
 804:	cd b7       	in	r28, 0x3d	; 61
 806:	de b7       	in	r29, 0x3e	; 62
	DIO_void_toggle_pin(PORTC, B3);
 808:	82 e0       	ldi	r24, 0x02	; 2
 80a:	63 e0       	ldi	r22, 0x03	; 3
 80c:	0e 94 c0 05 	call	0xb80	; 0xb80 <DIO_void_toggle_pin>
}
 810:	cf 91       	pop	r28
 812:	df 91       	pop	r29
 814:	08 95       	ret

00000816 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
 816:	df 93       	push	r29
 818:	cf 93       	push	r28
 81a:	00 d0       	rcall	.+0      	; 0x81c <DIO_void_set_port_dir+0x6>
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	88 2f       	mov	r24, r24
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	fc 01       	movw	r30, r24
 830:	e8 59       	subi	r30, 0x98	; 152
 832:	ff 4f       	sbci	r31, 0xFF	; 255
 834:	01 90       	ld	r0, Z+
 836:	f0 81       	ld	r31, Z
 838:	e0 2d       	mov	r30, r0
 83a:	8a 81       	ldd	r24, Y+2	; 0x02
 83c:	80 83       	st	Z, r24
}
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	cf 91       	pop	r28
 844:	df 91       	pop	r29
 846:	08 95       	ret

00000848 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	0f 92       	push	r0
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
 852:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
 854:	89 81       	ldd	r24, Y+1	; 0x01
 856:	88 2f       	mov	r24, r24
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	fc 01       	movw	r30, r24
 860:	e8 59       	subi	r30, 0x98	; 152
 862:	ff 4f       	sbci	r31, 0xFF	; 255
 864:	01 90       	ld	r0, Z+
 866:	f0 81       	ld	r31, Z
 868:	e0 2d       	mov	r30, r0
 86a:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
 86c:	89 81       	ldd	r24, Y+1	; 0x01
 86e:	88 2f       	mov	r24, r24
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	88 0f       	add	r24, r24
 874:	99 1f       	adc	r25, r25
 876:	fc 01       	movw	r30, r24
 878:	e0 59       	subi	r30, 0x90	; 144
 87a:	ff 4f       	sbci	r31, 0xFF	; 255
 87c:	01 90       	ld	r0, Z+
 87e:	f0 81       	ld	r31, Z
 880:	e0 2d       	mov	r30, r0
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	80 83       	st	Z, r24
}
 886:	0f 90       	pop	r0
 888:	cf 91       	pop	r28
 88a:	df 91       	pop	r29
 88c:	08 95       	ret

0000088e <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
 88e:	df 93       	push	r29
 890:	cf 93       	push	r28
 892:	00 d0       	rcall	.+0      	; 0x894 <DIO_void_set_pin_dir+0x6>
 894:	0f 92       	push	r0
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
 89a:	89 83       	std	Y+1, r24	; 0x01
 89c:	6a 83       	std	Y+2, r22	; 0x02
 89e:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
 8a0:	8b 81       	ldd	r24, Y+3	; 0x03
 8a2:	88 23       	and	r24, r24
 8a4:	29 f1       	breq	.+74     	; 0x8f0 <DIO_void_set_pin_dir+0x62>
 8a6:	89 81       	ldd	r24, Y+1	; 0x01
 8a8:	88 2f       	mov	r24, r24
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	fc 01       	movw	r30, r24
 8b2:	e8 59       	subi	r30, 0x98	; 152
 8b4:	ff 4f       	sbci	r31, 0xFF	; 255
 8b6:	a0 81       	ld	r26, Z
 8b8:	b1 81       	ldd	r27, Z+1	; 0x01
 8ba:	89 81       	ldd	r24, Y+1	; 0x01
 8bc:	88 2f       	mov	r24, r24
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	fc 01       	movw	r30, r24
 8c6:	e8 59       	subi	r30, 0x98	; 152
 8c8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ca:	01 90       	ld	r0, Z+
 8cc:	f0 81       	ld	r31, Z
 8ce:	e0 2d       	mov	r30, r0
 8d0:	80 81       	ld	r24, Z
 8d2:	48 2f       	mov	r20, r24
 8d4:	8a 81       	ldd	r24, Y+2	; 0x02
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	02 2e       	mov	r0, r18
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_void_set_pin_dir+0x58>
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	0a 94       	dec	r0
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <DIO_void_set_pin_dir+0x54>
 8ea:	84 2b       	or	r24, r20
 8ec:	8c 93       	st	X, r24
 8ee:	25 c0       	rjmp	.+74     	; 0x93a <DIO_void_set_pin_dir+0xac>
 8f0:	89 81       	ldd	r24, Y+1	; 0x01
 8f2:	88 2f       	mov	r24, r24
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	fc 01       	movw	r30, r24
 8fc:	e8 59       	subi	r30, 0x98	; 152
 8fe:	ff 4f       	sbci	r31, 0xFF	; 255
 900:	a0 81       	ld	r26, Z
 902:	b1 81       	ldd	r27, Z+1	; 0x01
 904:	89 81       	ldd	r24, Y+1	; 0x01
 906:	88 2f       	mov	r24, r24
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	fc 01       	movw	r30, r24
 910:	e8 59       	subi	r30, 0x98	; 152
 912:	ff 4f       	sbci	r31, 0xFF	; 255
 914:	01 90       	ld	r0, Z+
 916:	f0 81       	ld	r31, Z
 918:	e0 2d       	mov	r30, r0
 91a:	80 81       	ld	r24, Z
 91c:	48 2f       	mov	r20, r24
 91e:	8a 81       	ldd	r24, Y+2	; 0x02
 920:	28 2f       	mov	r18, r24
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 2e       	mov	r0, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <DIO_void_set_pin_dir+0xa2>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	0a 94       	dec	r0
 932:	e2 f7       	brpl	.-8      	; 0x92c <DIO_void_set_pin_dir+0x9e>
 934:	80 95       	com	r24
 936:	84 23       	and	r24, r20
 938:	8c 93       	st	X, r24
}
 93a:	0f 90       	pop	r0
 93c:	0f 90       	pop	r0
 93e:	0f 90       	pop	r0
 940:	cf 91       	pop	r28
 942:	df 91       	pop	r29
 944:	08 95       	ret

00000946 <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 946:	df 93       	push	r29
 948:	cf 93       	push	r28
 94a:	00 d0       	rcall	.+0      	; 0x94c <DIO_void_set_pin_in_pullUP+0x6>
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62
 950:	89 83       	std	Y+1, r24	; 0x01
 952:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	88 2f       	mov	r24, r24
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	88 0f       	add	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	fc 01       	movw	r30, r24
 960:	e8 59       	subi	r30, 0x98	; 152
 962:	ff 4f       	sbci	r31, 0xFF	; 255
 964:	a0 81       	ld	r26, Z
 966:	b1 81       	ldd	r27, Z+1	; 0x01
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	88 2f       	mov	r24, r24
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	fc 01       	movw	r30, r24
 974:	e8 59       	subi	r30, 0x98	; 152
 976:	ff 4f       	sbci	r31, 0xFF	; 255
 978:	01 90       	ld	r0, Z+
 97a:	f0 81       	ld	r31, Z
 97c:	e0 2d       	mov	r30, r0
 97e:	80 81       	ld	r24, Z
 980:	48 2f       	mov	r20, r24
 982:	8a 81       	ldd	r24, Y+2	; 0x02
 984:	28 2f       	mov	r18, r24
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_void_set_pin_in_pullUP+0x4c>
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	2a 95       	dec	r18
 994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_void_set_pin_in_pullUP+0x48>
 996:	80 95       	com	r24
 998:	84 23       	and	r24, r20
 99a:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	88 2f       	mov	r24, r24
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	fc 01       	movw	r30, r24
 9a8:	e0 59       	subi	r30, 0x90	; 144
 9aa:	ff 4f       	sbci	r31, 0xFF	; 255
 9ac:	a0 81       	ld	r26, Z
 9ae:	b1 81       	ldd	r27, Z+1	; 0x01
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	88 2f       	mov	r24, r24
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	88 0f       	add	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	fc 01       	movw	r30, r24
 9bc:	e0 59       	subi	r30, 0x90	; 144
 9be:	ff 4f       	sbci	r31, 0xFF	; 255
 9c0:	01 90       	ld	r0, Z+
 9c2:	f0 81       	ld	r31, Z
 9c4:	e0 2d       	mov	r30, r0
 9c6:	80 81       	ld	r24, Z
 9c8:	48 2f       	mov	r20, r24
 9ca:	8a 81       	ldd	r24, Y+2	; 0x02
 9cc:	28 2f       	mov	r18, r24
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	02 2e       	mov	r0, r18
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_void_set_pin_in_pullUP+0x96>
 9d8:	88 0f       	add	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	0a 94       	dec	r0
 9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_void_set_pin_in_pullUP+0x92>
 9e0:	84 2b       	or	r24, r20
 9e2:	8c 93       	st	X, r24
}
 9e4:	0f 90       	pop	r0
 9e6:	0f 90       	pop	r0
 9e8:	cf 91       	pop	r28
 9ea:	df 91       	pop	r29
 9ec:	08 95       	ret

000009ee <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
 9ee:	df 93       	push	r29
 9f0:	cf 93       	push	r28
 9f2:	0f 92       	push	r0
 9f4:	cd b7       	in	r28, 0x3d	; 61
 9f6:	de b7       	in	r29, 0x3e	; 62
 9f8:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	88 2f       	mov	r24, r24
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	fc 01       	movw	r30, r24
 a06:	e0 59       	subi	r30, 0x90	; 144
 a08:	ff 4f       	sbci	r31, 0xFF	; 255
 a0a:	01 90       	ld	r0, Z+
 a0c:	f0 81       	ld	r31, Z
 a0e:	e0 2d       	mov	r30, r0
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	80 83       	st	Z, r24
}
 a14:	0f 90       	pop	r0
 a16:	cf 91       	pop	r28
 a18:	df 91       	pop	r29
 a1a:	08 95       	ret

00000a1c <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
 a1c:	df 93       	push	r29
 a1e:	cf 93       	push	r28
 a20:	0f 92       	push	r0
 a22:	cd b7       	in	r28, 0x3d	; 61
 a24:	de b7       	in	r29, 0x3e	; 62
 a26:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	88 2f       	mov	r24, r24
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	fc 01       	movw	r30, r24
 a34:	e0 59       	subi	r30, 0x90	; 144
 a36:	ff 4f       	sbci	r31, 0xFF	; 255
 a38:	01 90       	ld	r0, Z+
 a3a:	f0 81       	ld	r31, Z
 a3c:	e0 2d       	mov	r30, r0
 a3e:	10 82       	st	Z, r1
}
 a40:	0f 90       	pop	r0
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	08 95       	ret

00000a48 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
 a48:	df 93       	push	r29
 a4a:	cf 93       	push	r28
 a4c:	0f 92       	push	r0
 a4e:	cd b7       	in	r28, 0x3d	; 61
 a50:	de b7       	in	r29, 0x3e	; 62
 a52:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	88 2f       	mov	r24, r24
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	88 0f       	add	r24, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	fc 01       	movw	r30, r24
 a60:	e0 59       	subi	r30, 0x90	; 144
 a62:	ff 4f       	sbci	r31, 0xFF	; 255
 a64:	a0 81       	ld	r26, Z
 a66:	b1 81       	ldd	r27, Z+1	; 0x01
 a68:	89 81       	ldd	r24, Y+1	; 0x01
 a6a:	88 2f       	mov	r24, r24
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	88 0f       	add	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	fc 01       	movw	r30, r24
 a74:	e0 59       	subi	r30, 0x90	; 144
 a76:	ff 4f       	sbci	r31, 0xFF	; 255
 a78:	01 90       	ld	r0, Z+
 a7a:	f0 81       	ld	r31, Z
 a7c:	e0 2d       	mov	r30, r0
 a7e:	80 81       	ld	r24, Z
 a80:	80 95       	com	r24
 a82:	8c 93       	st	X, r24
}
 a84:	0f 90       	pop	r0
 a86:	cf 91       	pop	r28
 a88:	df 91       	pop	r29
 a8a:	08 95       	ret

00000a8c <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
 a8c:	df 93       	push	r29
 a8e:	cf 93       	push	r28
 a90:	00 d0       	rcall	.+0      	; 0xa92 <DIO_void_assign_port+0x6>
 a92:	cd b7       	in	r28, 0x3d	; 61
 a94:	de b7       	in	r29, 0x3e	; 62
 a96:	89 83       	std	Y+1, r24	; 0x01
 a98:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	88 2f       	mov	r24, r24
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	fc 01       	movw	r30, r24
 aa6:	e0 59       	subi	r30, 0x90	; 144
 aa8:	ff 4f       	sbci	r31, 0xFF	; 255
 aaa:	01 90       	ld	r0, Z+
 aac:	f0 81       	ld	r31, Z
 aae:	e0 2d       	mov	r30, r0
 ab0:	8a 81       	ldd	r24, Y+2	; 0x02
 ab2:	80 83       	st	Z, r24
}
 ab4:	0f 90       	pop	r0
 ab6:	0f 90       	pop	r0
 ab8:	cf 91       	pop	r28
 aba:	df 91       	pop	r29
 abc:	08 95       	ret

00000abe <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	00 d0       	rcall	.+0      	; 0xac4 <DIO_void_set_pin+0x6>
 ac4:	cd b7       	in	r28, 0x3d	; 61
 ac6:	de b7       	in	r29, 0x3e	; 62
 ac8:	89 83       	std	Y+1, r24	; 0x01
 aca:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	88 2f       	mov	r24, r24
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	88 0f       	add	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	fc 01       	movw	r30, r24
 ad8:	e0 59       	subi	r30, 0x90	; 144
 ada:	ff 4f       	sbci	r31, 0xFF	; 255
 adc:	a0 81       	ld	r26, Z
 ade:	b1 81       	ldd	r27, Z+1	; 0x01
 ae0:	89 81       	ldd	r24, Y+1	; 0x01
 ae2:	88 2f       	mov	r24, r24
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	88 0f       	add	r24, r24
 ae8:	99 1f       	adc	r25, r25
 aea:	fc 01       	movw	r30, r24
 aec:	e0 59       	subi	r30, 0x90	; 144
 aee:	ff 4f       	sbci	r31, 0xFF	; 255
 af0:	01 90       	ld	r0, Z+
 af2:	f0 81       	ld	r31, Z
 af4:	e0 2d       	mov	r30, r0
 af6:	80 81       	ld	r24, Z
 af8:	48 2f       	mov	r20, r24
 afa:	8a 81       	ldd	r24, Y+2	; 0x02
 afc:	28 2f       	mov	r18, r24
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	02 2e       	mov	r0, r18
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_void_set_pin+0x4e>
 b08:	88 0f       	add	r24, r24
 b0a:	99 1f       	adc	r25, r25
 b0c:	0a 94       	dec	r0
 b0e:	e2 f7       	brpl	.-8      	; 0xb08 <DIO_void_set_pin+0x4a>
 b10:	84 2b       	or	r24, r20
 b12:	8c 93       	st	X, r24
}
 b14:	0f 90       	pop	r0
 b16:	0f 90       	pop	r0
 b18:	cf 91       	pop	r28
 b1a:	df 91       	pop	r29
 b1c:	08 95       	ret

00000b1e <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 b1e:	df 93       	push	r29
 b20:	cf 93       	push	r28
 b22:	00 d0       	rcall	.+0      	; 0xb24 <DIO_void_clear_pin+0x6>
 b24:	cd b7       	in	r28, 0x3d	; 61
 b26:	de b7       	in	r29, 0x3e	; 62
 b28:	89 83       	std	Y+1, r24	; 0x01
 b2a:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 b2c:	89 81       	ldd	r24, Y+1	; 0x01
 b2e:	88 2f       	mov	r24, r24
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	88 0f       	add	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	fc 01       	movw	r30, r24
 b38:	e0 59       	subi	r30, 0x90	; 144
 b3a:	ff 4f       	sbci	r31, 0xFF	; 255
 b3c:	a0 81       	ld	r26, Z
 b3e:	b1 81       	ldd	r27, Z+1	; 0x01
 b40:	89 81       	ldd	r24, Y+1	; 0x01
 b42:	88 2f       	mov	r24, r24
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	88 0f       	add	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	fc 01       	movw	r30, r24
 b4c:	e0 59       	subi	r30, 0x90	; 144
 b4e:	ff 4f       	sbci	r31, 0xFF	; 255
 b50:	01 90       	ld	r0, Z+
 b52:	f0 81       	ld	r31, Z
 b54:	e0 2d       	mov	r30, r0
 b56:	80 81       	ld	r24, Z
 b58:	48 2f       	mov	r20, r24
 b5a:	8a 81       	ldd	r24, Y+2	; 0x02
 b5c:	28 2f       	mov	r18, r24
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	02 2e       	mov	r0, r18
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_void_clear_pin+0x4e>
 b68:	88 0f       	add	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	0a 94       	dec	r0
 b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_void_clear_pin+0x4a>
 b70:	80 95       	com	r24
 b72:	84 23       	and	r24, r20
 b74:	8c 93       	st	X, r24
}
 b76:	0f 90       	pop	r0
 b78:	0f 90       	pop	r0
 b7a:	cf 91       	pop	r28
 b7c:	df 91       	pop	r29
 b7e:	08 95       	ret

00000b80 <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 b80:	df 93       	push	r29
 b82:	cf 93       	push	r28
 b84:	00 d0       	rcall	.+0      	; 0xb86 <DIO_void_toggle_pin+0x6>
 b86:	cd b7       	in	r28, 0x3d	; 61
 b88:	de b7       	in	r29, 0x3e	; 62
 b8a:	89 83       	std	Y+1, r24	; 0x01
 b8c:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 b8e:	89 81       	ldd	r24, Y+1	; 0x01
 b90:	88 2f       	mov	r24, r24
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	88 0f       	add	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	fc 01       	movw	r30, r24
 b9a:	e0 59       	subi	r30, 0x90	; 144
 b9c:	ff 4f       	sbci	r31, 0xFF	; 255
 b9e:	a0 81       	ld	r26, Z
 ba0:	b1 81       	ldd	r27, Z+1	; 0x01
 ba2:	89 81       	ldd	r24, Y+1	; 0x01
 ba4:	88 2f       	mov	r24, r24
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	88 0f       	add	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	fc 01       	movw	r30, r24
 bae:	e0 59       	subi	r30, 0x90	; 144
 bb0:	ff 4f       	sbci	r31, 0xFF	; 255
 bb2:	01 90       	ld	r0, Z+
 bb4:	f0 81       	ld	r31, Z
 bb6:	e0 2d       	mov	r30, r0
 bb8:	80 81       	ld	r24, Z
 bba:	48 2f       	mov	r20, r24
 bbc:	8a 81       	ldd	r24, Y+2	; 0x02
 bbe:	28 2f       	mov	r18, r24
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	02 2e       	mov	r0, r18
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_void_toggle_pin+0x4e>
 bca:	88 0f       	add	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	0a 94       	dec	r0
 bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_void_toggle_pin+0x4a>
 bd2:	84 27       	eor	r24, r20
 bd4:	8c 93       	st	X, r24
}
 bd6:	0f 90       	pop	r0
 bd8:	0f 90       	pop	r0
 bda:	cf 91       	pop	r28
 bdc:	df 91       	pop	r29
 bde:	08 95       	ret

00000be0 <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
 be0:	df 93       	push	r29
 be2:	cf 93       	push	r28
 be4:	00 d0       	rcall	.+0      	; 0xbe6 <DIO_void_assign_pin+0x6>
 be6:	0f 92       	push	r0
 be8:	cd b7       	in	r28, 0x3d	; 61
 bea:	de b7       	in	r29, 0x3e	; 62
 bec:	89 83       	std	Y+1, r24	; 0x01
 bee:	6a 83       	std	Y+2, r22	; 0x02
 bf0:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
 bf2:	8b 81       	ldd	r24, Y+3	; 0x03
 bf4:	88 23       	and	r24, r24
 bf6:	29 f1       	breq	.+74     	; 0xc42 <DIO_void_assign_pin+0x62>
 bf8:	89 81       	ldd	r24, Y+1	; 0x01
 bfa:	88 2f       	mov	r24, r24
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	88 0f       	add	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	fc 01       	movw	r30, r24
 c04:	e0 59       	subi	r30, 0x90	; 144
 c06:	ff 4f       	sbci	r31, 0xFF	; 255
 c08:	a0 81       	ld	r26, Z
 c0a:	b1 81       	ldd	r27, Z+1	; 0x01
 c0c:	89 81       	ldd	r24, Y+1	; 0x01
 c0e:	88 2f       	mov	r24, r24
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	88 0f       	add	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	fc 01       	movw	r30, r24
 c18:	e0 59       	subi	r30, 0x90	; 144
 c1a:	ff 4f       	sbci	r31, 0xFF	; 255
 c1c:	01 90       	ld	r0, Z+
 c1e:	f0 81       	ld	r31, Z
 c20:	e0 2d       	mov	r30, r0
 c22:	80 81       	ld	r24, Z
 c24:	48 2f       	mov	r20, r24
 c26:	8a 81       	ldd	r24, Y+2	; 0x02
 c28:	28 2f       	mov	r18, r24
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	02 2e       	mov	r0, r18
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_void_assign_pin+0x58>
 c34:	88 0f       	add	r24, r24
 c36:	99 1f       	adc	r25, r25
 c38:	0a 94       	dec	r0
 c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_void_assign_pin+0x54>
 c3c:	84 2b       	or	r24, r20
 c3e:	8c 93       	st	X, r24
 c40:	25 c0       	rjmp	.+74     	; 0xc8c <DIO_void_assign_pin+0xac>
 c42:	89 81       	ldd	r24, Y+1	; 0x01
 c44:	88 2f       	mov	r24, r24
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	88 0f       	add	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	fc 01       	movw	r30, r24
 c4e:	e0 59       	subi	r30, 0x90	; 144
 c50:	ff 4f       	sbci	r31, 0xFF	; 255
 c52:	a0 81       	ld	r26, Z
 c54:	b1 81       	ldd	r27, Z+1	; 0x01
 c56:	89 81       	ldd	r24, Y+1	; 0x01
 c58:	88 2f       	mov	r24, r24
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	88 0f       	add	r24, r24
 c5e:	99 1f       	adc	r25, r25
 c60:	fc 01       	movw	r30, r24
 c62:	e0 59       	subi	r30, 0x90	; 144
 c64:	ff 4f       	sbci	r31, 0xFF	; 255
 c66:	01 90       	ld	r0, Z+
 c68:	f0 81       	ld	r31, Z
 c6a:	e0 2d       	mov	r30, r0
 c6c:	80 81       	ld	r24, Z
 c6e:	48 2f       	mov	r20, r24
 c70:	8a 81       	ldd	r24, Y+2	; 0x02
 c72:	28 2f       	mov	r18, r24
 c74:	30 e0       	ldi	r19, 0x00	; 0
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	02 2e       	mov	r0, r18
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_void_assign_pin+0xa2>
 c7e:	88 0f       	add	r24, r24
 c80:	99 1f       	adc	r25, r25
 c82:	0a 94       	dec	r0
 c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_void_assign_pin+0x9e>
 c86:	80 95       	com	r24
 c88:	84 23       	and	r24, r20
 c8a:	8c 93       	st	X, r24
}
 c8c:	0f 90       	pop	r0
 c8e:	0f 90       	pop	r0
 c90:	0f 90       	pop	r0
 c92:	cf 91       	pop	r28
 c94:	df 91       	pop	r29
 c96:	08 95       	ret

00000c98 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
 c98:	df 93       	push	r29
 c9a:	cf 93       	push	r28
 c9c:	0f 92       	push	r0
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
 ca2:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
 ca4:	89 81       	ldd	r24, Y+1	; 0x01
 ca6:	88 2f       	mov	r24, r24
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	88 0f       	add	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	fc 01       	movw	r30, r24
 cb0:	e0 5a       	subi	r30, 0xA0	; 160
 cb2:	ff 4f       	sbci	r31, 0xFF	; 255
 cb4:	01 90       	ld	r0, Z+
 cb6:	f0 81       	ld	r31, Z
 cb8:	e0 2d       	mov	r30, r0
 cba:	80 81       	ld	r24, Z
}
 cbc:	0f 90       	pop	r0
 cbe:	cf 91       	pop	r28
 cc0:	df 91       	pop	r29
 cc2:	08 95       	ret

00000cc4 <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 cc4:	df 93       	push	r29
 cc6:	cf 93       	push	r28
 cc8:	00 d0       	rcall	.+0      	; 0xcca <DIO_u8_get_pin+0x6>
 cca:	cd b7       	in	r28, 0x3d	; 61
 ccc:	de b7       	in	r29, 0x3e	; 62
 cce:	89 83       	std	Y+1, r24	; 0x01
 cd0:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
 cd2:	89 81       	ldd	r24, Y+1	; 0x01
 cd4:	88 2f       	mov	r24, r24
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	88 0f       	add	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	fc 01       	movw	r30, r24
 cde:	e0 5a       	subi	r30, 0xA0	; 160
 ce0:	ff 4f       	sbci	r31, 0xFF	; 255
 ce2:	01 90       	ld	r0, Z+
 ce4:	f0 81       	ld	r31, Z
 ce6:	e0 2d       	mov	r30, r0
 ce8:	80 81       	ld	r24, Z
 cea:	28 2f       	mov	r18, r24
 cec:	30 e0       	ldi	r19, 0x00	; 0
 cee:	8a 81       	ldd	r24, Y+2	; 0x02
 cf0:	88 2f       	mov	r24, r24
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	a9 01       	movw	r20, r18
 cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_u8_get_pin+0x38>
 cf8:	55 95       	asr	r21
 cfa:	47 95       	ror	r20
 cfc:	8a 95       	dec	r24
 cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_u8_get_pin+0x34>
 d00:	ca 01       	movw	r24, r20
 d02:	81 70       	andi	r24, 0x01	; 1
}
 d04:	0f 90       	pop	r0
 d06:	0f 90       	pop	r0
 d08:	cf 91       	pop	r28
 d0a:	df 91       	pop	r29
 d0c:	08 95       	ret

00000d0e <__udivmodqi4>:
 d0e:	99 1b       	sub	r25, r25
 d10:	79 e0       	ldi	r23, 0x09	; 9
 d12:	04 c0       	rjmp	.+8      	; 0xd1c <__udivmodqi4_ep>

00000d14 <__udivmodqi4_loop>:
 d14:	99 1f       	adc	r25, r25
 d16:	96 17       	cp	r25, r22
 d18:	08 f0       	brcs	.+2      	; 0xd1c <__udivmodqi4_ep>
 d1a:	96 1b       	sub	r25, r22

00000d1c <__udivmodqi4_ep>:
 d1c:	88 1f       	adc	r24, r24
 d1e:	7a 95       	dec	r23
 d20:	c9 f7       	brne	.-14     	; 0xd14 <__udivmodqi4_loop>
 d22:	80 95       	com	r24
 d24:	08 95       	ret

00000d26 <_exit>:
 d26:	f8 94       	cli

00000d28 <__stop_program>:
 d28:	ff cf       	rjmp	.-2      	; 0xd28 <__stop_program>
