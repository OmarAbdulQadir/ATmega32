
APP_33_Voltage-sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00005a4c  00005ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080018e  0080018e  00005c0e  2**0
                  ALLOC
  3 .stab         00003fd8  00000000  00000000  00005c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013de  00000000  00000000  00009be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000afc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000b166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000b356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000d762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000ead9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fcb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000fe74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00010167  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5a 2c 	jmp	0x58b4	; 0x58b4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <main>
      8a:	0c 94 24 2d 	jmp	0x5a48	; 0x5a48 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 2d 	jmp	0x5a12	; 0x5a12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 2d 	jmp	0x5a2a	; 0x5a2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 2d 	jmp	0x5a2a	; 0x5a2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 2d 	jmp	0x5a12	; 0x5a12 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 2c 	jmp	0x59ea	; 0x59ea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e6       	ldi	r22, 0x6D	; 109
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 11 2d 	jmp	0x5a22	; 0x5a22 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 15 2d 	jmp	0x5a2a	; 0x5a2a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 15 2d 	jmp	0x5a2a	; 0x5a2a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 15 2d 	jmp	0x5a2a	; 0x5a2a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f6 2c 	jmp	0x59ec	; 0x59ec <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 12 2d 	jmp	0x5a24	; 0x5a24 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fd 2c 	jmp	0x59fa	; 0x59fa <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	eb 58       	subi	r30, 0x8B	; 139
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <main>:
// Macros section

// Global variables section

// Main function section
int main(void){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <main+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <main+0x8>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	// Setup section
	ADC_config_struct ADC_config = {0, 2, 0, 0, 0};
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	80 7e       	andi	r24, 0xE0	; 224
     e08:	8b 83       	std	Y+3, r24	; 0x03
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	8f 71       	andi	r24, 0x1F	; 31
     e0e:	80 64       	ori	r24, 0x40	; 64
     e10:	8b 83       	std	Y+3, r24	; 0x03
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	8c 83       	std	Y+4, r24	; 0x04
     e18:	8c 81       	ldd	r24, Y+4	; 0x04
     e1a:	81 7f       	andi	r24, 0xF1	; 241
     e1c:	8c 83       	std	Y+4, r24	; 0x04
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	8f 7e       	andi	r24, 0xEF	; 239
     e22:	8c 83       	std	Y+4, r24	; 0x04
	ADC_void_init();
     e24:	0e 94 9e 2b 	call	0x573c	; 0x573c <ADC_void_init>
	ADC_void_config(&ADC_config);
     e28:	ce 01       	movw	r24, r28
     e2a:	03 96       	adiw	r24, 0x03	; 3
     e2c:	0e 94 c1 2b 	call	0x5782	; 0x5782 <ADC_void_config>

	LCD_init();
     e30:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <LCD_init>
	LCD_write_str((u8*) "value= ");
     e34:	80 e6       	ldi	r24, 0x60	; 96
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <LCD_write_str>

	u8 val_prev= 0, val = 0;
     e3c:	1a 82       	std	Y+2, r1	; 0x02
     e3e:	19 82       	std	Y+1, r1	; 0x01
	ADC_void_read_data(val);
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 1b 2c 	call	0x5836	; 0x5836 <ADC_void_read_data>

	while(1){
		// Loop section
			if(val != val_prev){
     e4a:	99 81       	ldd	r25, Y+1	; 0x01
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	98 17       	cp	r25, r24
     e50:	b9 f0       	breq	.+46     	; 0xe80 <main+0x88>
				val_prev = val;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	8a 83       	std	Y+2, r24	; 0x02
				LCD_set_cursor(0, 8);
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	68 e0       	ldi	r22, 0x08	; 8
     e5a:	0e 94 cd 23 	call	0x479a	; 0x479a <LCD_set_cursor>
				LCD_write_str((u8*) "    ");
     e5e:	88 e6       	ldi	r24, 0x68	; 104
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <LCD_write_str>
				LCD_set_cursor(0, 8);
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	68 e0       	ldi	r22, 0x08	; 8
     e6a:	0e 94 cd 23 	call	0x479a	; 0x479a <LCD_set_cursor>
				LCD_write_s32_number(val_prev);
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	0e 94 1a 28 	call	0x5034	; 0x5034 <LCD_write_s32_number>
			}
			ADC_void_read_data(val);
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	88 2f       	mov	r24, r24
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 1b 2c 	call	0x5836	; 0x5836 <ADC_void_read_data>
     e8a:	df cf       	rjmp	.-66     	; 0xe4a <main+0x52>

00000e8c <LCD_pow>:
#include "../../MCAL/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	27 97       	sbiw	r28, 0x07	; 7
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	8e 83       	std	Y+6, r24	; 0x06
     ea2:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	8a 83       	std	Y+2, r24	; 0x02
     eb0:	9b 83       	std	Y+3, r25	; 0x03
     eb2:	ac 83       	std	Y+4, r26	; 0x04
     eb4:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
     eb6:	19 82       	std	Y+1, r1	; 0x01
     eb8:	16 c0       	rjmp	.+44     	; 0xee6 <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
     eba:	8e 81       	ldd	r24, Y+6	; 0x06
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	9b 81       	ldd	r25, Y+3	; 0x03
     ec8:	ac 81       	ldd	r26, Y+4	; 0x04
     eca:	bd 81       	ldd	r27, Y+5	; 0x05
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 91 2c 	call	0x5922	; 0x5922 <__mulsi3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8a 83       	std	Y+2, r24	; 0x02
     eda:	9b 83       	std	Y+3, r25	; 0x03
     edc:	ac 83       	std	Y+4, r26	; 0x04
     ede:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	8f 5f       	subi	r24, 0xFF	; 255
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	04 f3       	brlt	.-64     	; 0xeba <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	9b 81       	ldd	r25, Y+3	; 0x03
     efe:	ac 81       	ldd	r26, Y+4	; 0x04
     f00:	bd 81       	ldd	r27, Y+5	; 0x05
}
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	27 96       	adiw	r28, 0x07	; 7
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	e1 97       	sbiw	r28, 0x31	; 49
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	62 e0       	ldi	r22, 0x02	; 2
     f32:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e8       	ldi	r26, 0x80	; 128
     f44:	bf e3       	ldi	r27, 0x3F	; 63
     f46:	8d a7       	std	Y+45, r24	; 0x2d
     f48:	9e a7       	std	Y+46, r25	; 0x2e
     f4a:	af a7       	std	Y+47, r26	; 0x2f
     f4c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f4e:	6d a5       	ldd	r22, Y+45	; 0x2d
     f50:	7e a5       	ldd	r23, Y+46	; 0x2e
     f52:	8f a5       	ldd	r24, Y+47	; 0x2f
     f54:	98 a9       	ldd	r25, Y+48	; 0x30
     f56:	2b ea       	ldi	r18, 0xAB	; 171
     f58:	3a ea       	ldi	r19, 0xAA	; 170
     f5a:	4a ea       	ldi	r20, 0xAA	; 170
     f5c:	50 e4       	ldi	r21, 0x40	; 64
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	89 a7       	std	Y+41, r24	; 0x29
     f68:	9a a7       	std	Y+42, r25	; 0x2a
     f6a:	ab a7       	std	Y+43, r26	; 0x2b
     f6c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f6e:	69 a5       	ldd	r22, Y+41	; 0x29
     f70:	7a a5       	ldd	r23, Y+42	; 0x2a
     f72:	8b a5       	ldd	r24, Y+43	; 0x2b
     f74:	9c a5       	ldd	r25, Y+44	; 0x2c
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5f e3       	ldi	r21, 0x3F	; 63
     f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f82:	88 23       	and	r24, r24
     f84:	1c f4       	brge	.+6      	; 0xf8c <LCD_write_data_8bit+0x74>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	88 a7       	std	Y+40, r24	; 0x28
     f8a:	91 c0       	rjmp	.+290    	; 0x10ae <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
     f8c:	69 a5       	ldd	r22, Y+41	; 0x29
     f8e:	7a a5       	ldd	r23, Y+42	; 0x2a
     f90:	8b a5       	ldd	r24, Y+43	; 0x2b
     f92:	9c a5       	ldd	r25, Y+44	; 0x2c
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4f e7       	ldi	r20, 0x7F	; 127
     f9a:	53 e4       	ldi	r21, 0x43	; 67
     f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa0:	18 16       	cp	r1, r24
     fa2:	0c f0       	brlt	.+2      	; 0xfa6 <LCD_write_data_8bit+0x8e>
     fa4:	7b c0       	rjmp	.+246    	; 0x109c <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
     fa6:	6d a5       	ldd	r22, Y+45	; 0x2d
     fa8:	7e a5       	ldd	r23, Y+46	; 0x2e
     faa:	8f a5       	ldd	r24, Y+47	; 0x2f
     fac:	98 a9       	ldd	r25, Y+48	; 0x30
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4a e7       	ldi	r20, 0x7A	; 122
     fb4:	54 e4       	ldi	r21, 0x44	; 68
     fb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	8c a3       	std	Y+36, r24	; 0x24
     fc0:	9d a3       	std	Y+37, r25	; 0x25
     fc2:	ae a3       	std	Y+38, r26	; 0x26
     fc4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	6c a1       	ldd	r22, Y+36	; 0x24
     fc8:	7d a1       	ldd	r23, Y+37	; 0x25
     fca:	8e a1       	ldd	r24, Y+38	; 0x26
     fcc:	9f a1       	ldd	r25, Y+39	; 0x27
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a e7       	ldi	r20, 0x7A	; 122
     fd4:	55 e4       	ldi	r21, 0x45	; 69
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	88 a3       	std	Y+32, r24	; 0x20
     fe0:	99 a3       	std	Y+33, r25	; 0x21
     fe2:	aa a3       	std	Y+34, r26	; 0x22
     fe4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     fe6:	68 a1       	ldd	r22, Y+32	; 0x20
     fe8:	79 a1       	ldd	r23, Y+33	; 0x21
     fea:	8a a1       	ldd	r24, Y+34	; 0x22
     fec:	9b a1       	ldd	r25, Y+35	; 0x23
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <LCD_write_data_8bit+0xf0>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9f 8f       	std	Y+31, r25	; 0x1f
    1004:	8e 8f       	std	Y+30, r24	; 0x1e
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    1008:	68 a1       	ldd	r22, Y+32	; 0x20
    100a:	79 a1       	ldd	r23, Y+33	; 0x21
    100c:	8a a1       	ldd	r24, Y+34	; 0x22
    100e:	9b a1       	ldd	r25, Y+35	; 0x23
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	6c a1       	ldd	r22, Y+36	; 0x24
    1022:	7d a1       	ldd	r23, Y+37	; 0x25
    1024:	8e a1       	ldd	r24, Y+38	; 0x26
    1026:	9f a1       	ldd	r25, Y+39	; 0x27
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9f 8f       	std	Y+31, r25	; 0x1f
    1046:	8e 8f       	std	Y+30, r24	; 0x1e
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <LCD_write_data_8bit+0x150>
    104a:	80 e9       	ldi	r24, 0x90	; 144
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	9d 8f       	std	Y+29, r25	; 0x1d
    1050:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1052:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1054:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <LCD_write_data_8bit+0x13e>
    105a:	9d 8f       	std	Y+29, r25	; 0x1d
    105c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9f 8f       	std	Y+31, r25	; 0x1f
    1066:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8e 8d       	ldd	r24, Y+30	; 0x1e
    106a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <LCD_write_data_8bit+0x132>
    1070:	24 c0       	rjmp	.+72     	; 0x10ba <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	68 a1       	ldd	r22, Y+32	; 0x20
    1074:	79 a1       	ldd	r23, Y+33	; 0x21
    1076:	8a a1       	ldd	r24, Y+34	; 0x22
    1078:	9b a1       	ldd	r25, Y+35	; 0x23
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9f 8f       	std	Y+31, r25	; 0x1f
    1084:	8e 8f       	std	Y+30, r24	; 0x1e
    1086:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1088:	9f 8d       	ldd	r25, Y+31	; 0x1f
    108a:	9b 8f       	std	Y+27, r25	; 0x1b
    108c:	8a 8f       	std	Y+26, r24	; 0x1a
    108e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1090:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <LCD_write_data_8bit+0x17a>
    1096:	9b 8f       	std	Y+27, r25	; 0x1b
    1098:	8a 8f       	std	Y+26, r24	; 0x1a
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    109c:	69 a5       	ldd	r22, Y+41	; 0x29
    109e:	7a a5       	ldd	r23, Y+42	; 0x2a
    10a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	88 a7       	std	Y+40, r24	; 0x28
    10ae:	88 a5       	ldd	r24, Y+40	; 0x28
    10b0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10b2:	89 8d       	ldd	r24, Y+25	; 0x19
    10b4:	8a 95       	dec	r24
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <LCD_write_data_8bit+0x19c>
    10b8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 e8       	ldi	r26, 0x80	; 128
    10c8:	bf e3       	ldi	r27, 0x3F	; 63
    10ca:	8d 8b       	std	Y+21, r24	; 0x15
    10cc:	9e 8b       	std	Y+22, r25	; 0x16
    10ce:	af 8b       	std	Y+23, r26	; 0x17
    10d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10d2:	6d 89       	ldd	r22, Y+21	; 0x15
    10d4:	7e 89       	ldd	r23, Y+22	; 0x16
    10d6:	8f 89       	ldd	r24, Y+23	; 0x17
    10d8:	98 8d       	ldd	r25, Y+24	; 0x18
    10da:	2b ea       	ldi	r18, 0xAB	; 171
    10dc:	3a ea       	ldi	r19, 0xAA	; 170
    10de:	4a ea       	ldi	r20, 0xAA	; 170
    10e0:	50 e4       	ldi	r21, 0x40	; 64
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	89 8b       	std	Y+17, r24	; 0x11
    10ec:	9a 8b       	std	Y+18, r25	; 0x12
    10ee:	ab 8b       	std	Y+19, r26	; 0x13
    10f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10f2:	69 89       	ldd	r22, Y+17	; 0x11
    10f4:	7a 89       	ldd	r23, Y+18	; 0x12
    10f6:	8b 89       	ldd	r24, Y+19	; 0x13
    10f8:	9c 89       	ldd	r25, Y+20	; 0x14
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1106:	88 23       	and	r24, r24
    1108:	1c f4       	brge	.+6      	; 0x1110 <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	88 8b       	std	Y+16, r24	; 0x10
    110e:	91 c0       	rjmp	.+290    	; 0x1232 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    1110:	69 89       	ldd	r22, Y+17	; 0x11
    1112:	7a 89       	ldd	r23, Y+18	; 0x12
    1114:	8b 89       	ldd	r24, Y+19	; 0x13
    1116:	9c 89       	ldd	r25, Y+20	; 0x14
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4f e7       	ldi	r20, 0x7F	; 127
    111e:	53 e4       	ldi	r21, 0x43	; 67
    1120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1124:	18 16       	cp	r1, r24
    1126:	0c f0       	brlt	.+2      	; 0x112a <LCD_write_data_8bit+0x212>
    1128:	7b c0       	rjmp	.+246    	; 0x1220 <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    112a:	6d 89       	ldd	r22, Y+21	; 0x15
    112c:	7e 89       	ldd	r23, Y+22	; 0x16
    112e:	8f 89       	ldd	r24, Y+23	; 0x17
    1130:	98 8d       	ldd	r25, Y+24	; 0x18
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a e7       	ldi	r20, 0x7A	; 122
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8c 87       	std	Y+12, r24	; 0x0c
    1144:	9d 87       	std	Y+13, r25	; 0x0d
    1146:	ae 87       	std	Y+14, r26	; 0x0e
    1148:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114a:	6c 85       	ldd	r22, Y+12	; 0x0c
    114c:	7d 85       	ldd	r23, Y+13	; 0x0d
    114e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1150:	9f 85       	ldd	r25, Y+15	; 0x0f
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	4a e7       	ldi	r20, 0x7A	; 122
    1158:	55 e4       	ldi	r21, 0x45	; 69
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	88 87       	std	Y+8, r24	; 0x08
    1164:	99 87       	std	Y+9, r25	; 0x09
    1166:	aa 87       	std	Y+10, r26	; 0x0a
    1168:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    116a:	68 85       	ldd	r22, Y+8	; 0x08
    116c:	79 85       	ldd	r23, Y+9	; 0x09
    116e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1170:	9b 85       	ldd	r25, Y+11	; 0x0b
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e8       	ldi	r20, 0x80	; 128
    1178:	5f e3       	ldi	r21, 0x3F	; 63
    117a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    117e:	88 23       	and	r24, r24
    1180:	2c f4       	brge	.+10     	; 0x118c <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	9f 83       	std	Y+7, r25	; 0x07
    1188:	8e 83       	std	Y+6, r24	; 0x06
    118a:	3f c0       	rjmp	.+126    	; 0x120a <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    118c:	68 85       	ldd	r22, Y+8	; 0x08
    118e:	79 85       	ldd	r23, Y+9	; 0x09
    1190:	8a 85       	ldd	r24, Y+10	; 0x0a
    1192:	9b 85       	ldd	r25, Y+11	; 0x0b
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	3f ef       	ldi	r19, 0xFF	; 255
    1198:	4f e7       	ldi	r20, 0x7F	; 127
    119a:	57 e4       	ldi	r21, 0x47	; 71
    119c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11a0:	18 16       	cp	r1, r24
    11a2:	4c f5       	brge	.+82     	; 0x11f6 <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    11a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    11a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    11aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e2       	ldi	r20, 0x20	; 32
    11b2:	51 e4       	ldi	r21, 0x41	; 65
    11b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9f 83       	std	Y+7, r25	; 0x07
    11ca:	8e 83       	std	Y+6, r24	; 0x06
    11cc:	0f c0       	rjmp	.+30     	; 0x11ec <LCD_write_data_8bit+0x2d4>
    11ce:	80 e9       	ldi	r24, 0x90	; 144
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	9d 83       	std	Y+5, r25	; 0x05
    11d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <LCD_write_data_8bit+0x2c2>
    11de:	9d 83       	std	Y+5, r25	; 0x05
    11e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e2:	8e 81       	ldd	r24, Y+6	; 0x06
    11e4:	9f 81       	ldd	r25, Y+7	; 0x07
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	9f 83       	std	Y+7, r25	; 0x07
    11ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ec:	8e 81       	ldd	r24, Y+6	; 0x06
    11ee:	9f 81       	ldd	r25, Y+7	; 0x07
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	69 f7       	brne	.-38     	; 0x11ce <LCD_write_data_8bit+0x2b6>
    11f4:	24 c0       	rjmp	.+72     	; 0x123e <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f6:	68 85       	ldd	r22, Y+8	; 0x08
    11f8:	79 85       	ldd	r23, Y+9	; 0x09
    11fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    11fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    11fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	9f 83       	std	Y+7, r25	; 0x07
    1208:	8e 83       	std	Y+6, r24	; 0x06
    120a:	8e 81       	ldd	r24, Y+6	; 0x06
    120c:	9f 81       	ldd	r25, Y+7	; 0x07
    120e:	9b 83       	std	Y+3, r25	; 0x03
    1210:	8a 83       	std	Y+2, r24	; 0x02
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	9b 81       	ldd	r25, Y+3	; 0x03
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <LCD_write_data_8bit+0x2fe>
    121a:	9b 83       	std	Y+3, r25	; 0x03
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	0f c0       	rjmp	.+30     	; 0x123e <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1220:	69 89       	ldd	r22, Y+17	; 0x11
    1222:	7a 89       	ldd	r23, Y+18	; 0x12
    1224:	8b 89       	ldd	r24, Y+19	; 0x13
    1226:	9c 89       	ldd	r25, Y+20	; 0x14
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	88 8b       	std	Y+16, r24	; 0x10
    1232:	88 89       	ldd	r24, Y+16	; 0x10
    1234:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	8a 95       	dec	r24
    123a:	f1 f7       	brne	.-4      	; 0x1238 <LCD_write_data_8bit+0x320>
    123c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	69 a9       	ldd	r22, Y+49	; 0x31
    1242:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
}
    124e:	e1 96       	adiw	r28, 0x31	; 49
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	e1 97       	sbiw	r28, 0x31	; 49
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	62 e0       	ldi	r22, 0x02	; 2
    127a:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e8       	ldi	r26, 0x80	; 128
    128c:	bf e3       	ldi	r27, 0x3F	; 63
    128e:	8d a7       	std	Y+45, r24	; 0x2d
    1290:	9e a7       	std	Y+46, r25	; 0x2e
    1292:	af a7       	std	Y+47, r26	; 0x2f
    1294:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1296:	6d a5       	ldd	r22, Y+45	; 0x2d
    1298:	7e a5       	ldd	r23, Y+46	; 0x2e
    129a:	8f a5       	ldd	r24, Y+47	; 0x2f
    129c:	98 a9       	ldd	r25, Y+48	; 0x30
    129e:	2b ea       	ldi	r18, 0xAB	; 171
    12a0:	3a ea       	ldi	r19, 0xAA	; 170
    12a2:	4a ea       	ldi	r20, 0xAA	; 170
    12a4:	50 e4       	ldi	r21, 0x40	; 64
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	89 a7       	std	Y+41, r24	; 0x29
    12b0:	9a a7       	std	Y+42, r25	; 0x2a
    12b2:	ab a7       	std	Y+43, r26	; 0x2b
    12b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    12b6:	69 a5       	ldd	r22, Y+41	; 0x29
    12b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    12ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    12bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	1c f4       	brge	.+6      	; 0x12d4 <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	88 a7       	std	Y+40, r24	; 0x28
    12d2:	91 c0       	rjmp	.+290    	; 0x13f6 <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    12d4:	69 a5       	ldd	r22, Y+41	; 0x29
    12d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    12d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    12da:	9c a5       	ldd	r25, Y+44	; 0x2c
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	4f e7       	ldi	r20, 0x7F	; 127
    12e2:	53 e4       	ldi	r21, 0x43	; 67
    12e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12e8:	18 16       	cp	r1, r24
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <LCD_write_cmd_8bit+0x8e>
    12ec:	7b c0       	rjmp	.+246    	; 0x13e4 <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    12ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    12f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    12f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f4:	98 a9       	ldd	r25, Y+48	; 0x30
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a e7       	ldi	r20, 0x7A	; 122
    12fc:	54 e4       	ldi	r21, 0x44	; 68
    12fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8c a3       	std	Y+36, r24	; 0x24
    1308:	9d a3       	std	Y+37, r25	; 0x25
    130a:	ae a3       	std	Y+38, r26	; 0x26
    130c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130e:	6c a1       	ldd	r22, Y+36	; 0x24
    1310:	7d a1       	ldd	r23, Y+37	; 0x25
    1312:	8e a1       	ldd	r24, Y+38	; 0x26
    1314:	9f a1       	ldd	r25, Y+39	; 0x27
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	4a e7       	ldi	r20, 0x7A	; 122
    131c:	55 e4       	ldi	r21, 0x45	; 69
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	88 a3       	std	Y+32, r24	; 0x20
    1328:	99 a3       	std	Y+33, r25	; 0x21
    132a:	aa a3       	std	Y+34, r26	; 0x22
    132c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    132e:	68 a1       	ldd	r22, Y+32	; 0x20
    1330:	79 a1       	ldd	r23, Y+33	; 0x21
    1332:	8a a1       	ldd	r24, Y+34	; 0x22
    1334:	9b a1       	ldd	r25, Y+35	; 0x23
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e8       	ldi	r20, 0x80	; 128
    133c:	5f e3       	ldi	r21, 0x3F	; 63
    133e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1342:	88 23       	and	r24, r24
    1344:	2c f4       	brge	.+10     	; 0x1350 <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9f 8f       	std	Y+31, r25	; 0x1f
    134c:	8e 8f       	std	Y+30, r24	; 0x1e
    134e:	3f c0       	rjmp	.+126    	; 0x13ce <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    1350:	68 a1       	ldd	r22, Y+32	; 0x20
    1352:	79 a1       	ldd	r23, Y+33	; 0x21
    1354:	8a a1       	ldd	r24, Y+34	; 0x22
    1356:	9b a1       	ldd	r25, Y+35	; 0x23
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	3f ef       	ldi	r19, 0xFF	; 255
    135c:	4f e7       	ldi	r20, 0x7F	; 127
    135e:	57 e4       	ldi	r21, 0x47	; 71
    1360:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1364:	18 16       	cp	r1, r24
    1366:	4c f5       	brge	.+82     	; 0x13ba <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1368:	6c a1       	ldd	r22, Y+36	; 0x24
    136a:	7d a1       	ldd	r23, Y+37	; 0x25
    136c:	8e a1       	ldd	r24, Y+38	; 0x26
    136e:	9f a1       	ldd	r25, Y+39	; 0x27
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e2       	ldi	r20, 0x20	; 32
    1376:	51 e4       	ldi	r21, 0x41	; 65
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9f 8f       	std	Y+31, r25	; 0x1f
    138e:	8e 8f       	std	Y+30, r24	; 0x1e
    1390:	0f c0       	rjmp	.+30     	; 0x13b0 <LCD_write_cmd_8bit+0x150>
    1392:	80 e9       	ldi	r24, 0x90	; 144
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	9d 8f       	std	Y+29, r25	; 0x1d
    1398:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    139a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    139c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <LCD_write_cmd_8bit+0x13e>
    13a2:	9d 8f       	std	Y+29, r25	; 0x1d
    13a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	9f 8f       	std	Y+31, r25	; 0x1f
    13ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	69 f7       	brne	.-38     	; 0x1392 <LCD_write_cmd_8bit+0x132>
    13b8:	24 c0       	rjmp	.+72     	; 0x1402 <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ba:	68 a1       	ldd	r22, Y+32	; 0x20
    13bc:	79 a1       	ldd	r23, Y+33	; 0x21
    13be:	8a a1       	ldd	r24, Y+34	; 0x22
    13c0:	9b a1       	ldd	r25, Y+35	; 0x23
    13c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9f 8f       	std	Y+31, r25	; 0x1f
    13cc:	8e 8f       	std	Y+30, r24	; 0x1e
    13ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13d2:	9b 8f       	std	Y+27, r25	; 0x1b
    13d4:	8a 8f       	std	Y+26, r24	; 0x1a
    13d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <LCD_write_cmd_8bit+0x17a>
    13de:	9b 8f       	std	Y+27, r25	; 0x1b
    13e0:	8a 8f       	std	Y+26, r24	; 0x1a
    13e2:	0f c0       	rjmp	.+30     	; 0x1402 <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13e4:	69 a5       	ldd	r22, Y+41	; 0x29
    13e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    13e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	88 a7       	std	Y+40, r24	; 0x28
    13f6:	88 a5       	ldd	r24, Y+40	; 0x28
    13f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13fa:	89 8d       	ldd	r24, Y+25	; 0x19
    13fc:	8a 95       	dec	r24
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <LCD_write_cmd_8bit+0x19c>
    1400:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 e8       	ldi	r26, 0x80	; 128
    1410:	bf e3       	ldi	r27, 0x3F	; 63
    1412:	8d 8b       	std	Y+21, r24	; 0x15
    1414:	9e 8b       	std	Y+22, r25	; 0x16
    1416:	af 8b       	std	Y+23, r26	; 0x17
    1418:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    141a:	6d 89       	ldd	r22, Y+21	; 0x15
    141c:	7e 89       	ldd	r23, Y+22	; 0x16
    141e:	8f 89       	ldd	r24, Y+23	; 0x17
    1420:	98 8d       	ldd	r25, Y+24	; 0x18
    1422:	2b ea       	ldi	r18, 0xAB	; 171
    1424:	3a ea       	ldi	r19, 0xAA	; 170
    1426:	4a ea       	ldi	r20, 0xAA	; 170
    1428:	50 e4       	ldi	r21, 0x40	; 64
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	89 8b       	std	Y+17, r24	; 0x11
    1434:	9a 8b       	std	Y+18, r25	; 0x12
    1436:	ab 8b       	std	Y+19, r26	; 0x13
    1438:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    143a:	69 89       	ldd	r22, Y+17	; 0x11
    143c:	7a 89       	ldd	r23, Y+18	; 0x12
    143e:	8b 89       	ldd	r24, Y+19	; 0x13
    1440:	9c 89       	ldd	r25, Y+20	; 0x14
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	1c f4       	brge	.+6      	; 0x1458 <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	88 8b       	std	Y+16, r24	; 0x10
    1456:	91 c0       	rjmp	.+290    	; 0x157a <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    1458:	69 89       	ldd	r22, Y+17	; 0x11
    145a:	7a 89       	ldd	r23, Y+18	; 0x12
    145c:	8b 89       	ldd	r24, Y+19	; 0x13
    145e:	9c 89       	ldd	r25, Y+20	; 0x14
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	53 e4       	ldi	r21, 0x43	; 67
    1468:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	0c f0       	brlt	.+2      	; 0x1472 <LCD_write_cmd_8bit+0x212>
    1470:	7b c0       	rjmp	.+246    	; 0x1568 <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1472:	6d 89       	ldd	r22, Y+21	; 0x15
    1474:	7e 89       	ldd	r23, Y+22	; 0x16
    1476:	8f 89       	ldd	r24, Y+23	; 0x17
    1478:	98 8d       	ldd	r25, Y+24	; 0x18
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a e7       	ldi	r20, 0x7A	; 122
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8c 87       	std	Y+12, r24	; 0x0c
    148c:	9d 87       	std	Y+13, r25	; 0x0d
    148e:	ae 87       	std	Y+14, r26	; 0x0e
    1490:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1492:	6c 85       	ldd	r22, Y+12	; 0x0c
    1494:	7d 85       	ldd	r23, Y+13	; 0x0d
    1496:	8e 85       	ldd	r24, Y+14	; 0x0e
    1498:	9f 85       	ldd	r25, Y+15	; 0x0f
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a e7       	ldi	r20, 0x7A	; 122
    14a0:	55 e4       	ldi	r21, 0x45	; 69
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	88 87       	std	Y+8, r24	; 0x08
    14ac:	99 87       	std	Y+9, r25	; 0x09
    14ae:	aa 87       	std	Y+10, r26	; 0x0a
    14b0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    14b2:	68 85       	ldd	r22, Y+8	; 0x08
    14b4:	79 85       	ldd	r23, Y+9	; 0x09
    14b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9f 83       	std	Y+7, r25	; 0x07
    14d0:	8e 83       	std	Y+6, r24	; 0x06
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    14d4:	68 85       	ldd	r22, Y+8	; 0x08
    14d6:	79 85       	ldd	r23, Y+9	; 0x09
    14d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14da:	9b 85       	ldd	r25, Y+11	; 0x0b
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	57 e4       	ldi	r21, 0x47	; 71
    14e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	4c f5       	brge	.+82     	; 0x153e <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    14ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    14f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9f 83       	std	Y+7, r25	; 0x07
    1512:	8e 83       	std	Y+6, r24	; 0x06
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <LCD_write_cmd_8bit+0x2d4>
    1516:	80 e9       	ldi	r24, 0x90	; 144
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	9d 83       	std	Y+5, r25	; 0x05
    151c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <LCD_write_cmd_8bit+0x2c2>
    1526:	9d 83       	std	Y+5, r25	; 0x05
    1528:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	8e 81       	ldd	r24, Y+6	; 0x06
    152c:	9f 81       	ldd	r25, Y+7	; 0x07
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9f 83       	std	Y+7, r25	; 0x07
    1532:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	8e 81       	ldd	r24, Y+6	; 0x06
    1536:	9f 81       	ldd	r25, Y+7	; 0x07
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f7       	brne	.-38     	; 0x1516 <LCD_write_cmd_8bit+0x2b6>
    153c:	24 c0       	rjmp	.+72     	; 0x1586 <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	68 85       	ldd	r22, Y+8	; 0x08
    1540:	79 85       	ldd	r23, Y+9	; 0x09
    1542:	8a 85       	ldd	r24, Y+10	; 0x0a
    1544:	9b 85       	ldd	r25, Y+11	; 0x0b
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9f 83       	std	Y+7, r25	; 0x07
    1550:	8e 83       	std	Y+6, r24	; 0x06
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	9f 81       	ldd	r25, Y+7	; 0x07
    1556:	9b 83       	std	Y+3, r25	; 0x03
    1558:	8a 83       	std	Y+2, r24	; 0x02
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD_write_cmd_8bit+0x2fe>
    1562:	9b 83       	std	Y+3, r25	; 0x03
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1568:	69 89       	ldd	r22, Y+17	; 0x11
    156a:	7a 89       	ldd	r23, Y+18	; 0x12
    156c:	8b 89       	ldd	r24, Y+19	; 0x13
    156e:	9c 89       	ldd	r25, Y+20	; 0x14
    1570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	88 8b       	std	Y+16, r24	; 0x10
    157a:	88 89       	ldd	r24, Y+16	; 0x10
    157c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	8a 95       	dec	r24
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_write_cmd_8bit+0x320>
    1584:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	69 a9       	ldd	r22, Y+49	; 0x31
    158a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
}
    1596:	e1 96       	adiw	r28, 0x31	; 49
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	ef 97       	sbiw	r28, 0x3f	; 63
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	0e 94 22 29 	call	0x5244	; 0x5244 <DIO_void_set_port_dir>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a8 e4       	ldi	r26, 0x48	; 72
    15ca:	b2 e4       	ldi	r27, 0x42	; 66
    15cc:	8b af       	std	Y+59, r24	; 0x3b
    15ce:	9c af       	std	Y+60, r25	; 0x3c
    15d0:	ad af       	std	Y+61, r26	; 0x3d
    15d2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	6b ad       	ldd	r22, Y+59	; 0x3b
    15d6:	7c ad       	ldd	r23, Y+60	; 0x3c
    15d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15da:	9e ad       	ldd	r25, Y+62	; 0x3e
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a e7       	ldi	r20, 0x7A	; 122
    15e2:	55 e4       	ldi	r21, 0x45	; 69
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8f ab       	std	Y+55, r24	; 0x37
    15ee:	98 af       	std	Y+56, r25	; 0x38
    15f0:	a9 af       	std	Y+57, r26	; 0x39
    15f2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    15f4:	6f a9       	ldd	r22, Y+55	; 0x37
    15f6:	78 ad       	ldd	r23, Y+56	; 0x38
    15f8:	89 ad       	ldd	r24, Y+57	; 0x39
    15fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9e ab       	std	Y+54, r25	; 0x36
    1612:	8d ab       	std	Y+53, r24	; 0x35
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    1616:	6f a9       	ldd	r22, Y+55	; 0x37
    1618:	78 ad       	ldd	r23, Y+56	; 0x38
    161a:	89 ad       	ldd	r24, Y+57	; 0x39
    161c:	9a ad       	ldd	r25, Y+58	; 0x3a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1630:	7c ad       	ldd	r23, Y+60	; 0x3c
    1632:	8d ad       	ldd	r24, Y+61	; 0x3d
    1634:	9e ad       	ldd	r25, Y+62	; 0x3e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9e ab       	std	Y+54, r25	; 0x36
    1654:	8d ab       	std	Y+53, r24	; 0x35
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <LCD_read_address_8bit+0xce>
    1658:	80 e9       	ldi	r24, 0x90	; 144
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	9c ab       	std	Y+52, r25	; 0x34
    165e:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1660:	8b a9       	ldd	r24, Y+51	; 0x33
    1662:	9c a9       	ldd	r25, Y+52	; 0x34
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_read_address_8bit+0xbc>
    1668:	9c ab       	std	Y+52, r25	; 0x34
    166a:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8d a9       	ldd	r24, Y+53	; 0x35
    166e:	9e a9       	ldd	r25, Y+54	; 0x36
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	9e ab       	std	Y+54, r25	; 0x36
    1674:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8d a9       	ldd	r24, Y+53	; 0x35
    1678:	9e a9       	ldd	r25, Y+54	; 0x36
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <LCD_read_address_8bit+0xb0>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	6f a9       	ldd	r22, Y+55	; 0x37
    1682:	78 ad       	ldd	r23, Y+56	; 0x38
    1684:	89 ad       	ldd	r24, Y+57	; 0x39
    1686:	9a ad       	ldd	r25, Y+58	; 0x3a
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9e ab       	std	Y+54, r25	; 0x36
    1692:	8d ab       	std	Y+53, r24	; 0x35
    1694:	8d a9       	ldd	r24, Y+53	; 0x35
    1696:	9e a9       	ldd	r25, Y+54	; 0x36
    1698:	9a ab       	std	Y+50, r25	; 0x32
    169a:	89 ab       	std	Y+49, r24	; 0x31
    169c:	89 a9       	ldd	r24, Y+49	; 0x31
    169e:	9a a9       	ldd	r25, Y+50	; 0x32
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_read_address_8bit+0xf8>
    16a4:	9a ab       	std	Y+50, r25	; 0x32
    16a6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	62 e0       	ldi	r22, 0x02	; 2
    16ac:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e8       	ldi	r26, 0x80	; 128
    16be:	bf e3       	ldi	r27, 0x3F	; 63
    16c0:	8d a7       	std	Y+45, r24	; 0x2d
    16c2:	9e a7       	std	Y+46, r25	; 0x2e
    16c4:	af a7       	std	Y+47, r26	; 0x2f
    16c6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    16ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    16cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ce:	98 a9       	ldd	r25, Y+48	; 0x30
    16d0:	2b ea       	ldi	r18, 0xAB	; 171
    16d2:	3a ea       	ldi	r19, 0xAA	; 170
    16d4:	4a ea       	ldi	r20, 0xAA	; 170
    16d6:	50 e4       	ldi	r21, 0x40	; 64
    16d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	89 a7       	std	Y+41, r24	; 0x29
    16e2:	9a a7       	std	Y+42, r25	; 0x2a
    16e4:	ab a7       	std	Y+43, r26	; 0x2b
    16e6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    16e8:	69 a5       	ldd	r22, Y+41	; 0x29
    16ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    16ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	1c f4       	brge	.+6      	; 0x1706 <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	88 a7       	std	Y+40, r24	; 0x28
    1704:	91 c0       	rjmp	.+290    	; 0x1828 <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    1706:	69 a5       	ldd	r22, Y+41	; 0x29
    1708:	7a a5       	ldd	r23, Y+42	; 0x2a
    170a:	8b a5       	ldd	r24, Y+43	; 0x2b
    170c:	9c a5       	ldd	r25, Y+44	; 0x2c
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	53 e4       	ldi	r21, 0x43	; 67
    1716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	0c f0       	brlt	.+2      	; 0x1720 <LCD_read_address_8bit+0x178>
    171e:	7b c0       	rjmp	.+246    	; 0x1816 <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    1720:	6d a5       	ldd	r22, Y+45	; 0x2d
    1722:	7e a5       	ldd	r23, Y+46	; 0x2e
    1724:	8f a5       	ldd	r24, Y+47	; 0x2f
    1726:	98 a9       	ldd	r25, Y+48	; 0x30
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4a e7       	ldi	r20, 0x7A	; 122
    172e:	54 e4       	ldi	r21, 0x44	; 68
    1730:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	8c a3       	std	Y+36, r24	; 0x24
    173a:	9d a3       	std	Y+37, r25	; 0x25
    173c:	ae a3       	std	Y+38, r26	; 0x26
    173e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1740:	6c a1       	ldd	r22, Y+36	; 0x24
    1742:	7d a1       	ldd	r23, Y+37	; 0x25
    1744:	8e a1       	ldd	r24, Y+38	; 0x26
    1746:	9f a1       	ldd	r25, Y+39	; 0x27
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a e7       	ldi	r20, 0x7A	; 122
    174e:	55 e4       	ldi	r21, 0x45	; 69
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	88 a3       	std	Y+32, r24	; 0x20
    175a:	99 a3       	std	Y+33, r25	; 0x21
    175c:	aa a3       	std	Y+34, r26	; 0x22
    175e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1760:	68 a1       	ldd	r22, Y+32	; 0x20
    1762:	79 a1       	ldd	r23, Y+33	; 0x21
    1764:	8a a1       	ldd	r24, Y+34	; 0x22
    1766:	9b a1       	ldd	r25, Y+35	; 0x23
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1774:	88 23       	and	r24, r24
    1776:	2c f4       	brge	.+10     	; 0x1782 <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9f 8f       	std	Y+31, r25	; 0x1f
    177e:	8e 8f       	std	Y+30, r24	; 0x1e
    1780:	3f c0       	rjmp	.+126    	; 0x1800 <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    1782:	68 a1       	ldd	r22, Y+32	; 0x20
    1784:	79 a1       	ldd	r23, Y+33	; 0x21
    1786:	8a a1       	ldd	r24, Y+34	; 0x22
    1788:	9b a1       	ldd	r25, Y+35	; 0x23
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1796:	18 16       	cp	r1, r24
    1798:	4c f5       	brge	.+82     	; 0x17ec <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179a:	6c a1       	ldd	r22, Y+36	; 0x24
    179c:	7d a1       	ldd	r23, Y+37	; 0x25
    179e:	8e a1       	ldd	r24, Y+38	; 0x26
    17a0:	9f a1       	ldd	r25, Y+39	; 0x27
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9f 8f       	std	Y+31, r25	; 0x1f
    17c0:	8e 8f       	std	Y+30, r24	; 0x1e
    17c2:	0f c0       	rjmp	.+30     	; 0x17e2 <LCD_read_address_8bit+0x23a>
    17c4:	80 e9       	ldi	r24, 0x90	; 144
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	9d 8f       	std	Y+29, r25	; 0x1d
    17ca:	8c 8f       	std	Y+28, r24	; 0x1c
    17cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_read_address_8bit+0x228>
    17d4:	9d 8f       	std	Y+29, r25	; 0x1d
    17d6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	9f 8f       	std	Y+31, r25	; 0x1f
    17e0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	69 f7       	brne	.-38     	; 0x17c4 <LCD_read_address_8bit+0x21c>
    17ea:	24 c0       	rjmp	.+72     	; 0x1834 <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ec:	68 a1       	ldd	r22, Y+32	; 0x20
    17ee:	79 a1       	ldd	r23, Y+33	; 0x21
    17f0:	8a a1       	ldd	r24, Y+34	; 0x22
    17f2:	9b a1       	ldd	r25, Y+35	; 0x23
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9f 8f       	std	Y+31, r25	; 0x1f
    17fe:	8e 8f       	std	Y+30, r24	; 0x1e
    1800:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1802:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1804:	9b 8f       	std	Y+27, r25	; 0x1b
    1806:	8a 8f       	std	Y+26, r24	; 0x1a
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_read_address_8bit+0x264>
    1810:	9b 8f       	std	Y+27, r25	; 0x1b
    1812:	8a 8f       	std	Y+26, r24	; 0x1a
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1816:	69 a5       	ldd	r22, Y+41	; 0x29
    1818:	7a a5       	ldd	r23, Y+42	; 0x2a
    181a:	8b a5       	ldd	r24, Y+43	; 0x2b
    181c:	9c a5       	ldd	r25, Y+44	; 0x2c
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	88 a7       	std	Y+40, r24	; 0x28
    1828:	88 a5       	ldd	r24, Y+40	; 0x28
    182a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    182c:	89 8d       	ldd	r24, Y+25	; 0x19
    182e:	8a 95       	dec	r24
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_read_address_8bit+0x286>
    1832:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 e8       	ldi	r26, 0x80	; 128
    1842:	bf e3       	ldi	r27, 0x3F	; 63
    1844:	8d 8b       	std	Y+21, r24	; 0x15
    1846:	9e 8b       	std	Y+22, r25	; 0x16
    1848:	af 8b       	std	Y+23, r26	; 0x17
    184a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    184c:	6d 89       	ldd	r22, Y+21	; 0x15
    184e:	7e 89       	ldd	r23, Y+22	; 0x16
    1850:	8f 89       	ldd	r24, Y+23	; 0x17
    1852:	98 8d       	ldd	r25, Y+24	; 0x18
    1854:	2b ea       	ldi	r18, 0xAB	; 171
    1856:	3a ea       	ldi	r19, 0xAA	; 170
    1858:	4a ea       	ldi	r20, 0xAA	; 170
    185a:	50 e4       	ldi	r21, 0x40	; 64
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	89 8b       	std	Y+17, r24	; 0x11
    1866:	9a 8b       	std	Y+18, r25	; 0x12
    1868:	ab 8b       	std	Y+19, r26	; 0x13
    186a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    186c:	69 89       	ldd	r22, Y+17	; 0x11
    186e:	7a 89       	ldd	r23, Y+18	; 0x12
    1870:	8b 89       	ldd	r24, Y+19	; 0x13
    1872:	9c 89       	ldd	r25, Y+20	; 0x14
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	1c f4       	brge	.+6      	; 0x188a <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	88 8b       	std	Y+16, r24	; 0x10
    1888:	91 c0       	rjmp	.+290    	; 0x19ac <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    188a:	69 89       	ldd	r22, Y+17	; 0x11
    188c:	7a 89       	ldd	r23, Y+18	; 0x12
    188e:	8b 89       	ldd	r24, Y+19	; 0x13
    1890:	9c 89       	ldd	r25, Y+20	; 0x14
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4f e7       	ldi	r20, 0x7F	; 127
    1898:	53 e4       	ldi	r21, 0x43	; 67
    189a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    189e:	18 16       	cp	r1, r24
    18a0:	0c f0       	brlt	.+2      	; 0x18a4 <LCD_read_address_8bit+0x2fc>
    18a2:	7b c0       	rjmp	.+246    	; 0x199a <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4a e7       	ldi	r20, 0x7A	; 122
    18b2:	54 e4       	ldi	r21, 0x44	; 68
    18b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8c 87       	std	Y+12, r24	; 0x0c
    18be:	9d 87       	std	Y+13, r25	; 0x0d
    18c0:	ae 87       	std	Y+14, r26	; 0x0e
    18c2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    18c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    18c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a e7       	ldi	r20, 0x7A	; 122
    18d2:	55 e4       	ldi	r21, 0x45	; 69
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	88 87       	std	Y+8, r24	; 0x08
    18de:	99 87       	std	Y+9, r25	; 0x09
    18e0:	aa 87       	std	Y+10, r26	; 0x0a
    18e2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18e4:	68 85       	ldd	r22, Y+8	; 0x08
    18e6:	79 85       	ldd	r23, Y+9	; 0x09
    18e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9f 83       	std	Y+7, r25	; 0x07
    1902:	8e 83       	std	Y+6, r24	; 0x06
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    1906:	68 85       	ldd	r22, Y+8	; 0x08
    1908:	79 85       	ldd	r23, Y+9	; 0x09
    190a:	8a 85       	ldd	r24, Y+10	; 0x0a
    190c:	9b 85       	ldd	r25, Y+11	; 0x0b
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1920:	7d 85       	ldd	r23, Y+13	; 0x0d
    1922:	8e 85       	ldd	r24, Y+14	; 0x0e
    1924:	9f 85       	ldd	r25, Y+15	; 0x0f
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9f 83       	std	Y+7, r25	; 0x07
    1944:	8e 83       	std	Y+6, r24	; 0x06
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <LCD_read_address_8bit+0x3be>
    1948:	80 e9       	ldi	r24, 0x90	; 144
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	9d 83       	std	Y+5, r25	; 0x05
    194e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <LCD_read_address_8bit+0x3ac>
    1958:	9d 83       	std	Y+5, r25	; 0x05
    195a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8e 81       	ldd	r24, Y+6	; 0x06
    195e:	9f 81       	ldd	r25, Y+7	; 0x07
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9f 83       	std	Y+7, r25	; 0x07
    1964:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8e 81       	ldd	r24, Y+6	; 0x06
    1968:	9f 81       	ldd	r25, Y+7	; 0x07
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <LCD_read_address_8bit+0x3a0>
    196e:	24 c0       	rjmp	.+72     	; 0x19b8 <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	68 85       	ldd	r22, Y+8	; 0x08
    1972:	79 85       	ldd	r23, Y+9	; 0x09
    1974:	8a 85       	ldd	r24, Y+10	; 0x0a
    1976:	9b 85       	ldd	r25, Y+11	; 0x0b
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9f 83       	std	Y+7, r25	; 0x07
    1982:	8e 83       	std	Y+6, r24	; 0x06
    1984:	8e 81       	ldd	r24, Y+6	; 0x06
    1986:	9f 81       	ldd	r25, Y+7	; 0x07
    1988:	9b 83       	std	Y+3, r25	; 0x03
    198a:	8a 83       	std	Y+2, r24	; 0x02
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_read_address_8bit+0x3e8>
    1994:	9b 83       	std	Y+3, r25	; 0x03
    1996:	8a 83       	std	Y+2, r24	; 0x02
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    199a:	69 89       	ldd	r22, Y+17	; 0x11
    199c:	7a 89       	ldd	r23, Y+18	; 0x12
    199e:	8b 89       	ldd	r24, Y+19	; 0x13
    19a0:	9c 89       	ldd	r25, Y+20	; 0x14
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	88 8b       	std	Y+16, r24	; 0x10
    19ac:	88 89       	ldd	r24, Y+16	; 0x10
    19ae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	8a 95       	dec	r24
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_read_address_8bit+0x40a>
    19b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8_get_port>
    19be:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    19c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    19ca:	8f 77       	andi	r24, 0x7F	; 127
    19cc:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	6f ef       	ldi	r22, 0xFF	; 255
    19d2:	0e 94 22 29 	call	0x5244	; 0x5244 <DIO_void_set_port_dir>
	return address;
    19d6:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    19d8:	ef 96       	adiw	r28, 0x3f	; 63
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	c3 56       	subi	r28, 0x63	; 99
    19f8:	d0 40       	sbci	r29, 0x00	; 0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	fe 01       	movw	r30, r28
    1a06:	ed 59       	subi	r30, 0x9D	; 157
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e3 5a       	subi	r30, 0xA3	; 163
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e8       	ldi	r26, 0x80	; 128
    1a28:	bf e3       	ldi	r27, 0x3F	; 63
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a32:	8e 01       	movw	r16, r28
    1a34:	07 5a       	subi	r16, 0xA7	; 167
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e3 5a       	subi	r30, 0xA3	; 163
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	2b ea       	ldi	r18, 0xAB	; 171
    1a48:	3a ea       	ldi	r19, 0xAA	; 170
    1a4a:	4a ea       	ldi	r20, 0xAA	; 170
    1a4c:	50 e4       	ldi	r21, 0x40	; 64
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	80 83       	st	Z, r24
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	a2 83       	std	Z+2, r26	; 0x02
    1a5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a60:	fe 01       	movw	r30, r28
    1a62:	e7 5a       	subi	r30, 0xA7	; 167
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	34 f4       	brge	.+12     	; 0x1a8a <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e8 5a       	subi	r30, 0xA8	; 168
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	80 83       	st	Z, r24
    1a88:	e0 c0       	rjmp	.+448    	; 0x1c4a <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 5a       	subi	r30, 0xA7	; 167
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	53 e4       	ldi	r21, 0x43	; 67
    1aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	0c f0       	brlt	.+2      	; 0x1aaa <LCD_write_data_4bit+0xc0>
    1aa8:	c0 c0       	rjmp	.+384    	; 0x1c2a <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e3 5a       	subi	r30, 0xA3	; 163
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a e7       	ldi	r20, 0x7A	; 122
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	fe 01       	movw	r30, r28
    1aca:	ec 5a       	subi	r30, 0xAC	; 172
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 83       	st	Z, r24
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	a2 83       	std	Z+2, r26	; 0x02
    1ad4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	8e 01       	movw	r16, r28
    1ad8:	00 5b       	subi	r16, 0xB0	; 176
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	fe 01       	movw	r30, r28
    1ade:	ec 5a       	subi	r30, 0xAC	; 172
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a e7       	ldi	r20, 0x7A	; 122
    1af0:	55 e4       	ldi	r21, 0x45	; 69
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	f8 01       	movw	r30, r16
    1afc:	80 83       	st	Z, r24
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	a2 83       	std	Z+2, r26	; 0x02
    1b02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b04:	fe 01       	movw	r30, r28
    1b06:	e0 5b       	subi	r30, 0xB0	; 176
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	60 81       	ld	r22, Z
    1b0c:	71 81       	ldd	r23, Z+1	; 0x01
    1b0e:	82 81       	ldd	r24, Z+2	; 0x02
    1b10:	93 81       	ldd	r25, Z+3	; 0x03
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	44 f4       	brge	.+16     	; 0x1b32 <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1b22:	fe 01       	movw	r30, r28
    1b24:	e2 5b       	subi	r30, 0xB2	; 178
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	80 83       	st	Z, r24
    1b30:	64 c0       	rjmp	.+200    	; 0x1bfa <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1b32:	fe 01       	movw	r30, r28
    1b34:	e0 5b       	subi	r30, 0xB0	; 176
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	3f ef       	ldi	r19, 0xFF	; 255
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	57 e4       	ldi	r21, 0x47	; 71
    1b48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <LCD_write_data_4bit+0x168>
    1b50:	43 c0       	rjmp	.+134    	; 0x1bd8 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	fe 01       	movw	r30, r28
    1b54:	ec 5a       	subi	r30, 0xAC	; 172
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8e 01       	movw	r16, r28
    1b72:	02 5b       	subi	r16, 0xB2	; 178
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	f8 01       	movw	r30, r16
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
    1b88:	1f c0       	rjmp	.+62     	; 0x1bc8 <LCD_write_data_4bit+0x1de>
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e4 5b       	subi	r30, 0xB4	; 180
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 e9       	ldi	r24, 0x90	; 144
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e4 5b       	subi	r30, 0xB4	; 180
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_write_data_4bit+0x1b8>
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e4 5b       	subi	r30, 0xB4	; 180
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	de 01       	movw	r26, r28
    1bb2:	a2 5b       	subi	r26, 0xB2	; 178
    1bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e2 5b       	subi	r30, 0xB2	; 178
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	11 96       	adiw	r26, 0x01	; 1
    1bc4:	9c 93       	st	X, r25
    1bc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e2 5b       	subi	r30, 0xB2	; 178
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	d1 f6       	brne	.-76     	; 0x1b8a <LCD_write_data_4bit+0x1a0>
    1bd6:	4b c0       	rjmp	.+150    	; 0x1c6e <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	8e 01       	movw	r16, r28
    1bda:	02 5b       	subi	r16, 0xB2	; 178
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	fe 01       	movw	r30, r28
    1be0:	e0 5b       	subi	r30, 0xB0	; 176
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24
    1bfa:	de 01       	movw	r26, r28
    1bfc:	a6 5b       	subi	r26, 0xB6	; 182
    1bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1c00:	fe 01       	movw	r30, r28
    1c02:	e2 5b       	subi	r30, 0xB2	; 178
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	9c 93       	st	X, r25
    1c0e:	8e 93       	st	-X, r24
    1c10:	fe 01       	movw	r30, r28
    1c12:	e6 5b       	subi	r30, 0xB6	; 182
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_write_data_4bit+0x230>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e6 5b       	subi	r30, 0xB6	; 182
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
    1c28:	22 c0       	rjmp	.+68     	; 0x1c6e <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c2a:	8e 01       	movw	r16, r28
    1c2c:	08 5a       	subi	r16, 0xA8	; 168
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	fe 01       	movw	r30, r28
    1c32:	e7 5a       	subi	r30, 0xA7	; 167
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	f8 01       	movw	r30, r16
    1c48:	80 83       	st	Z, r24
    1c4a:	de 01       	movw	r26, r28
    1c4c:	a7 5b       	subi	r26, 0xB7	; 183
    1c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c50:	fe 01       	movw	r30, r28
    1c52:	e8 5a       	subi	r30, 0xA8	; 168
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 81       	ld	r24, Z
    1c58:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e7 5b       	subi	r30, 0xB7	; 183
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	8a 95       	dec	r24
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_write_data_4bit+0x278>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 5b       	subi	r30, 0xB7	; 183
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    1c76:	fe 01       	movw	r30, r28
    1c78:	eb 5b       	subi	r30, 0xBB	; 187
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	80 83       	st	Z, r24
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	a2 83       	std	Z+2, r26	; 0x02
    1c8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	0f 5b       	subi	r16, 0xBF	; 191
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	eb 5b       	subi	r30, 0xBB	; 187
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	2b ea       	ldi	r18, 0xAB	; 171
    1ca2:	3a ea       	ldi	r19, 0xAA	; 170
    1ca4:	4a ea       	ldi	r20, 0xAA	; 170
    1ca6:	50 e4       	ldi	r21, 0x40	; 64
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	80 83       	st	Z, r24
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	a2 83       	std	Z+2, r26	; 0x02
    1cb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ef 5b       	subi	r30, 0xBF	; 191
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	34 f4       	brge	.+12     	; 0x1ce4 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e0 5c       	subi	r30, 0xC0	; 192
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 83       	st	Z, r24
    1ce2:	9d c0       	rjmp	.+314    	; 0x1e1e <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ef 5b       	subi	r30, 0xBF	; 191
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	53 e4       	ldi	r21, 0x43	; 67
    1cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <LCD_write_data_4bit+0x31a>
    1d02:	7e c0       	rjmp	.+252    	; 0x1e00 <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    1d04:	fe 01       	movw	r30, r28
    1d06:	eb 5b       	subi	r30, 0xBB	; 187
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a e7       	ldi	r20, 0x7A	; 122
    1d18:	54 e4       	ldi	r21, 0x44	; 68
    1d1a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8c af       	std	Y+60, r24	; 0x3c
    1d24:	9d af       	std	Y+61, r25	; 0x3d
    1d26:	ae af       	std	Y+62, r26	; 0x3e
    1d28:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a e7       	ldi	r20, 0x7A	; 122
    1d38:	55 e4       	ldi	r21, 0x45	; 69
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	88 af       	std	Y+56, r24	; 0x38
    1d44:	99 af       	std	Y+57, r25	; 0x39
    1d46:	aa af       	std	Y+58, r26	; 0x3a
    1d48:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1d4a:	68 ad       	ldd	r22, Y+56	; 0x38
    1d4c:	79 ad       	ldd	r23, Y+57	; 0x39
    1d4e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d50:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	2c f4       	brge	.+10     	; 0x1d6c <LCD_write_data_4bit+0x382>
		__ticks = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9f ab       	std	Y+55, r25	; 0x37
    1d68:	8e ab       	std	Y+54, r24	; 0x36
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    1d6c:	68 ad       	ldd	r22, Y+56	; 0x38
    1d6e:	79 ad       	ldd	r23, Y+57	; 0x39
    1d70:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d72:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	3f ef       	ldi	r19, 0xFF	; 255
    1d78:	4f e7       	ldi	r20, 0x7F	; 127
    1d7a:	57 e4       	ldi	r21, 0x47	; 71
    1d7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d80:	18 16       	cp	r1, r24
    1d82:	4c f5       	brge	.+82     	; 0x1dd6 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d84:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d86:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d88:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e2       	ldi	r20, 0x20	; 32
    1d92:	51 e4       	ldi	r21, 0x41	; 65
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9f ab       	std	Y+55, r25	; 0x37
    1daa:	8e ab       	std	Y+54, r24	; 0x36
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <LCD_write_data_4bit+0x3e2>
    1dae:	80 e9       	ldi	r24, 0x90	; 144
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	9d ab       	std	Y+53, r25	; 0x35
    1db4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db6:	8c a9       	ldd	r24, Y+52	; 0x34
    1db8:	9d a9       	ldd	r25, Y+53	; 0x35
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_write_data_4bit+0x3d0>
    1dbe:	9d ab       	std	Y+53, r25	; 0x35
    1dc0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	8e a9       	ldd	r24, Y+54	; 0x36
    1dc4:	9f a9       	ldd	r25, Y+55	; 0x37
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	9f ab       	std	Y+55, r25	; 0x37
    1dca:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dcc:	8e a9       	ldd	r24, Y+54	; 0x36
    1dce:	9f a9       	ldd	r25, Y+55	; 0x37
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	69 f7       	brne	.-38     	; 0x1dae <LCD_write_data_4bit+0x3c4>
    1dd4:	2d c0       	rjmp	.+90     	; 0x1e30 <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd6:	68 ad       	ldd	r22, Y+56	; 0x38
    1dd8:	79 ad       	ldd	r23, Y+57	; 0x39
    1dda:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ddc:	9b ad       	ldd	r25, Y+59	; 0x3b
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9f ab       	std	Y+55, r25	; 0x37
    1de8:	8e ab       	std	Y+54, r24	; 0x36
    1dea:	8e a9       	ldd	r24, Y+54	; 0x36
    1dec:	9f a9       	ldd	r25, Y+55	; 0x37
    1dee:	9b ab       	std	Y+51, r25	; 0x33
    1df0:	8a ab       	std	Y+50, r24	; 0x32
    1df2:	8a a9       	ldd	r24, Y+50	; 0x32
    1df4:	9b a9       	ldd	r25, Y+51	; 0x33
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_write_data_4bit+0x40c>
    1dfa:	9b ab       	std	Y+51, r25	; 0x33
    1dfc:	8a ab       	std	Y+50, r24	; 0x32
    1dfe:	18 c0       	rjmp	.+48     	; 0x1e30 <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e00:	fe 01       	movw	r30, r28
    1e02:	ef 5b       	subi	r30, 0xBF	; 191
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	60 81       	ld	r22, Z
    1e08:	71 81       	ldd	r23, Z+1	; 0x01
    1e0a:	82 81       	ldd	r24, Z+2	; 0x02
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	fe 01       	movw	r30, r28
    1e18:	e0 5c       	subi	r30, 0xC0	; 192
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 83       	st	Z, r24
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e0 5c       	subi	r30, 0xC0	; 192
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e28:	89 a9       	ldd	r24, Y+49	; 0x31
    1e2a:	8a 95       	dec	r24
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_write_data_4bit+0x440>
    1e2e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    1e30:	fe 01       	movw	r30, r28
    1e32:	ee 59       	subi	r30, 0x9E	; 158
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	84 e0       	ldi	r24, 0x04	; 4
    1e38:	80 83       	st	Z, r24
    1e3a:	26 c0       	rjmp	.+76     	; 0x1e88 <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	ed 59       	subi	r30, 0x9D	; 157
    1e40:	ff 4f       	sbci	r31, 0xFF	; 255
    1e42:	80 81       	ld	r24, Z
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ee 59       	subi	r30, 0x9E	; 158
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a9 01       	movw	r20, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <LCD_write_data_4bit+0x472>
    1e58:	55 95       	asr	r21
    1e5a:	47 95       	ror	r20
    1e5c:	8a 95       	dec	r24
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <LCD_write_data_4bit+0x46e>
    1e60:	ca 01       	movw	r24, r20
    1e62:	98 2f       	mov	r25, r24
    1e64:	91 70       	andi	r25, 0x01	; 1
    1e66:	fe 01       	movw	r30, r28
    1e68:	ee 59       	subi	r30, 0x9E	; 158
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	60 81       	ld	r22, Z
    1e70:	49 2f       	mov	r20, r25
    1e72:	0e 94 07 2b 	call	0x560e	; 0x560e <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    1e76:	de 01       	movw	r26, r28
    1e78:	ae 59       	subi	r26, 0x9E	; 158
    1e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ee 59       	subi	r30, 0x9E	; 158
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 5f       	subi	r24, 0xFF	; 255
    1e86:	8c 93       	st	X, r24
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ee 59       	subi	r30, 0x9E	; 158
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 30       	cpi	r24, 0x08	; 8
    1e92:	a0 f2       	brcs	.-88     	; 0x1e3c <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e2       	ldi	r26, 0x20	; 32
    1ea2:	b1 e4       	ldi	r27, 0x41	; 65
    1ea4:	8d a7       	std	Y+45, r24	; 0x2d
    1ea6:	9e a7       	std	Y+46, r25	; 0x2e
    1ea8:	af a7       	std	Y+47, r26	; 0x2f
    1eaa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eac:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eae:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb4:	2b ea       	ldi	r18, 0xAB	; 171
    1eb6:	3a ea       	ldi	r19, 0xAA	; 170
    1eb8:	4a ea       	ldi	r20, 0xAA	; 170
    1eba:	50 e4       	ldi	r21, 0x40	; 64
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	89 a7       	std	Y+41, r24	; 0x29
    1ec6:	9a a7       	std	Y+42, r25	; 0x2a
    1ec8:	ab a7       	std	Y+43, r26	; 0x2b
    1eca:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ecc:	69 a5       	ldd	r22, Y+41	; 0x29
    1ece:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ed0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	1c f4       	brge	.+6      	; 0x1eea <LCD_write_data_4bit+0x500>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	88 a7       	std	Y+40, r24	; 0x28
    1ee8:	91 c0       	rjmp	.+290    	; 0x200c <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    1eea:	69 a5       	ldd	r22, Y+41	; 0x29
    1eec:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	53 e4       	ldi	r21, 0x43	; 67
    1efa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	0c f0       	brlt	.+2      	; 0x1f04 <LCD_write_data_4bit+0x51a>
    1f02:	7b c0       	rjmp	.+246    	; 0x1ffa <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    1f04:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f06:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	54 e4       	ldi	r21, 0x44	; 68
    1f14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8c a3       	std	Y+36, r24	; 0x24
    1f1e:	9d a3       	std	Y+37, r25	; 0x25
    1f20:	ae a3       	std	Y+38, r26	; 0x26
    1f22:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6c a1       	ldd	r22, Y+36	; 0x24
    1f26:	7d a1       	ldd	r23, Y+37	; 0x25
    1f28:	8e a1       	ldd	r24, Y+38	; 0x26
    1f2a:	9f a1       	ldd	r25, Y+39	; 0x27
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a e7       	ldi	r20, 0x7A	; 122
    1f32:	55 e4       	ldi	r21, 0x45	; 69
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	88 a3       	std	Y+32, r24	; 0x20
    1f3e:	99 a3       	std	Y+33, r25	; 0x21
    1f40:	aa a3       	std	Y+34, r26	; 0x22
    1f42:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f44:	68 a1       	ldd	r22, Y+32	; 0x20
    1f46:	79 a1       	ldd	r23, Y+33	; 0x21
    1f48:	8a a1       	ldd	r24, Y+34	; 0x22
    1f4a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9f 8f       	std	Y+31, r25	; 0x1f
    1f62:	8e 8f       	std	Y+30, r24	; 0x1e
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    1f66:	68 a1       	ldd	r22, Y+32	; 0x20
    1f68:	79 a1       	ldd	r23, Y+33	; 0x21
    1f6a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f6c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6c a1       	ldd	r22, Y+36	; 0x24
    1f80:	7d a1       	ldd	r23, Y+37	; 0x25
    1f82:	8e a1       	ldd	r24, Y+38	; 0x26
    1f84:	9f a1       	ldd	r25, Y+39	; 0x27
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9f 8f       	std	Y+31, r25	; 0x1f
    1fa4:	8e 8f       	std	Y+30, r24	; 0x1e
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <LCD_write_data_4bit+0x5dc>
    1fa8:	80 e9       	ldi	r24, 0x90	; 144
    1faa:	91 e0       	ldi	r25, 0x01	; 1
    1fac:	9d 8f       	std	Y+29, r25	; 0x1d
    1fae:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_write_data_4bit+0x5ca>
    1fb8:	9d 8f       	std	Y+29, r25	; 0x1d
    1fba:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fbe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9f 8f       	std	Y+31, r25	; 0x1f
    1fc4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <LCD_write_data_4bit+0x5be>
    1fce:	24 c0       	rjmp	.+72     	; 0x2018 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	68 a1       	ldd	r22, Y+32	; 0x20
    1fd2:	79 a1       	ldd	r23, Y+33	; 0x21
    1fd4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fd6:	9b a1       	ldd	r25, Y+35	; 0x23
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9f 8f       	std	Y+31, r25	; 0x1f
    1fe2:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fe8:	9b 8f       	std	Y+27, r25	; 0x1b
    1fea:	8a 8f       	std	Y+26, r24	; 0x1a
    1fec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_write_data_4bit+0x606>
    1ff4:	9b 8f       	std	Y+27, r25	; 0x1b
    1ff6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ffa:	69 a5       	ldd	r22, Y+41	; 0x29
    1ffc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ffe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2000:	9c a5       	ldd	r25, Y+44	; 0x2c
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	88 a7       	std	Y+40, r24	; 0x28
    200c:	88 a5       	ldd	r24, Y+40	; 0x28
    200e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2010:	89 8d       	ldd	r24, Y+25	; 0x19
    2012:	8a 95       	dec	r24
    2014:	f1 f7       	brne	.-4      	; 0x2012 <LCD_write_data_4bit+0x628>
    2016:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e8       	ldi	r26, 0x80	; 128
    2026:	bf e3       	ldi	r27, 0x3F	; 63
    2028:	8d 8b       	std	Y+21, r24	; 0x15
    202a:	9e 8b       	std	Y+22, r25	; 0x16
    202c:	af 8b       	std	Y+23, r26	; 0x17
    202e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2030:	6d 89       	ldd	r22, Y+21	; 0x15
    2032:	7e 89       	ldd	r23, Y+22	; 0x16
    2034:	8f 89       	ldd	r24, Y+23	; 0x17
    2036:	98 8d       	ldd	r25, Y+24	; 0x18
    2038:	2b ea       	ldi	r18, 0xAB	; 171
    203a:	3a ea       	ldi	r19, 0xAA	; 170
    203c:	4a ea       	ldi	r20, 0xAA	; 170
    203e:	50 e4       	ldi	r21, 0x40	; 64
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	89 8b       	std	Y+17, r24	; 0x11
    204a:	9a 8b       	std	Y+18, r25	; 0x12
    204c:	ab 8b       	std	Y+19, r26	; 0x13
    204e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2050:	69 89       	ldd	r22, Y+17	; 0x11
    2052:	7a 89       	ldd	r23, Y+18	; 0x12
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	1c f4       	brge	.+6      	; 0x206e <LCD_write_data_4bit+0x684>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	88 8b       	std	Y+16, r24	; 0x10
    206c:	91 c0       	rjmp	.+290    	; 0x2190 <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    206e:	69 89       	ldd	r22, Y+17	; 0x11
    2070:	7a 89       	ldd	r23, Y+18	; 0x12
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	53 e4       	ldi	r21, 0x43	; 67
    207e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	0c f0       	brlt	.+2      	; 0x2088 <LCD_write_data_4bit+0x69e>
    2086:	7b c0       	rjmp	.+246    	; 0x217e <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a e7       	ldi	r20, 0x7A	; 122
    2096:	54 e4       	ldi	r21, 0x44	; 68
    2098:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8c 87       	std	Y+12, r24	; 0x0c
    20a2:	9d 87       	std	Y+13, r25	; 0x0d
    20a4:	ae 87       	std	Y+14, r26	; 0x0e
    20a6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    20aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a e7       	ldi	r20, 0x7A	; 122
    20b6:	55 e4       	ldi	r21, 0x45	; 69
    20b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	88 87       	std	Y+8, r24	; 0x08
    20c2:	99 87       	std	Y+9, r25	; 0x09
    20c4:	aa 87       	std	Y+10, r26	; 0x0a
    20c6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20c8:	68 85       	ldd	r22, Y+8	; 0x08
    20ca:	79 85       	ldd	r23, Y+9	; 0x09
    20cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20dc:	88 23       	and	r24, r24
    20de:	2c f4       	brge	.+10     	; 0x20ea <LCD_write_data_4bit+0x700>
		__ticks = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	9f 83       	std	Y+7, r25	; 0x07
    20e6:	8e 83       	std	Y+6, r24	; 0x06
    20e8:	3f c0       	rjmp	.+126    	; 0x2168 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    20ea:	68 85       	ldd	r22, Y+8	; 0x08
    20ec:	79 85       	ldd	r23, Y+9	; 0x09
    20ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	3f ef       	ldi	r19, 0xFF	; 255
    20f6:	4f e7       	ldi	r20, 0x7F	; 127
    20f8:	57 e4       	ldi	r21, 0x47	; 71
    20fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20fe:	18 16       	cp	r1, r24
    2100:	4c f5       	brge	.+82     	; 0x2154 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2102:	6c 85       	ldd	r22, Y+12	; 0x0c
    2104:	7d 85       	ldd	r23, Y+13	; 0x0d
    2106:	8e 85       	ldd	r24, Y+14	; 0x0e
    2108:	9f 85       	ldd	r25, Y+15	; 0x0f
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e2       	ldi	r20, 0x20	; 32
    2110:	51 e4       	ldi	r21, 0x41	; 65
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9f 83       	std	Y+7, r25	; 0x07
    2128:	8e 83       	std	Y+6, r24	; 0x06
    212a:	0f c0       	rjmp	.+30     	; 0x214a <LCD_write_data_4bit+0x760>
    212c:	80 e9       	ldi	r24, 0x90	; 144
    212e:	91 e0       	ldi	r25, 0x01	; 1
    2130:	9d 83       	std	Y+5, r25	; 0x05
    2132:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2134:	8c 81       	ldd	r24, Y+4	; 0x04
    2136:	9d 81       	ldd	r25, Y+5	; 0x05
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_write_data_4bit+0x74e>
    213c:	9d 83       	std	Y+5, r25	; 0x05
    213e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2140:	8e 81       	ldd	r24, Y+6	; 0x06
    2142:	9f 81       	ldd	r25, Y+7	; 0x07
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	9f 83       	std	Y+7, r25	; 0x07
    2148:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	9f 81       	ldd	r25, Y+7	; 0x07
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	69 f7       	brne	.-38     	; 0x212c <LCD_write_data_4bit+0x742>
    2152:	24 c0       	rjmp	.+72     	; 0x219c <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2154:	68 85       	ldd	r22, Y+8	; 0x08
    2156:	79 85       	ldd	r23, Y+9	; 0x09
    2158:	8a 85       	ldd	r24, Y+10	; 0x0a
    215a:	9b 85       	ldd	r25, Y+11	; 0x0b
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9f 83       	std	Y+7, r25	; 0x07
    2166:	8e 83       	std	Y+6, r24	; 0x06
    2168:	8e 81       	ldd	r24, Y+6	; 0x06
    216a:	9f 81       	ldd	r25, Y+7	; 0x07
    216c:	9b 83       	std	Y+3, r25	; 0x03
    216e:	8a 83       	std	Y+2, r24	; 0x02
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	9b 81       	ldd	r25, Y+3	; 0x03
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_write_data_4bit+0x78a>
    2178:	9b 83       	std	Y+3, r25	; 0x03
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	0f c0       	rjmp	.+30     	; 0x219c <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    217e:	69 89       	ldd	r22, Y+17	; 0x11
    2180:	7a 89       	ldd	r23, Y+18	; 0x12
    2182:	8b 89       	ldd	r24, Y+19	; 0x13
    2184:	9c 89       	ldd	r25, Y+20	; 0x14
    2186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	88 8b       	std	Y+16, r24	; 0x10
    2190:	88 89       	ldd	r24, Y+16	; 0x10
    2192:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	8a 95       	dec	r24
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_write_data_4bit+0x7ac>
    219a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    219c:	fe 01       	movw	r30, r28
    219e:	ef 59       	subi	r30, 0x9F	; 159
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	84 e0       	ldi	r24, 0x04	; 4
    21a4:	80 83       	st	Z, r24
    21a6:	27 c0       	rjmp	.+78     	; 0x21f6 <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    21a8:	fe 01       	movw	r30, r28
    21aa:	ed 59       	subi	r30, 0x9D	; 157
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	fe 01       	movw	r30, r28
    21b6:	ef 59       	subi	r30, 0x9F	; 159
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	04 97       	sbiw	r24, 0x04	; 4
    21c2:	f9 01       	movw	r30, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <LCD_write_data_4bit+0x7e0>
    21c6:	f5 95       	asr	r31
    21c8:	e7 95       	ror	r30
    21ca:	8a 95       	dec	r24
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <LCD_write_data_4bit+0x7dc>
    21ce:	cf 01       	movw	r24, r30
    21d0:	98 2f       	mov	r25, r24
    21d2:	91 70       	andi	r25, 0x01	; 1
    21d4:	fe 01       	movw	r30, r28
    21d6:	ef 59       	subi	r30, 0x9F	; 159
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	60 81       	ld	r22, Z
    21de:	49 2f       	mov	r20, r25
    21e0:	0e 94 07 2b 	call	0x560e	; 0x560e <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    21e4:	de 01       	movw	r26, r28
    21e6:	af 59       	subi	r26, 0x9F	; 159
    21e8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ea:	fe 01       	movw	r30, r28
    21ec:	ef 59       	subi	r30, 0x9F	; 159
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 5f       	subi	r24, 0xFF	; 255
    21f4:	8c 93       	st	X, r24
    21f6:	fe 01       	movw	r30, r28
    21f8:	ef 59       	subi	r30, 0x9F	; 159
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	88 30       	cpi	r24, 0x08	; 8
    2200:	98 f2       	brcs	.-90     	; 0x21a8 <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
}
    220a:	cd 59       	subi	r28, 0x9D	; 157
    220c:	df 4f       	sbci	r29, 0xFF	; 255
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	08 95       	ret

00002222 <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	c3 56       	subi	r28, 0x63	; 99
    2230:	d0 40       	sbci	r29, 0x00	; 0
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	fe 01       	movw	r30, r28
    223e:	ed 59       	subi	r30, 0x9D	; 157
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    2254:	fe 01       	movw	r30, r28
    2256:	e3 5a       	subi	r30, 0xA3	; 163
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 e8       	ldi	r26, 0x80	; 128
    2260:	bf e3       	ldi	r27, 0x3F	; 63
    2262:	80 83       	st	Z, r24
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	a2 83       	std	Z+2, r26	; 0x02
    2268:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    226a:	8e 01       	movw	r16, r28
    226c:	07 5a       	subi	r16, 0xA7	; 167
    226e:	1f 4f       	sbci	r17, 0xFF	; 255
    2270:	fe 01       	movw	r30, r28
    2272:	e3 5a       	subi	r30, 0xA3	; 163
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	60 81       	ld	r22, Z
    2278:	71 81       	ldd	r23, Z+1	; 0x01
    227a:	82 81       	ldd	r24, Z+2	; 0x02
    227c:	93 81       	ldd	r25, Z+3	; 0x03
    227e:	2b ea       	ldi	r18, 0xAB	; 171
    2280:	3a ea       	ldi	r19, 0xAA	; 170
    2282:	4a ea       	ldi	r20, 0xAA	; 170
    2284:	50 e4       	ldi	r21, 0x40	; 64
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	f8 01       	movw	r30, r16
    2290:	80 83       	st	Z, r24
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	a2 83       	std	Z+2, r26	; 0x02
    2296:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2298:	fe 01       	movw	r30, r28
    229a:	e7 5a       	subi	r30, 0xA7	; 167
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e8       	ldi	r20, 0x80	; 128
    22ac:	5f e3       	ldi	r21, 0x3F	; 63
    22ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	34 f4       	brge	.+12     	; 0x22c2 <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    22b6:	fe 01       	movw	r30, r28
    22b8:	e8 5a       	subi	r30, 0xA8	; 168
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	80 83       	st	Z, r24
    22c0:	e0 c0       	rjmp	.+448    	; 0x2482 <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    22c2:	fe 01       	movw	r30, r28
    22c4:	e7 5a       	subi	r30, 0xA7	; 167
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	53 e4       	ldi	r21, 0x43	; 67
    22d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	0c f0       	brlt	.+2      	; 0x22e2 <LCD_write_cmd_4bit+0xc0>
    22e0:	c0 c0       	rjmp	.+384    	; 0x2462 <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    22e2:	fe 01       	movw	r30, r28
    22e4:	e3 5a       	subi	r30, 0xA3	; 163
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	fe 01       	movw	r30, r28
    2302:	ec 5a       	subi	r30, 0xAC	; 172
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 83       	st	Z, r24
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	a2 83       	std	Z+2, r26	; 0x02
    230c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	8e 01       	movw	r16, r28
    2310:	00 5b       	subi	r16, 0xB0	; 176
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	fe 01       	movw	r30, r28
    2316:	ec 5a       	subi	r30, 0xAC	; 172
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a e7       	ldi	r20, 0x7A	; 122
    2328:	55 e4       	ldi	r21, 0x45	; 69
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233c:	fe 01       	movw	r30, r28
    233e:	e0 5b       	subi	r30, 0xB0	; 176
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	44 f4       	brge	.+16     	; 0x236a <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    235a:	fe 01       	movw	r30, r28
    235c:	e2 5b       	subi	r30, 0xB2	; 178
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	64 c0       	rjmp	.+200    	; 0x2432 <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    236a:	fe 01       	movw	r30, r28
    236c:	e0 5b       	subi	r30, 0xB0	; 176
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	0c f0       	brlt	.+2      	; 0x238a <LCD_write_cmd_4bit+0x168>
    2388:	43 c0       	rjmp	.+134    	; 0x2410 <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	fe 01       	movw	r30, r28
    238c:	ec 5a       	subi	r30, 0xAC	; 172
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e2       	ldi	r20, 0x20	; 32
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8e 01       	movw	r16, r28
    23aa:	02 5b       	subi	r16, 0xB2	; 178
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	f8 01       	movw	r30, r16
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24
    23c0:	1f c0       	rjmp	.+62     	; 0x2400 <LCD_write_cmd_4bit+0x1de>
    23c2:	fe 01       	movw	r30, r28
    23c4:	e4 5b       	subi	r30, 0xB4	; 180
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 e9       	ldi	r24, 0x90	; 144
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d0:	fe 01       	movw	r30, r28
    23d2:	e4 5b       	subi	r30, 0xB4	; 180
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_write_cmd_4bit+0x1b8>
    23de:	fe 01       	movw	r30, r28
    23e0:	e4 5b       	subi	r30, 0xB4	; 180
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	de 01       	movw	r26, r28
    23ea:	a2 5b       	subi	r26, 0xB2	; 178
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	fe 01       	movw	r30, r28
    23f0:	e2 5b       	subi	r30, 0xB2	; 178
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	11 96       	adiw	r26, 0x01	; 1
    23fc:	9c 93       	st	X, r25
    23fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	fe 01       	movw	r30, r28
    2402:	e2 5b       	subi	r30, 0xB2	; 178
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	d1 f6       	brne	.-76     	; 0x23c2 <LCD_write_cmd_4bit+0x1a0>
    240e:	4b c0       	rjmp	.+150    	; 0x24a6 <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	8e 01       	movw	r16, r28
    2412:	02 5b       	subi	r16, 0xB2	; 178
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	fe 01       	movw	r30, r28
    2418:	e0 5b       	subi	r30, 0xB0	; 176
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	f8 01       	movw	r30, r16
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    2432:	de 01       	movw	r26, r28
    2434:	a6 5b       	subi	r26, 0xB6	; 182
    2436:	bf 4f       	sbci	r27, 0xFF	; 255
    2438:	fe 01       	movw	r30, r28
    243a:	e2 5b       	subi	r30, 0xB2	; 178
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	11 96       	adiw	r26, 0x01	; 1
    2444:	9c 93       	st	X, r25
    2446:	8e 93       	st	-X, r24
    2448:	fe 01       	movw	r30, r28
    244a:	e6 5b       	subi	r30, 0xB6	; 182
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 81       	ld	r24, Z
    2450:	91 81       	ldd	r25, Z+1	; 0x01
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <LCD_write_cmd_4bit+0x230>
    2456:	fe 01       	movw	r30, r28
    2458:	e6 5b       	subi	r30, 0xB6	; 182
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	22 c0       	rjmp	.+68     	; 0x24a6 <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2462:	8e 01       	movw	r16, r28
    2464:	08 5a       	subi	r16, 0xA8	; 168
    2466:	1f 4f       	sbci	r17, 0xFF	; 255
    2468:	fe 01       	movw	r30, r28
    246a:	e7 5a       	subi	r30, 0xA7	; 167
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	f8 01       	movw	r30, r16
    2480:	80 83       	st	Z, r24
    2482:	de 01       	movw	r26, r28
    2484:	a7 5b       	subi	r26, 0xB7	; 183
    2486:	bf 4f       	sbci	r27, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	e8 5a       	subi	r30, 0xA8	; 168
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2492:	fe 01       	movw	r30, r28
    2494:	e7 5b       	subi	r30, 0xB7	; 183
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 81       	ld	r24, Z
    249a:	8a 95       	dec	r24
    249c:	f1 f7       	brne	.-4      	; 0x249a <LCD_write_cmd_4bit+0x278>
    249e:	fe 01       	movw	r30, r28
    24a0:	e7 5b       	subi	r30, 0xB7	; 183
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    24ae:	fe 01       	movw	r30, r28
    24b0:	eb 5b       	subi	r30, 0xBB	; 187
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a0 e8       	ldi	r26, 0x80	; 128
    24ba:	bf e3       	ldi	r27, 0x3F	; 63
    24bc:	80 83       	st	Z, r24
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	a2 83       	std	Z+2, r26	; 0x02
    24c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24c4:	8e 01       	movw	r16, r28
    24c6:	0f 5b       	subi	r16, 0xBF	; 191
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	fe 01       	movw	r30, r28
    24cc:	eb 5b       	subi	r30, 0xBB	; 187
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	2b ea       	ldi	r18, 0xAB	; 171
    24da:	3a ea       	ldi	r19, 0xAA	; 170
    24dc:	4a ea       	ldi	r20, 0xAA	; 170
    24de:	50 e4       	ldi	r21, 0x40	; 64
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	f8 01       	movw	r30, r16
    24ea:	80 83       	st	Z, r24
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	a2 83       	std	Z+2, r26	; 0x02
    24f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f2:	fe 01       	movw	r30, r28
    24f4:	ef 5b       	subi	r30, 0xBF	; 191
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	34 f4       	brge	.+12     	; 0x251c <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	fe 01       	movw	r30, r28
    2514:	e0 5c       	subi	r30, 0xC0	; 192
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 83       	st	Z, r24
    251a:	9d c0       	rjmp	.+314    	; 0x2656 <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    251c:	fe 01       	movw	r30, r28
    251e:	ef 5b       	subi	r30, 0xBF	; 191
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	53 e4       	ldi	r21, 0x43	; 67
    2532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	0c f0       	brlt	.+2      	; 0x253c <LCD_write_cmd_4bit+0x31a>
    253a:	7e c0       	rjmp	.+252    	; 0x2638 <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    253c:	fe 01       	movw	r30, r28
    253e:	eb 5b       	subi	r30, 0xBB	; 187
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	4a e7       	ldi	r20, 0x7A	; 122
    2550:	54 e4       	ldi	r21, 0x44	; 68
    2552:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	8c af       	std	Y+60, r24	; 0x3c
    255c:	9d af       	std	Y+61, r25	; 0x3d
    255e:	ae af       	std	Y+62, r26	; 0x3e
    2560:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2562:	6c ad       	ldd	r22, Y+60	; 0x3c
    2564:	7d ad       	ldd	r23, Y+61	; 0x3d
    2566:	8e ad       	ldd	r24, Y+62	; 0x3e
    2568:	9f ad       	ldd	r25, Y+63	; 0x3f
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4a e7       	ldi	r20, 0x7A	; 122
    2570:	55 e4       	ldi	r21, 0x45	; 69
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	88 af       	std	Y+56, r24	; 0x38
    257c:	99 af       	std	Y+57, r25	; 0x39
    257e:	aa af       	std	Y+58, r26	; 0x3a
    2580:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2582:	68 ad       	ldd	r22, Y+56	; 0x38
    2584:	79 ad       	ldd	r23, Y+57	; 0x39
    2586:	8a ad       	ldd	r24, Y+58	; 0x3a
    2588:	9b ad       	ldd	r25, Y+59	; 0x3b
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e8       	ldi	r20, 0x80	; 128
    2590:	5f e3       	ldi	r21, 0x3F	; 63
    2592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2596:	88 23       	and	r24, r24
    2598:	2c f4       	brge	.+10     	; 0x25a4 <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9f ab       	std	Y+55, r25	; 0x37
    25a0:	8e ab       	std	Y+54, r24	; 0x36
    25a2:	3f c0       	rjmp	.+126    	; 0x2622 <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    25a4:	68 ad       	ldd	r22, Y+56	; 0x38
    25a6:	79 ad       	ldd	r23, Y+57	; 0x39
    25a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    25aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	3f ef       	ldi	r19, 0xFF	; 255
    25b0:	4f e7       	ldi	r20, 0x7F	; 127
    25b2:	57 e4       	ldi	r21, 0x47	; 71
    25b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b8:	18 16       	cp	r1, r24
    25ba:	4c f5       	brge	.+82     	; 0x260e <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    25be:	7d ad       	ldd	r23, Y+61	; 0x3d
    25c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    25c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e2       	ldi	r20, 0x20	; 32
    25ca:	51 e4       	ldi	r21, 0x41	; 65
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9f ab       	std	Y+55, r25	; 0x37
    25e2:	8e ab       	std	Y+54, r24	; 0x36
    25e4:	0f c0       	rjmp	.+30     	; 0x2604 <LCD_write_cmd_4bit+0x3e2>
    25e6:	80 e9       	ldi	r24, 0x90	; 144
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	9d ab       	std	Y+53, r25	; 0x35
    25ec:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ee:	8c a9       	ldd	r24, Y+52	; 0x34
    25f0:	9d a9       	ldd	r25, Y+53	; 0x35
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_write_cmd_4bit+0x3d0>
    25f6:	9d ab       	std	Y+53, r25	; 0x35
    25f8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fa:	8e a9       	ldd	r24, Y+54	; 0x36
    25fc:	9f a9       	ldd	r25, Y+55	; 0x37
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	9f ab       	std	Y+55, r25	; 0x37
    2602:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2604:	8e a9       	ldd	r24, Y+54	; 0x36
    2606:	9f a9       	ldd	r25, Y+55	; 0x37
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	69 f7       	brne	.-38     	; 0x25e6 <LCD_write_cmd_4bit+0x3c4>
    260c:	2d c0       	rjmp	.+90     	; 0x2668 <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260e:	68 ad       	ldd	r22, Y+56	; 0x38
    2610:	79 ad       	ldd	r23, Y+57	; 0x39
    2612:	8a ad       	ldd	r24, Y+58	; 0x3a
    2614:	9b ad       	ldd	r25, Y+59	; 0x3b
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9f ab       	std	Y+55, r25	; 0x37
    2620:	8e ab       	std	Y+54, r24	; 0x36
    2622:	8e a9       	ldd	r24, Y+54	; 0x36
    2624:	9f a9       	ldd	r25, Y+55	; 0x37
    2626:	9b ab       	std	Y+51, r25	; 0x33
    2628:	8a ab       	std	Y+50, r24	; 0x32
    262a:	8a a9       	ldd	r24, Y+50	; 0x32
    262c:	9b a9       	ldd	r25, Y+51	; 0x33
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_write_cmd_4bit+0x40c>
    2632:	9b ab       	std	Y+51, r25	; 0x33
    2634:	8a ab       	std	Y+50, r24	; 0x32
    2636:	18 c0       	rjmp	.+48     	; 0x2668 <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2638:	fe 01       	movw	r30, r28
    263a:	ef 5b       	subi	r30, 0xBF	; 191
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	fe 01       	movw	r30, r28
    2650:	e0 5c       	subi	r30, 0xC0	; 192
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 83       	st	Z, r24
    2656:	fe 01       	movw	r30, r28
    2658:	e0 5c       	subi	r30, 0xC0	; 192
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2660:	89 a9       	ldd	r24, Y+49	; 0x31
    2662:	8a 95       	dec	r24
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_write_cmd_4bit+0x440>
    2666:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2668:	fe 01       	movw	r30, r28
    266a:	ee 59       	subi	r30, 0x9E	; 158
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	84 e0       	ldi	r24, 0x04	; 4
    2670:	80 83       	st	Z, r24
    2672:	26 c0       	rjmp	.+76     	; 0x26c0 <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    2674:	fe 01       	movw	r30, r28
    2676:	ed 59       	subi	r30, 0x9D	; 157
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	fe 01       	movw	r30, r28
    2682:	ee 59       	subi	r30, 0x9E	; 158
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a9 01       	movw	r20, r18
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <LCD_write_cmd_4bit+0x472>
    2690:	55 95       	asr	r21
    2692:	47 95       	ror	r20
    2694:	8a 95       	dec	r24
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <LCD_write_cmd_4bit+0x46e>
    2698:	ca 01       	movw	r24, r20
    269a:	98 2f       	mov	r25, r24
    269c:	91 70       	andi	r25, 0x01	; 1
    269e:	fe 01       	movw	r30, r28
    26a0:	ee 59       	subi	r30, 0x9E	; 158
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	60 81       	ld	r22, Z
    26a8:	49 2f       	mov	r20, r25
    26aa:	0e 94 07 2b 	call	0x560e	; 0x560e <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    26ae:	de 01       	movw	r26, r28
    26b0:	ae 59       	subi	r26, 0x9E	; 158
    26b2:	bf 4f       	sbci	r27, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	ee 59       	subi	r30, 0x9E	; 158
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	8f 5f       	subi	r24, 0xFF	; 255
    26be:	8c 93       	st	X, r24
    26c0:	fe 01       	movw	r30, r28
    26c2:	ee 59       	subi	r30, 0x9E	; 158
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	88 30       	cpi	r24, 0x08	; 8
    26ca:	a0 f2       	brcs	.-88     	; 0x2674 <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e2       	ldi	r26, 0x20	; 32
    26da:	b1 e4       	ldi	r27, 0x41	; 65
    26dc:	8d a7       	std	Y+45, r24	; 0x2d
    26de:	9e a7       	std	Y+46, r25	; 0x2e
    26e0:	af a7       	std	Y+47, r26	; 0x2f
    26e2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    26e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    26e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ea:	98 a9       	ldd	r25, Y+48	; 0x30
    26ec:	2b ea       	ldi	r18, 0xAB	; 171
    26ee:	3a ea       	ldi	r19, 0xAA	; 170
    26f0:	4a ea       	ldi	r20, 0xAA	; 170
    26f2:	50 e4       	ldi	r21, 0x40	; 64
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	89 a7       	std	Y+41, r24	; 0x29
    26fe:	9a a7       	std	Y+42, r25	; 0x2a
    2700:	ab a7       	std	Y+43, r26	; 0x2b
    2702:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2704:	69 a5       	ldd	r22, Y+41	; 0x29
    2706:	7a a5       	ldd	r23, Y+42	; 0x2a
    2708:	8b a5       	ldd	r24, Y+43	; 0x2b
    270a:	9c a5       	ldd	r25, Y+44	; 0x2c
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	1c f4       	brge	.+6      	; 0x2722 <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	88 a7       	std	Y+40, r24	; 0x28
    2720:	91 c0       	rjmp	.+290    	; 0x2844 <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    2722:	69 a5       	ldd	r22, Y+41	; 0x29
    2724:	7a a5       	ldd	r23, Y+42	; 0x2a
    2726:	8b a5       	ldd	r24, Y+43	; 0x2b
    2728:	9c a5       	ldd	r25, Y+44	; 0x2c
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4f e7       	ldi	r20, 0x7F	; 127
    2730:	53 e4       	ldi	r21, 0x43	; 67
    2732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2736:	18 16       	cp	r1, r24
    2738:	0c f0       	brlt	.+2      	; 0x273c <LCD_write_cmd_4bit+0x51a>
    273a:	7b c0       	rjmp	.+246    	; 0x2832 <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    273c:	6d a5       	ldd	r22, Y+45	; 0x2d
    273e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2740:	8f a5       	ldd	r24, Y+47	; 0x2f
    2742:	98 a9       	ldd	r25, Y+48	; 0x30
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a e7       	ldi	r20, 0x7A	; 122
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8c a3       	std	Y+36, r24	; 0x24
    2756:	9d a3       	std	Y+37, r25	; 0x25
    2758:	ae a3       	std	Y+38, r26	; 0x26
    275a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	6c a1       	ldd	r22, Y+36	; 0x24
    275e:	7d a1       	ldd	r23, Y+37	; 0x25
    2760:	8e a1       	ldd	r24, Y+38	; 0x26
    2762:	9f a1       	ldd	r25, Y+39	; 0x27
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a e7       	ldi	r20, 0x7A	; 122
    276a:	55 e4       	ldi	r21, 0x45	; 69
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	88 a3       	std	Y+32, r24	; 0x20
    2776:	99 a3       	std	Y+33, r25	; 0x21
    2778:	aa a3       	std	Y+34, r26	; 0x22
    277a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    277c:	68 a1       	ldd	r22, Y+32	; 0x20
    277e:	79 a1       	ldd	r23, Y+33	; 0x21
    2780:	8a a1       	ldd	r24, Y+34	; 0x22
    2782:	9b a1       	ldd	r25, Y+35	; 0x23
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9f 8f       	std	Y+31, r25	; 0x1f
    279a:	8e 8f       	std	Y+30, r24	; 0x1e
    279c:	3f c0       	rjmp	.+126    	; 0x281c <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    279e:	68 a1       	ldd	r22, Y+32	; 0x20
    27a0:	79 a1       	ldd	r23, Y+33	; 0x21
    27a2:	8a a1       	ldd	r24, Y+34	; 0x22
    27a4:	9b a1       	ldd	r25, Y+35	; 0x23
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	4c f5       	brge	.+82     	; 0x2808 <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b6:	6c a1       	ldd	r22, Y+36	; 0x24
    27b8:	7d a1       	ldd	r23, Y+37	; 0x25
    27ba:	8e a1       	ldd	r24, Y+38	; 0x26
    27bc:	9f a1       	ldd	r25, Y+39	; 0x27
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9f 8f       	std	Y+31, r25	; 0x1f
    27dc:	8e 8f       	std	Y+30, r24	; 0x1e
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <LCD_write_cmd_4bit+0x5dc>
    27e0:	80 e9       	ldi	r24, 0x90	; 144
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	9d 8f       	std	Y+29, r25	; 0x1d
    27e6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <LCD_write_cmd_4bit+0x5ca>
    27f0:	9d 8f       	std	Y+29, r25	; 0x1d
    27f2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	9f 8f       	std	Y+31, r25	; 0x1f
    27fc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2800:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f7       	brne	.-38     	; 0x27e0 <LCD_write_cmd_4bit+0x5be>
    2806:	24 c0       	rjmp	.+72     	; 0x2850 <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	68 a1       	ldd	r22, Y+32	; 0x20
    280a:	79 a1       	ldd	r23, Y+33	; 0x21
    280c:	8a a1       	ldd	r24, Y+34	; 0x22
    280e:	9b a1       	ldd	r25, Y+35	; 0x23
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9f 8f       	std	Y+31, r25	; 0x1f
    281a:	8e 8f       	std	Y+30, r24	; 0x1e
    281c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    281e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2820:	9b 8f       	std	Y+27, r25	; 0x1b
    2822:	8a 8f       	std	Y+26, r24	; 0x1a
    2824:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2826:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <LCD_write_cmd_4bit+0x606>
    282c:	9b 8f       	std	Y+27, r25	; 0x1b
    282e:	8a 8f       	std	Y+26, r24	; 0x1a
    2830:	0f c0       	rjmp	.+30     	; 0x2850 <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2832:	69 a5       	ldd	r22, Y+41	; 0x29
    2834:	7a a5       	ldd	r23, Y+42	; 0x2a
    2836:	8b a5       	ldd	r24, Y+43	; 0x2b
    2838:	9c a5       	ldd	r25, Y+44	; 0x2c
    283a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	88 a7       	std	Y+40, r24	; 0x28
    2844:	88 a5       	ldd	r24, Y+40	; 0x28
    2846:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2848:	89 8d       	ldd	r24, Y+25	; 0x19
    284a:	8a 95       	dec	r24
    284c:	f1 f7       	brne	.-4      	; 0x284a <LCD_write_cmd_4bit+0x628>
    284e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e8       	ldi	r26, 0x80	; 128
    285e:	bf e3       	ldi	r27, 0x3F	; 63
    2860:	8d 8b       	std	Y+21, r24	; 0x15
    2862:	9e 8b       	std	Y+22, r25	; 0x16
    2864:	af 8b       	std	Y+23, r26	; 0x17
    2866:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2868:	6d 89       	ldd	r22, Y+21	; 0x15
    286a:	7e 89       	ldd	r23, Y+22	; 0x16
    286c:	8f 89       	ldd	r24, Y+23	; 0x17
    286e:	98 8d       	ldd	r25, Y+24	; 0x18
    2870:	2b ea       	ldi	r18, 0xAB	; 171
    2872:	3a ea       	ldi	r19, 0xAA	; 170
    2874:	4a ea       	ldi	r20, 0xAA	; 170
    2876:	50 e4       	ldi	r21, 0x40	; 64
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	89 8b       	std	Y+17, r24	; 0x11
    2882:	9a 8b       	std	Y+18, r25	; 0x12
    2884:	ab 8b       	std	Y+19, r26	; 0x13
    2886:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2888:	69 89       	ldd	r22, Y+17	; 0x11
    288a:	7a 89       	ldd	r23, Y+18	; 0x12
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	9c 89       	ldd	r25, Y+20	; 0x14
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	1c f4       	brge	.+6      	; 0x28a6 <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	88 8b       	std	Y+16, r24	; 0x10
    28a4:	91 c0       	rjmp	.+290    	; 0x29c8 <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    28a6:	69 89       	ldd	r22, Y+17	; 0x11
    28a8:	7a 89       	ldd	r23, Y+18	; 0x12
    28aa:	8b 89       	ldd	r24, Y+19	; 0x13
    28ac:	9c 89       	ldd	r25, Y+20	; 0x14
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	53 e4       	ldi	r21, 0x43	; 67
    28b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	0c f0       	brlt	.+2      	; 0x28c0 <LCD_write_cmd_4bit+0x69e>
    28be:	7b c0       	rjmp	.+246    	; 0x29b6 <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    28c0:	6d 89       	ldd	r22, Y+21	; 0x15
    28c2:	7e 89       	ldd	r23, Y+22	; 0x16
    28c4:	8f 89       	ldd	r24, Y+23	; 0x17
    28c6:	98 8d       	ldd	r25, Y+24	; 0x18
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a e7       	ldi	r20, 0x7A	; 122
    28ce:	54 e4       	ldi	r21, 0x44	; 68
    28d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	8c 87       	std	Y+12, r24	; 0x0c
    28da:	9d 87       	std	Y+13, r25	; 0x0d
    28dc:	ae 87       	std	Y+14, r26	; 0x0e
    28de:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    28e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    28e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    28e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	4a e7       	ldi	r20, 0x7A	; 122
    28ee:	55 e4       	ldi	r21, 0x45	; 69
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	88 87       	std	Y+8, r24	; 0x08
    28fa:	99 87       	std	Y+9, r25	; 0x09
    28fc:	aa 87       	std	Y+10, r26	; 0x0a
    28fe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2900:	68 85       	ldd	r22, Y+8	; 0x08
    2902:	79 85       	ldd	r23, Y+9	; 0x09
    2904:	8a 85       	ldd	r24, Y+10	; 0x0a
    2906:	9b 85       	ldd	r25, Y+11	; 0x0b
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	2c f4       	brge	.+10     	; 0x2922 <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9f 83       	std	Y+7, r25	; 0x07
    291e:	8e 83       	std	Y+6, r24	; 0x06
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    2922:	68 85       	ldd	r22, Y+8	; 0x08
    2924:	79 85       	ldd	r23, Y+9	; 0x09
    2926:	8a 85       	ldd	r24, Y+10	; 0x0a
    2928:	9b 85       	ldd	r25, Y+11	; 0x0b
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	3f ef       	ldi	r19, 0xFF	; 255
    292e:	4f e7       	ldi	r20, 0x7F	; 127
    2930:	57 e4       	ldi	r21, 0x47	; 71
    2932:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2936:	18 16       	cp	r1, r24
    2938:	4c f5       	brge	.+82     	; 0x298c <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293a:	6c 85       	ldd	r22, Y+12	; 0x0c
    293c:	7d 85       	ldd	r23, Y+13	; 0x0d
    293e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2940:	9f 85       	ldd	r25, Y+15	; 0x0f
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e2       	ldi	r20, 0x20	; 32
    2948:	51 e4       	ldi	r21, 0x41	; 65
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	9f 83       	std	Y+7, r25	; 0x07
    2960:	8e 83       	std	Y+6, r24	; 0x06
    2962:	0f c0       	rjmp	.+30     	; 0x2982 <LCD_write_cmd_4bit+0x760>
    2964:	80 e9       	ldi	r24, 0x90	; 144
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	9d 83       	std	Y+5, r25	; 0x05
    296a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    296c:	8c 81       	ldd	r24, Y+4	; 0x04
    296e:	9d 81       	ldd	r25, Y+5	; 0x05
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <LCD_write_cmd_4bit+0x74e>
    2974:	9d 83       	std	Y+5, r25	; 0x05
    2976:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2978:	8e 81       	ldd	r24, Y+6	; 0x06
    297a:	9f 81       	ldd	r25, Y+7	; 0x07
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	9f 83       	std	Y+7, r25	; 0x07
    2980:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2982:	8e 81       	ldd	r24, Y+6	; 0x06
    2984:	9f 81       	ldd	r25, Y+7	; 0x07
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	69 f7       	brne	.-38     	; 0x2964 <LCD_write_cmd_4bit+0x742>
    298a:	24 c0       	rjmp	.+72     	; 0x29d4 <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298c:	68 85       	ldd	r22, Y+8	; 0x08
    298e:	79 85       	ldd	r23, Y+9	; 0x09
    2990:	8a 85       	ldd	r24, Y+10	; 0x0a
    2992:	9b 85       	ldd	r25, Y+11	; 0x0b
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9f 83       	std	Y+7, r25	; 0x07
    299e:	8e 83       	std	Y+6, r24	; 0x06
    29a0:	8e 81       	ldd	r24, Y+6	; 0x06
    29a2:	9f 81       	ldd	r25, Y+7	; 0x07
    29a4:	9b 83       	std	Y+3, r25	; 0x03
    29a6:	8a 83       	std	Y+2, r24	; 0x02
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_write_cmd_4bit+0x78a>
    29b0:	9b 83       	std	Y+3, r25	; 0x03
    29b2:	8a 83       	std	Y+2, r24	; 0x02
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29b6:	69 89       	ldd	r22, Y+17	; 0x11
    29b8:	7a 89       	ldd	r23, Y+18	; 0x12
    29ba:	8b 89       	ldd	r24, Y+19	; 0x13
    29bc:	9c 89       	ldd	r25, Y+20	; 0x14
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	88 8b       	std	Y+16, r24	; 0x10
    29c8:	88 89       	ldd	r24, Y+16	; 0x10
    29ca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	8a 95       	dec	r24
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_write_cmd_4bit+0x7ac>
    29d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    29d4:	fe 01       	movw	r30, r28
    29d6:	ef 59       	subi	r30, 0x9F	; 159
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	84 e0       	ldi	r24, 0x04	; 4
    29dc:	80 83       	st	Z, r24
    29de:	27 c0       	rjmp	.+78     	; 0x2a2e <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    29e0:	fe 01       	movw	r30, r28
    29e2:	ed 59       	subi	r30, 0x9D	; 157
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	fe 01       	movw	r30, r28
    29ee:	ef 59       	subi	r30, 0x9F	; 159
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	80 81       	ld	r24, Z
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	04 97       	sbiw	r24, 0x04	; 4
    29fa:	f9 01       	movw	r30, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <LCD_write_cmd_4bit+0x7e0>
    29fe:	f5 95       	asr	r31
    2a00:	e7 95       	ror	r30
    2a02:	8a 95       	dec	r24
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <LCD_write_cmd_4bit+0x7dc>
    2a06:	cf 01       	movw	r24, r30
    2a08:	98 2f       	mov	r25, r24
    2a0a:	91 70       	andi	r25, 0x01	; 1
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ef 59       	subi	r30, 0x9F	; 159
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	60 81       	ld	r22, Z
    2a16:	49 2f       	mov	r20, r25
    2a18:	0e 94 07 2b 	call	0x560e	; 0x560e <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2a1c:	de 01       	movw	r26, r28
    2a1e:	af 59       	subi	r26, 0x9F	; 159
    2a20:	bf 4f       	sbci	r27, 0xFF	; 255
    2a22:	fe 01       	movw	r30, r28
    2a24:	ef 59       	subi	r30, 0x9F	; 159
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	8f 5f       	subi	r24, 0xFF	; 255
    2a2c:	8c 93       	st	X, r24
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ef 59       	subi	r30, 0x9F	; 159
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	88 30       	cpi	r24, 0x08	; 8
    2a38:	98 f2       	brcs	.-90     	; 0x29e0 <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
}
    2a42:	cd 59       	subi	r28, 0x9D	; 157
    2a44:	df 4f       	sbci	r29, 0xFF	; 255
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	08 95       	ret

00002a5a <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	cb 5a       	subi	r28, 0xAB	; 171
    2a68:	d0 40       	sbci	r29, 0x00	; 0
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	62 e0       	ldi	r22, 0x02	; 2
    2a78:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	61 e0       	ldi	r22, 0x01	; 1
    2a80:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    2a84:	fe 01       	movw	r30, r28
    2a86:	eb 55       	subi	r30, 0x5B	; 91
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 e8       	ldi	r26, 0x80	; 128
    2a90:	bf e3       	ldi	r27, 0x3F	; 63
    2a92:	80 83       	st	Z, r24
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	a2 83       	std	Z+2, r26	; 0x02
    2a98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	0f 55       	subi	r16, 0x5F	; 95
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	eb 55       	subi	r30, 0x5B	; 91
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	2b ea       	ldi	r18, 0xAB	; 171
    2ab0:	3a ea       	ldi	r19, 0xAA	; 170
    2ab2:	4a ea       	ldi	r20, 0xAA	; 170
    2ab4:	50 e4       	ldi	r21, 0x40	; 64
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	80 83       	st	Z, r24
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	a2 83       	std	Z+2, r26	; 0x02
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ef 55       	subi	r30, 0x5F	; 95
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	60 81       	ld	r22, Z
    2ad0:	71 81       	ldd	r23, Z+1	; 0x01
    2ad2:	82 81       	ldd	r24, Z+2	; 0x02
    2ad4:	93 81       	ldd	r25, Z+3	; 0x03
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	34 f4       	brge	.+12     	; 0x2af2 <LCD_function_set_4bit+0x98>
		__ticks = 1;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e0 56       	subi	r30, 0x60	; 96
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 83       	st	Z, r24
    2af0:	e0 c0       	rjmp	.+448    	; 0x2cb2 <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    2af2:	fe 01       	movw	r30, r28
    2af4:	ef 55       	subi	r30, 0x5F	; 95
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	53 e4       	ldi	r21, 0x43	; 67
    2b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	0c f0       	brlt	.+2      	; 0x2b12 <LCD_function_set_4bit+0xb8>
    2b10:	c0 c0       	rjmp	.+384    	; 0x2c92 <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2b12:	fe 01       	movw	r30, r28
    2b14:	eb 55       	subi	r30, 0x5B	; 91
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a e7       	ldi	r20, 0x7A	; 122
    2b26:	54 e4       	ldi	r21, 0x44	; 68
    2b28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	fe 01       	movw	r30, r28
    2b32:	e4 56       	subi	r30, 0x64	; 100
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 83       	st	Z, r24
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	a2 83       	std	Z+2, r26	; 0x02
    2b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3e:	8e 01       	movw	r16, r28
    2b40:	08 56       	subi	r16, 0x68	; 104
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	fe 01       	movw	r30, r28
    2b46:	e4 56       	subi	r30, 0x64	; 100
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a e7       	ldi	r20, 0x7A	; 122
    2b58:	55 e4       	ldi	r21, 0x45	; 69
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	f8 01       	movw	r30, r16
    2b64:	80 83       	st	Z, r24
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	a2 83       	std	Z+2, r26	; 0x02
    2b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e8 56       	subi	r30, 0x68	; 104
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	60 81       	ld	r22, Z
    2b74:	71 81       	ldd	r23, Z+1	; 0x01
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	44 f4       	brge	.+16     	; 0x2b9a <LCD_function_set_4bit+0x140>
		__ticks = 1;
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ea 56       	subi	r30, 0x6A	; 106
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	91 83       	std	Z+1, r25	; 0x01
    2b96:	80 83       	st	Z, r24
    2b98:	64 c0       	rjmp	.+200    	; 0x2c62 <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e8 56       	subi	r30, 0x68	; 104
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	60 81       	ld	r22, Z
    2ba2:	71 81       	ldd	r23, Z+1	; 0x01
    2ba4:	82 81       	ldd	r24, Z+2	; 0x02
    2ba6:	93 81       	ldd	r25, Z+3	; 0x03
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	3f ef       	ldi	r19, 0xFF	; 255
    2bac:	4f e7       	ldi	r20, 0x7F	; 127
    2bae:	57 e4       	ldi	r21, 0x47	; 71
    2bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb4:	18 16       	cp	r1, r24
    2bb6:	0c f0       	brlt	.+2      	; 0x2bba <LCD_function_set_4bit+0x160>
    2bb8:	43 c0       	rjmp	.+134    	; 0x2c40 <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e4 56       	subi	r30, 0x64	; 100
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e2       	ldi	r20, 0x20	; 32
    2bce:	51 e4       	ldi	r21, 0x41	; 65
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	8e 01       	movw	r16, r28
    2bda:	0a 56       	subi	r16, 0x6A	; 106
    2bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	f8 01       	movw	r30, r16
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
    2bf0:	1f c0       	rjmp	.+62     	; 0x2c30 <LCD_function_set_4bit+0x1d6>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ec 56       	subi	r30, 0x6C	; 108
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 e9       	ldi	r24, 0x90	; 144
    2bfa:	91 e0       	ldi	r25, 0x01	; 1
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c00:	fe 01       	movw	r30, r28
    2c02:	ec 56       	subi	r30, 0x6C	; 108
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	91 81       	ldd	r25, Z+1	; 0x01
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_function_set_4bit+0x1b0>
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ec 56       	subi	r30, 0x6C	; 108
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c18:	de 01       	movw	r26, r28
    2c1a:	aa 56       	subi	r26, 0x6A	; 106
    2c1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ea 56       	subi	r30, 0x6A	; 106
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	91 81       	ldd	r25, Z+1	; 0x01
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	11 96       	adiw	r26, 0x01	; 1
    2c2c:	9c 93       	st	X, r25
    2c2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c30:	fe 01       	movw	r30, r28
    2c32:	ea 56       	subi	r30, 0x6A	; 106
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	d1 f6       	brne	.-76     	; 0x2bf2 <LCD_function_set_4bit+0x198>
    2c3e:	4b c0       	rjmp	.+150    	; 0x2cd6 <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c40:	8e 01       	movw	r16, r28
    2c42:	0a 56       	subi	r16, 0x6A	; 106
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	fe 01       	movw	r30, r28
    2c48:	e8 56       	subi	r30, 0x68	; 104
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	91 83       	std	Z+1, r25	; 0x01
    2c60:	80 83       	st	Z, r24
    2c62:	de 01       	movw	r26, r28
    2c64:	ae 56       	subi	r26, 0x6E	; 110
    2c66:	bf 4f       	sbci	r27, 0xFF	; 255
    2c68:	fe 01       	movw	r30, r28
    2c6a:	ea 56       	subi	r30, 0x6A	; 106
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	91 81       	ldd	r25, Z+1	; 0x01
    2c72:	11 96       	adiw	r26, 0x01	; 1
    2c74:	9c 93       	st	X, r25
    2c76:	8e 93       	st	-X, r24
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ee 56       	subi	r30, 0x6E	; 110
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 81       	ld	r24, Z
    2c80:	91 81       	ldd	r25, Z+1	; 0x01
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <LCD_function_set_4bit+0x228>
    2c86:	fe 01       	movw	r30, r28
    2c88:	ee 56       	subi	r30, 0x6E	; 110
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	80 83       	st	Z, r24
    2c90:	22 c0       	rjmp	.+68     	; 0x2cd6 <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c92:	8e 01       	movw	r16, r28
    2c94:	00 56       	subi	r16, 0x60	; 96
    2c96:	1f 4f       	sbci	r17, 0xFF	; 255
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ef 55       	subi	r30, 0x5F	; 95
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	f8 01       	movw	r30, r16
    2cb0:	80 83       	st	Z, r24
    2cb2:	de 01       	movw	r26, r28
    2cb4:	af 56       	subi	r26, 0x6F	; 111
    2cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e0 56       	subi	r30, 0x60	; 96
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ef 56       	subi	r30, 0x6F	; 111
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	80 81       	ld	r24, Z
    2cca:	8a 95       	dec	r24
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <LCD_function_set_4bit+0x270>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ef 56       	subi	r30, 0x6F	; 111
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e3 57       	subi	r30, 0x73	; 115
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	a0 e8       	ldi	r26, 0x80	; 128
    2cea:	bf e3       	ldi	r27, 0x3F	; 63
    2cec:	80 83       	st	Z, r24
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	a2 83       	std	Z+2, r26	; 0x02
    2cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	07 57       	subi	r16, 0x77	; 119
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e3 57       	subi	r30, 0x73	; 115
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	2b ea       	ldi	r18, 0xAB	; 171
    2d0a:	3a ea       	ldi	r19, 0xAA	; 170
    2d0c:	4a ea       	ldi	r20, 0xAA	; 170
    2d0e:	50 e4       	ldi	r21, 0x40	; 64
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	f8 01       	movw	r30, r16
    2d1a:	80 83       	st	Z, r24
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	a2 83       	std	Z+2, r26	; 0x02
    2d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d22:	fe 01       	movw	r30, r28
    2d24:	e7 57       	subi	r30, 0x77	; 119
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	60 81       	ld	r22, Z
    2d2a:	71 81       	ldd	r23, Z+1	; 0x01
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e8       	ldi	r20, 0x80	; 128
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d3c:	88 23       	and	r24, r24
    2d3e:	34 f4       	brge	.+12     	; 0x2d4c <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    2d40:	fe 01       	movw	r30, r28
    2d42:	e8 57       	subi	r30, 0x78	; 120
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	80 83       	st	Z, r24
    2d4a:	e0 c0       	rjmp	.+448    	; 0x2f0c <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e7 57       	subi	r30, 0x77	; 119
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	4f e7       	ldi	r20, 0x7F	; 127
    2d60:	53 e4       	ldi	r21, 0x43	; 67
    2d62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d66:	18 16       	cp	r1, r24
    2d68:	0c f0       	brlt	.+2      	; 0x2d6c <LCD_function_set_4bit+0x312>
    2d6a:	c0 c0       	rjmp	.+384    	; 0x2eec <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e3 57       	subi	r30, 0x73	; 115
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a e7       	ldi	r20, 0x7A	; 122
    2d80:	54 e4       	ldi	r21, 0x44	; 68
    2d82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	ec 57       	subi	r30, 0x7C	; 124
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 83       	st	Z, r24
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	a2 83       	std	Z+2, r26	; 0x02
    2d96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d98:	8e 01       	movw	r16, r28
    2d9a:	00 58       	subi	r16, 0x80	; 128
    2d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ec 57       	subi	r30, 0x7C	; 124
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	4a e7       	ldi	r20, 0x7A	; 122
    2db2:	55 e4       	ldi	r21, 0x45	; 69
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	f8 01       	movw	r30, r16
    2dbe:	80 83       	st	Z, r24
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	a2 83       	std	Z+2, r26	; 0x02
    2dc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e0 58       	subi	r30, 0x80	; 128
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	60 81       	ld	r22, Z
    2dce:	71 81       	ldd	r23, Z+1	; 0x01
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	44 f4       	brge	.+16     	; 0x2df4 <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    2de4:	fe 01       	movw	r30, r28
    2de6:	e2 58       	subi	r30, 0x82	; 130
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
    2df2:	64 c0       	rjmp	.+200    	; 0x2ebc <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    2df4:	fe 01       	movw	r30, r28
    2df6:	e0 58       	subi	r30, 0x80	; 128
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	60 81       	ld	r22, Z
    2dfc:	71 81       	ldd	r23, Z+1	; 0x01
    2dfe:	82 81       	ldd	r24, Z+2	; 0x02
    2e00:	93 81       	ldd	r25, Z+3	; 0x03
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	3f ef       	ldi	r19, 0xFF	; 255
    2e06:	4f e7       	ldi	r20, 0x7F	; 127
    2e08:	57 e4       	ldi	r21, 0x47	; 71
    2e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e0e:	18 16       	cp	r1, r24
    2e10:	0c f0       	brlt	.+2      	; 0x2e14 <LCD_function_set_4bit+0x3ba>
    2e12:	43 c0       	rjmp	.+134    	; 0x2e9a <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e14:	fe 01       	movw	r30, r28
    2e16:	ec 57       	subi	r30, 0x7C	; 124
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	60 81       	ld	r22, Z
    2e1c:	71 81       	ldd	r23, Z+1	; 0x01
    2e1e:	82 81       	ldd	r24, Z+2	; 0x02
    2e20:	93 81       	ldd	r25, Z+3	; 0x03
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e2       	ldi	r20, 0x20	; 32
    2e28:	51 e4       	ldi	r21, 0x41	; 65
    2e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	8e 01       	movw	r16, r28
    2e34:	02 58       	subi	r16, 0x82	; 130
    2e36:	1f 4f       	sbci	r17, 0xFF	; 255
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	f8 01       	movw	r30, r16
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	80 83       	st	Z, r24
    2e4a:	1f c0       	rjmp	.+62     	; 0x2e8a <LCD_function_set_4bit+0x430>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e4 58       	subi	r30, 0x84	; 132
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 e9       	ldi	r24, 0x90	; 144
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e4 58       	subi	r30, 0x84	; 132
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <LCD_function_set_4bit+0x40a>
    2e68:	fe 01       	movw	r30, r28
    2e6a:	e4 58       	subi	r30, 0x84	; 132
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	de 01       	movw	r26, r28
    2e74:	a2 58       	subi	r26, 0x82	; 130
    2e76:	bf 4f       	sbci	r27, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e2 58       	subi	r30, 0x82	; 130
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	11 96       	adiw	r26, 0x01	; 1
    2e86:	9c 93       	st	X, r25
    2e88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e2 58       	subi	r30, 0x82	; 130
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 81       	ld	r24, Z
    2e92:	91 81       	ldd	r25, Z+1	; 0x01
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	d1 f6       	brne	.-76     	; 0x2e4c <LCD_function_set_4bit+0x3f2>
    2e98:	4b c0       	rjmp	.+150    	; 0x2f30 <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9a:	8e 01       	movw	r16, r28
    2e9c:	02 58       	subi	r16, 0x82	; 130
    2e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e0 58       	subi	r30, 0x80	; 128
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	60 81       	ld	r22, Z
    2ea8:	71 81       	ldd	r23, Z+1	; 0x01
    2eaa:	82 81       	ldd	r24, Z+2	; 0x02
    2eac:	93 81       	ldd	r25, Z+3	; 0x03
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	f8 01       	movw	r30, r16
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	80 83       	st	Z, r24
    2ebc:	de 01       	movw	r26, r28
    2ebe:	a6 58       	subi	r26, 0x86	; 134
    2ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e2 58       	subi	r30, 0x82	; 130
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	11 96       	adiw	r26, 0x01	; 1
    2ece:	9c 93       	st	X, r25
    2ed0:	8e 93       	st	-X, r24
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e6 58       	subi	r30, 0x86	; 134
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <LCD_function_set_4bit+0x482>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e6 58       	subi	r30, 0x86	; 134
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
    2eea:	22 c0       	rjmp	.+68     	; 0x2f30 <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2eec:	8e 01       	movw	r16, r28
    2eee:	08 57       	subi	r16, 0x78	; 120
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e7 57       	subi	r30, 0x77	; 119
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	60 81       	ld	r22, Z
    2efa:	71 81       	ldd	r23, Z+1	; 0x01
    2efc:	82 81       	ldd	r24, Z+2	; 0x02
    2efe:	93 81       	ldd	r25, Z+3	; 0x03
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	f8 01       	movw	r30, r16
    2f0a:	80 83       	st	Z, r24
    2f0c:	de 01       	movw	r26, r28
    2f0e:	a7 58       	subi	r26, 0x87	; 135
    2f10:	bf 4f       	sbci	r27, 0xFF	; 255
    2f12:	fe 01       	movw	r30, r28
    2f14:	e8 57       	subi	r30, 0x78	; 120
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e7 58       	subi	r30, 0x87	; 135
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	8a 95       	dec	r24
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <LCD_function_set_4bit+0x4ca>
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e7 58       	subi	r30, 0x87	; 135
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    2f30:	fe 01       	movw	r30, r28
    2f32:	e5 55       	subi	r30, 0x55	; 85
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	10 82       	st	Z, r1
    2f38:	23 c0       	rjmp	.+70     	; 0x2f80 <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e5 55       	subi	r30, 0x55	; 85
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	48 2f       	mov	r20, r24
    2f44:	4c 5f       	subi	r20, 0xFC	; 252
    2f46:	fe 01       	movw	r30, r28
    2f48:	e5 55       	subi	r30, 0x55	; 85
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 c0       	rjmp	.+4      	; 0x2f5c <LCD_function_set_4bit+0x502>
    2f58:	95 95       	asr	r25
    2f5a:	87 95       	ror	r24
    2f5c:	2a 95       	dec	r18
    2f5e:	e2 f7       	brpl	.-8      	; 0x2f58 <LCD_function_set_4bit+0x4fe>
    2f60:	98 2f       	mov	r25, r24
    2f62:	91 70       	andi	r25, 0x01	; 1
    2f64:	82 e0       	ldi	r24, 0x02	; 2
    2f66:	64 2f       	mov	r22, r20
    2f68:	49 2f       	mov	r20, r25
    2f6a:	0e 94 07 2b 	call	0x560e	; 0x560e <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    2f6e:	de 01       	movw	r26, r28
    2f70:	a5 55       	subi	r26, 0x55	; 85
    2f72:	bf 4f       	sbci	r27, 0xFF	; 255
    2f74:	fe 01       	movw	r30, r28
    2f76:	e5 55       	subi	r30, 0x55	; 85
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8f 5f       	subi	r24, 0xFF	; 255
    2f7e:	8c 93       	st	X, r24
    2f80:	fe 01       	movw	r30, r28
    2f82:	e5 55       	subi	r30, 0x55	; 85
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	84 30       	cpi	r24, 0x04	; 4
    2f8a:	b8 f2       	brcs	.-82     	; 0x2f3a <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    2f94:	fe 01       	movw	r30, r28
    2f96:	eb 58       	subi	r30, 0x8B	; 139
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a0 e2       	ldi	r26, 0x20	; 32
    2fa0:	b1 e4       	ldi	r27, 0x41	; 65
    2fa2:	80 83       	st	Z, r24
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	a2 83       	std	Z+2, r26	; 0x02
    2fa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2faa:	8e 01       	movw	r16, r28
    2fac:	0f 58       	subi	r16, 0x8F	; 143
    2fae:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	eb 58       	subi	r30, 0x8B	; 139
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	60 81       	ld	r22, Z
    2fb8:	71 81       	ldd	r23, Z+1	; 0x01
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	93 81       	ldd	r25, Z+3	; 0x03
    2fbe:	2b ea       	ldi	r18, 0xAB	; 171
    2fc0:	3a ea       	ldi	r19, 0xAA	; 170
    2fc2:	4a ea       	ldi	r20, 0xAA	; 170
    2fc4:	50 e4       	ldi	r21, 0x40	; 64
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	f8 01       	movw	r30, r16
    2fd0:	80 83       	st	Z, r24
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	a2 83       	std	Z+2, r26	; 0x02
    2fd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ef 58       	subi	r30, 0x8F	; 143
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e8       	ldi	r20, 0x80	; 128
    2fec:	5f e3       	ldi	r21, 0x3F	; 63
    2fee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff2:	88 23       	and	r24, r24
    2ff4:	34 f4       	brge	.+12     	; 0x3002 <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e0 59       	subi	r30, 0x90	; 144
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	80 83       	st	Z, r24
    3000:	e0 c0       	rjmp	.+448    	; 0x31c2 <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    3002:	fe 01       	movw	r30, r28
    3004:	ef 58       	subi	r30, 0x8F	; 143
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	60 81       	ld	r22, Z
    300a:	71 81       	ldd	r23, Z+1	; 0x01
    300c:	82 81       	ldd	r24, Z+2	; 0x02
    300e:	93 81       	ldd	r25, Z+3	; 0x03
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	4f e7       	ldi	r20, 0x7F	; 127
    3016:	53 e4       	ldi	r21, 0x43	; 67
    3018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301c:	18 16       	cp	r1, r24
    301e:	0c f0       	brlt	.+2      	; 0x3022 <LCD_function_set_4bit+0x5c8>
    3020:	c0 c0       	rjmp	.+384    	; 0x31a2 <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    3022:	fe 01       	movw	r30, r28
    3024:	eb 58       	subi	r30, 0x8B	; 139
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	60 81       	ld	r22, Z
    302a:	71 81       	ldd	r23, Z+1	; 0x01
    302c:	82 81       	ldd	r24, Z+2	; 0x02
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a e7       	ldi	r20, 0x7A	; 122
    3036:	54 e4       	ldi	r21, 0x44	; 68
    3038:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	fe 01       	movw	r30, r28
    3042:	e4 59       	subi	r30, 0x94	; 148
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 83       	st	Z, r24
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	a2 83       	std	Z+2, r26	; 0x02
    304c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	8e 01       	movw	r16, r28
    3050:	08 59       	subi	r16, 0x98	; 152
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e4 59       	subi	r30, 0x94	; 148
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	60 81       	ld	r22, Z
    305c:	71 81       	ldd	r23, Z+1	; 0x01
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	93 81       	ldd	r25, Z+3	; 0x03
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4a e7       	ldi	r20, 0x7A	; 122
    3068:	55 e4       	ldi	r21, 0x45	; 69
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	f8 01       	movw	r30, r16
    3074:	80 83       	st	Z, r24
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    307c:	fe 01       	movw	r30, r28
    307e:	e8 59       	subi	r30, 0x98	; 152
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	60 81       	ld	r22, Z
    3084:	71 81       	ldd	r23, Z+1	; 0x01
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3096:	88 23       	and	r24, r24
    3098:	44 f4       	brge	.+16     	; 0x30aa <LCD_function_set_4bit+0x650>
		__ticks = 1;
    309a:	fe 01       	movw	r30, r28
    309c:	ea 59       	subi	r30, 0x9A	; 154
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
    30a8:	64 c0       	rjmp	.+200    	; 0x3172 <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    30aa:	fe 01       	movw	r30, r28
    30ac:	e8 59       	subi	r30, 0x98	; 152
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	60 81       	ld	r22, Z
    30b2:	71 81       	ldd	r23, Z+1	; 0x01
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	0c f0       	brlt	.+2      	; 0x30ca <LCD_function_set_4bit+0x670>
    30c8:	43 c0       	rjmp	.+134    	; 0x3150 <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	fe 01       	movw	r30, r28
    30cc:	e4 59       	subi	r30, 0x94	; 148
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e2       	ldi	r20, 0x20	; 32
    30de:	51 e4       	ldi	r21, 0x41	; 65
    30e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	8e 01       	movw	r16, r28
    30ea:	0a 59       	subi	r16, 0x9A	; 154
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	f8 01       	movw	r30, r16
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	1f c0       	rjmp	.+62     	; 0x3140 <LCD_function_set_4bit+0x6e6>
    3102:	fe 01       	movw	r30, r28
    3104:	ec 59       	subi	r30, 0x9C	; 156
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 e9       	ldi	r24, 0x90	; 144
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3110:	fe 01       	movw	r30, r28
    3112:	ec 59       	subi	r30, 0x9C	; 156
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <LCD_function_set_4bit+0x6c0>
    311e:	fe 01       	movw	r30, r28
    3120:	ec 59       	subi	r30, 0x9C	; 156
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	de 01       	movw	r26, r28
    312a:	aa 59       	subi	r26, 0x9A	; 154
    312c:	bf 4f       	sbci	r27, 0xFF	; 255
    312e:	fe 01       	movw	r30, r28
    3130:	ea 59       	subi	r30, 0x9A	; 154
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	11 96       	adiw	r26, 0x01	; 1
    313c:	9c 93       	st	X, r25
    313e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3140:	fe 01       	movw	r30, r28
    3142:	ea 59       	subi	r30, 0x9A	; 154
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	d1 f6       	brne	.-76     	; 0x3102 <LCD_function_set_4bit+0x6a8>
    314e:	4b c0       	rjmp	.+150    	; 0x31e6 <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	8e 01       	movw	r16, r28
    3152:	0a 59       	subi	r16, 0x9A	; 154
    3154:	1f 4f       	sbci	r17, 0xFF	; 255
    3156:	fe 01       	movw	r30, r28
    3158:	e8 59       	subi	r30, 0x98	; 152
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	f8 01       	movw	r30, r16
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	de 01       	movw	r26, r28
    3174:	ae 59       	subi	r26, 0x9E	; 158
    3176:	bf 4f       	sbci	r27, 0xFF	; 255
    3178:	fe 01       	movw	r30, r28
    317a:	ea 59       	subi	r30, 0x9A	; 154
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	9c 93       	st	X, r25
    3186:	8e 93       	st	-X, r24
    3188:	fe 01       	movw	r30, r28
    318a:	ee 59       	subi	r30, 0x9E	; 158
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	91 81       	ldd	r25, Z+1	; 0x01
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_function_set_4bit+0x738>
    3196:	fe 01       	movw	r30, r28
    3198:	ee 59       	subi	r30, 0x9E	; 158
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	91 83       	std	Z+1, r25	; 0x01
    319e:	80 83       	st	Z, r24
    31a0:	22 c0       	rjmp	.+68     	; 0x31e6 <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31a2:	8e 01       	movw	r16, r28
    31a4:	00 59       	subi	r16, 0x90	; 144
    31a6:	1f 4f       	sbci	r17, 0xFF	; 255
    31a8:	fe 01       	movw	r30, r28
    31aa:	ef 58       	subi	r30, 0x8F	; 143
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	60 81       	ld	r22, Z
    31b0:	71 81       	ldd	r23, Z+1	; 0x01
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	f8 01       	movw	r30, r16
    31c0:	80 83       	st	Z, r24
    31c2:	de 01       	movw	r26, r28
    31c4:	af 59       	subi	r26, 0x9F	; 159
    31c6:	bf 4f       	sbci	r27, 0xFF	; 255
    31c8:	fe 01       	movw	r30, r28
    31ca:	e0 59       	subi	r30, 0x90	; 144
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31d2:	fe 01       	movw	r30, r28
    31d4:	ef 59       	subi	r30, 0x9F	; 159
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 81       	ld	r24, Z
    31da:	8a 95       	dec	r24
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_function_set_4bit+0x780>
    31de:	fe 01       	movw	r30, r28
    31e0:	ef 59       	subi	r30, 0x9F	; 159
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    31e6:	82 e0       	ldi	r24, 0x02	; 2
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    31ee:	fe 01       	movw	r30, r28
    31f0:	e3 5a       	subi	r30, 0xA3	; 163
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	a0 e8       	ldi	r26, 0x80	; 128
    31fa:	bf e3       	ldi	r27, 0x3F	; 63
    31fc:	80 83       	st	Z, r24
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	a2 83       	std	Z+2, r26	; 0x02
    3202:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3204:	8e 01       	movw	r16, r28
    3206:	07 5a       	subi	r16, 0xA7	; 167
    3208:	1f 4f       	sbci	r17, 0xFF	; 255
    320a:	fe 01       	movw	r30, r28
    320c:	e3 5a       	subi	r30, 0xA3	; 163
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	2b ea       	ldi	r18, 0xAB	; 171
    321a:	3a ea       	ldi	r19, 0xAA	; 170
    321c:	4a ea       	ldi	r20, 0xAA	; 170
    321e:	50 e4       	ldi	r21, 0x40	; 64
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	f8 01       	movw	r30, r16
    322a:	80 83       	st	Z, r24
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	a2 83       	std	Z+2, r26	; 0x02
    3230:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3232:	fe 01       	movw	r30, r28
    3234:	e7 5a       	subi	r30, 0xA7	; 167
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	60 81       	ld	r22, Z
    323a:	71 81       	ldd	r23, Z+1	; 0x01
    323c:	82 81       	ldd	r24, Z+2	; 0x02
    323e:	93 81       	ldd	r25, Z+3	; 0x03
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	34 f4       	brge	.+12     	; 0x325c <LCD_function_set_4bit+0x802>
		__ticks = 1;
    3250:	fe 01       	movw	r30, r28
    3252:	e8 5a       	subi	r30, 0xA8	; 168
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	80 83       	st	Z, r24
    325a:	e0 c0       	rjmp	.+448    	; 0x341c <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    325c:	fe 01       	movw	r30, r28
    325e:	e7 5a       	subi	r30, 0xA7	; 167
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	60 81       	ld	r22, Z
    3264:	71 81       	ldd	r23, Z+1	; 0x01
    3266:	82 81       	ldd	r24, Z+2	; 0x02
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	4f e7       	ldi	r20, 0x7F	; 127
    3270:	53 e4       	ldi	r21, 0x43	; 67
    3272:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3276:	18 16       	cp	r1, r24
    3278:	0c f0       	brlt	.+2      	; 0x327c <LCD_function_set_4bit+0x822>
    327a:	c0 c0       	rjmp	.+384    	; 0x33fc <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    327c:	fe 01       	movw	r30, r28
    327e:	e3 5a       	subi	r30, 0xA3	; 163
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	60 81       	ld	r22, Z
    3284:	71 81       	ldd	r23, Z+1	; 0x01
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	93 81       	ldd	r25, Z+3	; 0x03
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	4a e7       	ldi	r20, 0x7A	; 122
    3290:	54 e4       	ldi	r21, 0x44	; 68
    3292:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	fe 01       	movw	r30, r28
    329c:	ec 5a       	subi	r30, 0xAC	; 172
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 83       	st	Z, r24
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	a2 83       	std	Z+2, r26	; 0x02
    32a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a8:	8e 01       	movw	r16, r28
    32aa:	00 5b       	subi	r16, 0xB0	; 176
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	fe 01       	movw	r30, r28
    32b0:	ec 5a       	subi	r30, 0xAC	; 172
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a e7       	ldi	r20, 0x7A	; 122
    32c2:	55 e4       	ldi	r21, 0x45	; 69
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	f8 01       	movw	r30, r16
    32ce:	80 83       	st	Z, r24
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	a2 83       	std	Z+2, r26	; 0x02
    32d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32d6:	fe 01       	movw	r30, r28
    32d8:	e0 5b       	subi	r30, 0xB0	; 176
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e8       	ldi	r20, 0x80	; 128
    32ea:	5f e3       	ldi	r21, 0x3F	; 63
    32ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32f0:	88 23       	and	r24, r24
    32f2:	44 f4       	brge	.+16     	; 0x3304 <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    32f4:	fe 01       	movw	r30, r28
    32f6:	e2 5b       	subi	r30, 0xB2	; 178
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	64 c0       	rjmp	.+200    	; 0x33cc <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    3304:	fe 01       	movw	r30, r28
    3306:	e0 5b       	subi	r30, 0xB0	; 176
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	0c f0       	brlt	.+2      	; 0x3324 <LCD_function_set_4bit+0x8ca>
    3322:	43 c0       	rjmp	.+134    	; 0x33aa <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3324:	fe 01       	movw	r30, r28
    3326:	ec 5a       	subi	r30, 0xAC	; 172
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	60 81       	ld	r22, Z
    332c:	71 81       	ldd	r23, Z+1	; 0x01
    332e:	82 81       	ldd	r24, Z+2	; 0x02
    3330:	93 81       	ldd	r25, Z+3	; 0x03
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	40 e2       	ldi	r20, 0x20	; 32
    3338:	51 e4       	ldi	r21, 0x41	; 65
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	8e 01       	movw	r16, r28
    3344:	02 5b       	subi	r16, 0xB2	; 178
    3346:	1f 4f       	sbci	r17, 0xFF	; 255
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	f8 01       	movw	r30, r16
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	80 83       	st	Z, r24
    335a:	1f c0       	rjmp	.+62     	; 0x339a <LCD_function_set_4bit+0x940>
    335c:	fe 01       	movw	r30, r28
    335e:	e4 5b       	subi	r30, 0xB4	; 180
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 e9       	ldi	r24, 0x90	; 144
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    336a:	fe 01       	movw	r30, r28
    336c:	e4 5b       	subi	r30, 0xB4	; 180
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_function_set_4bit+0x91a>
    3378:	fe 01       	movw	r30, r28
    337a:	e4 5b       	subi	r30, 0xB4	; 180
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3382:	de 01       	movw	r26, r28
    3384:	a2 5b       	subi	r26, 0xB2	; 178
    3386:	bf 4f       	sbci	r27, 0xFF	; 255
    3388:	fe 01       	movw	r30, r28
    338a:	e2 5b       	subi	r30, 0xB2	; 178
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	11 96       	adiw	r26, 0x01	; 1
    3396:	9c 93       	st	X, r25
    3398:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339a:	fe 01       	movw	r30, r28
    339c:	e2 5b       	subi	r30, 0xB2	; 178
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	d1 f6       	brne	.-76     	; 0x335c <LCD_function_set_4bit+0x902>
    33a8:	4b c0       	rjmp	.+150    	; 0x3440 <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33aa:	8e 01       	movw	r16, r28
    33ac:	02 5b       	subi	r16, 0xB2	; 178
    33ae:	1f 4f       	sbci	r17, 0xFF	; 255
    33b0:	fe 01       	movw	r30, r28
    33b2:	e0 5b       	subi	r30, 0xB0	; 176
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	f8 01       	movw	r30, r16
    33c8:	91 83       	std	Z+1, r25	; 0x01
    33ca:	80 83       	st	Z, r24
    33cc:	de 01       	movw	r26, r28
    33ce:	a6 5b       	subi	r26, 0xB6	; 182
    33d0:	bf 4f       	sbci	r27, 0xFF	; 255
    33d2:	fe 01       	movw	r30, r28
    33d4:	e2 5b       	subi	r30, 0xB2	; 178
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	11 96       	adiw	r26, 0x01	; 1
    33de:	9c 93       	st	X, r25
    33e0:	8e 93       	st	-X, r24
    33e2:	fe 01       	movw	r30, r28
    33e4:	e6 5b       	subi	r30, 0xB6	; 182
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <LCD_function_set_4bit+0x992>
    33f0:	fe 01       	movw	r30, r28
    33f2:	e6 5b       	subi	r30, 0xB6	; 182
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
    33fa:	22 c0       	rjmp	.+68     	; 0x3440 <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33fc:	8e 01       	movw	r16, r28
    33fe:	08 5a       	subi	r16, 0xA8	; 168
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	fe 01       	movw	r30, r28
    3404:	e7 5a       	subi	r30, 0xA7	; 167
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	60 81       	ld	r22, Z
    340a:	71 81       	ldd	r23, Z+1	; 0x01
    340c:	82 81       	ldd	r24, Z+2	; 0x02
    340e:	93 81       	ldd	r25, Z+3	; 0x03
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	f8 01       	movw	r30, r16
    341a:	80 83       	st	Z, r24
    341c:	de 01       	movw	r26, r28
    341e:	a7 5b       	subi	r26, 0xB7	; 183
    3420:	bf 4f       	sbci	r27, 0xFF	; 255
    3422:	fe 01       	movw	r30, r28
    3424:	e8 5a       	subi	r30, 0xA8	; 168
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 81       	ld	r24, Z
    342a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    342c:	fe 01       	movw	r30, r28
    342e:	e7 5b       	subi	r30, 0xB7	; 183
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	80 81       	ld	r24, Z
    3434:	8a 95       	dec	r24
    3436:	f1 f7       	brne	.-4      	; 0x3434 <LCD_function_set_4bit+0x9da>
    3438:	fe 01       	movw	r30, r28
    343a:	e7 5b       	subi	r30, 0xB7	; 183
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    3440:	fe 01       	movw	r30, r28
    3442:	e6 55       	subi	r30, 0x56	; 86
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	10 82       	st	Z, r1
    3448:	23 c0       	rjmp	.+70     	; 0x3490 <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    344a:	fe 01       	movw	r30, r28
    344c:	e6 55       	subi	r30, 0x56	; 86
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	80 81       	ld	r24, Z
    3452:	48 2f       	mov	r20, r24
    3454:	4c 5f       	subi	r20, 0xFC	; 252
    3456:	fe 01       	movw	r30, r28
    3458:	e6 55       	subi	r30, 0x56	; 86
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	28 2f       	mov	r18, r24
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	02 c0       	rjmp	.+4      	; 0x346c <LCD_function_set_4bit+0xa12>
    3468:	95 95       	asr	r25
    346a:	87 95       	ror	r24
    346c:	2a 95       	dec	r18
    346e:	e2 f7       	brpl	.-8      	; 0x3468 <LCD_function_set_4bit+0xa0e>
    3470:	98 2f       	mov	r25, r24
    3472:	91 70       	andi	r25, 0x01	; 1
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	64 2f       	mov	r22, r20
    3478:	49 2f       	mov	r20, r25
    347a:	0e 94 07 2b 	call	0x560e	; 0x560e <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    347e:	de 01       	movw	r26, r28
    3480:	a6 55       	subi	r26, 0x56	; 86
    3482:	bf 4f       	sbci	r27, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	e6 55       	subi	r30, 0x56	; 86
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	80 81       	ld	r24, Z
    348c:	8f 5f       	subi	r24, 0xFF	; 255
    348e:	8c 93       	st	X, r24
    3490:	fe 01       	movw	r30, r28
    3492:	e6 55       	subi	r30, 0x56	; 86
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 81       	ld	r24, Z
    3498:	84 30       	cpi	r24, 0x04	; 4
    349a:	b8 f2       	brcs	.-82     	; 0x344a <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    34a4:	fe 01       	movw	r30, r28
    34a6:	eb 5b       	subi	r30, 0xBB	; 187
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	a0 e2       	ldi	r26, 0x20	; 32
    34b0:	b1 e4       	ldi	r27, 0x41	; 65
    34b2:	80 83       	st	Z, r24
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	a2 83       	std	Z+2, r26	; 0x02
    34b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34ba:	8e 01       	movw	r16, r28
    34bc:	0f 5b       	subi	r16, 0xBF	; 191
    34be:	1f 4f       	sbci	r17, 0xFF	; 255
    34c0:	fe 01       	movw	r30, r28
    34c2:	eb 5b       	subi	r30, 0xBB	; 187
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	60 81       	ld	r22, Z
    34c8:	71 81       	ldd	r23, Z+1	; 0x01
    34ca:	82 81       	ldd	r24, Z+2	; 0x02
    34cc:	93 81       	ldd	r25, Z+3	; 0x03
    34ce:	2b ea       	ldi	r18, 0xAB	; 171
    34d0:	3a ea       	ldi	r19, 0xAA	; 170
    34d2:	4a ea       	ldi	r20, 0xAA	; 170
    34d4:	50 e4       	ldi	r21, 0x40	; 64
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	f8 01       	movw	r30, r16
    34e0:	80 83       	st	Z, r24
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	a2 83       	std	Z+2, r26	; 0x02
    34e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e8:	fe 01       	movw	r30, r28
    34ea:	ef 5b       	subi	r30, 0xBF	; 191
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	34 f4       	brge	.+12     	; 0x3512 <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	fe 01       	movw	r30, r28
    350a:	e0 5c       	subi	r30, 0xC0	; 192
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	80 83       	st	Z, r24
    3510:	9d c0       	rjmp	.+314    	; 0x364c <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    3512:	fe 01       	movw	r30, r28
    3514:	ef 5b       	subi	r30, 0xBF	; 191
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	60 81       	ld	r22, Z
    351a:	71 81       	ldd	r23, Z+1	; 0x01
    351c:	82 81       	ldd	r24, Z+2	; 0x02
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	4f e7       	ldi	r20, 0x7F	; 127
    3526:	53 e4       	ldi	r21, 0x43	; 67
    3528:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352c:	18 16       	cp	r1, r24
    352e:	0c f0       	brlt	.+2      	; 0x3532 <LCD_function_set_4bit+0xad8>
    3530:	7e c0       	rjmp	.+252    	; 0x362e <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    3532:	fe 01       	movw	r30, r28
    3534:	eb 5b       	subi	r30, 0xBB	; 187
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	4a e7       	ldi	r20, 0x7A	; 122
    3546:	54 e4       	ldi	r21, 0x44	; 68
    3548:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	8c af       	std	Y+60, r24	; 0x3c
    3552:	9d af       	std	Y+61, r25	; 0x3d
    3554:	ae af       	std	Y+62, r26	; 0x3e
    3556:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3558:	6c ad       	ldd	r22, Y+60	; 0x3c
    355a:	7d ad       	ldd	r23, Y+61	; 0x3d
    355c:	8e ad       	ldd	r24, Y+62	; 0x3e
    355e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	4a e7       	ldi	r20, 0x7A	; 122
    3566:	55 e4       	ldi	r21, 0x45	; 69
    3568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	88 af       	std	Y+56, r24	; 0x38
    3572:	99 af       	std	Y+57, r25	; 0x39
    3574:	aa af       	std	Y+58, r26	; 0x3a
    3576:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3578:	68 ad       	ldd	r22, Y+56	; 0x38
    357a:	79 ad       	ldd	r23, Y+57	; 0x39
    357c:	8a ad       	ldd	r24, Y+58	; 0x3a
    357e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e8       	ldi	r20, 0x80	; 128
    3586:	5f e3       	ldi	r21, 0x3F	; 63
    3588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358c:	88 23       	and	r24, r24
    358e:	2c f4       	brge	.+10     	; 0x359a <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	9f ab       	std	Y+55, r25	; 0x37
    3596:	8e ab       	std	Y+54, r24	; 0x36
    3598:	3f c0       	rjmp	.+126    	; 0x3618 <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    359a:	68 ad       	ldd	r22, Y+56	; 0x38
    359c:	79 ad       	ldd	r23, Y+57	; 0x39
    359e:	8a ad       	ldd	r24, Y+58	; 0x3a
    35a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	4f e7       	ldi	r20, 0x7F	; 127
    35a8:	57 e4       	ldi	r21, 0x47	; 71
    35aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ae:	18 16       	cp	r1, r24
    35b0:	4c f5       	brge	.+82     	; 0x3604 <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    35b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    35b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    35b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e2       	ldi	r20, 0x20	; 32
    35c0:	51 e4       	ldi	r21, 0x41	; 65
    35c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	bc 01       	movw	r22, r24
    35cc:	cd 01       	movw	r24, r26
    35ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	9f ab       	std	Y+55, r25	; 0x37
    35d8:	8e ab       	std	Y+54, r24	; 0x36
    35da:	0f c0       	rjmp	.+30     	; 0x35fa <LCD_function_set_4bit+0xba0>
    35dc:	80 e9       	ldi	r24, 0x90	; 144
    35de:	91 e0       	ldi	r25, 0x01	; 1
    35e0:	9d ab       	std	Y+53, r25	; 0x35
    35e2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35e4:	8c a9       	ldd	r24, Y+52	; 0x34
    35e6:	9d a9       	ldd	r25, Y+53	; 0x35
    35e8:	01 97       	sbiw	r24, 0x01	; 1
    35ea:	f1 f7       	brne	.-4      	; 0x35e8 <LCD_function_set_4bit+0xb8e>
    35ec:	9d ab       	std	Y+53, r25	; 0x35
    35ee:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f0:	8e a9       	ldd	r24, Y+54	; 0x36
    35f2:	9f a9       	ldd	r25, Y+55	; 0x37
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	9f ab       	std	Y+55, r25	; 0x37
    35f8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fa:	8e a9       	ldd	r24, Y+54	; 0x36
    35fc:	9f a9       	ldd	r25, Y+55	; 0x37
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	69 f7       	brne	.-38     	; 0x35dc <LCD_function_set_4bit+0xb82>
    3602:	2d c0       	rjmp	.+90     	; 0x365e <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3604:	68 ad       	ldd	r22, Y+56	; 0x38
    3606:	79 ad       	ldd	r23, Y+57	; 0x39
    3608:	8a ad       	ldd	r24, Y+58	; 0x3a
    360a:	9b ad       	ldd	r25, Y+59	; 0x3b
    360c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9f ab       	std	Y+55, r25	; 0x37
    3616:	8e ab       	std	Y+54, r24	; 0x36
    3618:	8e a9       	ldd	r24, Y+54	; 0x36
    361a:	9f a9       	ldd	r25, Y+55	; 0x37
    361c:	9b ab       	std	Y+51, r25	; 0x33
    361e:	8a ab       	std	Y+50, r24	; 0x32
    3620:	8a a9       	ldd	r24, Y+50	; 0x32
    3622:	9b a9       	ldd	r25, Y+51	; 0x33
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <LCD_function_set_4bit+0xbca>
    3628:	9b ab       	std	Y+51, r25	; 0x33
    362a:	8a ab       	std	Y+50, r24	; 0x32
    362c:	18 c0       	rjmp	.+48     	; 0x365e <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    362e:	fe 01       	movw	r30, r28
    3630:	ef 5b       	subi	r30, 0xBF	; 191
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	fe 01       	movw	r30, r28
    3646:	e0 5c       	subi	r30, 0xC0	; 192
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	80 83       	st	Z, r24
    364c:	fe 01       	movw	r30, r28
    364e:	e0 5c       	subi	r30, 0xC0	; 192
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	80 81       	ld	r24, Z
    3654:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3656:	89 a9       	ldd	r24, Y+49	; 0x31
    3658:	8a 95       	dec	r24
    365a:	f1 f7       	brne	.-4      	; 0x3658 <LCD_function_set_4bit+0xbfe>
    365c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    365e:	82 e0       	ldi	r24, 0x02	; 2
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	a0 e8       	ldi	r26, 0x80	; 128
    366c:	bf e3       	ldi	r27, 0x3F	; 63
    366e:	8d a7       	std	Y+45, r24	; 0x2d
    3670:	9e a7       	std	Y+46, r25	; 0x2e
    3672:	af a7       	std	Y+47, r26	; 0x2f
    3674:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3676:	6d a5       	ldd	r22, Y+45	; 0x2d
    3678:	7e a5       	ldd	r23, Y+46	; 0x2e
    367a:	8f a5       	ldd	r24, Y+47	; 0x2f
    367c:	98 a9       	ldd	r25, Y+48	; 0x30
    367e:	2b ea       	ldi	r18, 0xAB	; 171
    3680:	3a ea       	ldi	r19, 0xAA	; 170
    3682:	4a ea       	ldi	r20, 0xAA	; 170
    3684:	50 e4       	ldi	r21, 0x40	; 64
    3686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	89 a7       	std	Y+41, r24	; 0x29
    3690:	9a a7       	std	Y+42, r25	; 0x2a
    3692:	ab a7       	std	Y+43, r26	; 0x2b
    3694:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3696:	69 a5       	ldd	r22, Y+41	; 0x29
    3698:	7a a5       	ldd	r23, Y+42	; 0x2a
    369a:	8b a5       	ldd	r24, Y+43	; 0x2b
    369c:	9c a5       	ldd	r25, Y+44	; 0x2c
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e8       	ldi	r20, 0x80	; 128
    36a4:	5f e3       	ldi	r21, 0x3F	; 63
    36a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36aa:	88 23       	and	r24, r24
    36ac:	1c f4       	brge	.+6      	; 0x36b4 <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	88 a7       	std	Y+40, r24	; 0x28
    36b2:	91 c0       	rjmp	.+290    	; 0x37d6 <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    36b4:	69 a5       	ldd	r22, Y+41	; 0x29
    36b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    36b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	4f e7       	ldi	r20, 0x7F	; 127
    36c2:	53 e4       	ldi	r21, 0x43	; 67
    36c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36c8:	18 16       	cp	r1, r24
    36ca:	0c f0       	brlt	.+2      	; 0x36ce <LCD_function_set_4bit+0xc74>
    36cc:	7b c0       	rjmp	.+246    	; 0x37c4 <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    36ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    36d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    36d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    36d4:	98 a9       	ldd	r25, Y+48	; 0x30
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	4a e7       	ldi	r20, 0x7A	; 122
    36dc:	54 e4       	ldi	r21, 0x44	; 68
    36de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	8c a3       	std	Y+36, r24	; 0x24
    36e8:	9d a3       	std	Y+37, r25	; 0x25
    36ea:	ae a3       	std	Y+38, r26	; 0x26
    36ec:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ee:	6c a1       	ldd	r22, Y+36	; 0x24
    36f0:	7d a1       	ldd	r23, Y+37	; 0x25
    36f2:	8e a1       	ldd	r24, Y+38	; 0x26
    36f4:	9f a1       	ldd	r25, Y+39	; 0x27
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	4a e7       	ldi	r20, 0x7A	; 122
    36fc:	55 e4       	ldi	r21, 0x45	; 69
    36fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	88 a3       	std	Y+32, r24	; 0x20
    3708:	99 a3       	std	Y+33, r25	; 0x21
    370a:	aa a3       	std	Y+34, r26	; 0x22
    370c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    370e:	68 a1       	ldd	r22, Y+32	; 0x20
    3710:	79 a1       	ldd	r23, Y+33	; 0x21
    3712:	8a a1       	ldd	r24, Y+34	; 0x22
    3714:	9b a1       	ldd	r25, Y+35	; 0x23
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	40 e8       	ldi	r20, 0x80	; 128
    371c:	5f e3       	ldi	r21, 0x3F	; 63
    371e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3722:	88 23       	and	r24, r24
    3724:	2c f4       	brge	.+10     	; 0x3730 <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	9f 8f       	std	Y+31, r25	; 0x1f
    372c:	8e 8f       	std	Y+30, r24	; 0x1e
    372e:	3f c0       	rjmp	.+126    	; 0x37ae <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    3730:	68 a1       	ldd	r22, Y+32	; 0x20
    3732:	79 a1       	ldd	r23, Y+33	; 0x21
    3734:	8a a1       	ldd	r24, Y+34	; 0x22
    3736:	9b a1       	ldd	r25, Y+35	; 0x23
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	3f ef       	ldi	r19, 0xFF	; 255
    373c:	4f e7       	ldi	r20, 0x7F	; 127
    373e:	57 e4       	ldi	r21, 0x47	; 71
    3740:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3744:	18 16       	cp	r1, r24
    3746:	4c f5       	brge	.+82     	; 0x379a <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3748:	6c a1       	ldd	r22, Y+36	; 0x24
    374a:	7d a1       	ldd	r23, Y+37	; 0x25
    374c:	8e a1       	ldd	r24, Y+38	; 0x26
    374e:	9f a1       	ldd	r25, Y+39	; 0x27
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	40 e2       	ldi	r20, 0x20	; 32
    3756:	51 e4       	ldi	r21, 0x41	; 65
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	9f 8f       	std	Y+31, r25	; 0x1f
    376e:	8e 8f       	std	Y+30, r24	; 0x1e
    3770:	0f c0       	rjmp	.+30     	; 0x3790 <LCD_function_set_4bit+0xd36>
    3772:	80 e9       	ldi	r24, 0x90	; 144
    3774:	91 e0       	ldi	r25, 0x01	; 1
    3776:	9d 8f       	std	Y+29, r25	; 0x1d
    3778:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    377a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    377c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    377e:	01 97       	sbiw	r24, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <LCD_function_set_4bit+0xd24>
    3782:	9d 8f       	std	Y+29, r25	; 0x1d
    3784:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3786:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3788:	9f 8d       	ldd	r25, Y+31	; 0x1f
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	9f 8f       	std	Y+31, r25	; 0x1f
    378e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3790:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3792:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	69 f7       	brne	.-38     	; 0x3772 <LCD_function_set_4bit+0xd18>
    3798:	24 c0       	rjmp	.+72     	; 0x37e2 <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379a:	68 a1       	ldd	r22, Y+32	; 0x20
    379c:	79 a1       	ldd	r23, Y+33	; 0x21
    379e:	8a a1       	ldd	r24, Y+34	; 0x22
    37a0:	9b a1       	ldd	r25, Y+35	; 0x23
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9f 8f       	std	Y+31, r25	; 0x1f
    37ac:	8e 8f       	std	Y+30, r24	; 0x1e
    37ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37b2:	9b 8f       	std	Y+27, r25	; 0x1b
    37b4:	8a 8f       	std	Y+26, r24	; 0x1a
    37b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <LCD_function_set_4bit+0xd60>
    37be:	9b 8f       	std	Y+27, r25	; 0x1b
    37c0:	8a 8f       	std	Y+26, r24	; 0x1a
    37c2:	0f c0       	rjmp	.+30     	; 0x37e2 <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37c4:	69 a5       	ldd	r22, Y+41	; 0x29
    37c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    37c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    37ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    37cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	88 a7       	std	Y+40, r24	; 0x28
    37d6:	88 a5       	ldd	r24, Y+40	; 0x28
    37d8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37da:	89 8d       	ldd	r24, Y+25	; 0x19
    37dc:	8a 95       	dec	r24
    37de:	f1 f7       	brne	.-4      	; 0x37dc <LCD_function_set_4bit+0xd82>
    37e0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    37e2:	fe 01       	movw	r30, r28
    37e4:	e7 55       	subi	r30, 0x57	; 87
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	10 82       	st	Z, r1
    37ea:	23 c0       	rjmp	.+70     	; 0x3832 <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    37ec:	fe 01       	movw	r30, r28
    37ee:	e7 55       	subi	r30, 0x57	; 87
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	80 81       	ld	r24, Z
    37f4:	48 2f       	mov	r20, r24
    37f6:	4c 5f       	subi	r20, 0xFC	; 252
    37f8:	fe 01       	movw	r30, r28
    37fa:	e7 55       	subi	r30, 0x57	; 87
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 81       	ld	r24, Z
    3800:	28 2f       	mov	r18, r24
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	88 e0       	ldi	r24, 0x08	; 8
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	02 c0       	rjmp	.+4      	; 0x380e <LCD_function_set_4bit+0xdb4>
    380a:	95 95       	asr	r25
    380c:	87 95       	ror	r24
    380e:	2a 95       	dec	r18
    3810:	e2 f7       	brpl	.-8      	; 0x380a <LCD_function_set_4bit+0xdb0>
    3812:	98 2f       	mov	r25, r24
    3814:	91 70       	andi	r25, 0x01	; 1
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	64 2f       	mov	r22, r20
    381a:	49 2f       	mov	r20, r25
    381c:	0e 94 07 2b 	call	0x560e	; 0x560e <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3820:	de 01       	movw	r26, r28
    3822:	a7 55       	subi	r26, 0x57	; 87
    3824:	bf 4f       	sbci	r27, 0xFF	; 255
    3826:	fe 01       	movw	r30, r28
    3828:	e7 55       	subi	r30, 0x57	; 87
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 81       	ld	r24, Z
    382e:	8f 5f       	subi	r24, 0xFF	; 255
    3830:	8c 93       	st	X, r24
    3832:	fe 01       	movw	r30, r28
    3834:	e7 55       	subi	r30, 0x57	; 87
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	80 81       	ld	r24, Z
    383a:	84 30       	cpi	r24, 0x04	; 4
    383c:	b8 f2       	brcs	.-82     	; 0x37ec <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    383e:	82 e0       	ldi	r24, 0x02	; 2
    3840:	60 e0       	ldi	r22, 0x00	; 0
    3842:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	a0 e2       	ldi	r26, 0x20	; 32
    384c:	b1 e4       	ldi	r27, 0x41	; 65
    384e:	8d 8b       	std	Y+21, r24	; 0x15
    3850:	9e 8b       	std	Y+22, r25	; 0x16
    3852:	af 8b       	std	Y+23, r26	; 0x17
    3854:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3856:	6d 89       	ldd	r22, Y+21	; 0x15
    3858:	7e 89       	ldd	r23, Y+22	; 0x16
    385a:	8f 89       	ldd	r24, Y+23	; 0x17
    385c:	98 8d       	ldd	r25, Y+24	; 0x18
    385e:	2b ea       	ldi	r18, 0xAB	; 171
    3860:	3a ea       	ldi	r19, 0xAA	; 170
    3862:	4a ea       	ldi	r20, 0xAA	; 170
    3864:	50 e4       	ldi	r21, 0x40	; 64
    3866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	89 8b       	std	Y+17, r24	; 0x11
    3870:	9a 8b       	std	Y+18, r25	; 0x12
    3872:	ab 8b       	std	Y+19, r26	; 0x13
    3874:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3876:	69 89       	ldd	r22, Y+17	; 0x11
    3878:	7a 89       	ldd	r23, Y+18	; 0x12
    387a:	8b 89       	ldd	r24, Y+19	; 0x13
    387c:	9c 89       	ldd	r25, Y+20	; 0x14
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e8       	ldi	r20, 0x80	; 128
    3884:	5f e3       	ldi	r21, 0x3F	; 63
    3886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388a:	88 23       	and	r24, r24
    388c:	1c f4       	brge	.+6      	; 0x3894 <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	88 8b       	std	Y+16, r24	; 0x10
    3892:	91 c0       	rjmp	.+290    	; 0x39b6 <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    3894:	69 89       	ldd	r22, Y+17	; 0x11
    3896:	7a 89       	ldd	r23, Y+18	; 0x12
    3898:	8b 89       	ldd	r24, Y+19	; 0x13
    389a:	9c 89       	ldd	r25, Y+20	; 0x14
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	4f e7       	ldi	r20, 0x7F	; 127
    38a2:	53 e4       	ldi	r21, 0x43	; 67
    38a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a8:	18 16       	cp	r1, r24
    38aa:	0c f0       	brlt	.+2      	; 0x38ae <LCD_function_set_4bit+0xe54>
    38ac:	7b c0       	rjmp	.+246    	; 0x39a4 <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    38ae:	6d 89       	ldd	r22, Y+21	; 0x15
    38b0:	7e 89       	ldd	r23, Y+22	; 0x16
    38b2:	8f 89       	ldd	r24, Y+23	; 0x17
    38b4:	98 8d       	ldd	r25, Y+24	; 0x18
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	4a e7       	ldi	r20, 0x7A	; 122
    38bc:	54 e4       	ldi	r21, 0x44	; 68
    38be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	8c 87       	std	Y+12, r24	; 0x0c
    38c8:	9d 87       	std	Y+13, r25	; 0x0d
    38ca:	ae 87       	std	Y+14, r26	; 0x0e
    38cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    38d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    38d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    38d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	4a e7       	ldi	r20, 0x7A	; 122
    38dc:	55 e4       	ldi	r21, 0x45	; 69
    38de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	88 87       	std	Y+8, r24	; 0x08
    38e8:	99 87       	std	Y+9, r25	; 0x09
    38ea:	aa 87       	std	Y+10, r26	; 0x0a
    38ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    38ee:	68 85       	ldd	r22, Y+8	; 0x08
    38f0:	79 85       	ldd	r23, Y+9	; 0x09
    38f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f e3       	ldi	r21, 0x3F	; 63
    38fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3902:	88 23       	and	r24, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9f 83       	std	Y+7, r25	; 0x07
    390c:	8e 83       	std	Y+6, r24	; 0x06
    390e:	3f c0       	rjmp	.+126    	; 0x398e <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    3910:	68 85       	ldd	r22, Y+8	; 0x08
    3912:	79 85       	ldd	r23, Y+9	; 0x09
    3914:	8a 85       	ldd	r24, Y+10	; 0x0a
    3916:	9b 85       	ldd	r25, Y+11	; 0x0b
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	3f ef       	ldi	r19, 0xFF	; 255
    391c:	4f e7       	ldi	r20, 0x7F	; 127
    391e:	57 e4       	ldi	r21, 0x47	; 71
    3920:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3924:	18 16       	cp	r1, r24
    3926:	4c f5       	brge	.+82     	; 0x397a <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3928:	6c 85       	ldd	r22, Y+12	; 0x0c
    392a:	7d 85       	ldd	r23, Y+13	; 0x0d
    392c:	8e 85       	ldd	r24, Y+14	; 0x0e
    392e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e2       	ldi	r20, 0x20	; 32
    3936:	51 e4       	ldi	r21, 0x41	; 65
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9f 83       	std	Y+7, r25	; 0x07
    394e:	8e 83       	std	Y+6, r24	; 0x06
    3950:	0f c0       	rjmp	.+30     	; 0x3970 <LCD_function_set_4bit+0xf16>
    3952:	80 e9       	ldi	r24, 0x90	; 144
    3954:	91 e0       	ldi	r25, 0x01	; 1
    3956:	9d 83       	std	Y+5, r25	; 0x05
    3958:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    395a:	8c 81       	ldd	r24, Y+4	; 0x04
    395c:	9d 81       	ldd	r25, Y+5	; 0x05
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <LCD_function_set_4bit+0xf04>
    3962:	9d 83       	std	Y+5, r25	; 0x05
    3964:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3966:	8e 81       	ldd	r24, Y+6	; 0x06
    3968:	9f 81       	ldd	r25, Y+7	; 0x07
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	9f 83       	std	Y+7, r25	; 0x07
    396e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3970:	8e 81       	ldd	r24, Y+6	; 0x06
    3972:	9f 81       	ldd	r25, Y+7	; 0x07
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	69 f7       	brne	.-38     	; 0x3952 <LCD_function_set_4bit+0xef8>
    3978:	24 c0       	rjmp	.+72     	; 0x39c2 <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397a:	68 85       	ldd	r22, Y+8	; 0x08
    397c:	79 85       	ldd	r23, Y+9	; 0x09
    397e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3980:	9b 85       	ldd	r25, Y+11	; 0x0b
    3982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9f 83       	std	Y+7, r25	; 0x07
    398c:	8e 83       	std	Y+6, r24	; 0x06
    398e:	8e 81       	ldd	r24, Y+6	; 0x06
    3990:	9f 81       	ldd	r25, Y+7	; 0x07
    3992:	9b 83       	std	Y+3, r25	; 0x03
    3994:	8a 83       	std	Y+2, r24	; 0x02
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <LCD_function_set_4bit+0xf40>
    399e:	9b 83       	std	Y+3, r25	; 0x03
    39a0:	8a 83       	std	Y+2, r24	; 0x02
    39a2:	0f c0       	rjmp	.+30     	; 0x39c2 <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39a4:	69 89       	ldd	r22, Y+17	; 0x11
    39a6:	7a 89       	ldd	r23, Y+18	; 0x12
    39a8:	8b 89       	ldd	r24, Y+19	; 0x13
    39aa:	9c 89       	ldd	r25, Y+20	; 0x14
    39ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	88 8b       	std	Y+16, r24	; 0x10
    39b6:	88 89       	ldd	r24, Y+16	; 0x10
    39b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	8a 95       	dec	r24
    39be:	f1 f7       	brne	.-4      	; 0x39bc <LCD_function_set_4bit+0xf62>
    39c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    39c2:	c5 55       	subi	r28, 0x55	; 85
    39c4:	df 4f       	sbci	r29, 0xFF	; 255
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	08 95       	ret

000039da <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	df 93       	push	r29
    39e0:	cf 93       	push	r28
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
    39e6:	c1 56       	subi	r28, 0x61	; 97
    39e8:	d0 40       	sbci	r29, 0x00	; 0
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    39f4:	82 e0       	ldi	r24, 0x02	; 2
    39f6:	67 e0       	ldi	r22, 0x07	; 7
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    39fe:	82 e0       	ldi	r24, 0x02	; 2
    3a00:	66 e0       	ldi	r22, 0x06	; 6
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    3a08:	82 e0       	ldi	r24, 0x02	; 2
    3a0a:	65 e0       	ldi	r22, 0x05	; 5
    3a0c:	40 e0       	ldi	r20, 0x00	; 0
    3a0e:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    3a12:	82 e0       	ldi	r24, 0x02	; 2
    3a14:	64 e0       	ldi	r22, 0x04	; 4
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    3a1c:	82 e0       	ldi	r24, 0x02	; 2
    3a1e:	62 e0       	ldi	r22, 0x02	; 2
    3a20:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    3a24:	82 e0       	ldi	r24, 0x02	; 2
    3a26:	61 e0       	ldi	r22, 0x01	; 1
    3a28:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e3 5a       	subi	r30, 0xA3	; 163
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	a0 e8       	ldi	r26, 0x80	; 128
    3a38:	bf e3       	ldi	r27, 0x3F	; 63
    3a3a:	80 83       	st	Z, r24
    3a3c:	91 83       	std	Z+1, r25	; 0x01
    3a3e:	a2 83       	std	Z+2, r26	; 0x02
    3a40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a42:	8e 01       	movw	r16, r28
    3a44:	07 5a       	subi	r16, 0xA7	; 167
    3a46:	1f 4f       	sbci	r17, 0xFF	; 255
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e3 5a       	subi	r30, 0xA3	; 163
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	60 81       	ld	r22, Z
    3a50:	71 81       	ldd	r23, Z+1	; 0x01
    3a52:	82 81       	ldd	r24, Z+2	; 0x02
    3a54:	93 81       	ldd	r25, Z+3	; 0x03
    3a56:	2b ea       	ldi	r18, 0xAB	; 171
    3a58:	3a ea       	ldi	r19, 0xAA	; 170
    3a5a:	4a ea       	ldi	r20, 0xAA	; 170
    3a5c:	50 e4       	ldi	r21, 0x40	; 64
    3a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	f8 01       	movw	r30, r16
    3a68:	80 83       	st	Z, r24
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	a2 83       	std	Z+2, r26	; 0x02
    3a6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a70:	fe 01       	movw	r30, r28
    3a72:	e7 5a       	subi	r30, 0xA7	; 167
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	60 81       	ld	r22, Z
    3a78:	71 81       	ldd	r23, Z+1	; 0x01
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e8       	ldi	r20, 0x80	; 128
    3a84:	5f e3       	ldi	r21, 0x3F	; 63
    3a86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a8a:	88 23       	and	r24, r24
    3a8c:	34 f4       	brge	.+12     	; 0x3a9a <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e8 5a       	subi	r30, 0xA8	; 168
    3a92:	ff 4f       	sbci	r31, 0xFF	; 255
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	80 83       	st	Z, r24
    3a98:	e0 c0       	rjmp	.+448    	; 0x3c5a <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e7 5a       	subi	r30, 0xA7	; 167
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	60 81       	ld	r22, Z
    3aa2:	71 81       	ldd	r23, Z+1	; 0x01
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	4f e7       	ldi	r20, 0x7F	; 127
    3aae:	53 e4       	ldi	r21, 0x43	; 67
    3ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ab4:	18 16       	cp	r1, r24
    3ab6:	0c f0       	brlt	.+2      	; 0x3aba <LCD_read_data_4bit+0xe0>
    3ab8:	c0 c0       	rjmp	.+384    	; 0x3c3a <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    3aba:	fe 01       	movw	r30, r28
    3abc:	e3 5a       	subi	r30, 0xA3	; 163
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	60 81       	ld	r22, Z
    3ac2:	71 81       	ldd	r23, Z+1	; 0x01
    3ac4:	82 81       	ldd	r24, Z+2	; 0x02
    3ac6:	93 81       	ldd	r25, Z+3	; 0x03
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	4a e7       	ldi	r20, 0x7A	; 122
    3ace:	54 e4       	ldi	r21, 0x44	; 68
    3ad0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	fe 01       	movw	r30, r28
    3ada:	ec 5a       	subi	r30, 0xAC	; 172
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	80 83       	st	Z, r24
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	a2 83       	std	Z+2, r26	; 0x02
    3ae4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae6:	8e 01       	movw	r16, r28
    3ae8:	00 5b       	subi	r16, 0xB0	; 176
    3aea:	1f 4f       	sbci	r17, 0xFF	; 255
    3aec:	fe 01       	movw	r30, r28
    3aee:	ec 5a       	subi	r30, 0xAC	; 172
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	60 81       	ld	r22, Z
    3af4:	71 81       	ldd	r23, Z+1	; 0x01
    3af6:	82 81       	ldd	r24, Z+2	; 0x02
    3af8:	93 81       	ldd	r25, Z+3	; 0x03
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	4a e7       	ldi	r20, 0x7A	; 122
    3b00:	55 e4       	ldi	r21, 0x45	; 69
    3b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	80 83       	st	Z, r24
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	a2 83       	std	Z+2, r26	; 0x02
    3b12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b14:	fe 01       	movw	r30, r28
    3b16:	e0 5b       	subi	r30, 0xB0	; 176
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	60 81       	ld	r22, Z
    3b1c:	71 81       	ldd	r23, Z+1	; 0x01
    3b1e:	82 81       	ldd	r24, Z+2	; 0x02
    3b20:	93 81       	ldd	r25, Z+3	; 0x03
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e8       	ldi	r20, 0x80	; 128
    3b28:	5f e3       	ldi	r21, 0x3F	; 63
    3b2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b2e:	88 23       	and	r24, r24
    3b30:	44 f4       	brge	.+16     	; 0x3b42 <LCD_read_data_4bit+0x168>
		__ticks = 1;
    3b32:	fe 01       	movw	r30, r28
    3b34:	e2 5b       	subi	r30, 0xB2	; 178
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
    3b40:	64 c0       	rjmp	.+200    	; 0x3c0a <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    3b42:	fe 01       	movw	r30, r28
    3b44:	e0 5b       	subi	r30, 0xB0	; 176
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	3f ef       	ldi	r19, 0xFF	; 255
    3b54:	4f e7       	ldi	r20, 0x7F	; 127
    3b56:	57 e4       	ldi	r21, 0x47	; 71
    3b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b5c:	18 16       	cp	r1, r24
    3b5e:	0c f0       	brlt	.+2      	; 0x3b62 <LCD_read_data_4bit+0x188>
    3b60:	43 c0       	rjmp	.+134    	; 0x3be8 <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b62:	fe 01       	movw	r30, r28
    3b64:	ec 5a       	subi	r30, 0xAC	; 172
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	60 81       	ld	r22, Z
    3b6a:	71 81       	ldd	r23, Z+1	; 0x01
    3b6c:	82 81       	ldd	r24, Z+2	; 0x02
    3b6e:	93 81       	ldd	r25, Z+3	; 0x03
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	40 e2       	ldi	r20, 0x20	; 32
    3b76:	51 e4       	ldi	r21, 0x41	; 65
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	8e 01       	movw	r16, r28
    3b82:	02 5b       	subi	r16, 0xB2	; 178
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
    3b86:	bc 01       	movw	r22, r24
    3b88:	cd 01       	movw	r24, r26
    3b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	f8 01       	movw	r30, r16
    3b94:	91 83       	std	Z+1, r25	; 0x01
    3b96:	80 83       	st	Z, r24
    3b98:	1f c0       	rjmp	.+62     	; 0x3bd8 <LCD_read_data_4bit+0x1fe>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	e4 5b       	subi	r30, 0xB4	; 180
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	80 e9       	ldi	r24, 0x90	; 144
    3ba2:	91 e0       	ldi	r25, 0x01	; 1
    3ba4:	91 83       	std	Z+1, r25	; 0x01
    3ba6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e4 5b       	subi	r30, 0xB4	; 180
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	80 81       	ld	r24, Z
    3bb0:	91 81       	ldd	r25, Z+1	; 0x01
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <LCD_read_data_4bit+0x1d8>
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e4 5b       	subi	r30, 0xB4	; 180
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	91 83       	std	Z+1, r25	; 0x01
    3bbe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc0:	de 01       	movw	r26, r28
    3bc2:	a2 5b       	subi	r26, 0xB2	; 178
    3bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e2 5b       	subi	r30, 0xB2	; 178
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 81       	ld	r24, Z
    3bce:	91 81       	ldd	r25, Z+1	; 0x01
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	11 96       	adiw	r26, 0x01	; 1
    3bd4:	9c 93       	st	X, r25
    3bd6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e2 5b       	subi	r30, 0xB2	; 178
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	80 81       	ld	r24, Z
    3be0:	91 81       	ldd	r25, Z+1	; 0x01
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	d1 f6       	brne	.-76     	; 0x3b9a <LCD_read_data_4bit+0x1c0>
    3be6:	4b c0       	rjmp	.+150    	; 0x3c7e <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be8:	8e 01       	movw	r16, r28
    3bea:	02 5b       	subi	r16, 0xB2	; 178
    3bec:	1f 4f       	sbci	r17, 0xFF	; 255
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e0 5b       	subi	r30, 0xB0	; 176
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	60 81       	ld	r22, Z
    3bf6:	71 81       	ldd	r23, Z+1	; 0x01
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	93 81       	ldd	r25, Z+3	; 0x03
    3bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	f8 01       	movw	r30, r16
    3c06:	91 83       	std	Z+1, r25	; 0x01
    3c08:	80 83       	st	Z, r24
    3c0a:	de 01       	movw	r26, r28
    3c0c:	a6 5b       	subi	r26, 0xB6	; 182
    3c0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c10:	fe 01       	movw	r30, r28
    3c12:	e2 5b       	subi	r30, 0xB2	; 178
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 81       	ld	r24, Z
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	11 96       	adiw	r26, 0x01	; 1
    3c1c:	9c 93       	st	X, r25
    3c1e:	8e 93       	st	-X, r24
    3c20:	fe 01       	movw	r30, r28
    3c22:	e6 5b       	subi	r30, 0xB6	; 182
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	80 81       	ld	r24, Z
    3c28:	91 81       	ldd	r25, Z+1	; 0x01
    3c2a:	01 97       	sbiw	r24, 0x01	; 1
    3c2c:	f1 f7       	brne	.-4      	; 0x3c2a <LCD_read_data_4bit+0x250>
    3c2e:	fe 01       	movw	r30, r28
    3c30:	e6 5b       	subi	r30, 0xB6	; 182
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
    3c38:	22 c0       	rjmp	.+68     	; 0x3c7e <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c3a:	8e 01       	movw	r16, r28
    3c3c:	08 5a       	subi	r16, 0xA8	; 168
    3c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c40:	fe 01       	movw	r30, r28
    3c42:	e7 5a       	subi	r30, 0xA7	; 167
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	60 81       	ld	r22, Z
    3c48:	71 81       	ldd	r23, Z+1	; 0x01
    3c4a:	82 81       	ldd	r24, Z+2	; 0x02
    3c4c:	93 81       	ldd	r25, Z+3	; 0x03
    3c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	f8 01       	movw	r30, r16
    3c58:	80 83       	st	Z, r24
    3c5a:	de 01       	movw	r26, r28
    3c5c:	a7 5b       	subi	r26, 0xB7	; 183
    3c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c60:	fe 01       	movw	r30, r28
    3c62:	e8 5a       	subi	r30, 0xA8	; 168
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e7 5b       	subi	r30, 0xB7	; 183
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 81       	ld	r24, Z
    3c72:	8a 95       	dec	r24
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <LCD_read_data_4bit+0x298>
    3c76:	fe 01       	movw	r30, r28
    3c78:	e7 5b       	subi	r30, 0xB7	; 183
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	60 e0       	ldi	r22, 0x00	; 0
    3c82:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    3c86:	fe 01       	movw	r30, r28
    3c88:	eb 5b       	subi	r30, 0xBB	; 187
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	a0 e8       	ldi	r26, 0x80	; 128
    3c92:	bf e3       	ldi	r27, 0x3F	; 63
    3c94:	80 83       	st	Z, r24
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	a2 83       	std	Z+2, r26	; 0x02
    3c9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c9c:	8e 01       	movw	r16, r28
    3c9e:	0f 5b       	subi	r16, 0xBF	; 191
    3ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	eb 5b       	subi	r30, 0xBB	; 187
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	60 81       	ld	r22, Z
    3caa:	71 81       	ldd	r23, Z+1	; 0x01
    3cac:	82 81       	ldd	r24, Z+2	; 0x02
    3cae:	93 81       	ldd	r25, Z+3	; 0x03
    3cb0:	2b ea       	ldi	r18, 0xAB	; 171
    3cb2:	3a ea       	ldi	r19, 0xAA	; 170
    3cb4:	4a ea       	ldi	r20, 0xAA	; 170
    3cb6:	50 e4       	ldi	r21, 0x40	; 64
    3cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	80 83       	st	Z, r24
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	a2 83       	std	Z+2, r26	; 0x02
    3cc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cca:	fe 01       	movw	r30, r28
    3ccc:	ef 5b       	subi	r30, 0xBF	; 191
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	40 e8       	ldi	r20, 0x80	; 128
    3cde:	5f e3       	ldi	r21, 0x3F	; 63
    3ce0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce4:	88 23       	and	r24, r24
    3ce6:	34 f4       	brge	.+12     	; 0x3cf4 <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	fe 01       	movw	r30, r28
    3cec:	e0 5c       	subi	r30, 0xC0	; 192
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	80 83       	st	Z, r24
    3cf2:	9d c0       	rjmp	.+314    	; 0x3e2e <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	ef 5b       	subi	r30, 0xBF	; 191
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	4f e7       	ldi	r20, 0x7F	; 127
    3d08:	53 e4       	ldi	r21, 0x43	; 67
    3d0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d0e:	18 16       	cp	r1, r24
    3d10:	0c f0       	brlt	.+2      	; 0x3d14 <LCD_read_data_4bit+0x33a>
    3d12:	7e c0       	rjmp	.+252    	; 0x3e10 <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    3d14:	fe 01       	movw	r30, r28
    3d16:	eb 5b       	subi	r30, 0xBB	; 187
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	60 81       	ld	r22, Z
    3d1c:	71 81       	ldd	r23, Z+1	; 0x01
    3d1e:	82 81       	ldd	r24, Z+2	; 0x02
    3d20:	93 81       	ldd	r25, Z+3	; 0x03
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	4a e7       	ldi	r20, 0x7A	; 122
    3d28:	54 e4       	ldi	r21, 0x44	; 68
    3d2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	8c af       	std	Y+60, r24	; 0x3c
    3d34:	9d af       	std	Y+61, r25	; 0x3d
    3d36:	ae af       	std	Y+62, r26	; 0x3e
    3d38:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d3c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d40:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	4a e7       	ldi	r20, 0x7A	; 122
    3d48:	55 e4       	ldi	r21, 0x45	; 69
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	88 af       	std	Y+56, r24	; 0x38
    3d54:	99 af       	std	Y+57, r25	; 0x39
    3d56:	aa af       	std	Y+58, r26	; 0x3a
    3d58:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3d5a:	68 ad       	ldd	r22, Y+56	; 0x38
    3d5c:	79 ad       	ldd	r23, Y+57	; 0x39
    3d5e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d60:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	40 e8       	ldi	r20, 0x80	; 128
    3d68:	5f e3       	ldi	r21, 0x3F	; 63
    3d6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d6e:	88 23       	and	r24, r24
    3d70:	2c f4       	brge	.+10     	; 0x3d7c <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	9f ab       	std	Y+55, r25	; 0x37
    3d78:	8e ab       	std	Y+54, r24	; 0x36
    3d7a:	3f c0       	rjmp	.+126    	; 0x3dfa <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    3d7c:	68 ad       	ldd	r22, Y+56	; 0x38
    3d7e:	79 ad       	ldd	r23, Y+57	; 0x39
    3d80:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d82:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	3f ef       	ldi	r19, 0xFF	; 255
    3d88:	4f e7       	ldi	r20, 0x7F	; 127
    3d8a:	57 e4       	ldi	r21, 0x47	; 71
    3d8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d90:	18 16       	cp	r1, r24
    3d92:	4c f5       	brge	.+82     	; 0x3de6 <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d94:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d96:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	40 e2       	ldi	r20, 0x20	; 32
    3da2:	51 e4       	ldi	r21, 0x41	; 65
    3da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	bc 01       	movw	r22, r24
    3dae:	cd 01       	movw	r24, r26
    3db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	9f ab       	std	Y+55, r25	; 0x37
    3dba:	8e ab       	std	Y+54, r24	; 0x36
    3dbc:	0f c0       	rjmp	.+30     	; 0x3ddc <LCD_read_data_4bit+0x402>
    3dbe:	80 e9       	ldi	r24, 0x90	; 144
    3dc0:	91 e0       	ldi	r25, 0x01	; 1
    3dc2:	9d ab       	std	Y+53, r25	; 0x35
    3dc4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dc6:	8c a9       	ldd	r24, Y+52	; 0x34
    3dc8:	9d a9       	ldd	r25, Y+53	; 0x35
    3dca:	01 97       	sbiw	r24, 0x01	; 1
    3dcc:	f1 f7       	brne	.-4      	; 0x3dca <LCD_read_data_4bit+0x3f0>
    3dce:	9d ab       	std	Y+53, r25	; 0x35
    3dd0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dd2:	8e a9       	ldd	r24, Y+54	; 0x36
    3dd4:	9f a9       	ldd	r25, Y+55	; 0x37
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	9f ab       	std	Y+55, r25	; 0x37
    3dda:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ddc:	8e a9       	ldd	r24, Y+54	; 0x36
    3dde:	9f a9       	ldd	r25, Y+55	; 0x37
    3de0:	00 97       	sbiw	r24, 0x00	; 0
    3de2:	69 f7       	brne	.-38     	; 0x3dbe <LCD_read_data_4bit+0x3e4>
    3de4:	2d c0       	rjmp	.+90     	; 0x3e40 <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de6:	68 ad       	ldd	r22, Y+56	; 0x38
    3de8:	79 ad       	ldd	r23, Y+57	; 0x39
    3dea:	8a ad       	ldd	r24, Y+58	; 0x3a
    3dec:	9b ad       	ldd	r25, Y+59	; 0x3b
    3dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	9f ab       	std	Y+55, r25	; 0x37
    3df8:	8e ab       	std	Y+54, r24	; 0x36
    3dfa:	8e a9       	ldd	r24, Y+54	; 0x36
    3dfc:	9f a9       	ldd	r25, Y+55	; 0x37
    3dfe:	9b ab       	std	Y+51, r25	; 0x33
    3e00:	8a ab       	std	Y+50, r24	; 0x32
    3e02:	8a a9       	ldd	r24, Y+50	; 0x32
    3e04:	9b a9       	ldd	r25, Y+51	; 0x33
    3e06:	01 97       	sbiw	r24, 0x01	; 1
    3e08:	f1 f7       	brne	.-4      	; 0x3e06 <LCD_read_data_4bit+0x42c>
    3e0a:	9b ab       	std	Y+51, r25	; 0x33
    3e0c:	8a ab       	std	Y+50, r24	; 0x32
    3e0e:	18 c0       	rjmp	.+48     	; 0x3e40 <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e10:	fe 01       	movw	r30, r28
    3e12:	ef 5b       	subi	r30, 0xBF	; 191
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	60 81       	ld	r22, Z
    3e18:	71 81       	ldd	r23, Z+1	; 0x01
    3e1a:	82 81       	ldd	r24, Z+2	; 0x02
    3e1c:	93 81       	ldd	r25, Z+3	; 0x03
    3e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	fe 01       	movw	r30, r28
    3e28:	e0 5c       	subi	r30, 0xC0	; 192
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	80 83       	st	Z, r24
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e0 5c       	subi	r30, 0xC0	; 192
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	80 81       	ld	r24, Z
    3e36:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e38:	89 a9       	ldd	r24, Y+49	; 0x31
    3e3a:	8a 95       	dec	r24
    3e3c:	f1 f7       	brne	.-4      	; 0x3e3a <LCD_read_data_4bit+0x460>
    3e3e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8_get_port>
    3e46:	fe 01       	movw	r30, r28
    3e48:	ef 59       	subi	r30, 0x9F	; 159
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	82 95       	swap	r24
    3e4e:	80 7f       	andi	r24, 0xF0	; 240
    3e50:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	60 e0       	ldi	r22, 0x00	; 0
    3e56:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	a0 e2       	ldi	r26, 0x20	; 32
    3e60:	b1 e4       	ldi	r27, 0x41	; 65
    3e62:	8d a7       	std	Y+45, r24	; 0x2d
    3e64:	9e a7       	std	Y+46, r25	; 0x2e
    3e66:	af a7       	std	Y+47, r26	; 0x2f
    3e68:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e6a:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e6c:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e70:	98 a9       	ldd	r25, Y+48	; 0x30
    3e72:	2b ea       	ldi	r18, 0xAB	; 171
    3e74:	3a ea       	ldi	r19, 0xAA	; 170
    3e76:	4a ea       	ldi	r20, 0xAA	; 170
    3e78:	50 e4       	ldi	r21, 0x40	; 64
    3e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	89 a7       	std	Y+41, r24	; 0x29
    3e84:	9a a7       	std	Y+42, r25	; 0x2a
    3e86:	ab a7       	std	Y+43, r26	; 0x2b
    3e88:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3e8a:	69 a5       	ldd	r22, Y+41	; 0x29
    3e8c:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e90:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	40 e8       	ldi	r20, 0x80	; 128
    3e98:	5f e3       	ldi	r21, 0x3F	; 63
    3e9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e9e:	88 23       	and	r24, r24
    3ea0:	1c f4       	brge	.+6      	; 0x3ea8 <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	88 a7       	std	Y+40, r24	; 0x28
    3ea6:	91 c0       	rjmp	.+290    	; 0x3fca <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    3ea8:	69 a5       	ldd	r22, Y+41	; 0x29
    3eaa:	7a a5       	ldd	r23, Y+42	; 0x2a
    3eac:	8b a5       	ldd	r24, Y+43	; 0x2b
    3eae:	9c a5       	ldd	r25, Y+44	; 0x2c
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	4f e7       	ldi	r20, 0x7F	; 127
    3eb6:	53 e4       	ldi	r21, 0x43	; 67
    3eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ebc:	18 16       	cp	r1, r24
    3ebe:	0c f0       	brlt	.+2      	; 0x3ec2 <LCD_read_data_4bit+0x4e8>
    3ec0:	7b c0       	rjmp	.+246    	; 0x3fb8 <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    3ec2:	6d a5       	ldd	r22, Y+45	; 0x2d
    3ec4:	7e a5       	ldd	r23, Y+46	; 0x2e
    3ec6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ec8:	98 a9       	ldd	r25, Y+48	; 0x30
    3eca:	20 e0       	ldi	r18, 0x00	; 0
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	4a e7       	ldi	r20, 0x7A	; 122
    3ed0:	54 e4       	ldi	r21, 0x44	; 68
    3ed2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	8c a3       	std	Y+36, r24	; 0x24
    3edc:	9d a3       	std	Y+37, r25	; 0x25
    3ede:	ae a3       	std	Y+38, r26	; 0x26
    3ee0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee2:	6c a1       	ldd	r22, Y+36	; 0x24
    3ee4:	7d a1       	ldd	r23, Y+37	; 0x25
    3ee6:	8e a1       	ldd	r24, Y+38	; 0x26
    3ee8:	9f a1       	ldd	r25, Y+39	; 0x27
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	4a e7       	ldi	r20, 0x7A	; 122
    3ef0:	55 e4       	ldi	r21, 0x45	; 69
    3ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	88 a3       	std	Y+32, r24	; 0x20
    3efc:	99 a3       	std	Y+33, r25	; 0x21
    3efe:	aa a3       	std	Y+34, r26	; 0x22
    3f00:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3f02:	68 a1       	ldd	r22, Y+32	; 0x20
    3f04:	79 a1       	ldd	r23, Y+33	; 0x21
    3f06:	8a a1       	ldd	r24, Y+34	; 0x22
    3f08:	9b a1       	ldd	r25, Y+35	; 0x23
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	40 e8       	ldi	r20, 0x80	; 128
    3f10:	5f e3       	ldi	r21, 0x3F	; 63
    3f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f16:	88 23       	and	r24, r24
    3f18:	2c f4       	brge	.+10     	; 0x3f24 <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	9f 8f       	std	Y+31, r25	; 0x1f
    3f20:	8e 8f       	std	Y+30, r24	; 0x1e
    3f22:	3f c0       	rjmp	.+126    	; 0x3fa2 <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    3f24:	68 a1       	ldd	r22, Y+32	; 0x20
    3f26:	79 a1       	ldd	r23, Y+33	; 0x21
    3f28:	8a a1       	ldd	r24, Y+34	; 0x22
    3f2a:	9b a1       	ldd	r25, Y+35	; 0x23
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	3f ef       	ldi	r19, 0xFF	; 255
    3f30:	4f e7       	ldi	r20, 0x7F	; 127
    3f32:	57 e4       	ldi	r21, 0x47	; 71
    3f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f38:	18 16       	cp	r1, r24
    3f3a:	4c f5       	brge	.+82     	; 0x3f8e <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3c:	6c a1       	ldd	r22, Y+36	; 0x24
    3f3e:	7d a1       	ldd	r23, Y+37	; 0x25
    3f40:	8e a1       	ldd	r24, Y+38	; 0x26
    3f42:	9f a1       	ldd	r25, Y+39	; 0x27
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e2       	ldi	r20, 0x20	; 32
    3f4a:	51 e4       	ldi	r21, 0x41	; 65
    3f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	9f 8f       	std	Y+31, r25	; 0x1f
    3f62:	8e 8f       	std	Y+30, r24	; 0x1e
    3f64:	0f c0       	rjmp	.+30     	; 0x3f84 <LCD_read_data_4bit+0x5aa>
    3f66:	80 e9       	ldi	r24, 0x90	; 144
    3f68:	91 e0       	ldi	r25, 0x01	; 1
    3f6a:	9d 8f       	std	Y+29, r25	; 0x1d
    3f6c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f70:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	f1 f7       	brne	.-4      	; 0x3f72 <LCD_read_data_4bit+0x598>
    3f76:	9d 8f       	std	Y+29, r25	; 0x1d
    3f78:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	9f 8f       	std	Y+31, r25	; 0x1f
    3f82:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	69 f7       	brne	.-38     	; 0x3f66 <LCD_read_data_4bit+0x58c>
    3f8c:	24 c0       	rjmp	.+72     	; 0x3fd6 <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8e:	68 a1       	ldd	r22, Y+32	; 0x20
    3f90:	79 a1       	ldd	r23, Y+33	; 0x21
    3f92:	8a a1       	ldd	r24, Y+34	; 0x22
    3f94:	9b a1       	ldd	r25, Y+35	; 0x23
    3f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	9f 8f       	std	Y+31, r25	; 0x1f
    3fa0:	8e 8f       	std	Y+30, r24	; 0x1e
    3fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3fa6:	9b 8f       	std	Y+27, r25	; 0x1b
    3fa8:	8a 8f       	std	Y+26, r24	; 0x1a
    3faa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3fac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <LCD_read_data_4bit+0x5d4>
    3fb2:	9b 8f       	std	Y+27, r25	; 0x1b
    3fb4:	8a 8f       	std	Y+26, r24	; 0x1a
    3fb6:	0f c0       	rjmp	.+30     	; 0x3fd6 <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3fb8:	69 a5       	ldd	r22, Y+41	; 0x29
    3fba:	7a a5       	ldd	r23, Y+42	; 0x2a
    3fbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	88 a7       	std	Y+40, r24	; 0x28
    3fca:	88 a5       	ldd	r24, Y+40	; 0x28
    3fcc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3fce:	89 8d       	ldd	r24, Y+25	; 0x19
    3fd0:	8a 95       	dec	r24
    3fd2:	f1 f7       	brne	.-4      	; 0x3fd0 <LCD_read_data_4bit+0x5f6>
    3fd4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3fd6:	82 e0       	ldi	r24, 0x02	; 2
    3fd8:	60 e0       	ldi	r22, 0x00	; 0
    3fda:	0e 94 76 2a 	call	0x54ec	; 0x54ec <DIO_void_set_pin>
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	a0 e8       	ldi	r26, 0x80	; 128
    3fe4:	bf e3       	ldi	r27, 0x3F	; 63
    3fe6:	8d 8b       	std	Y+21, r24	; 0x15
    3fe8:	9e 8b       	std	Y+22, r25	; 0x16
    3fea:	af 8b       	std	Y+23, r26	; 0x17
    3fec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3fee:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff6:	2b ea       	ldi	r18, 0xAB	; 171
    3ff8:	3a ea       	ldi	r19, 0xAA	; 170
    3ffa:	4a ea       	ldi	r20, 0xAA	; 170
    3ffc:	50 e4       	ldi	r21, 0x40	; 64
    3ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	89 8b       	std	Y+17, r24	; 0x11
    4008:	9a 8b       	std	Y+18, r25	; 0x12
    400a:	ab 8b       	std	Y+19, r26	; 0x13
    400c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    400e:	69 89       	ldd	r22, Y+17	; 0x11
    4010:	7a 89       	ldd	r23, Y+18	; 0x12
    4012:	8b 89       	ldd	r24, Y+19	; 0x13
    4014:	9c 89       	ldd	r25, Y+20	; 0x14
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	40 e8       	ldi	r20, 0x80	; 128
    401c:	5f e3       	ldi	r21, 0x3F	; 63
    401e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4022:	88 23       	and	r24, r24
    4024:	1c f4       	brge	.+6      	; 0x402c <LCD_read_data_4bit+0x652>
		__ticks = 1;
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	88 8b       	std	Y+16, r24	; 0x10
    402a:	91 c0       	rjmp	.+290    	; 0x414e <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    402c:	69 89       	ldd	r22, Y+17	; 0x11
    402e:	7a 89       	ldd	r23, Y+18	; 0x12
    4030:	8b 89       	ldd	r24, Y+19	; 0x13
    4032:	9c 89       	ldd	r25, Y+20	; 0x14
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	4f e7       	ldi	r20, 0x7F	; 127
    403a:	53 e4       	ldi	r21, 0x43	; 67
    403c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4040:	18 16       	cp	r1, r24
    4042:	0c f0       	brlt	.+2      	; 0x4046 <LCD_read_data_4bit+0x66c>
    4044:	7b c0       	rjmp	.+246    	; 0x413c <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    4046:	6d 89       	ldd	r22, Y+21	; 0x15
    4048:	7e 89       	ldd	r23, Y+22	; 0x16
    404a:	8f 89       	ldd	r24, Y+23	; 0x17
    404c:	98 8d       	ldd	r25, Y+24	; 0x18
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	4a e7       	ldi	r20, 0x7A	; 122
    4054:	54 e4       	ldi	r21, 0x44	; 68
    4056:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	8c 87       	std	Y+12, r24	; 0x0c
    4060:	9d 87       	std	Y+13, r25	; 0x0d
    4062:	ae 87       	std	Y+14, r26	; 0x0e
    4064:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4066:	6c 85       	ldd	r22, Y+12	; 0x0c
    4068:	7d 85       	ldd	r23, Y+13	; 0x0d
    406a:	8e 85       	ldd	r24, Y+14	; 0x0e
    406c:	9f 85       	ldd	r25, Y+15	; 0x0f
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	4a e7       	ldi	r20, 0x7A	; 122
    4074:	55 e4       	ldi	r21, 0x45	; 69
    4076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	88 87       	std	Y+8, r24	; 0x08
    4080:	99 87       	std	Y+9, r25	; 0x09
    4082:	aa 87       	std	Y+10, r26	; 0x0a
    4084:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4086:	68 85       	ldd	r22, Y+8	; 0x08
    4088:	79 85       	ldd	r23, Y+9	; 0x09
    408a:	8a 85       	ldd	r24, Y+10	; 0x0a
    408c:	9b 85       	ldd	r25, Y+11	; 0x0b
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	40 e8       	ldi	r20, 0x80	; 128
    4094:	5f e3       	ldi	r21, 0x3F	; 63
    4096:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    409a:	88 23       	and	r24, r24
    409c:	2c f4       	brge	.+10     	; 0x40a8 <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	9f 83       	std	Y+7, r25	; 0x07
    40a4:	8e 83       	std	Y+6, r24	; 0x06
    40a6:	3f c0       	rjmp	.+126    	; 0x4126 <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    40a8:	68 85       	ldd	r22, Y+8	; 0x08
    40aa:	79 85       	ldd	r23, Y+9	; 0x09
    40ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    40ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	3f ef       	ldi	r19, 0xFF	; 255
    40b4:	4f e7       	ldi	r20, 0x7F	; 127
    40b6:	57 e4       	ldi	r21, 0x47	; 71
    40b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40bc:	18 16       	cp	r1, r24
    40be:	4c f5       	brge	.+82     	; 0x4112 <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    40c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    40c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    40c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	40 e2       	ldi	r20, 0x20	; 32
    40ce:	51 e4       	ldi	r21, 0x41	; 65
    40d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d4:	dc 01       	movw	r26, r24
    40d6:	cb 01       	movw	r24, r22
    40d8:	bc 01       	movw	r22, r24
    40da:	cd 01       	movw	r24, r26
    40dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	9f 83       	std	Y+7, r25	; 0x07
    40e6:	8e 83       	std	Y+6, r24	; 0x06
    40e8:	0f c0       	rjmp	.+30     	; 0x4108 <LCD_read_data_4bit+0x72e>
    40ea:	80 e9       	ldi	r24, 0x90	; 144
    40ec:	91 e0       	ldi	r25, 0x01	; 1
    40ee:	9d 83       	std	Y+5, r25	; 0x05
    40f0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40f2:	8c 81       	ldd	r24, Y+4	; 0x04
    40f4:	9d 81       	ldd	r25, Y+5	; 0x05
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	f1 f7       	brne	.-4      	; 0x40f6 <LCD_read_data_4bit+0x71c>
    40fa:	9d 83       	std	Y+5, r25	; 0x05
    40fc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4100:	9f 81       	ldd	r25, Y+7	; 0x07
    4102:	01 97       	sbiw	r24, 0x01	; 1
    4104:	9f 83       	std	Y+7, r25	; 0x07
    4106:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4108:	8e 81       	ldd	r24, Y+6	; 0x06
    410a:	9f 81       	ldd	r25, Y+7	; 0x07
    410c:	00 97       	sbiw	r24, 0x00	; 0
    410e:	69 f7       	brne	.-38     	; 0x40ea <LCD_read_data_4bit+0x710>
    4110:	24 c0       	rjmp	.+72     	; 0x415a <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4112:	68 85       	ldd	r22, Y+8	; 0x08
    4114:	79 85       	ldd	r23, Y+9	; 0x09
    4116:	8a 85       	ldd	r24, Y+10	; 0x0a
    4118:	9b 85       	ldd	r25, Y+11	; 0x0b
    411a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	9f 83       	std	Y+7, r25	; 0x07
    4124:	8e 83       	std	Y+6, r24	; 0x06
    4126:	8e 81       	ldd	r24, Y+6	; 0x06
    4128:	9f 81       	ldd	r25, Y+7	; 0x07
    412a:	9b 83       	std	Y+3, r25	; 0x03
    412c:	8a 83       	std	Y+2, r24	; 0x02
    412e:	8a 81       	ldd	r24, Y+2	; 0x02
    4130:	9b 81       	ldd	r25, Y+3	; 0x03
    4132:	01 97       	sbiw	r24, 0x01	; 1
    4134:	f1 f7       	brne	.-4      	; 0x4132 <LCD_read_data_4bit+0x758>
    4136:	9b 83       	std	Y+3, r25	; 0x03
    4138:	8a 83       	std	Y+2, r24	; 0x02
    413a:	0f c0       	rjmp	.+30     	; 0x415a <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    413c:	69 89       	ldd	r22, Y+17	; 0x11
    413e:	7a 89       	ldd	r23, Y+18	; 0x12
    4140:	8b 89       	ldd	r24, Y+19	; 0x13
    4142:	9c 89       	ldd	r25, Y+20	; 0x14
    4144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4148:	dc 01       	movw	r26, r24
    414a:	cb 01       	movw	r24, r22
    414c:	88 8b       	std	Y+16, r24	; 0x10
    414e:	88 89       	ldd	r24, Y+16	; 0x10
    4150:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4152:	89 81       	ldd	r24, Y+1	; 0x01
    4154:	8a 95       	dec	r24
    4156:	f1 f7       	brne	.-4      	; 0x4154 <LCD_read_data_4bit+0x77a>
    4158:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    415a:	82 e0       	ldi	r24, 0x02	; 2
    415c:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <DIO_u8_get_port>
    4160:	98 2f       	mov	r25, r24
    4162:	de 01       	movw	r26, r28
    4164:	af 59       	subi	r26, 0x9F	; 159
    4166:	bf 4f       	sbci	r27, 0xFF	; 255
    4168:	fe 01       	movw	r30, r28
    416a:	ef 59       	subi	r30, 0x9F	; 159
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	80 81       	ld	r24, Z
    4170:	89 2b       	or	r24, r25
    4172:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4174:	82 e0       	ldi	r24, 0x02	; 2
    4176:	60 e0       	ldi	r22, 0x00	; 0
    4178:	0e 94 a6 2a 	call	0x554c	; 0x554c <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    417c:	de 01       	movw	r26, r28
    417e:	af 59       	subi	r26, 0x9F	; 159
    4180:	bf 4f       	sbci	r27, 0xFF	; 255
    4182:	fe 01       	movw	r30, r28
    4184:	ef 59       	subi	r30, 0x9F	; 159
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	80 81       	ld	r24, Z
    418a:	8f 77       	andi	r24, 0x7F	; 127
    418c:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    418e:	82 e0       	ldi	r24, 0x02	; 2
    4190:	67 e0       	ldi	r22, 0x07	; 7
    4192:	4f ef       	ldi	r20, 0xFF	; 255
    4194:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4198:	82 e0       	ldi	r24, 0x02	; 2
    419a:	66 e0       	ldi	r22, 0x06	; 6
    419c:	4f ef       	ldi	r20, 0xFF	; 255
    419e:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	65 e0       	ldi	r22, 0x05	; 5
    41a6:	4f ef       	ldi	r20, 0xFF	; 255
    41a8:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    41ac:	82 e0       	ldi	r24, 0x02	; 2
    41ae:	64 e0       	ldi	r22, 0x04	; 4
    41b0:	4f ef       	ldi	r20, 0xFF	; 255
    41b2:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    41b6:	fe 01       	movw	r30, r28
    41b8:	ef 59       	subi	r30, 0x9F	; 159
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 81       	ld	r24, Z
}
    41be:	cf 59       	subi	r28, 0x9F	; 159
    41c0:	df 4f       	sbci	r29, 0xFF	; 255
    41c2:	0f b6       	in	r0, 0x3f	; 63
    41c4:	f8 94       	cli
    41c6:	de bf       	out	0x3e, r29	; 62
    41c8:	0f be       	out	0x3f, r0	; 63
    41ca:	cd bf       	out	0x3d, r28	; 61
    41cc:	cf 91       	pop	r28
    41ce:	df 91       	pop	r29
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	08 95       	ret

000041d6 <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    41d6:	0f 93       	push	r16
    41d8:	1f 93       	push	r17
    41da:	df 93       	push	r29
    41dc:	cf 93       	push	r28
    41de:	cd b7       	in	r28, 0x3d	; 61
    41e0:	de b7       	in	r29, 0x3e	; 62
    41e2:	cc 54       	subi	r28, 0x4C	; 76
    41e4:	d0 40       	sbci	r29, 0x00	; 0
    41e6:	0f b6       	in	r0, 0x3f	; 63
    41e8:	f8 94       	cli
    41ea:	de bf       	out	0x3e, r29	; 62
    41ec:	0f be       	out	0x3f, r0	; 63
    41ee:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    41f0:	82 e0       	ldi	r24, 0x02	; 2
    41f2:	67 e0       	ldi	r22, 0x07	; 7
    41f4:	4f ef       	ldi	r20, 0xFF	; 255
    41f6:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    41fa:	82 e0       	ldi	r24, 0x02	; 2
    41fc:	66 e0       	ldi	r22, 0x06	; 6
    41fe:	4f ef       	ldi	r20, 0xFF	; 255
    4200:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4204:	82 e0       	ldi	r24, 0x02	; 2
    4206:	65 e0       	ldi	r22, 0x05	; 5
    4208:	4f ef       	ldi	r20, 0xFF	; 255
    420a:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    420e:	82 e0       	ldi	r24, 0x02	; 2
    4210:	64 e0       	ldi	r22, 0x04	; 4
    4212:	4f ef       	ldi	r20, 0xFF	; 255
    4214:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    4218:	82 e0       	ldi	r24, 0x02	; 2
    421a:	60 e0       	ldi	r22, 0x00	; 0
    421c:	4f ef       	ldi	r20, 0xFF	; 255
    421e:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    4222:	82 e0       	ldi	r24, 0x02	; 2
    4224:	61 e0       	ldi	r22, 0x01	; 1
    4226:	4f ef       	ldi	r20, 0xFF	; 255
    4228:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    422c:	82 e0       	ldi	r24, 0x02	; 2
    422e:	62 e0       	ldi	r22, 0x02	; 2
    4230:	4f ef       	ldi	r20, 0xFF	; 255
    4232:	0e 94 5e 29 	call	0x52bc	; 0x52bc <DIO_void_set_pin_dir>
    4236:	fe 01       	movw	r30, r28
    4238:	e7 5b       	subi	r30, 0xB7	; 183
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	a8 e4       	ldi	r26, 0x48	; 72
    4242:	b2 e4       	ldi	r27, 0x42	; 66
    4244:	80 83       	st	Z, r24
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	a2 83       	std	Z+2, r26	; 0x02
    424a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424c:	8e 01       	movw	r16, r28
    424e:	0b 5b       	subi	r16, 0xBB	; 187
    4250:	1f 4f       	sbci	r17, 0xFF	; 255
    4252:	fe 01       	movw	r30, r28
    4254:	e7 5b       	subi	r30, 0xB7	; 183
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	60 81       	ld	r22, Z
    425a:	71 81       	ldd	r23, Z+1	; 0x01
    425c:	82 81       	ldd	r24, Z+2	; 0x02
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	4a e7       	ldi	r20, 0x7A	; 122
    4266:	55 e4       	ldi	r21, 0x45	; 69
    4268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	f8 01       	movw	r30, r16
    4272:	80 83       	st	Z, r24
    4274:	91 83       	std	Z+1, r25	; 0x01
    4276:	a2 83       	std	Z+2, r26	; 0x02
    4278:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    427a:	fe 01       	movw	r30, r28
    427c:	eb 5b       	subi	r30, 0xBB	; 187
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	60 81       	ld	r22, Z
    4282:	71 81       	ldd	r23, Z+1	; 0x01
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e8       	ldi	r20, 0x80	; 128
    428e:	5f e3       	ldi	r21, 0x3F	; 63
    4290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4294:	88 23       	and	r24, r24
    4296:	44 f4       	brge	.+16     	; 0x42a8 <LCD_init+0xd2>
		__ticks = 1;
    4298:	fe 01       	movw	r30, r28
    429a:	ed 5b       	subi	r30, 0xBD	; 189
    429c:	ff 4f       	sbci	r31, 0xFF	; 255
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	91 83       	std	Z+1, r25	; 0x01
    42a4:	80 83       	st	Z, r24
    42a6:	64 c0       	rjmp	.+200    	; 0x4370 <LCD_init+0x19a>
	else if (__tmp > 65535)
    42a8:	fe 01       	movw	r30, r28
    42aa:	eb 5b       	subi	r30, 0xBB	; 187
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	60 81       	ld	r22, Z
    42b0:	71 81       	ldd	r23, Z+1	; 0x01
    42b2:	82 81       	ldd	r24, Z+2	; 0x02
    42b4:	93 81       	ldd	r25, Z+3	; 0x03
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	3f ef       	ldi	r19, 0xFF	; 255
    42ba:	4f e7       	ldi	r20, 0x7F	; 127
    42bc:	57 e4       	ldi	r21, 0x47	; 71
    42be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42c2:	18 16       	cp	r1, r24
    42c4:	0c f0       	brlt	.+2      	; 0x42c8 <LCD_init+0xf2>
    42c6:	43 c0       	rjmp	.+134    	; 0x434e <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c8:	fe 01       	movw	r30, r28
    42ca:	e7 5b       	subi	r30, 0xB7	; 183
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	60 81       	ld	r22, Z
    42d0:	71 81       	ldd	r23, Z+1	; 0x01
    42d2:	82 81       	ldd	r24, Z+2	; 0x02
    42d4:	93 81       	ldd	r25, Z+3	; 0x03
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	40 e2       	ldi	r20, 0x20	; 32
    42dc:	51 e4       	ldi	r21, 0x41	; 65
    42de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	8e 01       	movw	r16, r28
    42e8:	0d 5b       	subi	r16, 0xBD	; 189
    42ea:	1f 4f       	sbci	r17, 0xFF	; 255
    42ec:	bc 01       	movw	r22, r24
    42ee:	cd 01       	movw	r24, r26
    42f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	f8 01       	movw	r30, r16
    42fa:	91 83       	std	Z+1, r25	; 0x01
    42fc:	80 83       	st	Z, r24
    42fe:	1f c0       	rjmp	.+62     	; 0x433e <LCD_init+0x168>
    4300:	fe 01       	movw	r30, r28
    4302:	ef 5b       	subi	r30, 0xBF	; 191
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	80 e9       	ldi	r24, 0x90	; 144
    4308:	91 e0       	ldi	r25, 0x01	; 1
    430a:	91 83       	std	Z+1, r25	; 0x01
    430c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    430e:	fe 01       	movw	r30, r28
    4310:	ef 5b       	subi	r30, 0xBF	; 191
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	80 81       	ld	r24, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <LCD_init+0x142>
    431c:	fe 01       	movw	r30, r28
    431e:	ef 5b       	subi	r30, 0xBF	; 191
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	91 83       	std	Z+1, r25	; 0x01
    4324:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4326:	de 01       	movw	r26, r28
    4328:	ad 5b       	subi	r26, 0xBD	; 189
    432a:	bf 4f       	sbci	r27, 0xFF	; 255
    432c:	fe 01       	movw	r30, r28
    432e:	ed 5b       	subi	r30, 0xBD	; 189
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	80 81       	ld	r24, Z
    4334:	91 81       	ldd	r25, Z+1	; 0x01
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	11 96       	adiw	r26, 0x01	; 1
    433a:	9c 93       	st	X, r25
    433c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433e:	fe 01       	movw	r30, r28
    4340:	ed 5b       	subi	r30, 0xBD	; 189
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	00 97       	sbiw	r24, 0x00	; 0
    434a:	d1 f6       	brne	.-76     	; 0x4300 <LCD_init+0x12a>
    434c:	24 c0       	rjmp	.+72     	; 0x4396 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    434e:	8e 01       	movw	r16, r28
    4350:	0d 5b       	subi	r16, 0xBD	; 189
    4352:	1f 4f       	sbci	r17, 0xFF	; 255
    4354:	fe 01       	movw	r30, r28
    4356:	eb 5b       	subi	r30, 0xBB	; 187
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	f8 01       	movw	r30, r16
    436c:	91 83       	std	Z+1, r25	; 0x01
    436e:	80 83       	st	Z, r24
    4370:	fe 01       	movw	r30, r28
    4372:	ed 5b       	subi	r30, 0xBD	; 189
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	fe 01       	movw	r30, r28
    437c:	ff 96       	adiw	r30, 0x3f	; 63
    437e:	91 83       	std	Z+1, r25	; 0x01
    4380:	80 83       	st	Z, r24
    4382:	fe 01       	movw	r30, r28
    4384:	ff 96       	adiw	r30, 0x3f	; 63
    4386:	80 81       	ld	r24, Z
    4388:	91 81       	ldd	r25, Z+1	; 0x01
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <LCD_init+0x1b4>
    438e:	fe 01       	movw	r30, r28
    4390:	ff 96       	adiw	r30, 0x3f	; 63
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    4396:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <LCD_function_set_4bit>
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	a8 e4       	ldi	r26, 0x48	; 72
    43a0:	b2 e4       	ldi	r27, 0x42	; 66
    43a2:	8b af       	std	Y+59, r24	; 0x3b
    43a4:	9c af       	std	Y+60, r25	; 0x3c
    43a6:	ad af       	std	Y+61, r26	; 0x3d
    43a8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    43aa:	6b ad       	ldd	r22, Y+59	; 0x3b
    43ac:	7c ad       	ldd	r23, Y+60	; 0x3c
    43ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    43b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    43b2:	2b ea       	ldi	r18, 0xAB	; 171
    43b4:	3a ea       	ldi	r19, 0xAA	; 170
    43b6:	4a ea       	ldi	r20, 0xAA	; 170
    43b8:	50 e4       	ldi	r21, 0x40	; 64
    43ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	8f ab       	std	Y+55, r24	; 0x37
    43c4:	98 af       	std	Y+56, r25	; 0x38
    43c6:	a9 af       	std	Y+57, r26	; 0x39
    43c8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    43ca:	6f a9       	ldd	r22, Y+55	; 0x37
    43cc:	78 ad       	ldd	r23, Y+56	; 0x38
    43ce:	89 ad       	ldd	r24, Y+57	; 0x39
    43d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e8       	ldi	r20, 0x80	; 128
    43d8:	5f e3       	ldi	r21, 0x3F	; 63
    43da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43de:	88 23       	and	r24, r24
    43e0:	1c f4       	brge	.+6      	; 0x43e8 <LCD_init+0x212>
		__ticks = 1;
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	8e ab       	std	Y+54, r24	; 0x36
    43e6:	91 c0       	rjmp	.+290    	; 0x450a <LCD_init+0x334>
	else if (__tmp > 255)
    43e8:	6f a9       	ldd	r22, Y+55	; 0x37
    43ea:	78 ad       	ldd	r23, Y+56	; 0x38
    43ec:	89 ad       	ldd	r24, Y+57	; 0x39
    43ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	4f e7       	ldi	r20, 0x7F	; 127
    43f6:	53 e4       	ldi	r21, 0x43	; 67
    43f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43fc:	18 16       	cp	r1, r24
    43fe:	0c f0       	brlt	.+2      	; 0x4402 <LCD_init+0x22c>
    4400:	7b c0       	rjmp	.+246    	; 0x44f8 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    4402:	6b ad       	ldd	r22, Y+59	; 0x3b
    4404:	7c ad       	ldd	r23, Y+60	; 0x3c
    4406:	8d ad       	ldd	r24, Y+61	; 0x3d
    4408:	9e ad       	ldd	r25, Y+62	; 0x3e
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	4a e7       	ldi	r20, 0x7A	; 122
    4410:	54 e4       	ldi	r21, 0x44	; 68
    4412:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	8a ab       	std	Y+50, r24	; 0x32
    441c:	9b ab       	std	Y+51, r25	; 0x33
    441e:	ac ab       	std	Y+52, r26	; 0x34
    4420:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4422:	6a a9       	ldd	r22, Y+50	; 0x32
    4424:	7b a9       	ldd	r23, Y+51	; 0x33
    4426:	8c a9       	ldd	r24, Y+52	; 0x34
    4428:	9d a9       	ldd	r25, Y+53	; 0x35
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a e7       	ldi	r20, 0x7A	; 122
    4430:	55 e4       	ldi	r21, 0x45	; 69
    4432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	8e a7       	std	Y+46, r24	; 0x2e
    443c:	9f a7       	std	Y+47, r25	; 0x2f
    443e:	a8 ab       	std	Y+48, r26	; 0x30
    4440:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    4442:	6e a5       	ldd	r22, Y+46	; 0x2e
    4444:	7f a5       	ldd	r23, Y+47	; 0x2f
    4446:	88 a9       	ldd	r24, Y+48	; 0x30
    4448:	99 a9       	ldd	r25, Y+49	; 0x31
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e8       	ldi	r20, 0x80	; 128
    4450:	5f e3       	ldi	r21, 0x3F	; 63
    4452:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4456:	88 23       	and	r24, r24
    4458:	2c f4       	brge	.+10     	; 0x4464 <LCD_init+0x28e>
		__ticks = 1;
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	9d a7       	std	Y+45, r25	; 0x2d
    4460:	8c a7       	std	Y+44, r24	; 0x2c
    4462:	3f c0       	rjmp	.+126    	; 0x44e2 <LCD_init+0x30c>
	else if (__tmp > 65535)
    4464:	6e a5       	ldd	r22, Y+46	; 0x2e
    4466:	7f a5       	ldd	r23, Y+47	; 0x2f
    4468:	88 a9       	ldd	r24, Y+48	; 0x30
    446a:	99 a9       	ldd	r25, Y+49	; 0x31
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	3f ef       	ldi	r19, 0xFF	; 255
    4470:	4f e7       	ldi	r20, 0x7F	; 127
    4472:	57 e4       	ldi	r21, 0x47	; 71
    4474:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4478:	18 16       	cp	r1, r24
    447a:	4c f5       	brge	.+82     	; 0x44ce <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	6a a9       	ldd	r22, Y+50	; 0x32
    447e:	7b a9       	ldd	r23, Y+51	; 0x33
    4480:	8c a9       	ldd	r24, Y+52	; 0x34
    4482:	9d a9       	ldd	r25, Y+53	; 0x35
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e2       	ldi	r20, 0x20	; 32
    448a:	51 e4       	ldi	r21, 0x41	; 65
    448c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	bc 01       	movw	r22, r24
    4496:	cd 01       	movw	r24, r26
    4498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	9d a7       	std	Y+45, r25	; 0x2d
    44a2:	8c a7       	std	Y+44, r24	; 0x2c
    44a4:	0f c0       	rjmp	.+30     	; 0x44c4 <LCD_init+0x2ee>
    44a6:	80 e9       	ldi	r24, 0x90	; 144
    44a8:	91 e0       	ldi	r25, 0x01	; 1
    44aa:	9b a7       	std	Y+43, r25	; 0x2b
    44ac:	8a a7       	std	Y+42, r24	; 0x2a
    44ae:	8a a5       	ldd	r24, Y+42	; 0x2a
    44b0:	9b a5       	ldd	r25, Y+43	; 0x2b
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <LCD_init+0x2dc>
    44b6:	9b a7       	std	Y+43, r25	; 0x2b
    44b8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    44bc:	9d a5       	ldd	r25, Y+45	; 0x2d
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	9d a7       	std	Y+45, r25	; 0x2d
    44c2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    44c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	69 f7       	brne	.-38     	; 0x44a6 <LCD_init+0x2d0>
    44cc:	24 c0       	rjmp	.+72     	; 0x4516 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ce:	6e a5       	ldd	r22, Y+46	; 0x2e
    44d0:	7f a5       	ldd	r23, Y+47	; 0x2f
    44d2:	88 a9       	ldd	r24, Y+48	; 0x30
    44d4:	99 a9       	ldd	r25, Y+49	; 0x31
    44d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	9d a7       	std	Y+45, r25	; 0x2d
    44e0:	8c a7       	std	Y+44, r24	; 0x2c
    44e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    44e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    44e6:	99 a7       	std	Y+41, r25	; 0x29
    44e8:	88 a7       	std	Y+40, r24	; 0x28
    44ea:	88 a5       	ldd	r24, Y+40	; 0x28
    44ec:	99 a5       	ldd	r25, Y+41	; 0x29
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <LCD_init+0x318>
    44f2:	99 a7       	std	Y+41, r25	; 0x29
    44f4:	88 a7       	std	Y+40, r24	; 0x28
    44f6:	0f c0       	rjmp	.+30     	; 0x4516 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44f8:	6f a9       	ldd	r22, Y+55	; 0x37
    44fa:	78 ad       	ldd	r23, Y+56	; 0x38
    44fc:	89 ad       	ldd	r24, Y+57	; 0x39
    44fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    4500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4504:	dc 01       	movw	r26, r24
    4506:	cb 01       	movw	r24, r22
    4508:	8e ab       	std	Y+54, r24	; 0x36
    450a:	8e a9       	ldd	r24, Y+54	; 0x36
    450c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    450e:	8f a1       	ldd	r24, Y+39	; 0x27
    4510:	8a 95       	dec	r24
    4512:	f1 f7       	brne	.-4      	; 0x4510 <LCD_init+0x33a>
    4514:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    4516:	8c e0       	ldi	r24, 0x0C	; 12
    4518:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_write_cmd_4bit>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	a8 e4       	ldi	r26, 0x48	; 72
    4522:	b2 e4       	ldi	r27, 0x42	; 66
    4524:	8b a3       	std	Y+35, r24	; 0x23
    4526:	9c a3       	std	Y+36, r25	; 0x24
    4528:	ad a3       	std	Y+37, r26	; 0x25
    452a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    452c:	6b a1       	ldd	r22, Y+35	; 0x23
    452e:	7c a1       	ldd	r23, Y+36	; 0x24
    4530:	8d a1       	ldd	r24, Y+37	; 0x25
    4532:	9e a1       	ldd	r25, Y+38	; 0x26
    4534:	2b ea       	ldi	r18, 0xAB	; 171
    4536:	3a ea       	ldi	r19, 0xAA	; 170
    4538:	4a ea       	ldi	r20, 0xAA	; 170
    453a:	50 e4       	ldi	r21, 0x40	; 64
    453c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	8f 8f       	std	Y+31, r24	; 0x1f
    4546:	98 a3       	std	Y+32, r25	; 0x20
    4548:	a9 a3       	std	Y+33, r26	; 0x21
    454a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    454c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    454e:	78 a1       	ldd	r23, Y+32	; 0x20
    4550:	89 a1       	ldd	r24, Y+33	; 0x21
    4552:	9a a1       	ldd	r25, Y+34	; 0x22
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	40 e8       	ldi	r20, 0x80	; 128
    455a:	5f e3       	ldi	r21, 0x3F	; 63
    455c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4560:	88 23       	and	r24, r24
    4562:	1c f4       	brge	.+6      	; 0x456a <LCD_init+0x394>
		__ticks = 1;
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	8e 8f       	std	Y+30, r24	; 0x1e
    4568:	91 c0       	rjmp	.+290    	; 0x468c <LCD_init+0x4b6>
	else if (__tmp > 255)
    456a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    456c:	78 a1       	ldd	r23, Y+32	; 0x20
    456e:	89 a1       	ldd	r24, Y+33	; 0x21
    4570:	9a a1       	ldd	r25, Y+34	; 0x22
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	4f e7       	ldi	r20, 0x7F	; 127
    4578:	53 e4       	ldi	r21, 0x43	; 67
    457a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    457e:	18 16       	cp	r1, r24
    4580:	0c f0       	brlt	.+2      	; 0x4584 <LCD_init+0x3ae>
    4582:	7b c0       	rjmp	.+246    	; 0x467a <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    4584:	6b a1       	ldd	r22, Y+35	; 0x23
    4586:	7c a1       	ldd	r23, Y+36	; 0x24
    4588:	8d a1       	ldd	r24, Y+37	; 0x25
    458a:	9e a1       	ldd	r25, Y+38	; 0x26
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	4a e7       	ldi	r20, 0x7A	; 122
    4592:	54 e4       	ldi	r21, 0x44	; 68
    4594:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	8a 8f       	std	Y+26, r24	; 0x1a
    459e:	9b 8f       	std	Y+27, r25	; 0x1b
    45a0:	ac 8f       	std	Y+28, r26	; 0x1c
    45a2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    45a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    45a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    45aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	4a e7       	ldi	r20, 0x7A	; 122
    45b2:	55 e4       	ldi	r21, 0x45	; 69
    45b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	8e 8b       	std	Y+22, r24	; 0x16
    45be:	9f 8b       	std	Y+23, r25	; 0x17
    45c0:	a8 8f       	std	Y+24, r26	; 0x18
    45c2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    45c4:	6e 89       	ldd	r22, Y+22	; 0x16
    45c6:	7f 89       	ldd	r23, Y+23	; 0x17
    45c8:	88 8d       	ldd	r24, Y+24	; 0x18
    45ca:	99 8d       	ldd	r25, Y+25	; 0x19
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e8       	ldi	r20, 0x80	; 128
    45d2:	5f e3       	ldi	r21, 0x3F	; 63
    45d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45d8:	88 23       	and	r24, r24
    45da:	2c f4       	brge	.+10     	; 0x45e6 <LCD_init+0x410>
		__ticks = 1;
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	9d 8b       	std	Y+21, r25	; 0x15
    45e2:	8c 8b       	std	Y+20, r24	; 0x14
    45e4:	3f c0       	rjmp	.+126    	; 0x4664 <LCD_init+0x48e>
	else if (__tmp > 65535)
    45e6:	6e 89       	ldd	r22, Y+22	; 0x16
    45e8:	7f 89       	ldd	r23, Y+23	; 0x17
    45ea:	88 8d       	ldd	r24, Y+24	; 0x18
    45ec:	99 8d       	ldd	r25, Y+25	; 0x19
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	3f ef       	ldi	r19, 0xFF	; 255
    45f2:	4f e7       	ldi	r20, 0x7F	; 127
    45f4:	57 e4       	ldi	r21, 0x47	; 71
    45f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45fa:	18 16       	cp	r1, r24
    45fc:	4c f5       	brge	.+82     	; 0x4650 <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4600:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4602:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4604:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4606:	20 e0       	ldi	r18, 0x00	; 0
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	40 e2       	ldi	r20, 0x20	; 32
    460c:	51 e4       	ldi	r21, 0x41	; 65
    460e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4612:	dc 01       	movw	r26, r24
    4614:	cb 01       	movw	r24, r22
    4616:	bc 01       	movw	r22, r24
    4618:	cd 01       	movw	r24, r26
    461a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	9d 8b       	std	Y+21, r25	; 0x15
    4624:	8c 8b       	std	Y+20, r24	; 0x14
    4626:	0f c0       	rjmp	.+30     	; 0x4646 <LCD_init+0x470>
    4628:	80 e9       	ldi	r24, 0x90	; 144
    462a:	91 e0       	ldi	r25, 0x01	; 1
    462c:	9b 8b       	std	Y+19, r25	; 0x13
    462e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4630:	8a 89       	ldd	r24, Y+18	; 0x12
    4632:	9b 89       	ldd	r25, Y+19	; 0x13
    4634:	01 97       	sbiw	r24, 0x01	; 1
    4636:	f1 f7       	brne	.-4      	; 0x4634 <LCD_init+0x45e>
    4638:	9b 8b       	std	Y+19, r25	; 0x13
    463a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    463c:	8c 89       	ldd	r24, Y+20	; 0x14
    463e:	9d 89       	ldd	r25, Y+21	; 0x15
    4640:	01 97       	sbiw	r24, 0x01	; 1
    4642:	9d 8b       	std	Y+21, r25	; 0x15
    4644:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4646:	8c 89       	ldd	r24, Y+20	; 0x14
    4648:	9d 89       	ldd	r25, Y+21	; 0x15
    464a:	00 97       	sbiw	r24, 0x00	; 0
    464c:	69 f7       	brne	.-38     	; 0x4628 <LCD_init+0x452>
    464e:	24 c0       	rjmp	.+72     	; 0x4698 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4650:	6e 89       	ldd	r22, Y+22	; 0x16
    4652:	7f 89       	ldd	r23, Y+23	; 0x17
    4654:	88 8d       	ldd	r24, Y+24	; 0x18
    4656:	99 8d       	ldd	r25, Y+25	; 0x19
    4658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	9d 8b       	std	Y+21, r25	; 0x15
    4662:	8c 8b       	std	Y+20, r24	; 0x14
    4664:	8c 89       	ldd	r24, Y+20	; 0x14
    4666:	9d 89       	ldd	r25, Y+21	; 0x15
    4668:	99 8b       	std	Y+17, r25	; 0x11
    466a:	88 8b       	std	Y+16, r24	; 0x10
    466c:	88 89       	ldd	r24, Y+16	; 0x10
    466e:	99 89       	ldd	r25, Y+17	; 0x11
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	f1 f7       	brne	.-4      	; 0x4670 <LCD_init+0x49a>
    4674:	99 8b       	std	Y+17, r25	; 0x11
    4676:	88 8b       	std	Y+16, r24	; 0x10
    4678:	0f c0       	rjmp	.+30     	; 0x4698 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    467a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    467c:	78 a1       	ldd	r23, Y+32	; 0x20
    467e:	89 a1       	ldd	r24, Y+33	; 0x21
    4680:	9a a1       	ldd	r25, Y+34	; 0x22
    4682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	8e 8f       	std	Y+30, r24	; 0x1e
    468c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    468e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4690:	8f 85       	ldd	r24, Y+15	; 0x0f
    4692:	8a 95       	dec	r24
    4694:	f1 f7       	brne	.-4      	; 0x4692 <LCD_init+0x4bc>
    4696:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_write_cmd_4bit>
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	a0 e0       	ldi	r26, 0x00	; 0
    46a4:	b0 e4       	ldi	r27, 0x40	; 64
    46a6:	8b 87       	std	Y+11, r24	; 0x0b
    46a8:	9c 87       	std	Y+12, r25	; 0x0c
    46aa:	ad 87       	std	Y+13, r26	; 0x0d
    46ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	4a e7       	ldi	r20, 0x7A	; 122
    46bc:	55 e4       	ldi	r21, 0x45	; 69
    46be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	8f 83       	std	Y+7, r24	; 0x07
    46c8:	98 87       	std	Y+8, r25	; 0x08
    46ca:	a9 87       	std	Y+9, r26	; 0x09
    46cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46ce:	6f 81       	ldd	r22, Y+7	; 0x07
    46d0:	78 85       	ldd	r23, Y+8	; 0x08
    46d2:	89 85       	ldd	r24, Y+9	; 0x09
    46d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	40 e8       	ldi	r20, 0x80	; 128
    46dc:	5f e3       	ldi	r21, 0x3F	; 63
    46de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46e2:	88 23       	and	r24, r24
    46e4:	2c f4       	brge	.+10     	; 0x46f0 <LCD_init+0x51a>
		__ticks = 1;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	9e 83       	std	Y+6, r25	; 0x06
    46ec:	8d 83       	std	Y+5, r24	; 0x05
    46ee:	3f c0       	rjmp	.+126    	; 0x476e <LCD_init+0x598>
	else if (__tmp > 65535)
    46f0:	6f 81       	ldd	r22, Y+7	; 0x07
    46f2:	78 85       	ldd	r23, Y+8	; 0x08
    46f4:	89 85       	ldd	r24, Y+9	; 0x09
    46f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	3f ef       	ldi	r19, 0xFF	; 255
    46fc:	4f e7       	ldi	r20, 0x7F	; 127
    46fe:	57 e4       	ldi	r21, 0x47	; 71
    4700:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4704:	18 16       	cp	r1, r24
    4706:	4c f5       	brge	.+82     	; 0x475a <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4708:	6b 85       	ldd	r22, Y+11	; 0x0b
    470a:	7c 85       	ldd	r23, Y+12	; 0x0c
    470c:	8d 85       	ldd	r24, Y+13	; 0x0d
    470e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	40 e2       	ldi	r20, 0x20	; 32
    4716:	51 e4       	ldi	r21, 0x41	; 65
    4718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	9e 83       	std	Y+6, r25	; 0x06
    472e:	8d 83       	std	Y+5, r24	; 0x05
    4730:	0f c0       	rjmp	.+30     	; 0x4750 <LCD_init+0x57a>
    4732:	80 e9       	ldi	r24, 0x90	; 144
    4734:	91 e0       	ldi	r25, 0x01	; 1
    4736:	9c 83       	std	Y+4, r25	; 0x04
    4738:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    473a:	8b 81       	ldd	r24, Y+3	; 0x03
    473c:	9c 81       	ldd	r25, Y+4	; 0x04
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <LCD_init+0x568>
    4742:	9c 83       	std	Y+4, r25	; 0x04
    4744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4746:	8d 81       	ldd	r24, Y+5	; 0x05
    4748:	9e 81       	ldd	r25, Y+6	; 0x06
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	9e 83       	std	Y+6, r25	; 0x06
    474e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4750:	8d 81       	ldd	r24, Y+5	; 0x05
    4752:	9e 81       	ldd	r25, Y+6	; 0x06
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	69 f7       	brne	.-38     	; 0x4732 <LCD_init+0x55c>
    4758:	14 c0       	rjmp	.+40     	; 0x4782 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475a:	6f 81       	ldd	r22, Y+7	; 0x07
    475c:	78 85       	ldd	r23, Y+8	; 0x08
    475e:	89 85       	ldd	r24, Y+9	; 0x09
    4760:	9a 85       	ldd	r25, Y+10	; 0x0a
    4762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	9e 83       	std	Y+6, r25	; 0x06
    476c:	8d 83       	std	Y+5, r24	; 0x05
    476e:	8d 81       	ldd	r24, Y+5	; 0x05
    4770:	9e 81       	ldd	r25, Y+6	; 0x06
    4772:	9a 83       	std	Y+2, r25	; 0x02
    4774:	89 83       	std	Y+1, r24	; 0x01
    4776:	89 81       	ldd	r24, Y+1	; 0x01
    4778:	9a 81       	ldd	r25, Y+2	; 0x02
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <LCD_init+0x5a4>
    477e:	9a 83       	std	Y+2, r25	; 0x02
    4780:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    4782:	c4 5b       	subi	r28, 0xB4	; 180
    4784:	df 4f       	sbci	r29, 0xFF	; 255
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	cf 91       	pop	r28
    4792:	df 91       	pop	r29
    4794:	1f 91       	pop	r17
    4796:	0f 91       	pop	r16
    4798:	08 95       	ret

0000479a <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    479a:	df 93       	push	r29
    479c:	cf 93       	push	r28
    479e:	cd b7       	in	r28, 0x3d	; 61
    47a0:	de b7       	in	r29, 0x3e	; 62
    47a2:	6b 97       	sbiw	r28, 0x1b	; 27
    47a4:	0f b6       	in	r0, 0x3f	; 63
    47a6:	f8 94       	cli
    47a8:	de bf       	out	0x3e, r29	; 62
    47aa:	0f be       	out	0x3f, r0	; 63
    47ac:	cd bf       	out	0x3d, r28	; 61
    47ae:	8a 8f       	std	Y+26, r24	; 0x1a
    47b0:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    47b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    47b4:	88 2f       	mov	r24, r24
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	02 96       	adiw	r24, 0x02	; 2
    47ba:	00 24       	eor	r0, r0
    47bc:	96 95       	lsr	r25
    47be:	87 95       	ror	r24
    47c0:	07 94       	ror	r0
    47c2:	96 95       	lsr	r25
    47c4:	87 95       	ror	r24
    47c6:	07 94       	ror	r0
    47c8:	98 2f       	mov	r25, r24
    47ca:	80 2d       	mov	r24, r0
    47cc:	98 2f       	mov	r25, r24
    47ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47d0:	89 0f       	add	r24, r25
    47d2:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    47d4:	89 8d       	ldd	r24, Y+25	; 0x19
    47d6:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_write_cmd_4bit>
    47da:	80 e0       	ldi	r24, 0x00	; 0
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	a8 e4       	ldi	r26, 0x48	; 72
    47e0:	b2 e4       	ldi	r27, 0x42	; 66
    47e2:	8d 8b       	std	Y+21, r24	; 0x15
    47e4:	9e 8b       	std	Y+22, r25	; 0x16
    47e6:	af 8b       	std	Y+23, r26	; 0x17
    47e8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    47ea:	6d 89       	ldd	r22, Y+21	; 0x15
    47ec:	7e 89       	ldd	r23, Y+22	; 0x16
    47ee:	8f 89       	ldd	r24, Y+23	; 0x17
    47f0:	98 8d       	ldd	r25, Y+24	; 0x18
    47f2:	2b ea       	ldi	r18, 0xAB	; 171
    47f4:	3a ea       	ldi	r19, 0xAA	; 170
    47f6:	4a ea       	ldi	r20, 0xAA	; 170
    47f8:	50 e4       	ldi	r21, 0x40	; 64
    47fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fe:	dc 01       	movw	r26, r24
    4800:	cb 01       	movw	r24, r22
    4802:	89 8b       	std	Y+17, r24	; 0x11
    4804:	9a 8b       	std	Y+18, r25	; 0x12
    4806:	ab 8b       	std	Y+19, r26	; 0x13
    4808:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    480a:	69 89       	ldd	r22, Y+17	; 0x11
    480c:	7a 89       	ldd	r23, Y+18	; 0x12
    480e:	8b 89       	ldd	r24, Y+19	; 0x13
    4810:	9c 89       	ldd	r25, Y+20	; 0x14
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e8       	ldi	r20, 0x80	; 128
    4818:	5f e3       	ldi	r21, 0x3F	; 63
    481a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    481e:	88 23       	and	r24, r24
    4820:	1c f4       	brge	.+6      	; 0x4828 <LCD_set_cursor+0x8e>
		__ticks = 1;
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	88 8b       	std	Y+16, r24	; 0x10
    4826:	91 c0       	rjmp	.+290    	; 0x494a <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    4828:	69 89       	ldd	r22, Y+17	; 0x11
    482a:	7a 89       	ldd	r23, Y+18	; 0x12
    482c:	8b 89       	ldd	r24, Y+19	; 0x13
    482e:	9c 89       	ldd	r25, Y+20	; 0x14
    4830:	20 e0       	ldi	r18, 0x00	; 0
    4832:	30 e0       	ldi	r19, 0x00	; 0
    4834:	4f e7       	ldi	r20, 0x7F	; 127
    4836:	53 e4       	ldi	r21, 0x43	; 67
    4838:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483c:	18 16       	cp	r1, r24
    483e:	0c f0       	brlt	.+2      	; 0x4842 <LCD_set_cursor+0xa8>
    4840:	7b c0       	rjmp	.+246    	; 0x4938 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    4842:	6d 89       	ldd	r22, Y+21	; 0x15
    4844:	7e 89       	ldd	r23, Y+22	; 0x16
    4846:	8f 89       	ldd	r24, Y+23	; 0x17
    4848:	98 8d       	ldd	r25, Y+24	; 0x18
    484a:	20 e0       	ldi	r18, 0x00	; 0
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	4a e7       	ldi	r20, 0x7A	; 122
    4850:	54 e4       	ldi	r21, 0x44	; 68
    4852:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4856:	dc 01       	movw	r26, r24
    4858:	cb 01       	movw	r24, r22
    485a:	8c 87       	std	Y+12, r24	; 0x0c
    485c:	9d 87       	std	Y+13, r25	; 0x0d
    485e:	ae 87       	std	Y+14, r26	; 0x0e
    4860:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4862:	6c 85       	ldd	r22, Y+12	; 0x0c
    4864:	7d 85       	ldd	r23, Y+13	; 0x0d
    4866:	8e 85       	ldd	r24, Y+14	; 0x0e
    4868:	9f 85       	ldd	r25, Y+15	; 0x0f
    486a:	20 e0       	ldi	r18, 0x00	; 0
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	4a e7       	ldi	r20, 0x7A	; 122
    4870:	55 e4       	ldi	r21, 0x45	; 69
    4872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4876:	dc 01       	movw	r26, r24
    4878:	cb 01       	movw	r24, r22
    487a:	88 87       	std	Y+8, r24	; 0x08
    487c:	99 87       	std	Y+9, r25	; 0x09
    487e:	aa 87       	std	Y+10, r26	; 0x0a
    4880:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4882:	68 85       	ldd	r22, Y+8	; 0x08
    4884:	79 85       	ldd	r23, Y+9	; 0x09
    4886:	8a 85       	ldd	r24, Y+10	; 0x0a
    4888:	9b 85       	ldd	r25, Y+11	; 0x0b
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	40 e8       	ldi	r20, 0x80	; 128
    4890:	5f e3       	ldi	r21, 0x3F	; 63
    4892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4896:	88 23       	and	r24, r24
    4898:	2c f4       	brge	.+10     	; 0x48a4 <LCD_set_cursor+0x10a>
		__ticks = 1;
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	9f 83       	std	Y+7, r25	; 0x07
    48a0:	8e 83       	std	Y+6, r24	; 0x06
    48a2:	3f c0       	rjmp	.+126    	; 0x4922 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    48a4:	68 85       	ldd	r22, Y+8	; 0x08
    48a6:	79 85       	ldd	r23, Y+9	; 0x09
    48a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    48aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    48ac:	20 e0       	ldi	r18, 0x00	; 0
    48ae:	3f ef       	ldi	r19, 0xFF	; 255
    48b0:	4f e7       	ldi	r20, 0x7F	; 127
    48b2:	57 e4       	ldi	r21, 0x47	; 71
    48b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48b8:	18 16       	cp	r1, r24
    48ba:	4c f5       	brge	.+82     	; 0x490e <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    48be:	7d 85       	ldd	r23, Y+13	; 0x0d
    48c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    48c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	40 e2       	ldi	r20, 0x20	; 32
    48ca:	51 e4       	ldi	r21, 0x41	; 65
    48cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	bc 01       	movw	r22, r24
    48d6:	cd 01       	movw	r24, r26
    48d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	9f 83       	std	Y+7, r25	; 0x07
    48e2:	8e 83       	std	Y+6, r24	; 0x06
    48e4:	0f c0       	rjmp	.+30     	; 0x4904 <LCD_set_cursor+0x16a>
    48e6:	80 e9       	ldi	r24, 0x90	; 144
    48e8:	91 e0       	ldi	r25, 0x01	; 1
    48ea:	9d 83       	std	Y+5, r25	; 0x05
    48ec:	8c 83       	std	Y+4, r24	; 0x04
    48ee:	8c 81       	ldd	r24, Y+4	; 0x04
    48f0:	9d 81       	ldd	r25, Y+5	; 0x05
    48f2:	01 97       	sbiw	r24, 0x01	; 1
    48f4:	f1 f7       	brne	.-4      	; 0x48f2 <LCD_set_cursor+0x158>
    48f6:	9d 83       	std	Y+5, r25	; 0x05
    48f8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48fa:	8e 81       	ldd	r24, Y+6	; 0x06
    48fc:	9f 81       	ldd	r25, Y+7	; 0x07
    48fe:	01 97       	sbiw	r24, 0x01	; 1
    4900:	9f 83       	std	Y+7, r25	; 0x07
    4902:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4904:	8e 81       	ldd	r24, Y+6	; 0x06
    4906:	9f 81       	ldd	r25, Y+7	; 0x07
    4908:	00 97       	sbiw	r24, 0x00	; 0
    490a:	69 f7       	brne	.-38     	; 0x48e6 <LCD_set_cursor+0x14c>
    490c:	24 c0       	rjmp	.+72     	; 0x4956 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    490e:	68 85       	ldd	r22, Y+8	; 0x08
    4910:	79 85       	ldd	r23, Y+9	; 0x09
    4912:	8a 85       	ldd	r24, Y+10	; 0x0a
    4914:	9b 85       	ldd	r25, Y+11	; 0x0b
    4916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	9f 83       	std	Y+7, r25	; 0x07
    4920:	8e 83       	std	Y+6, r24	; 0x06
    4922:	8e 81       	ldd	r24, Y+6	; 0x06
    4924:	9f 81       	ldd	r25, Y+7	; 0x07
    4926:	9b 83       	std	Y+3, r25	; 0x03
    4928:	8a 83       	std	Y+2, r24	; 0x02
    492a:	8a 81       	ldd	r24, Y+2	; 0x02
    492c:	9b 81       	ldd	r25, Y+3	; 0x03
    492e:	01 97       	sbiw	r24, 0x01	; 1
    4930:	f1 f7       	brne	.-4      	; 0x492e <LCD_set_cursor+0x194>
    4932:	9b 83       	std	Y+3, r25	; 0x03
    4934:	8a 83       	std	Y+2, r24	; 0x02
    4936:	0f c0       	rjmp	.+30     	; 0x4956 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4938:	69 89       	ldd	r22, Y+17	; 0x11
    493a:	7a 89       	ldd	r23, Y+18	; 0x12
    493c:	8b 89       	ldd	r24, Y+19	; 0x13
    493e:	9c 89       	ldd	r25, Y+20	; 0x14
    4940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	88 8b       	std	Y+16, r24	; 0x10
    494a:	88 89       	ldd	r24, Y+16	; 0x10
    494c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    494e:	89 81       	ldd	r24, Y+1	; 0x01
    4950:	8a 95       	dec	r24
    4952:	f1 f7       	brne	.-4      	; 0x4950 <LCD_set_cursor+0x1b6>
    4954:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    4956:	6b 96       	adiw	r28, 0x1b	; 27
    4958:	0f b6       	in	r0, 0x3f	; 63
    495a:	f8 94       	cli
    495c:	de bf       	out	0x3e, r29	; 62
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	cd bf       	out	0x3d, r28	; 61
    4962:	cf 91       	pop	r28
    4964:	df 91       	pop	r29
    4966:	08 95       	ret

00004968 <LCD_clear>:

void LCD_clear(void){
    4968:	df 93       	push	r29
    496a:	cf 93       	push	r28
    496c:	cd b7       	in	r28, 0x3d	; 61
    496e:	de b7       	in	r29, 0x3e	; 62
    4970:	6c 97       	sbiw	r28, 0x1c	; 28
    4972:	0f b6       	in	r0, 0x3f	; 63
    4974:	f8 94       	cli
    4976:	de bf       	out	0x3e, r29	; 62
    4978:	0f be       	out	0x3f, r0	; 63
    497a:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_write_cmd_4bit>
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	a0 e0       	ldi	r26, 0x00	; 0
    4988:	b0 e4       	ldi	r27, 0x40	; 64
    498a:	89 8f       	std	Y+25, r24	; 0x19
    498c:	9a 8f       	std	Y+26, r25	; 0x1a
    498e:	ab 8f       	std	Y+27, r26	; 0x1b
    4990:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4992:	69 8d       	ldd	r22, Y+25	; 0x19
    4994:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4996:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4998:	9c 8d       	ldd	r25, Y+28	; 0x1c
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	4a e7       	ldi	r20, 0x7A	; 122
    49a0:	55 e4       	ldi	r21, 0x45	; 69
    49a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a6:	dc 01       	movw	r26, r24
    49a8:	cb 01       	movw	r24, r22
    49aa:	8d 8b       	std	Y+21, r24	; 0x15
    49ac:	9e 8b       	std	Y+22, r25	; 0x16
    49ae:	af 8b       	std	Y+23, r26	; 0x17
    49b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49b2:	6d 89       	ldd	r22, Y+21	; 0x15
    49b4:	7e 89       	ldd	r23, Y+22	; 0x16
    49b6:	8f 89       	ldd	r24, Y+23	; 0x17
    49b8:	98 8d       	ldd	r25, Y+24	; 0x18
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	40 e8       	ldi	r20, 0x80	; 128
    49c0:	5f e3       	ldi	r21, 0x3F	; 63
    49c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49c6:	88 23       	and	r24, r24
    49c8:	2c f4       	brge	.+10     	; 0x49d4 <LCD_clear+0x6c>
		__ticks = 1;
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	9c 8b       	std	Y+20, r25	; 0x14
    49d0:	8b 8b       	std	Y+19, r24	; 0x13
    49d2:	3f c0       	rjmp	.+126    	; 0x4a52 <LCD_clear+0xea>
	else if (__tmp > 65535)
    49d4:	6d 89       	ldd	r22, Y+21	; 0x15
    49d6:	7e 89       	ldd	r23, Y+22	; 0x16
    49d8:	8f 89       	ldd	r24, Y+23	; 0x17
    49da:	98 8d       	ldd	r25, Y+24	; 0x18
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	3f ef       	ldi	r19, 0xFF	; 255
    49e0:	4f e7       	ldi	r20, 0x7F	; 127
    49e2:	57 e4       	ldi	r21, 0x47	; 71
    49e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49e8:	18 16       	cp	r1, r24
    49ea:	4c f5       	brge	.+82     	; 0x4a3e <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ec:	69 8d       	ldd	r22, Y+25	; 0x19
    49ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49f4:	20 e0       	ldi	r18, 0x00	; 0
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	40 e2       	ldi	r20, 0x20	; 32
    49fa:	51 e4       	ldi	r21, 0x41	; 65
    49fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	bc 01       	movw	r22, r24
    4a06:	cd 01       	movw	r24, r26
    4a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	9c 8b       	std	Y+20, r25	; 0x14
    4a12:	8b 8b       	std	Y+19, r24	; 0x13
    4a14:	0f c0       	rjmp	.+30     	; 0x4a34 <LCD_clear+0xcc>
    4a16:	80 e9       	ldi	r24, 0x90	; 144
    4a18:	91 e0       	ldi	r25, 0x01	; 1
    4a1a:	9a 8b       	std	Y+18, r25	; 0x12
    4a1c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a1e:	89 89       	ldd	r24, Y+17	; 0x11
    4a20:	9a 89       	ldd	r25, Y+18	; 0x12
    4a22:	01 97       	sbiw	r24, 0x01	; 1
    4a24:	f1 f7       	brne	.-4      	; 0x4a22 <LCD_clear+0xba>
    4a26:	9a 8b       	std	Y+18, r25	; 0x12
    4a28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a2e:	01 97       	sbiw	r24, 0x01	; 1
    4a30:	9c 8b       	std	Y+20, r25	; 0x14
    4a32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a34:	8b 89       	ldd	r24, Y+19	; 0x13
    4a36:	9c 89       	ldd	r25, Y+20	; 0x14
    4a38:	00 97       	sbiw	r24, 0x00	; 0
    4a3a:	69 f7       	brne	.-38     	; 0x4a16 <LCD_clear+0xae>
    4a3c:	14 c0       	rjmp	.+40     	; 0x4a66 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a40:	7e 89       	ldd	r23, Y+22	; 0x16
    4a42:	8f 89       	ldd	r24, Y+23	; 0x17
    4a44:	98 8d       	ldd	r25, Y+24	; 0x18
    4a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	9c 8b       	std	Y+20, r25	; 0x14
    4a50:	8b 8b       	std	Y+19, r24	; 0x13
    4a52:	8b 89       	ldd	r24, Y+19	; 0x13
    4a54:	9c 89       	ldd	r25, Y+20	; 0x14
    4a56:	98 8b       	std	Y+16, r25	; 0x10
    4a58:	8f 87       	std	Y+15, r24	; 0x0f
    4a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a5c:	98 89       	ldd	r25, Y+16	; 0x10
    4a5e:	01 97       	sbiw	r24, 0x01	; 1
    4a60:	f1 f7       	brne	.-4      	; 0x4a5e <LCD_clear+0xf6>
    4a62:	98 8b       	std	Y+16, r25	; 0x10
    4a64:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_write_cmd_4bit>
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	a0 e0       	ldi	r26, 0x00	; 0
    4a72:	b0 e4       	ldi	r27, 0x40	; 64
    4a74:	8b 87       	std	Y+11, r24	; 0x0b
    4a76:	9c 87       	std	Y+12, r25	; 0x0c
    4a78:	ad 87       	std	Y+13, r26	; 0x0d
    4a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a84:	20 e0       	ldi	r18, 0x00	; 0
    4a86:	30 e0       	ldi	r19, 0x00	; 0
    4a88:	4a e7       	ldi	r20, 0x7A	; 122
    4a8a:	55 e4       	ldi	r21, 0x45	; 69
    4a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a90:	dc 01       	movw	r26, r24
    4a92:	cb 01       	movw	r24, r22
    4a94:	8f 83       	std	Y+7, r24	; 0x07
    4a96:	98 87       	std	Y+8, r25	; 0x08
    4a98:	a9 87       	std	Y+9, r26	; 0x09
    4a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a9e:	78 85       	ldd	r23, Y+8	; 0x08
    4aa0:	89 85       	ldd	r24, Y+9	; 0x09
    4aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa4:	20 e0       	ldi	r18, 0x00	; 0
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	40 e8       	ldi	r20, 0x80	; 128
    4aaa:	5f e3       	ldi	r21, 0x3F	; 63
    4aac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ab0:	88 23       	and	r24, r24
    4ab2:	2c f4       	brge	.+10     	; 0x4abe <LCD_clear+0x156>
		__ticks = 1;
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	9e 83       	std	Y+6, r25	; 0x06
    4aba:	8d 83       	std	Y+5, r24	; 0x05
    4abc:	3f c0       	rjmp	.+126    	; 0x4b3c <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    4abe:	6f 81       	ldd	r22, Y+7	; 0x07
    4ac0:	78 85       	ldd	r23, Y+8	; 0x08
    4ac2:	89 85       	ldd	r24, Y+9	; 0x09
    4ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ac6:	20 e0       	ldi	r18, 0x00	; 0
    4ac8:	3f ef       	ldi	r19, 0xFF	; 255
    4aca:	4f e7       	ldi	r20, 0x7F	; 127
    4acc:	57 e4       	ldi	r21, 0x47	; 71
    4ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ad2:	18 16       	cp	r1, r24
    4ad4:	4c f5       	brge	.+82     	; 0x4b28 <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    4adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ade:	20 e0       	ldi	r18, 0x00	; 0
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	40 e2       	ldi	r20, 0x20	; 32
    4ae4:	51 e4       	ldi	r21, 0x41	; 65
    4ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	bc 01       	movw	r22, r24
    4af0:	cd 01       	movw	r24, r26
    4af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af6:	dc 01       	movw	r26, r24
    4af8:	cb 01       	movw	r24, r22
    4afa:	9e 83       	std	Y+6, r25	; 0x06
    4afc:	8d 83       	std	Y+5, r24	; 0x05
    4afe:	0f c0       	rjmp	.+30     	; 0x4b1e <LCD_clear+0x1b6>
    4b00:	80 e9       	ldi	r24, 0x90	; 144
    4b02:	91 e0       	ldi	r25, 0x01	; 1
    4b04:	9c 83       	std	Y+4, r25	; 0x04
    4b06:	8b 83       	std	Y+3, r24	; 0x03
    4b08:	8b 81       	ldd	r24, Y+3	; 0x03
    4b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b0c:	01 97       	sbiw	r24, 0x01	; 1
    4b0e:	f1 f7       	brne	.-4      	; 0x4b0c <LCD_clear+0x1a4>
    4b10:	9c 83       	std	Y+4, r25	; 0x04
    4b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b14:	8d 81       	ldd	r24, Y+5	; 0x05
    4b16:	9e 81       	ldd	r25, Y+6	; 0x06
    4b18:	01 97       	sbiw	r24, 0x01	; 1
    4b1a:	9e 83       	std	Y+6, r25	; 0x06
    4b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b20:	9e 81       	ldd	r25, Y+6	; 0x06
    4b22:	00 97       	sbiw	r24, 0x00	; 0
    4b24:	69 f7       	brne	.-38     	; 0x4b00 <LCD_clear+0x198>
    4b26:	14 c0       	rjmp	.+40     	; 0x4b50 <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b28:	6f 81       	ldd	r22, Y+7	; 0x07
    4b2a:	78 85       	ldd	r23, Y+8	; 0x08
    4b2c:	89 85       	ldd	r24, Y+9	; 0x09
    4b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b34:	dc 01       	movw	r26, r24
    4b36:	cb 01       	movw	r24, r22
    4b38:	9e 83       	std	Y+6, r25	; 0x06
    4b3a:	8d 83       	std	Y+5, r24	; 0x05
    4b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b40:	9a 83       	std	Y+2, r25	; 0x02
    4b42:	89 83       	std	Y+1, r24	; 0x01
    4b44:	89 81       	ldd	r24, Y+1	; 0x01
    4b46:	9a 81       	ldd	r25, Y+2	; 0x02
    4b48:	01 97       	sbiw	r24, 0x01	; 1
    4b4a:	f1 f7       	brne	.-4      	; 0x4b48 <LCD_clear+0x1e0>
    4b4c:	9a 83       	std	Y+2, r25	; 0x02
    4b4e:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    4b50:	6c 96       	adiw	r28, 0x1c	; 28
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	f8 94       	cli
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	cd bf       	out	0x3d, r28	; 61
    4b5c:	cf 91       	pop	r28
    4b5e:	df 91       	pop	r29
    4b60:	08 95       	ret

00004b62 <LCD_off>:

void LCD_off(void ){
    4b62:	df 93       	push	r29
    4b64:	cf 93       	push	r28
    4b66:	cd b7       	in	r28, 0x3d	; 61
    4b68:	de b7       	in	r29, 0x3e	; 62
    4b6a:	2e 97       	sbiw	r28, 0x0e	; 14
    4b6c:	0f b6       	in	r0, 0x3f	; 63
    4b6e:	f8 94       	cli
    4b70:	de bf       	out	0x3e, r29	; 62
    4b72:	0f be       	out	0x3f, r0	; 63
    4b74:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    4b76:	88 e0       	ldi	r24, 0x08	; 8
    4b78:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_write_cmd_4bit>
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	a8 e4       	ldi	r26, 0x48	; 72
    4b82:	b2 e4       	ldi	r27, 0x42	; 66
    4b84:	8b 87       	std	Y+11, r24	; 0x0b
    4b86:	9c 87       	std	Y+12, r25	; 0x0c
    4b88:	ad 87       	std	Y+13, r26	; 0x0d
    4b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	4a e7       	ldi	r20, 0x7A	; 122
    4b9a:	55 e4       	ldi	r21, 0x45	; 69
    4b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	8f 83       	std	Y+7, r24	; 0x07
    4ba6:	98 87       	std	Y+8, r25	; 0x08
    4ba8:	a9 87       	std	Y+9, r26	; 0x09
    4baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bac:	6f 81       	ldd	r22, Y+7	; 0x07
    4bae:	78 85       	ldd	r23, Y+8	; 0x08
    4bb0:	89 85       	ldd	r24, Y+9	; 0x09
    4bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e8       	ldi	r20, 0x80	; 128
    4bba:	5f e3       	ldi	r21, 0x3F	; 63
    4bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc0:	88 23       	and	r24, r24
    4bc2:	2c f4       	brge	.+10     	; 0x4bce <LCD_off+0x6c>
		__ticks = 1;
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	9e 83       	std	Y+6, r25	; 0x06
    4bca:	8d 83       	std	Y+5, r24	; 0x05
    4bcc:	3f c0       	rjmp	.+126    	; 0x4c4c <LCD_off+0xea>
	else if (__tmp > 65535)
    4bce:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd0:	78 85       	ldd	r23, Y+8	; 0x08
    4bd2:	89 85       	ldd	r24, Y+9	; 0x09
    4bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	3f ef       	ldi	r19, 0xFF	; 255
    4bda:	4f e7       	ldi	r20, 0x7F	; 127
    4bdc:	57 e4       	ldi	r21, 0x47	; 71
    4bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be2:	18 16       	cp	r1, r24
    4be4:	4c f5       	brge	.+82     	; 0x4c38 <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	40 e2       	ldi	r20, 0x20	; 32
    4bf4:	51 e4       	ldi	r21, 0x41	; 65
    4bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	bc 01       	movw	r22, r24
    4c00:	cd 01       	movw	r24, r26
    4c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	9e 83       	std	Y+6, r25	; 0x06
    4c0c:	8d 83       	std	Y+5, r24	; 0x05
    4c0e:	0f c0       	rjmp	.+30     	; 0x4c2e <LCD_off+0xcc>
    4c10:	80 e9       	ldi	r24, 0x90	; 144
    4c12:	91 e0       	ldi	r25, 0x01	; 1
    4c14:	9c 83       	std	Y+4, r25	; 0x04
    4c16:	8b 83       	std	Y+3, r24	; 0x03
    4c18:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c1c:	01 97       	sbiw	r24, 0x01	; 1
    4c1e:	f1 f7       	brne	.-4      	; 0x4c1c <LCD_off+0xba>
    4c20:	9c 83       	std	Y+4, r25	; 0x04
    4c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c24:	8d 81       	ldd	r24, Y+5	; 0x05
    4c26:	9e 81       	ldd	r25, Y+6	; 0x06
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c30:	9e 81       	ldd	r25, Y+6	; 0x06
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	69 f7       	brne	.-38     	; 0x4c10 <LCD_off+0xae>
    4c36:	14 c0       	rjmp	.+40     	; 0x4c60 <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c38:	6f 81       	ldd	r22, Y+7	; 0x07
    4c3a:	78 85       	ldd	r23, Y+8	; 0x08
    4c3c:	89 85       	ldd	r24, Y+9	; 0x09
    4c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	9e 83       	std	Y+6, r25	; 0x06
    4c4a:	8d 83       	std	Y+5, r24	; 0x05
    4c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c50:	9a 83       	std	Y+2, r25	; 0x02
    4c52:	89 83       	std	Y+1, r24	; 0x01
    4c54:	89 81       	ldd	r24, Y+1	; 0x01
    4c56:	9a 81       	ldd	r25, Y+2	; 0x02
    4c58:	01 97       	sbiw	r24, 0x01	; 1
    4c5a:	f1 f7       	brne	.-4      	; 0x4c58 <LCD_off+0xf6>
    4c5c:	9a 83       	std	Y+2, r25	; 0x02
    4c5e:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    4c60:	2e 96       	adiw	r28, 0x0e	; 14
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	f8 94       	cli
    4c66:	de bf       	out	0x3e, r29	; 62
    4c68:	0f be       	out	0x3f, r0	; 63
    4c6a:	cd bf       	out	0x3d, r28	; 61
    4c6c:	cf 91       	pop	r28
    4c6e:	df 91       	pop	r29
    4c70:	08 95       	ret

00004c72 <LCD_on>:

void LCD_on(void ){
    4c72:	df 93       	push	r29
    4c74:	cf 93       	push	r28
    4c76:	cd b7       	in	r28, 0x3d	; 61
    4c78:	de b7       	in	r29, 0x3e	; 62
    4c7a:	68 97       	sbiw	r28, 0x18	; 24
    4c7c:	0f b6       	in	r0, 0x3f	; 63
    4c7e:	f8 94       	cli
    4c80:	de bf       	out	0x3e, r29	; 62
    4c82:	0f be       	out	0x3f, r0	; 63
    4c84:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    4c86:	8c e0       	ldi	r24, 0x0C	; 12
    4c88:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_write_cmd_4bit>
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	a8 e4       	ldi	r26, 0x48	; 72
    4c92:	b2 e4       	ldi	r27, 0x42	; 66
    4c94:	8d 8b       	std	Y+21, r24	; 0x15
    4c96:	9e 8b       	std	Y+22, r25	; 0x16
    4c98:	af 8b       	std	Y+23, r26	; 0x17
    4c9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c9c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c9e:	7e 89       	ldd	r23, Y+22	; 0x16
    4ca0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ca2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ca4:	2b ea       	ldi	r18, 0xAB	; 171
    4ca6:	3a ea       	ldi	r19, 0xAA	; 170
    4ca8:	4a ea       	ldi	r20, 0xAA	; 170
    4caa:	50 e4       	ldi	r21, 0x40	; 64
    4cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	89 8b       	std	Y+17, r24	; 0x11
    4cb6:	9a 8b       	std	Y+18, r25	; 0x12
    4cb8:	ab 8b       	std	Y+19, r26	; 0x13
    4cba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4cbc:	69 89       	ldd	r22, Y+17	; 0x11
    4cbe:	7a 89       	ldd	r23, Y+18	; 0x12
    4cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e8       	ldi	r20, 0x80	; 128
    4cca:	5f e3       	ldi	r21, 0x3F	; 63
    4ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cd0:	88 23       	and	r24, r24
    4cd2:	1c f4       	brge	.+6      	; 0x4cda <LCD_on+0x68>
		__ticks = 1;
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	88 8b       	std	Y+16, r24	; 0x10
    4cd8:	91 c0       	rjmp	.+290    	; 0x4dfc <LCD_on+0x18a>
	else if (__tmp > 255)
    4cda:	69 89       	ldd	r22, Y+17	; 0x11
    4cdc:	7a 89       	ldd	r23, Y+18	; 0x12
    4cde:	8b 89       	ldd	r24, Y+19	; 0x13
    4ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    4ce2:	20 e0       	ldi	r18, 0x00	; 0
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	4f e7       	ldi	r20, 0x7F	; 127
    4ce8:	53 e4       	ldi	r21, 0x43	; 67
    4cea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cee:	18 16       	cp	r1, r24
    4cf0:	0c f0       	brlt	.+2      	; 0x4cf4 <LCD_on+0x82>
    4cf2:	7b c0       	rjmp	.+246    	; 0x4dea <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    4cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    4cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    4cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    4cfc:	20 e0       	ldi	r18, 0x00	; 0
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	4a e7       	ldi	r20, 0x7A	; 122
    4d02:	54 e4       	ldi	r21, 0x44	; 68
    4d04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d08:	dc 01       	movw	r26, r24
    4d0a:	cb 01       	movw	r24, r22
    4d0c:	8c 87       	std	Y+12, r24	; 0x0c
    4d0e:	9d 87       	std	Y+13, r25	; 0x0d
    4d10:	ae 87       	std	Y+14, r26	; 0x0e
    4d12:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d14:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d16:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d18:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d1a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	4a e7       	ldi	r20, 0x7A	; 122
    4d22:	55 e4       	ldi	r21, 0x45	; 69
    4d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	88 87       	std	Y+8, r24	; 0x08
    4d2e:	99 87       	std	Y+9, r25	; 0x09
    4d30:	aa 87       	std	Y+10, r26	; 0x0a
    4d32:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d34:	68 85       	ldd	r22, Y+8	; 0x08
    4d36:	79 85       	ldd	r23, Y+9	; 0x09
    4d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	40 e8       	ldi	r20, 0x80	; 128
    4d42:	5f e3       	ldi	r21, 0x3F	; 63
    4d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d48:	88 23       	and	r24, r24
    4d4a:	2c f4       	brge	.+10     	; 0x4d56 <LCD_on+0xe4>
		__ticks = 1;
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	9f 83       	std	Y+7, r25	; 0x07
    4d52:	8e 83       	std	Y+6, r24	; 0x06
    4d54:	3f c0       	rjmp	.+126    	; 0x4dd4 <LCD_on+0x162>
	else if (__tmp > 65535)
    4d56:	68 85       	ldd	r22, Y+8	; 0x08
    4d58:	79 85       	ldd	r23, Y+9	; 0x09
    4d5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	3f ef       	ldi	r19, 0xFF	; 255
    4d62:	4f e7       	ldi	r20, 0x7F	; 127
    4d64:	57 e4       	ldi	r21, 0x47	; 71
    4d66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d6a:	18 16       	cp	r1, r24
    4d6c:	4c f5       	brge	.+82     	; 0x4dc0 <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d6e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d70:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d72:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d74:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	40 e2       	ldi	r20, 0x20	; 32
    4d7c:	51 e4       	ldi	r21, 0x41	; 65
    4d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d82:	dc 01       	movw	r26, r24
    4d84:	cb 01       	movw	r24, r22
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d8e:	dc 01       	movw	r26, r24
    4d90:	cb 01       	movw	r24, r22
    4d92:	9f 83       	std	Y+7, r25	; 0x07
    4d94:	8e 83       	std	Y+6, r24	; 0x06
    4d96:	0f c0       	rjmp	.+30     	; 0x4db6 <LCD_on+0x144>
    4d98:	80 e9       	ldi	r24, 0x90	; 144
    4d9a:	91 e0       	ldi	r25, 0x01	; 1
    4d9c:	9d 83       	std	Y+5, r25	; 0x05
    4d9e:	8c 83       	std	Y+4, r24	; 0x04
    4da0:	8c 81       	ldd	r24, Y+4	; 0x04
    4da2:	9d 81       	ldd	r25, Y+5	; 0x05
    4da4:	01 97       	sbiw	r24, 0x01	; 1
    4da6:	f1 f7       	brne	.-4      	; 0x4da4 <LCD_on+0x132>
    4da8:	9d 83       	std	Y+5, r25	; 0x05
    4daa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dac:	8e 81       	ldd	r24, Y+6	; 0x06
    4dae:	9f 81       	ldd	r25, Y+7	; 0x07
    4db0:	01 97       	sbiw	r24, 0x01	; 1
    4db2:	9f 83       	std	Y+7, r25	; 0x07
    4db4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db6:	8e 81       	ldd	r24, Y+6	; 0x06
    4db8:	9f 81       	ldd	r25, Y+7	; 0x07
    4dba:	00 97       	sbiw	r24, 0x00	; 0
    4dbc:	69 f7       	brne	.-38     	; 0x4d98 <LCD_on+0x126>
    4dbe:	24 c0       	rjmp	.+72     	; 0x4e08 <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc0:	68 85       	ldd	r22, Y+8	; 0x08
    4dc2:	79 85       	ldd	r23, Y+9	; 0x09
    4dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	9f 83       	std	Y+7, r25	; 0x07
    4dd2:	8e 83       	std	Y+6, r24	; 0x06
    4dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    4dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    4dd8:	9b 83       	std	Y+3, r25	; 0x03
    4dda:	8a 83       	std	Y+2, r24	; 0x02
    4ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dde:	9b 81       	ldd	r25, Y+3	; 0x03
    4de0:	01 97       	sbiw	r24, 0x01	; 1
    4de2:	f1 f7       	brne	.-4      	; 0x4de0 <LCD_on+0x16e>
    4de4:	9b 83       	std	Y+3, r25	; 0x03
    4de6:	8a 83       	std	Y+2, r24	; 0x02
    4de8:	0f c0       	rjmp	.+30     	; 0x4e08 <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4dea:	69 89       	ldd	r22, Y+17	; 0x11
    4dec:	7a 89       	ldd	r23, Y+18	; 0x12
    4dee:	8b 89       	ldd	r24, Y+19	; 0x13
    4df0:	9c 89       	ldd	r25, Y+20	; 0x14
    4df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	88 8b       	std	Y+16, r24	; 0x10
    4dfc:	88 89       	ldd	r24, Y+16	; 0x10
    4dfe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
    4e02:	8a 95       	dec	r24
    4e04:	f1 f7       	brne	.-4      	; 0x4e02 <LCD_on+0x190>
    4e06:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    4e08:	68 96       	adiw	r28, 0x18	; 24
    4e0a:	0f b6       	in	r0, 0x3f	; 63
    4e0c:	f8 94       	cli
    4e0e:	de bf       	out	0x3e, r29	; 62
    4e10:	0f be       	out	0x3f, r0	; 63
    4e12:	cd bf       	out	0x3d, r28	; 61
    4e14:	cf 91       	pop	r28
    4e16:	df 91       	pop	r29
    4e18:	08 95       	ret

00004e1a <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    4e1a:	df 93       	push	r29
    4e1c:	cf 93       	push	r28
    4e1e:	00 d0       	rcall	.+0      	; 0x4e20 <LCD_create_char+0x6>
    4e20:	0f 92       	push	r0
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
    4e26:	9a 83       	std	Y+2, r25	; 0x02
    4e28:	89 83       	std	Y+1, r24	; 0x01
    4e2a:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    4e2c:	0f 90       	pop	r0
    4e2e:	0f 90       	pop	r0
    4e30:	0f 90       	pop	r0
    4e32:	cf 91       	pop	r28
    4e34:	df 91       	pop	r29
    4e36:	08 95       	ret

00004e38 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    4e38:	df 93       	push	r29
    4e3a:	cf 93       	push	r28
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62
    4e40:	69 97       	sbiw	r28, 0x19	; 25
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	f8 94       	cli
    4e46:	de bf       	out	0x3e, r29	; 62
    4e48:	0f be       	out	0x3f, r0	; 63
    4e4a:	cd bf       	out	0x3d, r28	; 61
    4e4c:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    4e4e:	89 8d       	ldd	r24, Y+25	; 0x19
    4e50:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <LCD_write_data_4bit>
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	90 e0       	ldi	r25, 0x00	; 0
    4e58:	a8 e4       	ldi	r26, 0x48	; 72
    4e5a:	b2 e4       	ldi	r27, 0x42	; 66
    4e5c:	8d 8b       	std	Y+21, r24	; 0x15
    4e5e:	9e 8b       	std	Y+22, r25	; 0x16
    4e60:	af 8b       	std	Y+23, r26	; 0x17
    4e62:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e64:	6d 89       	ldd	r22, Y+21	; 0x15
    4e66:	7e 89       	ldd	r23, Y+22	; 0x16
    4e68:	8f 89       	ldd	r24, Y+23	; 0x17
    4e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e6c:	2b ea       	ldi	r18, 0xAB	; 171
    4e6e:	3a ea       	ldi	r19, 0xAA	; 170
    4e70:	4a ea       	ldi	r20, 0xAA	; 170
    4e72:	50 e4       	ldi	r21, 0x40	; 64
    4e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e78:	dc 01       	movw	r26, r24
    4e7a:	cb 01       	movw	r24, r22
    4e7c:	89 8b       	std	Y+17, r24	; 0x11
    4e7e:	9a 8b       	std	Y+18, r25	; 0x12
    4e80:	ab 8b       	std	Y+19, r26	; 0x13
    4e82:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4e84:	69 89       	ldd	r22, Y+17	; 0x11
    4e86:	7a 89       	ldd	r23, Y+18	; 0x12
    4e88:	8b 89       	ldd	r24, Y+19	; 0x13
    4e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e8c:	20 e0       	ldi	r18, 0x00	; 0
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	40 e8       	ldi	r20, 0x80	; 128
    4e92:	5f e3       	ldi	r21, 0x3F	; 63
    4e94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e98:	88 23       	and	r24, r24
    4e9a:	1c f4       	brge	.+6      	; 0x4ea2 <LCD_write_char+0x6a>
		__ticks = 1;
    4e9c:	81 e0       	ldi	r24, 0x01	; 1
    4e9e:	88 8b       	std	Y+16, r24	; 0x10
    4ea0:	91 c0       	rjmp	.+290    	; 0x4fc4 <LCD_write_char+0x18c>
	else if (__tmp > 255)
    4ea2:	69 89       	ldd	r22, Y+17	; 0x11
    4ea4:	7a 89       	ldd	r23, Y+18	; 0x12
    4ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    4eaa:	20 e0       	ldi	r18, 0x00	; 0
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	4f e7       	ldi	r20, 0x7F	; 127
    4eb0:	53 e4       	ldi	r21, 0x43	; 67
    4eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eb6:	18 16       	cp	r1, r24
    4eb8:	0c f0       	brlt	.+2      	; 0x4ebc <LCD_write_char+0x84>
    4eba:	7b c0       	rjmp	.+246    	; 0x4fb2 <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    4ebc:	6d 89       	ldd	r22, Y+21	; 0x15
    4ebe:	7e 89       	ldd	r23, Y+22	; 0x16
    4ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	4a e7       	ldi	r20, 0x7A	; 122
    4eca:	54 e4       	ldi	r21, 0x44	; 68
    4ecc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	cb 01       	movw	r24, r22
    4ed4:	8c 87       	std	Y+12, r24	; 0x0c
    4ed6:	9d 87       	std	Y+13, r25	; 0x0d
    4ed8:	ae 87       	std	Y+14, r26	; 0x0e
    4eda:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4edc:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ede:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ee0:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ee2:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	4a e7       	ldi	r20, 0x7A	; 122
    4eea:	55 e4       	ldi	r21, 0x45	; 69
    4eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	cb 01       	movw	r24, r22
    4ef4:	88 87       	std	Y+8, r24	; 0x08
    4ef6:	99 87       	std	Y+9, r25	; 0x09
    4ef8:	aa 87       	std	Y+10, r26	; 0x0a
    4efa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4efc:	68 85       	ldd	r22, Y+8	; 0x08
    4efe:	79 85       	ldd	r23, Y+9	; 0x09
    4f00:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f02:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f04:	20 e0       	ldi	r18, 0x00	; 0
    4f06:	30 e0       	ldi	r19, 0x00	; 0
    4f08:	40 e8       	ldi	r20, 0x80	; 128
    4f0a:	5f e3       	ldi	r21, 0x3F	; 63
    4f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f10:	88 23       	and	r24, r24
    4f12:	2c f4       	brge	.+10     	; 0x4f1e <LCD_write_char+0xe6>
		__ticks = 1;
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	9f 83       	std	Y+7, r25	; 0x07
    4f1a:	8e 83       	std	Y+6, r24	; 0x06
    4f1c:	3f c0       	rjmp	.+126    	; 0x4f9c <LCD_write_char+0x164>
	else if (__tmp > 65535)
    4f1e:	68 85       	ldd	r22, Y+8	; 0x08
    4f20:	79 85       	ldd	r23, Y+9	; 0x09
    4f22:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f24:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f26:	20 e0       	ldi	r18, 0x00	; 0
    4f28:	3f ef       	ldi	r19, 0xFF	; 255
    4f2a:	4f e7       	ldi	r20, 0x7F	; 127
    4f2c:	57 e4       	ldi	r21, 0x47	; 71
    4f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f32:	18 16       	cp	r1, r24
    4f34:	4c f5       	brge	.+82     	; 0x4f88 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f36:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f38:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f3e:	20 e0       	ldi	r18, 0x00	; 0
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	40 e2       	ldi	r20, 0x20	; 32
    4f44:	51 e4       	ldi	r21, 0x41	; 65
    4f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	cb 01       	movw	r24, r22
    4f4e:	bc 01       	movw	r22, r24
    4f50:	cd 01       	movw	r24, r26
    4f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	9f 83       	std	Y+7, r25	; 0x07
    4f5c:	8e 83       	std	Y+6, r24	; 0x06
    4f5e:	0f c0       	rjmp	.+30     	; 0x4f7e <LCD_write_char+0x146>
    4f60:	80 e9       	ldi	r24, 0x90	; 144
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	9d 83       	std	Y+5, r25	; 0x05
    4f66:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4f68:	8c 81       	ldd	r24, Y+4	; 0x04
    4f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	f1 f7       	brne	.-4      	; 0x4f6c <LCD_write_char+0x134>
    4f70:	9d 83       	std	Y+5, r25	; 0x05
    4f72:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f74:	8e 81       	ldd	r24, Y+6	; 0x06
    4f76:	9f 81       	ldd	r25, Y+7	; 0x07
    4f78:	01 97       	sbiw	r24, 0x01	; 1
    4f7a:	9f 83       	std	Y+7, r25	; 0x07
    4f7c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f80:	9f 81       	ldd	r25, Y+7	; 0x07
    4f82:	00 97       	sbiw	r24, 0x00	; 0
    4f84:	69 f7       	brne	.-38     	; 0x4f60 <LCD_write_char+0x128>
    4f86:	24 c0       	rjmp	.+72     	; 0x4fd0 <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f88:	68 85       	ldd	r22, Y+8	; 0x08
    4f8a:	79 85       	ldd	r23, Y+9	; 0x09
    4f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f94:	dc 01       	movw	r26, r24
    4f96:	cb 01       	movw	r24, r22
    4f98:	9f 83       	std	Y+7, r25	; 0x07
    4f9a:	8e 83       	std	Y+6, r24	; 0x06
    4f9c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f9e:	9f 81       	ldd	r25, Y+7	; 0x07
    4fa0:	9b 83       	std	Y+3, r25	; 0x03
    4fa2:	8a 83       	std	Y+2, r24	; 0x02
    4fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa8:	01 97       	sbiw	r24, 0x01	; 1
    4faa:	f1 f7       	brne	.-4      	; 0x4fa8 <LCD_write_char+0x170>
    4fac:	9b 83       	std	Y+3, r25	; 0x03
    4fae:	8a 83       	std	Y+2, r24	; 0x02
    4fb0:	0f c0       	rjmp	.+30     	; 0x4fd0 <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4fb2:	69 89       	ldd	r22, Y+17	; 0x11
    4fb4:	7a 89       	ldd	r23, Y+18	; 0x12
    4fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    4fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    4fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fbe:	dc 01       	movw	r26, r24
    4fc0:	cb 01       	movw	r24, r22
    4fc2:	88 8b       	std	Y+16, r24	; 0x10
    4fc4:	88 89       	ldd	r24, Y+16	; 0x10
    4fc6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4fc8:	89 81       	ldd	r24, Y+1	; 0x01
    4fca:	8a 95       	dec	r24
    4fcc:	f1 f7       	brne	.-4      	; 0x4fca <LCD_write_char+0x192>
    4fce:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    4fd0:	69 96       	adiw	r28, 0x19	; 25
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61
    4fdc:	cf 91       	pop	r28
    4fde:	df 91       	pop	r29
    4fe0:	08 95       	ret

00004fe2 <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    4fe2:	df 93       	push	r29
    4fe4:	cf 93       	push	r28
    4fe6:	00 d0       	rcall	.+0      	; 0x4fe8 <LCD_write_str+0x6>
    4fe8:	0f 92       	push	r0
    4fea:	cd b7       	in	r28, 0x3d	; 61
    4fec:	de b7       	in	r29, 0x3e	; 62
    4fee:	9b 83       	std	Y+3, r25	; 0x03
    4ff0:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    4ff2:	19 82       	std	Y+1, r1	; 0x01
    4ff4:	0e c0       	rjmp	.+28     	; 0x5012 <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    4ff6:	89 81       	ldd	r24, Y+1	; 0x01
    4ff8:	28 2f       	mov	r18, r24
    4ffa:	30 e0       	ldi	r19, 0x00	; 0
    4ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    5000:	fc 01       	movw	r30, r24
    5002:	e2 0f       	add	r30, r18
    5004:	f3 1f       	adc	r31, r19
    5006:	80 81       	ld	r24, Z
    5008:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <LCD_write_char>
		// Increment the string index
		i++;
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	8f 5f       	subi	r24, 0xFF	; 255
    5010:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    5012:	89 81       	ldd	r24, Y+1	; 0x01
    5014:	28 2f       	mov	r18, r24
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	8a 81       	ldd	r24, Y+2	; 0x02
    501a:	9b 81       	ldd	r25, Y+3	; 0x03
    501c:	fc 01       	movw	r30, r24
    501e:	e2 0f       	add	r30, r18
    5020:	f3 1f       	adc	r31, r19
    5022:	80 81       	ld	r24, Z
    5024:	88 23       	and	r24, r24
    5026:	39 f7       	brne	.-50     	; 0x4ff6 <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    5028:	0f 90       	pop	r0
    502a:	0f 90       	pop	r0
    502c:	0f 90       	pop	r0
    502e:	cf 91       	pop	r28
    5030:	df 91       	pop	r29
    5032:	08 95       	ret

00005034 <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    5034:	0f 93       	push	r16
    5036:	1f 93       	push	r17
    5038:	df 93       	push	r29
    503a:	cf 93       	push	r28
    503c:	cd b7       	in	r28, 0x3d	; 61
    503e:	de b7       	in	r29, 0x3e	; 62
    5040:	60 97       	sbiw	r28, 0x10	; 16
    5042:	0f b6       	in	r0, 0x3f	; 63
    5044:	f8 94       	cli
    5046:	de bf       	out	0x3e, r29	; 62
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	cd bf       	out	0x3d, r28	; 61
    504c:	6d 87       	std	Y+13, r22	; 0x0d
    504e:	7e 87       	std	Y+14, r23	; 0x0e
    5050:	8f 87       	std	Y+15, r24	; 0x0f
    5052:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    5054:	8d 85       	ldd	r24, Y+13	; 0x0d
    5056:	9e 85       	ldd	r25, Y+14	; 0x0e
    5058:	af 85       	ldd	r26, Y+15	; 0x0f
    505a:	b8 89       	ldd	r27, Y+16	; 0x10
    505c:	00 97       	sbiw	r24, 0x00	; 0
    505e:	a1 05       	cpc	r26, r1
    5060:	b1 05       	cpc	r27, r1
    5062:	21 f4       	brne	.+8      	; 0x506c <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    5064:	80 e3       	ldi	r24, 0x30	; 48
    5066:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <LCD_write_char>
    506a:	18 c0       	rjmp	.+48     	; 0x509c <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    506c:	8d 85       	ldd	r24, Y+13	; 0x0d
    506e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5070:	af 85       	ldd	r26, Y+15	; 0x0f
    5072:	b8 89       	ldd	r27, Y+16	; 0x10
    5074:	bb 23       	and	r27, r27
    5076:	94 f4       	brge	.+36     	; 0x509c <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    5078:	8d e2       	ldi	r24, 0x2D	; 45
    507a:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    507e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5080:	9e 85       	ldd	r25, Y+14	; 0x0e
    5082:	af 85       	ldd	r26, Y+15	; 0x0f
    5084:	b8 89       	ldd	r27, Y+16	; 0x10
    5086:	b0 95       	com	r27
    5088:	a0 95       	com	r26
    508a:	90 95       	com	r25
    508c:	81 95       	neg	r24
    508e:	9f 4f       	sbci	r25, 0xFF	; 255
    5090:	af 4f       	sbci	r26, 0xFF	; 255
    5092:	bf 4f       	sbci	r27, 0xFF	; 255
    5094:	8d 87       	std	Y+13, r24	; 0x0d
    5096:	9e 87       	std	Y+14, r25	; 0x0e
    5098:	af 87       	std	Y+15, r26	; 0x0f
    509a:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    509c:	1a 82       	std	Y+2, r1	; 0x02
    509e:	2d c0       	rjmp	.+90     	; 0x50fa <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    50a0:	8a 81       	ldd	r24, Y+2	; 0x02
    50a2:	08 2f       	mov	r16, r24
    50a4:	10 e0       	ldi	r17, 0x00	; 0
    50a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50aa:	af 85       	ldd	r26, Y+15	; 0x0f
    50ac:	b8 89       	ldd	r27, Y+16	; 0x10
    50ae:	2a e0       	ldi	r18, 0x0A	; 10
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	40 e0       	ldi	r20, 0x00	; 0
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	bc 01       	movw	r22, r24
    50b8:	cd 01       	movw	r24, r26
    50ba:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__divmodsi4>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	28 2f       	mov	r18, r24
    50c4:	ce 01       	movw	r24, r28
    50c6:	03 96       	adiw	r24, 0x03	; 3
    50c8:	fc 01       	movw	r30, r24
    50ca:	e0 0f       	add	r30, r16
    50cc:	f1 1f       	adc	r31, r17
    50ce:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    50d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d4:	af 85       	ldd	r26, Y+15	; 0x0f
    50d6:	b8 89       	ldd	r27, Y+16	; 0x10
    50d8:	2a e0       	ldi	r18, 0x0A	; 10
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	40 e0       	ldi	r20, 0x00	; 0
    50de:	50 e0       	ldi	r21, 0x00	; 0
    50e0:	bc 01       	movw	r22, r24
    50e2:	cd 01       	movw	r24, r26
    50e4:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__divmodsi4>
    50e8:	da 01       	movw	r26, r20
    50ea:	c9 01       	movw	r24, r18
    50ec:	8d 87       	std	Y+13, r24	; 0x0d
    50ee:	9e 87       	std	Y+14, r25	; 0x0e
    50f0:	af 87       	std	Y+15, r26	; 0x0f
    50f2:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    50f4:	8a 81       	ldd	r24, Y+2	; 0x02
    50f6:	8f 5f       	subi	r24, 0xFF	; 255
    50f8:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    50fa:	8a 81       	ldd	r24, Y+2	; 0x02
    50fc:	8b 30       	cpi	r24, 0x0B	; 11
    50fe:	40 f4       	brcc	.+16     	; 0x5110 <LCD_write_s32_number+0xdc>
    5100:	8d 85       	ldd	r24, Y+13	; 0x0d
    5102:	9e 85       	ldd	r25, Y+14	; 0x0e
    5104:	af 85       	ldd	r26, Y+15	; 0x0f
    5106:	b8 89       	ldd	r27, Y+16	; 0x10
    5108:	00 97       	sbiw	r24, 0x00	; 0
    510a:	a1 05       	cpc	r26, r1
    510c:	b1 05       	cpc	r27, r1
    510e:	41 f6       	brne	.-112    	; 0x50a0 <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	89 83       	std	Y+1, r24	; 0x01
    5114:	14 c0       	rjmp	.+40     	; 0x513e <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    5116:	8a 81       	ldd	r24, Y+2	; 0x02
    5118:	28 2f       	mov	r18, r24
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	89 81       	ldd	r24, Y+1	; 0x01
    511e:	88 2f       	mov	r24, r24
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	28 1b       	sub	r18, r24
    5124:	39 0b       	sbc	r19, r25
    5126:	ce 01       	movw	r24, r28
    5128:	03 96       	adiw	r24, 0x03	; 3
    512a:	fc 01       	movw	r30, r24
    512c:	e2 0f       	add	r30, r18
    512e:	f3 1f       	adc	r31, r19
    5130:	80 81       	ld	r24, Z
    5132:	80 5d       	subi	r24, 0xD0	; 208
    5134:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    5138:	89 81       	ldd	r24, Y+1	; 0x01
    513a:	8f 5f       	subi	r24, 0xFF	; 255
    513c:	89 83       	std	Y+1, r24	; 0x01
    513e:	89 81       	ldd	r24, Y+1	; 0x01
    5140:	28 2f       	mov	r18, r24
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	8a 81       	ldd	r24, Y+2	; 0x02
    5146:	88 2f       	mov	r24, r24
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	01 96       	adiw	r24, 0x01	; 1
    514c:	28 17       	cp	r18, r24
    514e:	39 07       	cpc	r19, r25
    5150:	14 f3       	brlt	.-60     	; 0x5116 <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    5152:	60 96       	adiw	r28, 0x10	; 16
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	f8 94       	cli
    5158:	de bf       	out	0x3e, r29	; 62
    515a:	0f be       	out	0x3f, r0	; 63
    515c:	cd bf       	out	0x3d, r28	; 61
    515e:	cf 91       	pop	r28
    5160:	df 91       	pop	r29
    5162:	1f 91       	pop	r17
    5164:	0f 91       	pop	r16
    5166:	08 95       	ret

00005168 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    5168:	ef 92       	push	r14
    516a:	ff 92       	push	r15
    516c:	0f 93       	push	r16
    516e:	1f 93       	push	r17
    5170:	df 93       	push	r29
    5172:	cf 93       	push	r28
    5174:	cd b7       	in	r28, 0x3d	; 61
    5176:	de b7       	in	r29, 0x3e	; 62
    5178:	2d 97       	sbiw	r28, 0x0d	; 13
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	de bf       	out	0x3e, r29	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	cd bf       	out	0x3d, r28	; 61
    5184:	69 87       	std	Y+9, r22	; 0x09
    5186:	7a 87       	std	Y+10, r23	; 0x0a
    5188:	8b 87       	std	Y+11, r24	; 0x0b
    518a:	9c 87       	std	Y+12, r25	; 0x0c
    518c:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    518e:	69 85       	ldd	r22, Y+9	; 0x09
    5190:	7a 85       	ldd	r23, Y+10	; 0x0a
    5192:	8b 85       	ldd	r24, Y+11	; 0x0b
    5194:	9c 85       	ldd	r25, Y+12	; 0x0c
    5196:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	8d 83       	std	Y+5, r24	; 0x05
    51a0:	9e 83       	std	Y+6, r25	; 0x06
    51a2:	af 83       	std	Y+7, r26	; 0x07
    51a4:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    51a6:	6d 81       	ldd	r22, Y+5	; 0x05
    51a8:	7e 81       	ldd	r23, Y+6	; 0x06
    51aa:	8f 81       	ldd	r24, Y+7	; 0x07
    51ac:	98 85       	ldd	r25, Y+8	; 0x08
    51ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    51b2:	9b 01       	movw	r18, r22
    51b4:	ac 01       	movw	r20, r24
    51b6:	69 85       	ldd	r22, Y+9	; 0x09
    51b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    51ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    51bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    51be:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    51c2:	dc 01       	movw	r26, r24
    51c4:	cb 01       	movw	r24, r22
    51c6:	7c 01       	movw	r14, r24
    51c8:	8d 01       	movw	r16, r26
    51ca:	8a e0       	ldi	r24, 0x0A	; 10
    51cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    51ce:	0e 94 46 07 	call	0xe8c	; 0xe8c <LCD_pow>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    51de:	9b 01       	movw	r18, r22
    51e0:	ac 01       	movw	r20, r24
    51e2:	c8 01       	movw	r24, r16
    51e4:	b7 01       	movw	r22, r14
    51e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	bc 01       	movw	r22, r24
    51f0:	cd 01       	movw	r24, r26
    51f2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    51f6:	dc 01       	movw	r26, r24
    51f8:	cb 01       	movw	r24, r22
    51fa:	89 83       	std	Y+1, r24	; 0x01
    51fc:	9a 83       	std	Y+2, r25	; 0x02
    51fe:	ab 83       	std	Y+3, r26	; 0x03
    5200:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    5202:	8d 81       	ldd	r24, Y+5	; 0x05
    5204:	9e 81       	ldd	r25, Y+6	; 0x06
    5206:	af 81       	ldd	r26, Y+7	; 0x07
    5208:	b8 85       	ldd	r27, Y+8	; 0x08
    520a:	bc 01       	movw	r22, r24
    520c:	cd 01       	movw	r24, r26
    520e:	0e 94 1a 28 	call	0x5034	; 0x5034 <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    5212:	8e e2       	ldi	r24, 0x2E	; 46
    5214:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    5218:	89 81       	ldd	r24, Y+1	; 0x01
    521a:	9a 81       	ldd	r25, Y+2	; 0x02
    521c:	ab 81       	ldd	r26, Y+3	; 0x03
    521e:	bc 81       	ldd	r27, Y+4	; 0x04
    5220:	8f 77       	andi	r24, 0x7F	; 127
    5222:	bc 01       	movw	r22, r24
    5224:	cd 01       	movw	r24, r26
    5226:	0e 94 1a 28 	call	0x5034	; 0x5034 <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    522a:	2d 96       	adiw	r28, 0x0d	; 13
    522c:	0f b6       	in	r0, 0x3f	; 63
    522e:	f8 94       	cli
    5230:	de bf       	out	0x3e, r29	; 62
    5232:	0f be       	out	0x3f, r0	; 63
    5234:	cd bf       	out	0x3d, r28	; 61
    5236:	cf 91       	pop	r28
    5238:	df 91       	pop	r29
    523a:	1f 91       	pop	r17
    523c:	0f 91       	pop	r16
    523e:	ff 90       	pop	r15
    5240:	ef 90       	pop	r14
    5242:	08 95       	ret

00005244 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    5244:	df 93       	push	r29
    5246:	cf 93       	push	r28
    5248:	00 d0       	rcall	.+0      	; 0x524a <DIO_void_set_port_dir+0x6>
    524a:	cd b7       	in	r28, 0x3d	; 61
    524c:	de b7       	in	r29, 0x3e	; 62
    524e:	89 83       	std	Y+1, r24	; 0x01
    5250:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    5252:	89 81       	ldd	r24, Y+1	; 0x01
    5254:	88 2f       	mov	r24, r24
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	88 0f       	add	r24, r24
    525a:	99 1f       	adc	r25, r25
    525c:	fc 01       	movw	r30, r24
    525e:	e3 58       	subi	r30, 0x83	; 131
    5260:	fe 4f       	sbci	r31, 0xFE	; 254
    5262:	01 90       	ld	r0, Z+
    5264:	f0 81       	ld	r31, Z
    5266:	e0 2d       	mov	r30, r0
    5268:	8a 81       	ldd	r24, Y+2	; 0x02
    526a:	80 83       	st	Z, r24
}
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	cf 91       	pop	r28
    5272:	df 91       	pop	r29
    5274:	08 95       	ret

00005276 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	0f 92       	push	r0
    527c:	cd b7       	in	r28, 0x3d	; 61
    527e:	de b7       	in	r29, 0x3e	; 62
    5280:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    5282:	89 81       	ldd	r24, Y+1	; 0x01
    5284:	88 2f       	mov	r24, r24
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	fc 01       	movw	r30, r24
    528e:	e3 58       	subi	r30, 0x83	; 131
    5290:	fe 4f       	sbci	r31, 0xFE	; 254
    5292:	01 90       	ld	r0, Z+
    5294:	f0 81       	ld	r31, Z
    5296:	e0 2d       	mov	r30, r0
    5298:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    529a:	89 81       	ldd	r24, Y+1	; 0x01
    529c:	88 2f       	mov	r24, r24
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	88 0f       	add	r24, r24
    52a2:	99 1f       	adc	r25, r25
    52a4:	fc 01       	movw	r30, r24
    52a6:	eb 57       	subi	r30, 0x7B	; 123
    52a8:	fe 4f       	sbci	r31, 0xFE	; 254
    52aa:	01 90       	ld	r0, Z+
    52ac:	f0 81       	ld	r31, Z
    52ae:	e0 2d       	mov	r30, r0
    52b0:	8f ef       	ldi	r24, 0xFF	; 255
    52b2:	80 83       	st	Z, r24
}
    52b4:	0f 90       	pop	r0
    52b6:	cf 91       	pop	r28
    52b8:	df 91       	pop	r29
    52ba:	08 95       	ret

000052bc <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    52bc:	df 93       	push	r29
    52be:	cf 93       	push	r28
    52c0:	00 d0       	rcall	.+0      	; 0x52c2 <DIO_void_set_pin_dir+0x6>
    52c2:	0f 92       	push	r0
    52c4:	cd b7       	in	r28, 0x3d	; 61
    52c6:	de b7       	in	r29, 0x3e	; 62
    52c8:	89 83       	std	Y+1, r24	; 0x01
    52ca:	6a 83       	std	Y+2, r22	; 0x02
    52cc:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    52ce:	8b 81       	ldd	r24, Y+3	; 0x03
    52d0:	88 23       	and	r24, r24
    52d2:	29 f1       	breq	.+74     	; 0x531e <DIO_void_set_pin_dir+0x62>
    52d4:	89 81       	ldd	r24, Y+1	; 0x01
    52d6:	88 2f       	mov	r24, r24
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	88 0f       	add	r24, r24
    52dc:	99 1f       	adc	r25, r25
    52de:	fc 01       	movw	r30, r24
    52e0:	e3 58       	subi	r30, 0x83	; 131
    52e2:	fe 4f       	sbci	r31, 0xFE	; 254
    52e4:	a0 81       	ld	r26, Z
    52e6:	b1 81       	ldd	r27, Z+1	; 0x01
    52e8:	89 81       	ldd	r24, Y+1	; 0x01
    52ea:	88 2f       	mov	r24, r24
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	88 0f       	add	r24, r24
    52f0:	99 1f       	adc	r25, r25
    52f2:	fc 01       	movw	r30, r24
    52f4:	e3 58       	subi	r30, 0x83	; 131
    52f6:	fe 4f       	sbci	r31, 0xFE	; 254
    52f8:	01 90       	ld	r0, Z+
    52fa:	f0 81       	ld	r31, Z
    52fc:	e0 2d       	mov	r30, r0
    52fe:	80 81       	ld	r24, Z
    5300:	48 2f       	mov	r20, r24
    5302:	8a 81       	ldd	r24, Y+2	; 0x02
    5304:	28 2f       	mov	r18, r24
    5306:	30 e0       	ldi	r19, 0x00	; 0
    5308:	81 e0       	ldi	r24, 0x01	; 1
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	02 2e       	mov	r0, r18
    530e:	02 c0       	rjmp	.+4      	; 0x5314 <DIO_void_set_pin_dir+0x58>
    5310:	88 0f       	add	r24, r24
    5312:	99 1f       	adc	r25, r25
    5314:	0a 94       	dec	r0
    5316:	e2 f7       	brpl	.-8      	; 0x5310 <DIO_void_set_pin_dir+0x54>
    5318:	84 2b       	or	r24, r20
    531a:	8c 93       	st	X, r24
    531c:	25 c0       	rjmp	.+74     	; 0x5368 <DIO_void_set_pin_dir+0xac>
    531e:	89 81       	ldd	r24, Y+1	; 0x01
    5320:	88 2f       	mov	r24, r24
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	88 0f       	add	r24, r24
    5326:	99 1f       	adc	r25, r25
    5328:	fc 01       	movw	r30, r24
    532a:	e3 58       	subi	r30, 0x83	; 131
    532c:	fe 4f       	sbci	r31, 0xFE	; 254
    532e:	a0 81       	ld	r26, Z
    5330:	b1 81       	ldd	r27, Z+1	; 0x01
    5332:	89 81       	ldd	r24, Y+1	; 0x01
    5334:	88 2f       	mov	r24, r24
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	88 0f       	add	r24, r24
    533a:	99 1f       	adc	r25, r25
    533c:	fc 01       	movw	r30, r24
    533e:	e3 58       	subi	r30, 0x83	; 131
    5340:	fe 4f       	sbci	r31, 0xFE	; 254
    5342:	01 90       	ld	r0, Z+
    5344:	f0 81       	ld	r31, Z
    5346:	e0 2d       	mov	r30, r0
    5348:	80 81       	ld	r24, Z
    534a:	48 2f       	mov	r20, r24
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	28 2f       	mov	r18, r24
    5350:	30 e0       	ldi	r19, 0x00	; 0
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	02 2e       	mov	r0, r18
    5358:	02 c0       	rjmp	.+4      	; 0x535e <DIO_void_set_pin_dir+0xa2>
    535a:	88 0f       	add	r24, r24
    535c:	99 1f       	adc	r25, r25
    535e:	0a 94       	dec	r0
    5360:	e2 f7       	brpl	.-8      	; 0x535a <DIO_void_set_pin_dir+0x9e>
    5362:	80 95       	com	r24
    5364:	84 23       	and	r24, r20
    5366:	8c 93       	st	X, r24
}
    5368:	0f 90       	pop	r0
    536a:	0f 90       	pop	r0
    536c:	0f 90       	pop	r0
    536e:	cf 91       	pop	r28
    5370:	df 91       	pop	r29
    5372:	08 95       	ret

00005374 <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5374:	df 93       	push	r29
    5376:	cf 93       	push	r28
    5378:	00 d0       	rcall	.+0      	; 0x537a <DIO_void_set_pin_in_pullUP+0x6>
    537a:	cd b7       	in	r28, 0x3d	; 61
    537c:	de b7       	in	r29, 0x3e	; 62
    537e:	89 83       	std	Y+1, r24	; 0x01
    5380:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5382:	89 81       	ldd	r24, Y+1	; 0x01
    5384:	88 2f       	mov	r24, r24
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	88 0f       	add	r24, r24
    538a:	99 1f       	adc	r25, r25
    538c:	fc 01       	movw	r30, r24
    538e:	e3 58       	subi	r30, 0x83	; 131
    5390:	fe 4f       	sbci	r31, 0xFE	; 254
    5392:	a0 81       	ld	r26, Z
    5394:	b1 81       	ldd	r27, Z+1	; 0x01
    5396:	89 81       	ldd	r24, Y+1	; 0x01
    5398:	88 2f       	mov	r24, r24
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	88 0f       	add	r24, r24
    539e:	99 1f       	adc	r25, r25
    53a0:	fc 01       	movw	r30, r24
    53a2:	e3 58       	subi	r30, 0x83	; 131
    53a4:	fe 4f       	sbci	r31, 0xFE	; 254
    53a6:	01 90       	ld	r0, Z+
    53a8:	f0 81       	ld	r31, Z
    53aa:	e0 2d       	mov	r30, r0
    53ac:	80 81       	ld	r24, Z
    53ae:	48 2f       	mov	r20, r24
    53b0:	8a 81       	ldd	r24, Y+2	; 0x02
    53b2:	28 2f       	mov	r18, r24
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	02 c0       	rjmp	.+4      	; 0x53c0 <DIO_void_set_pin_in_pullUP+0x4c>
    53bc:	88 0f       	add	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	2a 95       	dec	r18
    53c2:	e2 f7       	brpl	.-8      	; 0x53bc <DIO_void_set_pin_in_pullUP+0x48>
    53c4:	80 95       	com	r24
    53c6:	84 23       	and	r24, r20
    53c8:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    53ca:	89 81       	ldd	r24, Y+1	; 0x01
    53cc:	88 2f       	mov	r24, r24
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	88 0f       	add	r24, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	fc 01       	movw	r30, r24
    53d6:	eb 57       	subi	r30, 0x7B	; 123
    53d8:	fe 4f       	sbci	r31, 0xFE	; 254
    53da:	a0 81       	ld	r26, Z
    53dc:	b1 81       	ldd	r27, Z+1	; 0x01
    53de:	89 81       	ldd	r24, Y+1	; 0x01
    53e0:	88 2f       	mov	r24, r24
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	88 0f       	add	r24, r24
    53e6:	99 1f       	adc	r25, r25
    53e8:	fc 01       	movw	r30, r24
    53ea:	eb 57       	subi	r30, 0x7B	; 123
    53ec:	fe 4f       	sbci	r31, 0xFE	; 254
    53ee:	01 90       	ld	r0, Z+
    53f0:	f0 81       	ld	r31, Z
    53f2:	e0 2d       	mov	r30, r0
    53f4:	80 81       	ld	r24, Z
    53f6:	48 2f       	mov	r20, r24
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	28 2f       	mov	r18, r24
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	02 2e       	mov	r0, r18
    5404:	02 c0       	rjmp	.+4      	; 0x540a <DIO_void_set_pin_in_pullUP+0x96>
    5406:	88 0f       	add	r24, r24
    5408:	99 1f       	adc	r25, r25
    540a:	0a 94       	dec	r0
    540c:	e2 f7       	brpl	.-8      	; 0x5406 <DIO_void_set_pin_in_pullUP+0x92>
    540e:	84 2b       	or	r24, r20
    5410:	8c 93       	st	X, r24
}
    5412:	0f 90       	pop	r0
    5414:	0f 90       	pop	r0
    5416:	cf 91       	pop	r28
    5418:	df 91       	pop	r29
    541a:	08 95       	ret

0000541c <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    541c:	df 93       	push	r29
    541e:	cf 93       	push	r28
    5420:	0f 92       	push	r0
    5422:	cd b7       	in	r28, 0x3d	; 61
    5424:	de b7       	in	r29, 0x3e	; 62
    5426:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    5428:	89 81       	ldd	r24, Y+1	; 0x01
    542a:	88 2f       	mov	r24, r24
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	88 0f       	add	r24, r24
    5430:	99 1f       	adc	r25, r25
    5432:	fc 01       	movw	r30, r24
    5434:	eb 57       	subi	r30, 0x7B	; 123
    5436:	fe 4f       	sbci	r31, 0xFE	; 254
    5438:	01 90       	ld	r0, Z+
    543a:	f0 81       	ld	r31, Z
    543c:	e0 2d       	mov	r30, r0
    543e:	8f ef       	ldi	r24, 0xFF	; 255
    5440:	80 83       	st	Z, r24
}
    5442:	0f 90       	pop	r0
    5444:	cf 91       	pop	r28
    5446:	df 91       	pop	r29
    5448:	08 95       	ret

0000544a <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    544a:	df 93       	push	r29
    544c:	cf 93       	push	r28
    544e:	0f 92       	push	r0
    5450:	cd b7       	in	r28, 0x3d	; 61
    5452:	de b7       	in	r29, 0x3e	; 62
    5454:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	88 2f       	mov	r24, r24
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	88 0f       	add	r24, r24
    545e:	99 1f       	adc	r25, r25
    5460:	fc 01       	movw	r30, r24
    5462:	eb 57       	subi	r30, 0x7B	; 123
    5464:	fe 4f       	sbci	r31, 0xFE	; 254
    5466:	01 90       	ld	r0, Z+
    5468:	f0 81       	ld	r31, Z
    546a:	e0 2d       	mov	r30, r0
    546c:	10 82       	st	Z, r1
}
    546e:	0f 90       	pop	r0
    5470:	cf 91       	pop	r28
    5472:	df 91       	pop	r29
    5474:	08 95       	ret

00005476 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    5476:	df 93       	push	r29
    5478:	cf 93       	push	r28
    547a:	0f 92       	push	r0
    547c:	cd b7       	in	r28, 0x3d	; 61
    547e:	de b7       	in	r29, 0x3e	; 62
    5480:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    5482:	89 81       	ldd	r24, Y+1	; 0x01
    5484:	88 2f       	mov	r24, r24
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	88 0f       	add	r24, r24
    548a:	99 1f       	adc	r25, r25
    548c:	fc 01       	movw	r30, r24
    548e:	eb 57       	subi	r30, 0x7B	; 123
    5490:	fe 4f       	sbci	r31, 0xFE	; 254
    5492:	a0 81       	ld	r26, Z
    5494:	b1 81       	ldd	r27, Z+1	; 0x01
    5496:	89 81       	ldd	r24, Y+1	; 0x01
    5498:	88 2f       	mov	r24, r24
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	88 0f       	add	r24, r24
    549e:	99 1f       	adc	r25, r25
    54a0:	fc 01       	movw	r30, r24
    54a2:	eb 57       	subi	r30, 0x7B	; 123
    54a4:	fe 4f       	sbci	r31, 0xFE	; 254
    54a6:	01 90       	ld	r0, Z+
    54a8:	f0 81       	ld	r31, Z
    54aa:	e0 2d       	mov	r30, r0
    54ac:	80 81       	ld	r24, Z
    54ae:	80 95       	com	r24
    54b0:	8c 93       	st	X, r24
}
    54b2:	0f 90       	pop	r0
    54b4:	cf 91       	pop	r28
    54b6:	df 91       	pop	r29
    54b8:	08 95       	ret

000054ba <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    54ba:	df 93       	push	r29
    54bc:	cf 93       	push	r28
    54be:	00 d0       	rcall	.+0      	; 0x54c0 <DIO_void_assign_port+0x6>
    54c0:	cd b7       	in	r28, 0x3d	; 61
    54c2:	de b7       	in	r29, 0x3e	; 62
    54c4:	89 83       	std	Y+1, r24	; 0x01
    54c6:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    54c8:	89 81       	ldd	r24, Y+1	; 0x01
    54ca:	88 2f       	mov	r24, r24
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	88 0f       	add	r24, r24
    54d0:	99 1f       	adc	r25, r25
    54d2:	fc 01       	movw	r30, r24
    54d4:	eb 57       	subi	r30, 0x7B	; 123
    54d6:	fe 4f       	sbci	r31, 0xFE	; 254
    54d8:	01 90       	ld	r0, Z+
    54da:	f0 81       	ld	r31, Z
    54dc:	e0 2d       	mov	r30, r0
    54de:	8a 81       	ldd	r24, Y+2	; 0x02
    54e0:	80 83       	st	Z, r24
}
    54e2:	0f 90       	pop	r0
    54e4:	0f 90       	pop	r0
    54e6:	cf 91       	pop	r28
    54e8:	df 91       	pop	r29
    54ea:	08 95       	ret

000054ec <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    54ec:	df 93       	push	r29
    54ee:	cf 93       	push	r28
    54f0:	00 d0       	rcall	.+0      	; 0x54f2 <DIO_void_set_pin+0x6>
    54f2:	cd b7       	in	r28, 0x3d	; 61
    54f4:	de b7       	in	r29, 0x3e	; 62
    54f6:	89 83       	std	Y+1, r24	; 0x01
    54f8:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    54fa:	89 81       	ldd	r24, Y+1	; 0x01
    54fc:	88 2f       	mov	r24, r24
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	88 0f       	add	r24, r24
    5502:	99 1f       	adc	r25, r25
    5504:	fc 01       	movw	r30, r24
    5506:	eb 57       	subi	r30, 0x7B	; 123
    5508:	fe 4f       	sbci	r31, 0xFE	; 254
    550a:	a0 81       	ld	r26, Z
    550c:	b1 81       	ldd	r27, Z+1	; 0x01
    550e:	89 81       	ldd	r24, Y+1	; 0x01
    5510:	88 2f       	mov	r24, r24
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	88 0f       	add	r24, r24
    5516:	99 1f       	adc	r25, r25
    5518:	fc 01       	movw	r30, r24
    551a:	eb 57       	subi	r30, 0x7B	; 123
    551c:	fe 4f       	sbci	r31, 0xFE	; 254
    551e:	01 90       	ld	r0, Z+
    5520:	f0 81       	ld	r31, Z
    5522:	e0 2d       	mov	r30, r0
    5524:	80 81       	ld	r24, Z
    5526:	48 2f       	mov	r20, r24
    5528:	8a 81       	ldd	r24, Y+2	; 0x02
    552a:	28 2f       	mov	r18, r24
    552c:	30 e0       	ldi	r19, 0x00	; 0
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	02 2e       	mov	r0, r18
    5534:	02 c0       	rjmp	.+4      	; 0x553a <DIO_void_set_pin+0x4e>
    5536:	88 0f       	add	r24, r24
    5538:	99 1f       	adc	r25, r25
    553a:	0a 94       	dec	r0
    553c:	e2 f7       	brpl	.-8      	; 0x5536 <DIO_void_set_pin+0x4a>
    553e:	84 2b       	or	r24, r20
    5540:	8c 93       	st	X, r24
}
    5542:	0f 90       	pop	r0
    5544:	0f 90       	pop	r0
    5546:	cf 91       	pop	r28
    5548:	df 91       	pop	r29
    554a:	08 95       	ret

0000554c <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    554c:	df 93       	push	r29
    554e:	cf 93       	push	r28
    5550:	00 d0       	rcall	.+0      	; 0x5552 <DIO_void_clear_pin+0x6>
    5552:	cd b7       	in	r28, 0x3d	; 61
    5554:	de b7       	in	r29, 0x3e	; 62
    5556:	89 83       	std	Y+1, r24	; 0x01
    5558:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	88 2f       	mov	r24, r24
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	88 0f       	add	r24, r24
    5562:	99 1f       	adc	r25, r25
    5564:	fc 01       	movw	r30, r24
    5566:	eb 57       	subi	r30, 0x7B	; 123
    5568:	fe 4f       	sbci	r31, 0xFE	; 254
    556a:	a0 81       	ld	r26, Z
    556c:	b1 81       	ldd	r27, Z+1	; 0x01
    556e:	89 81       	ldd	r24, Y+1	; 0x01
    5570:	88 2f       	mov	r24, r24
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	88 0f       	add	r24, r24
    5576:	99 1f       	adc	r25, r25
    5578:	fc 01       	movw	r30, r24
    557a:	eb 57       	subi	r30, 0x7B	; 123
    557c:	fe 4f       	sbci	r31, 0xFE	; 254
    557e:	01 90       	ld	r0, Z+
    5580:	f0 81       	ld	r31, Z
    5582:	e0 2d       	mov	r30, r0
    5584:	80 81       	ld	r24, Z
    5586:	48 2f       	mov	r20, r24
    5588:	8a 81       	ldd	r24, Y+2	; 0x02
    558a:	28 2f       	mov	r18, r24
    558c:	30 e0       	ldi	r19, 0x00	; 0
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	02 2e       	mov	r0, r18
    5594:	02 c0       	rjmp	.+4      	; 0x559a <DIO_void_clear_pin+0x4e>
    5596:	88 0f       	add	r24, r24
    5598:	99 1f       	adc	r25, r25
    559a:	0a 94       	dec	r0
    559c:	e2 f7       	brpl	.-8      	; 0x5596 <DIO_void_clear_pin+0x4a>
    559e:	80 95       	com	r24
    55a0:	84 23       	and	r24, r20
    55a2:	8c 93       	st	X, r24
}
    55a4:	0f 90       	pop	r0
    55a6:	0f 90       	pop	r0
    55a8:	cf 91       	pop	r28
    55aa:	df 91       	pop	r29
    55ac:	08 95       	ret

000055ae <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    55ae:	df 93       	push	r29
    55b0:	cf 93       	push	r28
    55b2:	00 d0       	rcall	.+0      	; 0x55b4 <DIO_void_toggle_pin+0x6>
    55b4:	cd b7       	in	r28, 0x3d	; 61
    55b6:	de b7       	in	r29, 0x3e	; 62
    55b8:	89 83       	std	Y+1, r24	; 0x01
    55ba:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    55bc:	89 81       	ldd	r24, Y+1	; 0x01
    55be:	88 2f       	mov	r24, r24
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	88 0f       	add	r24, r24
    55c4:	99 1f       	adc	r25, r25
    55c6:	fc 01       	movw	r30, r24
    55c8:	eb 57       	subi	r30, 0x7B	; 123
    55ca:	fe 4f       	sbci	r31, 0xFE	; 254
    55cc:	a0 81       	ld	r26, Z
    55ce:	b1 81       	ldd	r27, Z+1	; 0x01
    55d0:	89 81       	ldd	r24, Y+1	; 0x01
    55d2:	88 2f       	mov	r24, r24
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	88 0f       	add	r24, r24
    55d8:	99 1f       	adc	r25, r25
    55da:	fc 01       	movw	r30, r24
    55dc:	eb 57       	subi	r30, 0x7B	; 123
    55de:	fe 4f       	sbci	r31, 0xFE	; 254
    55e0:	01 90       	ld	r0, Z+
    55e2:	f0 81       	ld	r31, Z
    55e4:	e0 2d       	mov	r30, r0
    55e6:	80 81       	ld	r24, Z
    55e8:	48 2f       	mov	r20, r24
    55ea:	8a 81       	ldd	r24, Y+2	; 0x02
    55ec:	28 2f       	mov	r18, r24
    55ee:	30 e0       	ldi	r19, 0x00	; 0
    55f0:	81 e0       	ldi	r24, 0x01	; 1
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	02 2e       	mov	r0, r18
    55f6:	02 c0       	rjmp	.+4      	; 0x55fc <DIO_void_toggle_pin+0x4e>
    55f8:	88 0f       	add	r24, r24
    55fa:	99 1f       	adc	r25, r25
    55fc:	0a 94       	dec	r0
    55fe:	e2 f7       	brpl	.-8      	; 0x55f8 <DIO_void_toggle_pin+0x4a>
    5600:	84 27       	eor	r24, r20
    5602:	8c 93       	st	X, r24
}
    5604:	0f 90       	pop	r0
    5606:	0f 90       	pop	r0
    5608:	cf 91       	pop	r28
    560a:	df 91       	pop	r29
    560c:	08 95       	ret

0000560e <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    560e:	df 93       	push	r29
    5610:	cf 93       	push	r28
    5612:	00 d0       	rcall	.+0      	; 0x5614 <DIO_void_assign_pin+0x6>
    5614:	0f 92       	push	r0
    5616:	cd b7       	in	r28, 0x3d	; 61
    5618:	de b7       	in	r29, 0x3e	; 62
    561a:	89 83       	std	Y+1, r24	; 0x01
    561c:	6a 83       	std	Y+2, r22	; 0x02
    561e:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    5620:	8b 81       	ldd	r24, Y+3	; 0x03
    5622:	88 23       	and	r24, r24
    5624:	29 f1       	breq	.+74     	; 0x5670 <DIO_void_assign_pin+0x62>
    5626:	89 81       	ldd	r24, Y+1	; 0x01
    5628:	88 2f       	mov	r24, r24
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	88 0f       	add	r24, r24
    562e:	99 1f       	adc	r25, r25
    5630:	fc 01       	movw	r30, r24
    5632:	eb 57       	subi	r30, 0x7B	; 123
    5634:	fe 4f       	sbci	r31, 0xFE	; 254
    5636:	a0 81       	ld	r26, Z
    5638:	b1 81       	ldd	r27, Z+1	; 0x01
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	88 2f       	mov	r24, r24
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25
    5644:	fc 01       	movw	r30, r24
    5646:	eb 57       	subi	r30, 0x7B	; 123
    5648:	fe 4f       	sbci	r31, 0xFE	; 254
    564a:	01 90       	ld	r0, Z+
    564c:	f0 81       	ld	r31, Z
    564e:	e0 2d       	mov	r30, r0
    5650:	80 81       	ld	r24, Z
    5652:	48 2f       	mov	r20, r24
    5654:	8a 81       	ldd	r24, Y+2	; 0x02
    5656:	28 2f       	mov	r18, r24
    5658:	30 e0       	ldi	r19, 0x00	; 0
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	02 2e       	mov	r0, r18
    5660:	02 c0       	rjmp	.+4      	; 0x5666 <DIO_void_assign_pin+0x58>
    5662:	88 0f       	add	r24, r24
    5664:	99 1f       	adc	r25, r25
    5666:	0a 94       	dec	r0
    5668:	e2 f7       	brpl	.-8      	; 0x5662 <DIO_void_assign_pin+0x54>
    566a:	84 2b       	or	r24, r20
    566c:	8c 93       	st	X, r24
    566e:	25 c0       	rjmp	.+74     	; 0x56ba <DIO_void_assign_pin+0xac>
    5670:	89 81       	ldd	r24, Y+1	; 0x01
    5672:	88 2f       	mov	r24, r24
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	88 0f       	add	r24, r24
    5678:	99 1f       	adc	r25, r25
    567a:	fc 01       	movw	r30, r24
    567c:	eb 57       	subi	r30, 0x7B	; 123
    567e:	fe 4f       	sbci	r31, 0xFE	; 254
    5680:	a0 81       	ld	r26, Z
    5682:	b1 81       	ldd	r27, Z+1	; 0x01
    5684:	89 81       	ldd	r24, Y+1	; 0x01
    5686:	88 2f       	mov	r24, r24
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	88 0f       	add	r24, r24
    568c:	99 1f       	adc	r25, r25
    568e:	fc 01       	movw	r30, r24
    5690:	eb 57       	subi	r30, 0x7B	; 123
    5692:	fe 4f       	sbci	r31, 0xFE	; 254
    5694:	01 90       	ld	r0, Z+
    5696:	f0 81       	ld	r31, Z
    5698:	e0 2d       	mov	r30, r0
    569a:	80 81       	ld	r24, Z
    569c:	48 2f       	mov	r20, r24
    569e:	8a 81       	ldd	r24, Y+2	; 0x02
    56a0:	28 2f       	mov	r18, r24
    56a2:	30 e0       	ldi	r19, 0x00	; 0
    56a4:	81 e0       	ldi	r24, 0x01	; 1
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	02 2e       	mov	r0, r18
    56aa:	02 c0       	rjmp	.+4      	; 0x56b0 <DIO_void_assign_pin+0xa2>
    56ac:	88 0f       	add	r24, r24
    56ae:	99 1f       	adc	r25, r25
    56b0:	0a 94       	dec	r0
    56b2:	e2 f7       	brpl	.-8      	; 0x56ac <DIO_void_assign_pin+0x9e>
    56b4:	80 95       	com	r24
    56b6:	84 23       	and	r24, r20
    56b8:	8c 93       	st	X, r24
}
    56ba:	0f 90       	pop	r0
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	cf 91       	pop	r28
    56c2:	df 91       	pop	r29
    56c4:	08 95       	ret

000056c6 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    56c6:	df 93       	push	r29
    56c8:	cf 93       	push	r28
    56ca:	0f 92       	push	r0
    56cc:	cd b7       	in	r28, 0x3d	; 61
    56ce:	de b7       	in	r29, 0x3e	; 62
    56d0:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    56d2:	89 81       	ldd	r24, Y+1	; 0x01
    56d4:	88 2f       	mov	r24, r24
    56d6:	90 e0       	ldi	r25, 0x00	; 0
    56d8:	88 0f       	add	r24, r24
    56da:	99 1f       	adc	r25, r25
    56dc:	fc 01       	movw	r30, r24
    56de:	eb 58       	subi	r30, 0x8B	; 139
    56e0:	fe 4f       	sbci	r31, 0xFE	; 254
    56e2:	01 90       	ld	r0, Z+
    56e4:	f0 81       	ld	r31, Z
    56e6:	e0 2d       	mov	r30, r0
    56e8:	80 81       	ld	r24, Z
}
    56ea:	0f 90       	pop	r0
    56ec:	cf 91       	pop	r28
    56ee:	df 91       	pop	r29
    56f0:	08 95       	ret

000056f2 <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    56f2:	df 93       	push	r29
    56f4:	cf 93       	push	r28
    56f6:	00 d0       	rcall	.+0      	; 0x56f8 <DIO_u8_get_pin+0x6>
    56f8:	cd b7       	in	r28, 0x3d	; 61
    56fa:	de b7       	in	r29, 0x3e	; 62
    56fc:	89 83       	std	Y+1, r24	; 0x01
    56fe:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5700:	89 81       	ldd	r24, Y+1	; 0x01
    5702:	88 2f       	mov	r24, r24
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	88 0f       	add	r24, r24
    5708:	99 1f       	adc	r25, r25
    570a:	fc 01       	movw	r30, r24
    570c:	eb 58       	subi	r30, 0x8B	; 139
    570e:	fe 4f       	sbci	r31, 0xFE	; 254
    5710:	01 90       	ld	r0, Z+
    5712:	f0 81       	ld	r31, Z
    5714:	e0 2d       	mov	r30, r0
    5716:	80 81       	ld	r24, Z
    5718:	28 2f       	mov	r18, r24
    571a:	30 e0       	ldi	r19, 0x00	; 0
    571c:	8a 81       	ldd	r24, Y+2	; 0x02
    571e:	88 2f       	mov	r24, r24
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	a9 01       	movw	r20, r18
    5724:	02 c0       	rjmp	.+4      	; 0x572a <DIO_u8_get_pin+0x38>
    5726:	55 95       	asr	r21
    5728:	47 95       	ror	r20
    572a:	8a 95       	dec	r24
    572c:	e2 f7       	brpl	.-8      	; 0x5726 <DIO_u8_get_pin+0x34>
    572e:	ca 01       	movw	r24, r20
    5730:	81 70       	andi	r24, 0x01	; 1
}
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
    5736:	cf 91       	pop	r28
    5738:	df 91       	pop	r29
    573a:	08 95       	ret

0000573c <ADC_void_init>:

//Global variables
static void (*callback_functions_address)(u16 )= NULL;

/* Implementing of the driver functions */
void ADC_void_init(void ){
    573c:	df 93       	push	r29
    573e:	cf 93       	push	r28
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Assign the value of the left adjust bit
	agn_bit(ADC_ADMUX, ADC_ADLAR_pin, ADC_ADLAR);
    5744:	a7 e2       	ldi	r26, 0x27	; 39
    5746:	b0 e0       	ldi	r27, 0x00	; 0
    5748:	e7 e2       	ldi	r30, 0x27	; 39
    574a:	f0 e0       	ldi	r31, 0x00	; 0
    574c:	80 81       	ld	r24, Z
    574e:	8f 7d       	andi	r24, 0xDF	; 223
    5750:	8c 93       	st	X, r24

	// Assign the values of the reference selection regesters
	agn_bit(ADC_ADMUX, ADC_REFS0_pin, ADC_REFS0);
    5752:	a7 e2       	ldi	r26, 0x27	; 39
    5754:	b0 e0       	ldi	r27, 0x00	; 0
    5756:	e7 e2       	ldi	r30, 0x27	; 39
    5758:	f0 e0       	ldi	r31, 0x00	; 0
    575a:	80 81       	ld	r24, Z
    575c:	80 64       	ori	r24, 0x40	; 64
    575e:	8c 93       	st	X, r24
	agn_bit(ADC_ADMUX, ADC_REFS1_pin, ADC_REFS1);
    5760:	a7 e2       	ldi	r26, 0x27	; 39
    5762:	b0 e0       	ldi	r27, 0x00	; 0
    5764:	e7 e2       	ldi	r30, 0x27	; 39
    5766:	f0 e0       	ldi	r31, 0x00	; 0
    5768:	80 81       	ld	r24, Z
    576a:	8f 77       	andi	r24, 0x7F	; 127
    576c:	8c 93       	st	X, r24

	// Assign the value of the enable bit
	agn_bit(ADC_ADCSRA, ADC_ADEN_pin, ADC_ADEN);
    576e:	a6 e2       	ldi	r26, 0x26	; 38
    5770:	b0 e0       	ldi	r27, 0x00	; 0
    5772:	e6 e2       	ldi	r30, 0x26	; 38
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	80 81       	ld	r24, Z
    5778:	80 68       	ori	r24, 0x80	; 128
    577a:	8c 93       	st	X, r24
}
    577c:	cf 91       	pop	r28
    577e:	df 91       	pop	r29
    5780:	08 95       	ret

00005782 <ADC_void_config>:


void ADC_void_config(ADC_config_struct* ptr_config){
    5782:	df 93       	push	r29
    5784:	cf 93       	push	r28
    5786:	00 d0       	rcall	.+0      	; 0x5788 <ADC_void_config+0x6>
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
    578c:	9a 83       	std	Y+2, r25	; 0x02
    578e:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_config>> Pointer to ADC configurations Struct.
	 *	
	 *	Function does not return any values, Hence it needs to be called every time you need to reconfigure the ADC.
	 */
	// Configure the analog channel and gain selection bits
	ADC_ADMUX &= ADC_MUX_clear;
    5790:	a7 e2       	ldi	r26, 0x27	; 39
    5792:	b0 e0       	ldi	r27, 0x00	; 0
    5794:	e7 e2       	ldi	r30, 0x27	; 39
    5796:	f0 e0       	ldi	r31, 0x00	; 0
    5798:	80 81       	ld	r24, Z
    579a:	80 7e       	andi	r24, 0xE0	; 224
    579c:	8c 93       	st	X, r24
	ADC_ADMUX |= ptr_config -> MUX;
    579e:	a7 e2       	ldi	r26, 0x27	; 39
    57a0:	b0 e0       	ldi	r27, 0x00	; 0
    57a2:	e7 e2       	ldi	r30, 0x27	; 39
    57a4:	f0 e0       	ldi	r31, 0x00	; 0
    57a6:	90 81       	ld	r25, Z
    57a8:	e9 81       	ldd	r30, Y+1	; 0x01
    57aa:	fa 81       	ldd	r31, Y+2	; 0x02
    57ac:	80 81       	ld	r24, Z
    57ae:	8f 71       	andi	r24, 0x1F	; 31
    57b0:	89 2b       	or	r24, r25
    57b2:	8c 93       	st	X, r24

	// Configure the ADC prescaler select bits
	ADC_ADCSRA &= ADC_ADPS_clear;
    57b4:	a6 e2       	ldi	r26, 0x26	; 38
    57b6:	b0 e0       	ldi	r27, 0x00	; 0
    57b8:	e6 e2       	ldi	r30, 0x26	; 38
    57ba:	f0 e0       	ldi	r31, 0x00	; 0
    57bc:	80 81       	ld	r24, Z
    57be:	88 7f       	andi	r24, 0xF8	; 248
    57c0:	8c 93       	st	X, r24
	ADC_ADCSRA |= ptr_config -> ADPS;
    57c2:	a6 e2       	ldi	r26, 0x26	; 38
    57c4:	b0 e0       	ldi	r27, 0x00	; 0
    57c6:	e6 e2       	ldi	r30, 0x26	; 38
    57c8:	f0 e0       	ldi	r31, 0x00	; 0
    57ca:	90 81       	ld	r25, Z
    57cc:	e9 81       	ldd	r30, Y+1	; 0x01
    57ce:	fa 81       	ldd	r31, Y+2	; 0x02
    57d0:	80 81       	ld	r24, Z
    57d2:	82 95       	swap	r24
    57d4:	86 95       	lsr	r24
    57d6:	87 70       	andi	r24, 0x07	; 7
    57d8:	89 2b       	or	r24, r25
    57da:	8c 93       	st	X, r24

	// Configure the ADC auto trigger source bits
	ADC_SFIOR &= ADC_ADTS_clear;
    57dc:	a0 e5       	ldi	r26, 0x50	; 80
    57de:	b0 e0       	ldi	r27, 0x00	; 0
    57e0:	e0 e5       	ldi	r30, 0x50	; 80
    57e2:	f0 e0       	ldi	r31, 0x00	; 0
    57e4:	80 81       	ld	r24, Z
    57e6:	8f 71       	andi	r24, 0x1F	; 31
    57e8:	8c 93       	st	X, r24
	ADC_SFIOR |= ptr_config -> ADTS;
    57ea:	a0 e5       	ldi	r26, 0x50	; 80
    57ec:	b0 e0       	ldi	r27, 0x00	; 0
    57ee:	e0 e5       	ldi	r30, 0x50	; 80
    57f0:	f0 e0       	ldi	r31, 0x00	; 0
    57f2:	90 81       	ld	r25, Z
    57f4:	e9 81       	ldd	r30, Y+1	; 0x01
    57f6:	fa 81       	ldd	r31, Y+2	; 0x02
    57f8:	81 81       	ldd	r24, Z+1	; 0x01
    57fa:	86 95       	lsr	r24
    57fc:	87 70       	andi	r24, 0x07	; 7
    57fe:	89 2b       	or	r24, r25
    5800:	8c 93       	st	X, r24

	// Configure the ADC auto trigger enable bit
	agn_bit(ADC_ADCSRA, ADC_ADATE_pin, ptr_config -> ADATE);
    5802:	e9 81       	ldd	r30, Y+1	; 0x01
    5804:	fa 81       	ldd	r31, Y+2	; 0x02
    5806:	81 81       	ldd	r24, Z+1	; 0x01
    5808:	81 70       	andi	r24, 0x01	; 1
    580a:	88 23       	and	r24, r24
    580c:	41 f0       	breq	.+16     	; 0x581e <ADC_void_config+0x9c>
    580e:	a6 e2       	ldi	r26, 0x26	; 38
    5810:	b0 e0       	ldi	r27, 0x00	; 0
    5812:	e6 e2       	ldi	r30, 0x26	; 38
    5814:	f0 e0       	ldi	r31, 0x00	; 0
    5816:	80 81       	ld	r24, Z
    5818:	80 62       	ori	r24, 0x20	; 32
    581a:	8c 93       	st	X, r24
    581c:	07 c0       	rjmp	.+14     	; 0x582c <ADC_void_config+0xaa>
    581e:	a6 e2       	ldi	r26, 0x26	; 38
    5820:	b0 e0       	ldi	r27, 0x00	; 0
    5822:	e6 e2       	ldi	r30, 0x26	; 38
    5824:	f0 e0       	ldi	r31, 0x00	; 0
    5826:	80 81       	ld	r24, Z
    5828:	8f 7d       	andi	r24, 0xDF	; 223
    582a:	8c 93       	st	X, r24

	// Configure the ADC interrupt enable bit

	// Configure the Global interupt bit

}
    582c:	0f 90       	pop	r0
    582e:	0f 90       	pop	r0
    5830:	cf 91       	pop	r28
    5832:	df 91       	pop	r29
    5834:	08 95       	ret

00005836 <ADC_void_read_data>:


void ADC_void_read_data(u16* ptr_result){
    5836:	df 93       	push	r29
    5838:	cf 93       	push	r28
    583a:	00 d0       	rcall	.+0      	; 0x583c <ADC_void_read_data+0x6>
    583c:	cd b7       	in	r28, 0x3d	; 61
    583e:	de b7       	in	r29, 0x3e	; 62
    5840:	9a 83       	std	Y+2, r25	; 0x02
    5842:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_result>> pointer to the ADC value container variable.
	 *	
	 *	Function does not retuen any data, Hence it needs to be called when a value update is needed.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    5844:	a6 e2       	ldi	r26, 0x26	; 38
    5846:	b0 e0       	ldi	r27, 0x00	; 0
    5848:	e6 e2       	ldi	r30, 0x26	; 38
    584a:	f0 e0       	ldi	r31, 0x00	; 0
    584c:	80 81       	ld	r24, Z
    584e:	80 64       	ori	r24, 0x40	; 64
    5850:	8c 93       	st	X, r24

	// Polling on the ADC interrupt flag bit
	while(get_bit(ADC_ADCSRA, ADC_ADIF_pin) == 0);
    5852:	e6 e2       	ldi	r30, 0x26	; 38
    5854:	f0 e0       	ldi	r31, 0x00	; 0
    5856:	80 81       	ld	r24, Z
    5858:	82 95       	swap	r24
    585a:	8f 70       	andi	r24, 0x0F	; 15
    585c:	88 2f       	mov	r24, r24
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	81 70       	andi	r24, 0x01	; 1
    5862:	90 70       	andi	r25, 0x00	; 0
    5864:	00 97       	sbiw	r24, 0x00	; 0
    5866:	a9 f3       	breq	.-22     	; 0x5852 <ADC_void_read_data+0x1c>

	// Resit the ADC interrupt flag bit
	set_bit(ADC_ADCSRA, ADC_ADIF_pin);
    5868:	a6 e2       	ldi	r26, 0x26	; 38
    586a:	b0 e0       	ldi	r27, 0x00	; 0
    586c:	e6 e2       	ldi	r30, 0x26	; 38
    586e:	f0 e0       	ldi	r31, 0x00	; 0
    5870:	80 81       	ld	r24, Z
    5872:	80 61       	ori	r24, 0x10	; 16
    5874:	8c 93       	st	X, r24

	// Return the digital value
	*(ptr_result)= ADC_ADCD_16bit;
    5876:	e4 e2       	ldi	r30, 0x24	; 36
    5878:	f0 e0       	ldi	r31, 0x00	; 0
    587a:	80 81       	ld	r24, Z
    587c:	91 81       	ldd	r25, Z+1	; 0x01
    587e:	e9 81       	ldd	r30, Y+1	; 0x01
    5880:	fa 81       	ldd	r31, Y+2	; 0x02
    5882:	91 83       	std	Z+1, r25	; 0x01
    5884:	80 83       	st	Z, r24
}
    5886:	0f 90       	pop	r0
    5888:	0f 90       	pop	r0
    588a:	cf 91       	pop	r28
    588c:	df 91       	pop	r29
    588e:	08 95       	ret

00005890 <ADC_void_INIT_callback>:


void ADC_void_INIT_callback(void (*ptr_callback_function)(u16 ) ){
    5890:	df 93       	push	r29
    5892:	cf 93       	push	r28
    5894:	00 d0       	rcall	.+0      	; 0x5896 <ADC_void_INIT_callback+0x6>
    5896:	cd b7       	in	r28, 0x3d	; 61
    5898:	de b7       	in	r29, 0x3e	; 62
    589a:	9a 83       	std	Y+2, r25	; 0x02
    589c:	89 83       	std	Y+1, r24	; 0x01
	 *	Inputs::
	 *		ptr_callback_function>> pointer to the callback function.
	 *
	 *	Function does not return any value and anly called when addressing the callback function.
	 */
	callback_functions_address= ptr_callback_function;
    589e:	89 81       	ldd	r24, Y+1	; 0x01
    58a0:	9a 81       	ldd	r25, Y+2	; 0x02
    58a2:	90 93 8f 01 	sts	0x018F, r25
    58a6:	80 93 8e 01 	sts	0x018E, r24
}
    58aa:	0f 90       	pop	r0
    58ac:	0f 90       	pop	r0
    58ae:	cf 91       	pop	r28
    58b0:	df 91       	pop	r29
    58b2:	08 95       	ret

000058b4 <__vector_16>:

void __vector_16(void){
    58b4:	1f 92       	push	r1
    58b6:	0f 92       	push	r0
    58b8:	0f b6       	in	r0, 0x3f	; 63
    58ba:	0f 92       	push	r0
    58bc:	11 24       	eor	r1, r1
    58be:	2f 93       	push	r18
    58c0:	3f 93       	push	r19
    58c2:	4f 93       	push	r20
    58c4:	5f 93       	push	r21
    58c6:	6f 93       	push	r22
    58c8:	7f 93       	push	r23
    58ca:	8f 93       	push	r24
    58cc:	9f 93       	push	r25
    58ce:	af 93       	push	r26
    58d0:	bf 93       	push	r27
    58d2:	ef 93       	push	r30
    58d4:	ff 93       	push	r31
    58d6:	df 93       	push	r29
    58d8:	cf 93       	push	r28
    58da:	cd b7       	in	r28, 0x3d	; 61
    58dc:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	ADC flag ISR
	 */
	if(callback_functions_address != NULL){
    58de:	80 91 8e 01 	lds	r24, 0x018E
    58e2:	90 91 8f 01 	lds	r25, 0x018F
    58e6:	00 97       	sbiw	r24, 0x00	; 0
    58e8:	49 f0       	breq	.+18     	; 0x58fc <__vector_16+0x48>
		callback_functions_address(ADC_ADCD_16bit);
    58ea:	e0 91 8e 01 	lds	r30, 0x018E
    58ee:	f0 91 8f 01 	lds	r31, 0x018F
    58f2:	a4 e2       	ldi	r26, 0x24	; 36
    58f4:	b0 e0       	ldi	r27, 0x00	; 0
    58f6:	8d 91       	ld	r24, X+
    58f8:	9c 91       	ld	r25, X
    58fa:	09 95       	icall
	}
}
    58fc:	cf 91       	pop	r28
    58fe:	df 91       	pop	r29
    5900:	ff 91       	pop	r31
    5902:	ef 91       	pop	r30
    5904:	bf 91       	pop	r27
    5906:	af 91       	pop	r26
    5908:	9f 91       	pop	r25
    590a:	8f 91       	pop	r24
    590c:	7f 91       	pop	r23
    590e:	6f 91       	pop	r22
    5910:	5f 91       	pop	r21
    5912:	4f 91       	pop	r20
    5914:	3f 91       	pop	r19
    5916:	2f 91       	pop	r18
    5918:	0f 90       	pop	r0
    591a:	0f be       	out	0x3f, r0	; 63
    591c:	0f 90       	pop	r0
    591e:	1f 90       	pop	r1
    5920:	18 95       	reti

00005922 <__mulsi3>:
    5922:	62 9f       	mul	r22, r18
    5924:	d0 01       	movw	r26, r0
    5926:	73 9f       	mul	r23, r19
    5928:	f0 01       	movw	r30, r0
    592a:	82 9f       	mul	r24, r18
    592c:	e0 0d       	add	r30, r0
    592e:	f1 1d       	adc	r31, r1
    5930:	64 9f       	mul	r22, r20
    5932:	e0 0d       	add	r30, r0
    5934:	f1 1d       	adc	r31, r1
    5936:	92 9f       	mul	r25, r18
    5938:	f0 0d       	add	r31, r0
    593a:	83 9f       	mul	r24, r19
    593c:	f0 0d       	add	r31, r0
    593e:	74 9f       	mul	r23, r20
    5940:	f0 0d       	add	r31, r0
    5942:	65 9f       	mul	r22, r21
    5944:	f0 0d       	add	r31, r0
    5946:	99 27       	eor	r25, r25
    5948:	72 9f       	mul	r23, r18
    594a:	b0 0d       	add	r27, r0
    594c:	e1 1d       	adc	r30, r1
    594e:	f9 1f       	adc	r31, r25
    5950:	63 9f       	mul	r22, r19
    5952:	b0 0d       	add	r27, r0
    5954:	e1 1d       	adc	r30, r1
    5956:	f9 1f       	adc	r31, r25
    5958:	bd 01       	movw	r22, r26
    595a:	cf 01       	movw	r24, r30
    595c:	11 24       	eor	r1, r1
    595e:	08 95       	ret

00005960 <__divmodsi4>:
    5960:	97 fb       	bst	r25, 7
    5962:	09 2e       	mov	r0, r25
    5964:	05 26       	eor	r0, r21
    5966:	0e d0       	rcall	.+28     	; 0x5984 <__divmodsi4_neg1>
    5968:	57 fd       	sbrc	r21, 7
    596a:	04 d0       	rcall	.+8      	; 0x5974 <__divmodsi4_neg2>
    596c:	14 d0       	rcall	.+40     	; 0x5996 <__udivmodsi4>
    596e:	0a d0       	rcall	.+20     	; 0x5984 <__divmodsi4_neg1>
    5970:	00 1c       	adc	r0, r0
    5972:	38 f4       	brcc	.+14     	; 0x5982 <__divmodsi4_exit>

00005974 <__divmodsi4_neg2>:
    5974:	50 95       	com	r21
    5976:	40 95       	com	r20
    5978:	30 95       	com	r19
    597a:	21 95       	neg	r18
    597c:	3f 4f       	sbci	r19, 0xFF	; 255
    597e:	4f 4f       	sbci	r20, 0xFF	; 255
    5980:	5f 4f       	sbci	r21, 0xFF	; 255

00005982 <__divmodsi4_exit>:
    5982:	08 95       	ret

00005984 <__divmodsi4_neg1>:
    5984:	f6 f7       	brtc	.-4      	; 0x5982 <__divmodsi4_exit>
    5986:	90 95       	com	r25
    5988:	80 95       	com	r24
    598a:	70 95       	com	r23
    598c:	61 95       	neg	r22
    598e:	7f 4f       	sbci	r23, 0xFF	; 255
    5990:	8f 4f       	sbci	r24, 0xFF	; 255
    5992:	9f 4f       	sbci	r25, 0xFF	; 255
    5994:	08 95       	ret

00005996 <__udivmodsi4>:
    5996:	a1 e2       	ldi	r26, 0x21	; 33
    5998:	1a 2e       	mov	r1, r26
    599a:	aa 1b       	sub	r26, r26
    599c:	bb 1b       	sub	r27, r27
    599e:	fd 01       	movw	r30, r26
    59a0:	0d c0       	rjmp	.+26     	; 0x59bc <__udivmodsi4_ep>

000059a2 <__udivmodsi4_loop>:
    59a2:	aa 1f       	adc	r26, r26
    59a4:	bb 1f       	adc	r27, r27
    59a6:	ee 1f       	adc	r30, r30
    59a8:	ff 1f       	adc	r31, r31
    59aa:	a2 17       	cp	r26, r18
    59ac:	b3 07       	cpc	r27, r19
    59ae:	e4 07       	cpc	r30, r20
    59b0:	f5 07       	cpc	r31, r21
    59b2:	20 f0       	brcs	.+8      	; 0x59bc <__udivmodsi4_ep>
    59b4:	a2 1b       	sub	r26, r18
    59b6:	b3 0b       	sbc	r27, r19
    59b8:	e4 0b       	sbc	r30, r20
    59ba:	f5 0b       	sbc	r31, r21

000059bc <__udivmodsi4_ep>:
    59bc:	66 1f       	adc	r22, r22
    59be:	77 1f       	adc	r23, r23
    59c0:	88 1f       	adc	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	1a 94       	dec	r1
    59c6:	69 f7       	brne	.-38     	; 0x59a2 <__udivmodsi4_loop>
    59c8:	60 95       	com	r22
    59ca:	70 95       	com	r23
    59cc:	80 95       	com	r24
    59ce:	90 95       	com	r25
    59d0:	9b 01       	movw	r18, r22
    59d2:	ac 01       	movw	r20, r24
    59d4:	bd 01       	movw	r22, r26
    59d6:	cf 01       	movw	r24, r30
    59d8:	08 95       	ret

000059da <__prologue_saves__>:
    59da:	2f 92       	push	r2
    59dc:	3f 92       	push	r3
    59de:	4f 92       	push	r4
    59e0:	5f 92       	push	r5
    59e2:	6f 92       	push	r6
    59e4:	7f 92       	push	r7
    59e6:	8f 92       	push	r8
    59e8:	9f 92       	push	r9
    59ea:	af 92       	push	r10
    59ec:	bf 92       	push	r11
    59ee:	cf 92       	push	r12
    59f0:	df 92       	push	r13
    59f2:	ef 92       	push	r14
    59f4:	ff 92       	push	r15
    59f6:	0f 93       	push	r16
    59f8:	1f 93       	push	r17
    59fa:	cf 93       	push	r28
    59fc:	df 93       	push	r29
    59fe:	cd b7       	in	r28, 0x3d	; 61
    5a00:	de b7       	in	r29, 0x3e	; 62
    5a02:	ca 1b       	sub	r28, r26
    5a04:	db 0b       	sbc	r29, r27
    5a06:	0f b6       	in	r0, 0x3f	; 63
    5a08:	f8 94       	cli
    5a0a:	de bf       	out	0x3e, r29	; 62
    5a0c:	0f be       	out	0x3f, r0	; 63
    5a0e:	cd bf       	out	0x3d, r28	; 61
    5a10:	09 94       	ijmp

00005a12 <__epilogue_restores__>:
    5a12:	2a 88       	ldd	r2, Y+18	; 0x12
    5a14:	39 88       	ldd	r3, Y+17	; 0x11
    5a16:	48 88       	ldd	r4, Y+16	; 0x10
    5a18:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a20:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a22:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a24:	b9 84       	ldd	r11, Y+9	; 0x09
    5a26:	c8 84       	ldd	r12, Y+8	; 0x08
    5a28:	df 80       	ldd	r13, Y+7	; 0x07
    5a2a:	ee 80       	ldd	r14, Y+6	; 0x06
    5a2c:	fd 80       	ldd	r15, Y+5	; 0x05
    5a2e:	0c 81       	ldd	r16, Y+4	; 0x04
    5a30:	1b 81       	ldd	r17, Y+3	; 0x03
    5a32:	aa 81       	ldd	r26, Y+2	; 0x02
    5a34:	b9 81       	ldd	r27, Y+1	; 0x01
    5a36:	ce 0f       	add	r28, r30
    5a38:	d1 1d       	adc	r29, r1
    5a3a:	0f b6       	in	r0, 0x3f	; 63
    5a3c:	f8 94       	cli
    5a3e:	de bf       	out	0x3e, r29	; 62
    5a40:	0f be       	out	0x3f, r0	; 63
    5a42:	cd bf       	out	0x3d, r28	; 61
    5a44:	ed 01       	movw	r28, r26
    5a46:	08 95       	ret

00005a48 <_exit>:
    5a48:	f8 94       	cli

00005a4a <__stop_program>:
    5a4a:	ff cf       	rjmp	.-2      	; 0x5a4a <__stop_program>
