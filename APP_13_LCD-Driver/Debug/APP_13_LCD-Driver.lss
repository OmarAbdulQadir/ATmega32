
APP_13_LCD-Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00005c74  00005ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003f60  00000000  00000000  00005e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000116f  00000000  00000000  00009d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000aeeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  0000b08b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  0000b27b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  0000d687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000fbd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000fd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f4 06 	call	0xde8	; 0xde8 <main>
      7a:	0c 94 38 2e 	jmp	0x5c70	; 0x5c70 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 01 2e 	jmp	0x5c02	; 0x5c02 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e7       	ldi	r26, 0x72	; 114
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1d 2e 	jmp	0x5c3a	; 0x5c3a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0d 2e 	jmp	0x5c1a	; 0x5c1a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0d 2e 	jmp	0x5c1a	; 0x5c1a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 01 2e 	jmp	0x5c02	; 0x5c02 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e7       	ldi	r24, 0x72	; 114
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1d 2e 	jmp	0x5c3a	; 0x5c3a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 09 2e 	jmp	0x5c12	; 0x5c12 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 e7       	ldi	r22, 0x72	; 114
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 0d 2e 	jmp	0x5c1a	; 0x5c1a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 0d 2e 	jmp	0x5c1a	; 0x5c1a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 0d 2e 	jmp	0x5c1a	; 0x5c1a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 11 2e 	jmp	0x5c22	; 0x5c22 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 2d 2e 	jmp	0x5c5a	; 0x5c5a <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e6 58       	subi	r30, 0x86	; 134
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <main>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "../../Drivers/MCAL/DIO/DIO_interface.h"
#include "../../Drivers/HAL/LCD/LCD_interface.h"

int main(void){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	cf 54       	subi	r28, 0x4F	; 79
     df2:	d0 40       	sbci	r29, 0x00	; 0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
     dfe:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <LCD_init>

	LCD_write_char('S');
     e02:	83 e5       	ldi	r24, 0x53	; 83
     e04:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>
	LCD_write_char(5+'0');
     e08:	85 e3       	ldi	r24, 0x35	; 53
     e0a:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>
	LCD_write_char(' ');
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>

	LCD_set_cursor(0, 4);
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	64 e0       	ldi	r22, 0x04	; 4
     e18:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <LCD_set_cursor>
	u8 str1[]= "Omar ";
     e1c:	ce 01       	movw	r24, r28
     e1e:	c4 96       	adiw	r24, 0x34	; 52
     e20:	28 96       	adiw	r28, 0x08	; 8
     e22:	9f af       	std	Y+63, r25	; 0x3f
     e24:	8e af       	std	Y+62, r24	; 0x3e
     e26:	28 97       	sbiw	r28, 0x08	; 8
     e28:	e0 e6       	ldi	r30, 0x60	; 96
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	2a 96       	adiw	r28, 0x0a	; 10
     e2e:	ff af       	std	Y+63, r31	; 0x3f
     e30:	ee af       	std	Y+62, r30	; 0x3e
     e32:	2a 97       	sbiw	r28, 0x0a	; 10
     e34:	f6 e0       	ldi	r31, 0x06	; 6
     e36:	2b 96       	adiw	r28, 0x0b	; 11
     e38:	ff af       	std	Y+63, r31	; 0x3f
     e3a:	2b 97       	sbiw	r28, 0x0b	; 11
     e3c:	2a 96       	adiw	r28, 0x0a	; 10
     e3e:	ee ad       	ldd	r30, Y+62	; 0x3e
     e40:	ff ad       	ldd	r31, Y+63	; 0x3f
     e42:	2a 97       	sbiw	r28, 0x0a	; 10
     e44:	00 80       	ld	r0, Z
     e46:	2a 96       	adiw	r28, 0x0a	; 10
     e48:	8e ad       	ldd	r24, Y+62	; 0x3e
     e4a:	9f ad       	ldd	r25, Y+63	; 0x3f
     e4c:	2a 97       	sbiw	r28, 0x0a	; 10
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	2a 96       	adiw	r28, 0x0a	; 10
     e52:	9f af       	std	Y+63, r25	; 0x3f
     e54:	8e af       	std	Y+62, r24	; 0x3e
     e56:	2a 97       	sbiw	r28, 0x0a	; 10
     e58:	28 96       	adiw	r28, 0x08	; 8
     e5a:	ee ad       	ldd	r30, Y+62	; 0x3e
     e5c:	ff ad       	ldd	r31, Y+63	; 0x3f
     e5e:	28 97       	sbiw	r28, 0x08	; 8
     e60:	00 82       	st	Z, r0
     e62:	28 96       	adiw	r28, 0x08	; 8
     e64:	8e ad       	ldd	r24, Y+62	; 0x3e
     e66:	9f ad       	ldd	r25, Y+63	; 0x3f
     e68:	28 97       	sbiw	r28, 0x08	; 8
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	28 96       	adiw	r28, 0x08	; 8
     e6e:	9f af       	std	Y+63, r25	; 0x3f
     e70:	8e af       	std	Y+62, r24	; 0x3e
     e72:	28 97       	sbiw	r28, 0x08	; 8
     e74:	2b 96       	adiw	r28, 0x0b	; 11
     e76:	9f ad       	ldd	r25, Y+63	; 0x3f
     e78:	2b 97       	sbiw	r28, 0x0b	; 11
     e7a:	91 50       	subi	r25, 0x01	; 1
     e7c:	2b 96       	adiw	r28, 0x0b	; 11
     e7e:	9f af       	std	Y+63, r25	; 0x3f
     e80:	2b 97       	sbiw	r28, 0x0b	; 11
     e82:	2b 96       	adiw	r28, 0x0b	; 11
     e84:	ef ad       	ldd	r30, Y+63	; 0x3f
     e86:	2b 97       	sbiw	r28, 0x0b	; 11
     e88:	ee 23       	and	r30, r30
     e8a:	c1 f6       	brne	.-80     	; 0xe3c <main+0x54>
	LCD_write_str(str1);
     e8c:	ce 01       	movw	r24, r28
     e8e:	c4 96       	adiw	r24, 0x34	; 52
     e90:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_write_str>

	LCD_set_cursor(1, 6);
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	66 e0       	ldi	r22, 0x06	; 6
     e98:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <LCD_set_cursor>
	LCD_write_s32_number(-12345);
     e9c:	67 ec       	ldi	r22, 0xC7	; 199
     e9e:	7f ec       	ldi	r23, 0xCF	; 207
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	0e 94 21 2a 	call	0x5442	; 0x5442 <LCD_write_s32_number>

	f32 float_val= 10.2;
     ea8:	83 e3       	ldi	r24, 0x33	; 51
     eaa:	93 e3       	ldi	r25, 0x33	; 51
     eac:	a3 e2       	ldi	r26, 0x23	; 35
     eae:	b1 e4       	ldi	r27, 0x41	; 65
     eb0:	88 ab       	std	Y+48, r24	; 0x30
     eb2:	99 ab       	std	Y+49, r25	; 0x31
     eb4:	aa ab       	std	Y+50, r26	; 0x32
     eb6:	bb ab       	std	Y+51, r27	; 0x33
	LCD_clear();
     eb8:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <LCD_clear>
	for(u8 i= 0; i< 10; i++){
     ebc:	1b a6       	std	Y+43, r1	; 0x2b
     ebe:	a5 c0       	rjmp	.+330    	; 0x100a <main+0x222>
		float_val += i/10.0;
     ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	aa 27       	eor	r26, r26
     ec8:	97 fd       	sbrc	r25, 7
     eca:	a0 95       	com	r26
     ecc:	ba 2f       	mov	r27, r26
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e2       	ldi	r20, 0x20	; 32
     ee4:	51 e4       	ldi	r21, 0x41	; 65
     ee6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9c 01       	movw	r18, r24
     ef0:	ad 01       	movw	r20, r26
     ef2:	68 a9       	ldd	r22, Y+48	; 0x30
     ef4:	79 a9       	ldd	r23, Y+49	; 0x31
     ef6:	8a a9       	ldd	r24, Y+50	; 0x32
     ef8:	9b a9       	ldd	r25, Y+51	; 0x33
     efa:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	88 ab       	std	Y+48, r24	; 0x30
     f04:	99 ab       	std	Y+49, r25	; 0x31
     f06:	aa ab       	std	Y+50, r26	; 0x32
     f08:	bb ab       	std	Y+51, r27	; 0x33
		LCD_write_float(float_val, 2);
     f0a:	88 a9       	ldd	r24, Y+48	; 0x30
     f0c:	99 a9       	ldd	r25, Y+49	; 0x31
     f0e:	aa a9       	ldd	r26, Y+50	; 0x32
     f10:	bb a9       	ldd	r27, Y+51	; 0x33
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	42 e0       	ldi	r20, 0x02	; 2
     f18:	0e 94 bb 2a 	call	0x5576	; 0x5576 <LCD_write_float>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	aa e7       	ldi	r26, 0x7A	; 122
     f22:	b3 e4       	ldi	r27, 0x43	; 67
     f24:	8f a3       	std	Y+39, r24	; 0x27
     f26:	98 a7       	std	Y+40, r25	; 0x28
     f28:	a9 a7       	std	Y+41, r26	; 0x29
     f2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	6f a1       	ldd	r22, Y+39	; 0x27
     f2e:	78 a5       	ldd	r23, Y+40	; 0x28
     f30:	89 a5       	ldd	r24, Y+41	; 0x29
     f32:	9a a5       	ldd	r25, Y+42	; 0x2a
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4a ef       	ldi	r20, 0xFA	; 250
     f3a:	54 e4       	ldi	r21, 0x44	; 68
     f3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	8b a3       	std	Y+35, r24	; 0x23
     f46:	9c a3       	std	Y+36, r25	; 0x24
     f48:	ad a3       	std	Y+37, r26	; 0x25
     f4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f4c:	6b a1       	ldd	r22, Y+35	; 0x23
     f4e:	7c a1       	ldd	r23, Y+36	; 0x24
     f50:	8d a1       	ldd	r24, Y+37	; 0x25
     f52:	9e a1       	ldd	r25, Y+38	; 0x26
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f60:	88 23       	and	r24, r24
     f62:	2c f4       	brge	.+10     	; 0xf6e <main+0x186>
		__ticks = 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	3f c0       	rjmp	.+126    	; 0xfec <main+0x204>
	else if (__tmp > 65535)
     f6e:	6b a1       	ldd	r22, Y+35	; 0x23
     f70:	7c a1       	ldd	r23, Y+36	; 0x24
     f72:	8d a1       	ldd	r24, Y+37	; 0x25
     f74:	9e a1       	ldd	r25, Y+38	; 0x26
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f82:	18 16       	cp	r1, r24
     f84:	4c f5       	brge	.+82     	; 0xfd8 <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f86:	6f a1       	ldd	r22, Y+39	; 0x27
     f88:	78 a5       	ldd	r23, Y+40	; 0x28
     f8a:	89 a5       	ldd	r24, Y+41	; 0x29
     f8c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e2       	ldi	r20, 0x20	; 32
     f94:	51 e4       	ldi	r21, 0x41	; 65
     f96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	cd 01       	movw	r24, r26
     fa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9a a3       	std	Y+34, r25	; 0x22
     fac:	89 a3       	std	Y+33, r24	; 0x21
     fae:	0f c0       	rjmp	.+30     	; 0xfce <main+0x1e6>
     fb0:	88 ec       	ldi	r24, 0xC8	; 200
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	98 a3       	std	Y+32, r25	; 0x20
     fb6:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fba:	98 a1       	ldd	r25, Y+32	; 0x20
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <main+0x1d4>
     fc0:	98 a3       	std	Y+32, r25	; 0x20
     fc2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc4:	89 a1       	ldd	r24, Y+33	; 0x21
     fc6:	9a a1       	ldd	r25, Y+34	; 0x22
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9a a3       	std	Y+34, r25	; 0x22
     fcc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fce:	89 a1       	ldd	r24, Y+33	; 0x21
     fd0:	9a a1       	ldd	r25, Y+34	; 0x22
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	69 f7       	brne	.-38     	; 0xfb0 <main+0x1c8>
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd8:	6b a1       	ldd	r22, Y+35	; 0x23
     fda:	7c a1       	ldd	r23, Y+36	; 0x24
     fdc:	8d a1       	ldd	r24, Y+37	; 0x25
     fde:	9e a1       	ldd	r25, Y+38	; 0x26
     fe0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	9a a3       	std	Y+34, r25	; 0x22
     fea:	89 a3       	std	Y+33, r24	; 0x21
     fec:	89 a1       	ldd	r24, Y+33	; 0x21
     fee:	9a a1       	ldd	r25, Y+34	; 0x22
     ff0:	9e 8f       	std	Y+30, r25	; 0x1e
     ff2:	8d 8f       	std	Y+29, r24	; 0x1d
     ff4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <main+0x210>
     ffc:	9e 8f       	std	Y+30, r25	; 0x1e
     ffe:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		LCD_clear();
    1000:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <LCD_clear>
	LCD_set_cursor(1, 6);
	LCD_write_s32_number(-12345);

	f32 float_val= 10.2;
	LCD_clear();
	for(u8 i= 0; i< 10; i++){
    1004:	8b a5       	ldd	r24, Y+43	; 0x2b
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	8b a7       	std	Y+43, r24	; 0x2b
    100a:	8b a5       	ldd	r24, Y+43	; 0x2b
    100c:	8a 30       	cpi	r24, 0x0A	; 10
    100e:	08 f4       	brcc	.+2      	; 0x1012 <main+0x22a>
    1010:	57 cf       	rjmp	.-338    	; 0xec0 <main+0xd8>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	aa e7       	ldi	r26, 0x7A	; 122
    1018:	b4 e4       	ldi	r27, 0x44	; 68
    101a:	89 8f       	std	Y+25, r24	; 0x19
    101c:	9a 8f       	std	Y+26, r25	; 0x1a
    101e:	ab 8f       	std	Y+27, r26	; 0x1b
    1020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1022:	69 8d       	ldd	r22, Y+25	; 0x19
    1024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a ef       	ldi	r20, 0xFA	; 250
    1030:	54 e4       	ldi	r21, 0x44	; 68
    1032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	8d 8b       	std	Y+21, r24	; 0x15
    103c:	9e 8b       	std	Y+22, r25	; 0x16
    103e:	af 8b       	std	Y+23, r26	; 0x17
    1040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1042:	6d 89       	ldd	r22, Y+21	; 0x15
    1044:	7e 89       	ldd	r23, Y+22	; 0x16
    1046:	8f 89       	ldd	r24, Y+23	; 0x17
    1048:	98 8d       	ldd	r25, Y+24	; 0x18
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e8       	ldi	r20, 0x80	; 128
    1050:	5f e3       	ldi	r21, 0x3F	; 63
    1052:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1056:	88 23       	and	r24, r24
    1058:	2c f4       	brge	.+10     	; 0x1064 <main+0x27c>
		__ticks = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9c 8b       	std	Y+20, r25	; 0x14
    1060:	8b 8b       	std	Y+19, r24	; 0x13
    1062:	3f c0       	rjmp	.+126    	; 0x10e2 <main+0x2fa>
	else if (__tmp > 65535)
    1064:	6d 89       	ldd	r22, Y+21	; 0x15
    1066:	7e 89       	ldd	r23, Y+22	; 0x16
    1068:	8f 89       	ldd	r24, Y+23	; 0x17
    106a:	98 8d       	ldd	r25, Y+24	; 0x18
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	3f ef       	ldi	r19, 0xFF	; 255
    1070:	4f e7       	ldi	r20, 0x7F	; 127
    1072:	57 e4       	ldi	r21, 0x47	; 71
    1074:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1078:	18 16       	cp	r1, r24
    107a:	4c f5       	brge	.+82     	; 0x10ce <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107c:	69 8d       	ldd	r22, Y+25	; 0x19
    107e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9c 8b       	std	Y+20, r25	; 0x14
    10a2:	8b 8b       	std	Y+19, r24	; 0x13
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <main+0x2dc>
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9a 8b       	std	Y+18, r25	; 0x12
    10ac:	89 8b       	std	Y+17, r24	; 0x11
    10ae:	89 89       	ldd	r24, Y+17	; 0x11
    10b0:	9a 89       	ldd	r25, Y+18	; 0x12
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <main+0x2ca>
    10b6:	9a 8b       	std	Y+18, r25	; 0x12
    10b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	8b 89       	ldd	r24, Y+19	; 0x13
    10bc:	9c 89       	ldd	r25, Y+20	; 0x14
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	9c 8b       	std	Y+20, r25	; 0x14
    10c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c4:	8b 89       	ldd	r24, Y+19	; 0x13
    10c6:	9c 89       	ldd	r25, Y+20	; 0x14
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <main+0x2be>
    10cc:	14 c0       	rjmp	.+40     	; 0x10f6 <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ce:	6d 89       	ldd	r22, Y+21	; 0x15
    10d0:	7e 89       	ldd	r23, Y+22	; 0x16
    10d2:	8f 89       	ldd	r24, Y+23	; 0x17
    10d4:	98 8d       	ldd	r25, Y+24	; 0x18
    10d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	9c 8b       	std	Y+20, r25	; 0x14
    10e0:	8b 8b       	std	Y+19, r24	; 0x13
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	98 8b       	std	Y+16, r25	; 0x10
    10e8:	8f 87       	std	Y+15, r24	; 0x0f
    10ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ec:	98 89       	ldd	r25, Y+16	; 0x10
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <main+0x306>
    10f2:	98 8b       	std	Y+16, r25	; 0x10
    10f4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_write_char(1);
	LCD_write_char(2);
*/

	_delay_ms(1000);
	LCD_clear();
    10f6:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <LCD_clear>
	s32 val= 3245435;
    10fa:	8b e7       	ldi	r24, 0x7B	; 123
    10fc:	95 e8       	ldi	r25, 0x85	; 133
    10fe:	a1 e3       	ldi	r26, 0x31	; 49
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	8c a7       	std	Y+44, r24	; 0x2c
    1104:	9d a7       	std	Y+45, r25	; 0x2d
    1106:	ae a7       	std	Y+46, r26	; 0x2e
    1108:	bf a7       	std	Y+47, r27	; 0x2f
	while(1){
		u8 str2[]= "The number ";
    110a:	ce 01       	movw	r24, r28
    110c:	ca 96       	adiw	r24, 0x3a	; 58
    110e:	2d 96       	adiw	r28, 0x0d	; 13
    1110:	9f af       	std	Y+63, r25	; 0x3f
    1112:	8e af       	std	Y+62, r24	; 0x3e
    1114:	2d 97       	sbiw	r28, 0x0d	; 13
    1116:	e6 e6       	ldi	r30, 0x66	; 102
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	2f 96       	adiw	r28, 0x0f	; 15
    111c:	ff af       	std	Y+63, r31	; 0x3f
    111e:	ee af       	std	Y+62, r30	; 0x3e
    1120:	2f 97       	sbiw	r28, 0x0f	; 15
    1122:	fc e0       	ldi	r31, 0x0C	; 12
    1124:	60 96       	adiw	r28, 0x10	; 16
    1126:	ff af       	std	Y+63, r31	; 0x3f
    1128:	60 97       	sbiw	r28, 0x10	; 16
    112a:	2f 96       	adiw	r28, 0x0f	; 15
    112c:	ee ad       	ldd	r30, Y+62	; 0x3e
    112e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1130:	2f 97       	sbiw	r28, 0x0f	; 15
    1132:	00 80       	ld	r0, Z
    1134:	2f 96       	adiw	r28, 0x0f	; 15
    1136:	8e ad       	ldd	r24, Y+62	; 0x3e
    1138:	9f ad       	ldd	r25, Y+63	; 0x3f
    113a:	2f 97       	sbiw	r28, 0x0f	; 15
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	2f 96       	adiw	r28, 0x0f	; 15
    1140:	9f af       	std	Y+63, r25	; 0x3f
    1142:	8e af       	std	Y+62, r24	; 0x3e
    1144:	2f 97       	sbiw	r28, 0x0f	; 15
    1146:	2d 96       	adiw	r28, 0x0d	; 13
    1148:	ee ad       	ldd	r30, Y+62	; 0x3e
    114a:	ff ad       	ldd	r31, Y+63	; 0x3f
    114c:	2d 97       	sbiw	r28, 0x0d	; 13
    114e:	00 82       	st	Z, r0
    1150:	2d 96       	adiw	r28, 0x0d	; 13
    1152:	8e ad       	ldd	r24, Y+62	; 0x3e
    1154:	9f ad       	ldd	r25, Y+63	; 0x3f
    1156:	2d 97       	sbiw	r28, 0x0d	; 13
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	2d 96       	adiw	r28, 0x0d	; 13
    115c:	9f af       	std	Y+63, r25	; 0x3f
    115e:	8e af       	std	Y+62, r24	; 0x3e
    1160:	2d 97       	sbiw	r28, 0x0d	; 13
    1162:	60 96       	adiw	r28, 0x10	; 16
    1164:	9f ad       	ldd	r25, Y+63	; 0x3f
    1166:	60 97       	sbiw	r28, 0x10	; 16
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	60 96       	adiw	r28, 0x10	; 16
    116c:	9f af       	std	Y+63, r25	; 0x3f
    116e:	60 97       	sbiw	r28, 0x10	; 16
    1170:	60 96       	adiw	r28, 0x10	; 16
    1172:	ef ad       	ldd	r30, Y+63	; 0x3f
    1174:	60 97       	sbiw	r28, 0x10	; 16
    1176:	ee 23       	and	r30, r30
    1178:	c1 f6       	brne	.-80     	; 0x112a <main+0x342>
		LCD_write_str(str2);
    117a:	ce 01       	movw	r24, r28
    117c:	ca 96       	adiw	r24, 0x3a	; 58
    117e:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <LCD_write_str>
		LCD_set_cursor(1, 0);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <LCD_set_cursor>
		LCD_write_s32_number(val);
    118a:	8c a5       	ldd	r24, Y+44	; 0x2c
    118c:	9d a5       	ldd	r25, Y+45	; 0x2d
    118e:	ae a5       	ldd	r26, Y+46	; 0x2e
    1190:	bf a5       	ldd	r27, Y+47	; 0x2f
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	0e 94 21 2a 	call	0x5442	; 0x5442 <LCD_write_s32_number>
		val--;
    119a:	8c a5       	ldd	r24, Y+44	; 0x2c
    119c:	9d a5       	ldd	r25, Y+45	; 0x2d
    119e:	ae a5       	ldd	r26, Y+46	; 0x2e
    11a0:	bf a5       	ldd	r27, Y+47	; 0x2f
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	a1 09       	sbc	r26, r1
    11a6:	b1 09       	sbc	r27, r1
    11a8:	8c a7       	std	Y+44, r24	; 0x2c
    11aa:	9d a7       	std	Y+45, r25	; 0x2d
    11ac:	ae a7       	std	Y+46, r26	; 0x2e
    11ae:	bf a7       	std	Y+47, r27	; 0x2f
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a8 e4       	ldi	r26, 0x48	; 72
    11b6:	b2 e4       	ldi	r27, 0x42	; 66
    11b8:	8b 87       	std	Y+11, r24	; 0x0b
    11ba:	9c 87       	std	Y+12, r25	; 0x0c
    11bc:	ad 87       	std	Y+13, r26	; 0x0d
    11be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	4a ef       	ldi	r20, 0xFA	; 250
    11ce:	54 e4       	ldi	r21, 0x44	; 68
    11d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	8f 83       	std	Y+7, r24	; 0x07
    11da:	98 87       	std	Y+8, r25	; 0x08
    11dc:	a9 87       	std	Y+9, r26	; 0x09
    11de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e0:	6f 81       	ldd	r22, Y+7	; 0x07
    11e2:	78 85       	ldd	r23, Y+8	; 0x08
    11e4:	89 85       	ldd	r24, Y+9	; 0x09
    11e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e8       	ldi	r20, 0x80	; 128
    11ee:	5f e3       	ldi	r21, 0x3F	; 63
    11f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11f4:	88 23       	and	r24, r24
    11f6:	2c f4       	brge	.+10     	; 0x1202 <main+0x41a>
		__ticks = 1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	3f c0       	rjmp	.+126    	; 0x1280 <main+0x498>
	else if (__tmp > 65535)
    1202:	6f 81       	ldd	r22, Y+7	; 0x07
    1204:	78 85       	ldd	r23, Y+8	; 0x08
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	4f e7       	ldi	r20, 0x7F	; 127
    1210:	57 e4       	ldi	r21, 0x47	; 71
    1212:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1216:	18 16       	cp	r1, r24
    1218:	4c f5       	brge	.+82     	; 0x126c <main+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121a:	6b 85       	ldd	r22, Y+11	; 0x0b
    121c:	7c 85       	ldd	r23, Y+12	; 0x0c
    121e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1220:	9e 85       	ldd	r25, Y+14	; 0x0e
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e2       	ldi	r20, 0x20	; 32
    1228:	51 e4       	ldi	r21, 0x41	; 65
    122a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	9e 83       	std	Y+6, r25	; 0x06
    1240:	8d 83       	std	Y+5, r24	; 0x05
    1242:	0f c0       	rjmp	.+30     	; 0x1262 <main+0x47a>
    1244:	88 ec       	ldi	r24, 0xC8	; 200
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9c 83       	std	Y+4, r25	; 0x04
    124a:	8b 83       	std	Y+3, r24	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <main+0x468>
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	9e 83       	std	Y+6, r25	; 0x06
    1260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1262:	8d 81       	ldd	r24, Y+5	; 0x05
    1264:	9e 81       	ldd	r25, Y+6	; 0x06
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	69 f7       	brne	.-38     	; 0x1244 <main+0x45c>
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <main+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126c:	6f 81       	ldd	r22, Y+7	; 0x07
    126e:	78 85       	ldd	r23, Y+8	; 0x08
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	9a 85       	ldd	r25, Y+10	; 0x0a
    1274:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1278:	dc 01       	movw	r26, r24
    127a:	cb 01       	movw	r24, r22
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <main+0x4a4>
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LCD_clear();
    1294:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <LCD_clear>
    1298:	38 cf       	rjmp	.-400    	; 0x110a <main+0x322>

0000129a <LCD_pow>:
#include "../../MCAL/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	27 97       	sbiw	r28, 0x07	; 7
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	8e 83       	std	Y+6, r24	; 0x06
    12b0:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
    12b2:	8e 81       	ldd	r24, Y+6	; 0x06
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e0       	ldi	r26, 0x00	; 0
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	8a 83       	std	Y+2, r24	; 0x02
    12be:	9b 83       	std	Y+3, r25	; 0x03
    12c0:	ac 83       	std	Y+4, r26	; 0x04
    12c2:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    12c4:	19 82       	std	Y+1, r1	; 0x01
    12c6:	16 c0       	rjmp	.+44     	; 0x12f4 <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
    12c8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	9b 81       	ldd	r25, Y+3	; 0x03
    12d6:	ac 81       	ldd	r26, Y+4	; 0x04
    12d8:	bd 81       	ldd	r27, Y+5	; 0x05
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <__mulsi3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	8a 83       	std	Y+2, r24	; 0x02
    12e8:	9b 83       	std	Y+3, r25	; 0x03
    12ea:	ac 83       	std	Y+4, r26	; 0x04
    12ec:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	04 f3       	brlt	.-64     	; 0x12c8 <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	9b 81       	ldd	r25, Y+3	; 0x03
    130c:	ac 81       	ldd	r26, Y+4	; 0x04
    130e:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	27 96       	adiw	r28, 0x07	; 7
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	e1 97       	sbiw	r28, 0x31	; 49
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	62 e0       	ldi	r22, 0x02	; 2
    1340:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a0 e8       	ldi	r26, 0x80	; 128
    1352:	bf e3       	ldi	r27, 0x3F	; 63
    1354:	8d a7       	std	Y+45, r24	; 0x2d
    1356:	9e a7       	std	Y+46, r25	; 0x2e
    1358:	af a7       	std	Y+47, r26	; 0x2f
    135a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    135c:	6d a5       	ldd	r22, Y+45	; 0x2d
    135e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1360:	8f a5       	ldd	r24, Y+47	; 0x2f
    1362:	98 a9       	ldd	r25, Y+48	; 0x30
    1364:	2b ea       	ldi	r18, 0xAB	; 171
    1366:	3a ea       	ldi	r19, 0xAA	; 170
    1368:	4a e2       	ldi	r20, 0x2A	; 42
    136a:	50 e4       	ldi	r21, 0x40	; 64
    136c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	89 a7       	std	Y+41, r24	; 0x29
    1376:	9a a7       	std	Y+42, r25	; 0x2a
    1378:	ab a7       	std	Y+43, r26	; 0x2b
    137a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    137c:	69 a5       	ldd	r22, Y+41	; 0x29
    137e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1380:	8b a5       	ldd	r24, Y+43	; 0x2b
    1382:	9c a5       	ldd	r25, Y+44	; 0x2c
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	1c f4       	brge	.+6      	; 0x139a <LCD_write_data_8bit+0x74>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	88 a7       	std	Y+40, r24	; 0x28
    1398:	91 c0       	rjmp	.+290    	; 0x14bc <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    139a:	69 a5       	ldd	r22, Y+41	; 0x29
    139c:	7a a5       	ldd	r23, Y+42	; 0x2a
    139e:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	53 e4       	ldi	r21, 0x43	; 67
    13aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	0c f0       	brlt	.+2      	; 0x13b4 <LCD_write_data_8bit+0x8e>
    13b2:	7b c0       	rjmp	.+246    	; 0x14aa <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    13b4:	6d a5       	ldd	r22, Y+45	; 0x2d
    13b6:	7e a5       	ldd	r23, Y+46	; 0x2e
    13b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ba:	98 a9       	ldd	r25, Y+48	; 0x30
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	4a e7       	ldi	r20, 0x7A	; 122
    13c2:	54 e4       	ldi	r21, 0x44	; 68
    13c4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	8c a3       	std	Y+36, r24	; 0x24
    13ce:	9d a3       	std	Y+37, r25	; 0x25
    13d0:	ae a3       	std	Y+38, r26	; 0x26
    13d2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	6c a1       	ldd	r22, Y+36	; 0x24
    13d6:	7d a1       	ldd	r23, Y+37	; 0x25
    13d8:	8e a1       	ldd	r24, Y+38	; 0x26
    13da:	9f a1       	ldd	r25, Y+39	; 0x27
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a ef       	ldi	r20, 0xFA	; 250
    13e2:	54 e4       	ldi	r21, 0x44	; 68
    13e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	88 a3       	std	Y+32, r24	; 0x20
    13ee:	99 a3       	std	Y+33, r25	; 0x21
    13f0:	aa a3       	std	Y+34, r26	; 0x22
    13f2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    13f4:	68 a1       	ldd	r22, Y+32	; 0x20
    13f6:	79 a1       	ldd	r23, Y+33	; 0x21
    13f8:	8a a1       	ldd	r24, Y+34	; 0x22
    13fa:	9b a1       	ldd	r25, Y+35	; 0x23
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9f 8f       	std	Y+31, r25	; 0x1f
    1412:	8e 8f       	std	Y+30, r24	; 0x1e
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    1416:	68 a1       	ldd	r22, Y+32	; 0x20
    1418:	79 a1       	ldd	r23, Y+33	; 0x21
    141a:	8a a1       	ldd	r24, Y+34	; 0x22
    141c:	9b a1       	ldd	r25, Y+35	; 0x23
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	6c a1       	ldd	r22, Y+36	; 0x24
    1430:	7d a1       	ldd	r23, Y+37	; 0x25
    1432:	8e a1       	ldd	r24, Y+38	; 0x26
    1434:	9f a1       	ldd	r25, Y+39	; 0x27
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9f 8f       	std	Y+31, r25	; 0x1f
    1454:	8e 8f       	std	Y+30, r24	; 0x1e
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <LCD_write_data_8bit+0x150>
    1458:	88 ec       	ldi	r24, 0xC8	; 200
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9d 8f       	std	Y+29, r25	; 0x1d
    145e:	8c 8f       	std	Y+28, r24	; 0x1c
    1460:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1462:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <LCD_write_data_8bit+0x13e>
    1468:	9d 8f       	std	Y+29, r25	; 0x1d
    146a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    146e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9f 8f       	std	Y+31, r25	; 0x1f
    1474:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1478:	9f 8d       	ldd	r25, Y+31	; 0x1f
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	69 f7       	brne	.-38     	; 0x1458 <LCD_write_data_8bit+0x132>
    147e:	24 c0       	rjmp	.+72     	; 0x14c8 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	68 a1       	ldd	r22, Y+32	; 0x20
    1482:	79 a1       	ldd	r23, Y+33	; 0x21
    1484:	8a a1       	ldd	r24, Y+34	; 0x22
    1486:	9b a1       	ldd	r25, Y+35	; 0x23
    1488:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9f 8f       	std	Y+31, r25	; 0x1f
    1492:	8e 8f       	std	Y+30, r24	; 0x1e
    1494:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1496:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1498:	9b 8f       	std	Y+27, r25	; 0x1b
    149a:	8a 8f       	std	Y+26, r24	; 0x1a
    149c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    149e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_write_data_8bit+0x17a>
    14a4:	9b 8f       	std	Y+27, r25	; 0x1b
    14a6:	8a 8f       	std	Y+26, r24	; 0x1a
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14aa:	69 a5       	ldd	r22, Y+41	; 0x29
    14ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    14ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    14b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    14b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	88 a7       	std	Y+40, r24	; 0x28
    14bc:	88 a5       	ldd	r24, Y+40	; 0x28
    14be:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14c0:	89 8d       	ldd	r24, Y+25	; 0x19
    14c2:	8a 95       	dec	r24
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <LCD_write_data_8bit+0x19c>
    14c6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a0 e8       	ldi	r26, 0x80	; 128
    14d6:	bf e3       	ldi	r27, 0x3F	; 63
    14d8:	8d 8b       	std	Y+21, r24	; 0x15
    14da:	9e 8b       	std	Y+22, r25	; 0x16
    14dc:	af 8b       	std	Y+23, r26	; 0x17
    14de:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7e 89       	ldd	r23, Y+22	; 0x16
    14e4:	8f 89       	ldd	r24, Y+23	; 0x17
    14e6:	98 8d       	ldd	r25, Y+24	; 0x18
    14e8:	2b ea       	ldi	r18, 0xAB	; 171
    14ea:	3a ea       	ldi	r19, 0xAA	; 170
    14ec:	4a e2       	ldi	r20, 0x2A	; 42
    14ee:	50 e4       	ldi	r21, 0x40	; 64
    14f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	89 8b       	std	Y+17, r24	; 0x11
    14fa:	9a 8b       	std	Y+18, r25	; 0x12
    14fc:	ab 8b       	std	Y+19, r26	; 0x13
    14fe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1500:	69 89       	ldd	r22, Y+17	; 0x11
    1502:	7a 89       	ldd	r23, Y+18	; 0x12
    1504:	8b 89       	ldd	r24, Y+19	; 0x13
    1506:	9c 89       	ldd	r25, Y+20	; 0x14
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	1c f4       	brge	.+6      	; 0x151e <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	88 8b       	std	Y+16, r24	; 0x10
    151c:	91 c0       	rjmp	.+290    	; 0x1640 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    151e:	69 89       	ldd	r22, Y+17	; 0x11
    1520:	7a 89       	ldd	r23, Y+18	; 0x12
    1522:	8b 89       	ldd	r24, Y+19	; 0x13
    1524:	9c 89       	ldd	r25, Y+20	; 0x14
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4f e7       	ldi	r20, 0x7F	; 127
    152c:	53 e4       	ldi	r21, 0x43	; 67
    152e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1532:	18 16       	cp	r1, r24
    1534:	0c f0       	brlt	.+2      	; 0x1538 <LCD_write_data_8bit+0x212>
    1536:	7b c0       	rjmp	.+246    	; 0x162e <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a e7       	ldi	r20, 0x7A	; 122
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8c 87       	std	Y+12, r24	; 0x0c
    1552:	9d 87       	std	Y+13, r25	; 0x0d
    1554:	ae 87       	std	Y+14, r26	; 0x0e
    1556:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	6c 85       	ldd	r22, Y+12	; 0x0c
    155a:	7d 85       	ldd	r23, Y+13	; 0x0d
    155c:	8e 85       	ldd	r24, Y+14	; 0x0e
    155e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a ef       	ldi	r20, 0xFA	; 250
    1566:	54 e4       	ldi	r21, 0x44	; 68
    1568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	88 87       	std	Y+8, r24	; 0x08
    1572:	99 87       	std	Y+9, r25	; 0x09
    1574:	aa 87       	std	Y+10, r26	; 0x0a
    1576:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1578:	68 85       	ldd	r22, Y+8	; 0x08
    157a:	79 85       	ldd	r23, Y+9	; 0x09
    157c:	8a 85       	ldd	r24, Y+10	; 0x0a
    157e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9f 83       	std	Y+7, r25	; 0x07
    1596:	8e 83       	std	Y+6, r24	; 0x06
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    159a:	68 85       	ldd	r22, Y+8	; 0x08
    159c:	79 85       	ldd	r23, Y+9	; 0x09
    159e:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    15b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    15b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    15b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9f 83       	std	Y+7, r25	; 0x07
    15d8:	8e 83       	std	Y+6, r24	; 0x06
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <LCD_write_data_8bit+0x2d4>
    15dc:	88 ec       	ldi	r24, 0xC8	; 200
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9d 83       	std	Y+5, r25	; 0x05
    15e2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <LCD_write_data_8bit+0x2c2>
    15ec:	9d 83       	std	Y+5, r25	; 0x05
    15ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	9f 81       	ldd	r25, Y+7	; 0x07
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9f 83       	std	Y+7, r25	; 0x07
    15f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8e 81       	ldd	r24, Y+6	; 0x06
    15fc:	9f 81       	ldd	r25, Y+7	; 0x07
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <LCD_write_data_8bit+0x2b6>
    1602:	24 c0       	rjmp	.+72     	; 0x164c <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	68 85       	ldd	r22, Y+8	; 0x08
    1606:	79 85       	ldd	r23, Y+9	; 0x09
    1608:	8a 85       	ldd	r24, Y+10	; 0x0a
    160a:	9b 85       	ldd	r25, Y+11	; 0x0b
    160c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9f 83       	std	Y+7, r25	; 0x07
    1616:	8e 83       	std	Y+6, r24	; 0x06
    1618:	8e 81       	ldd	r24, Y+6	; 0x06
    161a:	9f 81       	ldd	r25, Y+7	; 0x07
    161c:	9b 83       	std	Y+3, r25	; 0x03
    161e:	8a 83       	std	Y+2, r24	; 0x02
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <LCD_write_data_8bit+0x2fe>
    1628:	9b 83       	std	Y+3, r25	; 0x03
    162a:	8a 83       	std	Y+2, r24	; 0x02
    162c:	0f c0       	rjmp	.+30     	; 0x164c <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    162e:	69 89       	ldd	r22, Y+17	; 0x11
    1630:	7a 89       	ldd	r23, Y+18	; 0x12
    1632:	8b 89       	ldd	r24, Y+19	; 0x13
    1634:	9c 89       	ldd	r25, Y+20	; 0x14
    1636:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	88 8b       	std	Y+16, r24	; 0x10
    1640:	88 89       	ldd	r24, Y+16	; 0x10
    1642:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	8a 95       	dec	r24
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_write_data_8bit+0x320>
    164a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	69 a9       	ldd	r22, Y+49	; 0x31
    1650:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
}
    165c:	e1 96       	adiw	r28, 0x31	; 49
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	e1 97       	sbiw	r28, 0x31	; 49
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	62 e0       	ldi	r22, 0x02	; 2
    1688:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 e8       	ldi	r26, 0x80	; 128
    169a:	bf e3       	ldi	r27, 0x3F	; 63
    169c:	8d a7       	std	Y+45, r24	; 0x2d
    169e:	9e a7       	std	Y+46, r25	; 0x2e
    16a0:	af a7       	std	Y+47, r26	; 0x2f
    16a2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    16a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    16a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16aa:	98 a9       	ldd	r25, Y+48	; 0x30
    16ac:	2b ea       	ldi	r18, 0xAB	; 171
    16ae:	3a ea       	ldi	r19, 0xAA	; 170
    16b0:	4a e2       	ldi	r20, 0x2A	; 42
    16b2:	50 e4       	ldi	r21, 0x40	; 64
    16b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	89 a7       	std	Y+41, r24	; 0x29
    16be:	9a a7       	std	Y+42, r25	; 0x2a
    16c0:	ab a7       	std	Y+43, r26	; 0x2b
    16c2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    16c4:	69 a5       	ldd	r22, Y+41	; 0x29
    16c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    16c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	1c f4       	brge	.+6      	; 0x16e2 <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	88 a7       	std	Y+40, r24	; 0x28
    16e0:	91 c0       	rjmp	.+290    	; 0x1804 <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    16e2:	69 a5       	ldd	r22, Y+41	; 0x29
    16e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    16e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	53 e4       	ldi	r21, 0x43	; 67
    16f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	0c f0       	brlt	.+2      	; 0x16fc <LCD_write_cmd_8bit+0x8e>
    16fa:	7b c0       	rjmp	.+246    	; 0x17f2 <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    16fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    16fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    1700:	8f a5       	ldd	r24, Y+47	; 0x2f
    1702:	98 a9       	ldd	r25, Y+48	; 0x30
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4a e7       	ldi	r20, 0x7A	; 122
    170a:	54 e4       	ldi	r21, 0x44	; 68
    170c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	8c a3       	std	Y+36, r24	; 0x24
    1716:	9d a3       	std	Y+37, r25	; 0x25
    1718:	ae a3       	std	Y+38, r26	; 0x26
    171a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171c:	6c a1       	ldd	r22, Y+36	; 0x24
    171e:	7d a1       	ldd	r23, Y+37	; 0x25
    1720:	8e a1       	ldd	r24, Y+38	; 0x26
    1722:	9f a1       	ldd	r25, Y+39	; 0x27
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a ef       	ldi	r20, 0xFA	; 250
    172a:	54 e4       	ldi	r21, 0x44	; 68
    172c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	88 a3       	std	Y+32, r24	; 0x20
    1736:	99 a3       	std	Y+33, r25	; 0x21
    1738:	aa a3       	std	Y+34, r26	; 0x22
    173a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    173c:	68 a1       	ldd	r22, Y+32	; 0x20
    173e:	79 a1       	ldd	r23, Y+33	; 0x21
    1740:	8a a1       	ldd	r24, Y+34	; 0x22
    1742:	9b a1       	ldd	r25, Y+35	; 0x23
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9f 8f       	std	Y+31, r25	; 0x1f
    175a:	8e 8f       	std	Y+30, r24	; 0x1e
    175c:	3f c0       	rjmp	.+126    	; 0x17dc <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    175e:	68 a1       	ldd	r22, Y+32	; 0x20
    1760:	79 a1       	ldd	r23, Y+33	; 0x21
    1762:	8a a1       	ldd	r24, Y+34	; 0x22
    1764:	9b a1       	ldd	r25, Y+35	; 0x23
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1772:	18 16       	cp	r1, r24
    1774:	4c f5       	brge	.+82     	; 0x17c8 <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1776:	6c a1       	ldd	r22, Y+36	; 0x24
    1778:	7d a1       	ldd	r23, Y+37	; 0x25
    177a:	8e a1       	ldd	r24, Y+38	; 0x26
    177c:	9f a1       	ldd	r25, Y+39	; 0x27
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e2       	ldi	r20, 0x20	; 32
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	9f 8f       	std	Y+31, r25	; 0x1f
    179c:	8e 8f       	std	Y+30, r24	; 0x1e
    179e:	0f c0       	rjmp	.+30     	; 0x17be <LCD_write_cmd_8bit+0x150>
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9d 8f       	std	Y+29, r25	; 0x1d
    17a6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_write_cmd_8bit+0x13e>
    17b0:	9d 8f       	std	Y+29, r25	; 0x1d
    17b2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	9f 8f       	std	Y+31, r25	; 0x1f
    17bc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <LCD_write_cmd_8bit+0x132>
    17c6:	24 c0       	rjmp	.+72     	; 0x1810 <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c8:	68 a1       	ldd	r22, Y+32	; 0x20
    17ca:	79 a1       	ldd	r23, Y+33	; 0x21
    17cc:	8a a1       	ldd	r24, Y+34	; 0x22
    17ce:	9b a1       	ldd	r25, Y+35	; 0x23
    17d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9f 8f       	std	Y+31, r25	; 0x1f
    17da:	8e 8f       	std	Y+30, r24	; 0x1e
    17dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17de:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17e0:	9b 8f       	std	Y+27, r25	; 0x1b
    17e2:	8a 8f       	std	Y+26, r24	; 0x1a
    17e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_write_cmd_8bit+0x17a>
    17ec:	9b 8f       	std	Y+27, r25	; 0x1b
    17ee:	8a 8f       	std	Y+26, r24	; 0x1a
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17f2:	69 a5       	ldd	r22, Y+41	; 0x29
    17f4:	7a a5       	ldd	r23, Y+42	; 0x2a
    17f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	88 a7       	std	Y+40, r24	; 0x28
    1804:	88 a5       	ldd	r24, Y+40	; 0x28
    1806:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1808:	89 8d       	ldd	r24, Y+25	; 0x19
    180a:	8a 95       	dec	r24
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_write_cmd_8bit+0x19c>
    180e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e8       	ldi	r26, 0x80	; 128
    181e:	bf e3       	ldi	r27, 0x3F	; 63
    1820:	8d 8b       	std	Y+21, r24	; 0x15
    1822:	9e 8b       	std	Y+22, r25	; 0x16
    1824:	af 8b       	std	Y+23, r26	; 0x17
    1826:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	2b ea       	ldi	r18, 0xAB	; 171
    1832:	3a ea       	ldi	r19, 0xAA	; 170
    1834:	4a e2       	ldi	r20, 0x2A	; 42
    1836:	50 e4       	ldi	r21, 0x40	; 64
    1838:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	89 8b       	std	Y+17, r24	; 0x11
    1842:	9a 8b       	std	Y+18, r25	; 0x12
    1844:	ab 8b       	std	Y+19, r26	; 0x13
    1846:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1848:	69 89       	ldd	r22, Y+17	; 0x11
    184a:	7a 89       	ldd	r23, Y+18	; 0x12
    184c:	8b 89       	ldd	r24, Y+19	; 0x13
    184e:	9c 89       	ldd	r25, Y+20	; 0x14
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	1c f4       	brge	.+6      	; 0x1866 <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	88 8b       	std	Y+16, r24	; 0x10
    1864:	91 c0       	rjmp	.+290    	; 0x1988 <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    1866:	69 89       	ldd	r22, Y+17	; 0x11
    1868:	7a 89       	ldd	r23, Y+18	; 0x12
    186a:	8b 89       	ldd	r24, Y+19	; 0x13
    186c:	9c 89       	ldd	r25, Y+20	; 0x14
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	53 e4       	ldi	r21, 0x43	; 67
    1876:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	0c f0       	brlt	.+2      	; 0x1880 <LCD_write_cmd_8bit+0x212>
    187e:	7b c0       	rjmp	.+246    	; 0x1976 <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1880:	6d 89       	ldd	r22, Y+21	; 0x15
    1882:	7e 89       	ldd	r23, Y+22	; 0x16
    1884:	8f 89       	ldd	r24, Y+23	; 0x17
    1886:	98 8d       	ldd	r25, Y+24	; 0x18
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a e7       	ldi	r20, 0x7A	; 122
    188e:	54 e4       	ldi	r21, 0x44	; 68
    1890:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8c 87       	std	Y+12, r24	; 0x0c
    189a:	9d 87       	std	Y+13, r25	; 0x0d
    189c:	ae 87       	std	Y+14, r26	; 0x0e
    189e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    18a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    18a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    18a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	4a ef       	ldi	r20, 0xFA	; 250
    18ae:	54 e4       	ldi	r21, 0x44	; 68
    18b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	88 87       	std	Y+8, r24	; 0x08
    18ba:	99 87       	std	Y+9, r25	; 0x09
    18bc:	aa 87       	std	Y+10, r26	; 0x0a
    18be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18c0:	68 85       	ldd	r22, Y+8	; 0x08
    18c2:	79 85       	ldd	r23, Y+9	; 0x09
    18c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	40 e8       	ldi	r20, 0x80	; 128
    18ce:	5f e3       	ldi	r21, 0x3F	; 63
    18d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18d4:	88 23       	and	r24, r24
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9f 83       	std	Y+7, r25	; 0x07
    18de:	8e 83       	std	Y+6, r24	; 0x06
    18e0:	3f c0       	rjmp	.+126    	; 0x1960 <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    18e2:	68 85       	ldd	r22, Y+8	; 0x08
    18e4:	79 85       	ldd	r23, Y+9	; 0x09
    18e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	3f ef       	ldi	r19, 0xFF	; 255
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	57 e4       	ldi	r21, 0x47	; 71
    18f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	4c f5       	brge	.+82     	; 0x194c <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    18fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    18fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1900:	9f 85       	ldd	r25, Y+15	; 0x0f
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e2       	ldi	r20, 0x20	; 32
    1908:	51 e4       	ldi	r21, 0x41	; 65
    190a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9f 83       	std	Y+7, r25	; 0x07
    1920:	8e 83       	std	Y+6, r24	; 0x06
    1922:	0f c0       	rjmp	.+30     	; 0x1942 <LCD_write_cmd_8bit+0x2d4>
    1924:	88 ec       	ldi	r24, 0xC8	; 200
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9d 83       	std	Y+5, r25	; 0x05
    192a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LCD_write_cmd_8bit+0x2c2>
    1934:	9d 83       	std	Y+5, r25	; 0x05
    1936:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1938:	8e 81       	ldd	r24, Y+6	; 0x06
    193a:	9f 81       	ldd	r25, Y+7	; 0x07
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	9f 83       	std	Y+7, r25	; 0x07
    1940:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1942:	8e 81       	ldd	r24, Y+6	; 0x06
    1944:	9f 81       	ldd	r25, Y+7	; 0x07
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	69 f7       	brne	.-38     	; 0x1924 <LCD_write_cmd_8bit+0x2b6>
    194a:	24 c0       	rjmp	.+72     	; 0x1994 <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194c:	68 85       	ldd	r22, Y+8	; 0x08
    194e:	79 85       	ldd	r23, Y+9	; 0x09
    1950:	8a 85       	ldd	r24, Y+10	; 0x0a
    1952:	9b 85       	ldd	r25, Y+11	; 0x0b
    1954:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9f 83       	std	Y+7, r25	; 0x07
    195e:	8e 83       	std	Y+6, r24	; 0x06
    1960:	8e 81       	ldd	r24, Y+6	; 0x06
    1962:	9f 81       	ldd	r25, Y+7	; 0x07
    1964:	9b 83       	std	Y+3, r25	; 0x03
    1966:	8a 83       	std	Y+2, r24	; 0x02
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	9b 81       	ldd	r25, Y+3	; 0x03
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_write_cmd_8bit+0x2fe>
    1970:	9b 83       	std	Y+3, r25	; 0x03
    1972:	8a 83       	std	Y+2, r24	; 0x02
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1976:	69 89       	ldd	r22, Y+17	; 0x11
    1978:	7a 89       	ldd	r23, Y+18	; 0x12
    197a:	8b 89       	ldd	r24, Y+19	; 0x13
    197c:	9c 89       	ldd	r25, Y+20	; 0x14
    197e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	88 8b       	std	Y+16, r24	; 0x10
    1988:	88 89       	ldd	r24, Y+16	; 0x10
    198a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	8a 95       	dec	r24
    1990:	f1 f7       	brne	.-4      	; 0x198e <LCD_write_cmd_8bit+0x320>
    1992:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	69 a9       	ldd	r22, Y+49	; 0x31
    1998:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
}
    19a4:	e1 96       	adiw	r28, 0x31	; 49
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	ef 97       	sbiw	r28, 0x3f	; 63
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	0e 94 29 2b 	call	0x5652	; 0x5652 <DIO_void_set_port_dir>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a8 e4       	ldi	r26, 0x48	; 72
    19d8:	b2 e4       	ldi	r27, 0x42	; 66
    19da:	8b af       	std	Y+59, r24	; 0x3b
    19dc:	9c af       	std	Y+60, r25	; 0x3c
    19de:	ad af       	std	Y+61, r26	; 0x3d
    19e0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6b ad       	ldd	r22, Y+59	; 0x3b
    19e4:	7c ad       	ldd	r23, Y+60	; 0x3c
    19e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a ef       	ldi	r20, 0xFA	; 250
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8f ab       	std	Y+55, r24	; 0x37
    19fc:	98 af       	std	Y+56, r25	; 0x38
    19fe:	a9 af       	std	Y+57, r26	; 0x39
    1a00:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a02:	6f a9       	ldd	r22, Y+55	; 0x37
    1a04:	78 ad       	ldd	r23, Y+56	; 0x38
    1a06:	89 ad       	ldd	r24, Y+57	; 0x39
    1a08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9e ab       	std	Y+54, r25	; 0x36
    1a20:	8d ab       	std	Y+53, r24	; 0x35
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    1a24:	6f a9       	ldd	r22, Y+55	; 0x37
    1a26:	78 ad       	ldd	r23, Y+56	; 0x38
    1a28:	89 ad       	ldd	r24, Y+57	; 0x39
    1a2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a3e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9e ab       	std	Y+54, r25	; 0x36
    1a62:	8d ab       	std	Y+53, r24	; 0x35
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <LCD_read_address_8bit+0xce>
    1a66:	88 ec       	ldi	r24, 0xC8	; 200
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9c ab       	std	Y+52, r25	; 0x34
    1a6c:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a70:	9c a9       	ldd	r25, Y+52	; 0x34
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_read_address_8bit+0xbc>
    1a76:	9c ab       	std	Y+52, r25	; 0x34
    1a78:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8d a9       	ldd	r24, Y+53	; 0x35
    1a7c:	9e a9       	ldd	r25, Y+54	; 0x36
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9e ab       	std	Y+54, r25	; 0x36
    1a82:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8d a9       	ldd	r24, Y+53	; 0x35
    1a86:	9e a9       	ldd	r25, Y+54	; 0x36
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <LCD_read_address_8bit+0xb0>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a90:	78 ad       	ldd	r23, Y+56	; 0x38
    1a92:	89 ad       	ldd	r24, Y+57	; 0x39
    1a94:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e ab       	std	Y+54, r25	; 0x36
    1aa0:	8d ab       	std	Y+53, r24	; 0x35
    1aa2:	8d a9       	ldd	r24, Y+53	; 0x35
    1aa4:	9e a9       	ldd	r25, Y+54	; 0x36
    1aa6:	9a ab       	std	Y+50, r25	; 0x32
    1aa8:	89 ab       	std	Y+49, r24	; 0x31
    1aaa:	89 a9       	ldd	r24, Y+49	; 0x31
    1aac:	9a a9       	ldd	r25, Y+50	; 0x32
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_read_address_8bit+0xf8>
    1ab2:	9a ab       	std	Y+50, r25	; 0x32
    1ab4:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	62 e0       	ldi	r22, 0x02	; 2
    1aba:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a0 e8       	ldi	r26, 0x80	; 128
    1acc:	bf e3       	ldi	r27, 0x3F	; 63
    1ace:	8d a7       	std	Y+45, r24	; 0x2d
    1ad0:	9e a7       	std	Y+46, r25	; 0x2e
    1ad2:	af a7       	std	Y+47, r26	; 0x2f
    1ad4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ad6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ad8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    1adc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ade:	2b ea       	ldi	r18, 0xAB	; 171
    1ae0:	3a ea       	ldi	r19, 0xAA	; 170
    1ae2:	4a e2       	ldi	r20, 0x2A	; 42
    1ae4:	50 e4       	ldi	r21, 0x40	; 64
    1ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	89 a7       	std	Y+41, r24	; 0x29
    1af0:	9a a7       	std	Y+42, r25	; 0x2a
    1af2:	ab a7       	std	Y+43, r26	; 0x2b
    1af4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1af6:	69 a5       	ldd	r22, Y+41	; 0x29
    1af8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1afa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1afc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	1c f4       	brge	.+6      	; 0x1b14 <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	88 a7       	std	Y+40, r24	; 0x28
    1b12:	91 c0       	rjmp	.+290    	; 0x1c36 <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    1b14:	69 a5       	ldd	r22, Y+41	; 0x29
    1b16:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	53 e4       	ldi	r21, 0x43	; 67
    1b24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	0c f0       	brlt	.+2      	; 0x1b2e <LCD_read_address_8bit+0x178>
    1b2c:	7b c0       	rjmp	.+246    	; 0x1c24 <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    1b2e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b30:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b34:	98 a9       	ldd	r25, Y+48	; 0x30
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a e7       	ldi	r20, 0x7A	; 122
    1b3c:	54 e4       	ldi	r21, 0x44	; 68
    1b3e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8c a3       	std	Y+36, r24	; 0x24
    1b48:	9d a3       	std	Y+37, r25	; 0x25
    1b4a:	ae a3       	std	Y+38, r26	; 0x26
    1b4c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6c a1       	ldd	r22, Y+36	; 0x24
    1b50:	7d a1       	ldd	r23, Y+37	; 0x25
    1b52:	8e a1       	ldd	r24, Y+38	; 0x26
    1b54:	9f a1       	ldd	r25, Y+39	; 0x27
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a ef       	ldi	r20, 0xFA	; 250
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	88 a3       	std	Y+32, r24	; 0x20
    1b68:	99 a3       	std	Y+33, r25	; 0x21
    1b6a:	aa a3       	std	Y+34, r26	; 0x22
    1b6c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b6e:	68 a1       	ldd	r22, Y+32	; 0x20
    1b70:	79 a1       	ldd	r23, Y+33	; 0x21
    1b72:	8a a1       	ldd	r24, Y+34	; 0x22
    1b74:	9b a1       	ldd	r25, Y+35	; 0x23
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9f 8f       	std	Y+31, r25	; 0x1f
    1b8c:	8e 8f       	std	Y+30, r24	; 0x1e
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    1b90:	68 a1       	ldd	r22, Y+32	; 0x20
    1b92:	79 a1       	ldd	r23, Y+33	; 0x21
    1b94:	8a a1       	ldd	r24, Y+34	; 0x22
    1b96:	9b a1       	ldd	r25, Y+35	; 0x23
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6c a1       	ldd	r22, Y+36	; 0x24
    1baa:	7d a1       	ldd	r23, Y+37	; 0x25
    1bac:	8e a1       	ldd	r24, Y+38	; 0x26
    1bae:	9f a1       	ldd	r25, Y+39	; 0x27
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9f 8f       	std	Y+31, r25	; 0x1f
    1bce:	8e 8f       	std	Y+30, r24	; 0x1e
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LCD_read_address_8bit+0x23a>
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9d 8f       	std	Y+29, r25	; 0x1d
    1bd8:	8c 8f       	std	Y+28, r24	; 0x1c
    1bda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_read_address_8bit+0x228>
    1be2:	9d 8f       	std	Y+29, r25	; 0x1d
    1be4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9f 8f       	std	Y+31, r25	; 0x1f
    1bee:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bf2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <LCD_read_address_8bit+0x21c>
    1bf8:	24 c0       	rjmp	.+72     	; 0x1c42 <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	68 a1       	ldd	r22, Y+32	; 0x20
    1bfc:	79 a1       	ldd	r23, Y+33	; 0x21
    1bfe:	8a a1       	ldd	r24, Y+34	; 0x22
    1c00:	9b a1       	ldd	r25, Y+35	; 0x23
    1c02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9f 8f       	std	Y+31, r25	; 0x1f
    1c0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c12:	9b 8f       	std	Y+27, r25	; 0x1b
    1c14:	8a 8f       	std	Y+26, r24	; 0x1a
    1c16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_read_address_8bit+0x264>
    1c1e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c20:	8a 8f       	std	Y+26, r24	; 0x1a
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c24:	69 a5       	ldd	r22, Y+41	; 0x29
    1c26:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	88 a7       	std	Y+40, r24	; 0x28
    1c36:	88 a5       	ldd	r24, Y+40	; 0x28
    1c38:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c3a:	89 8d       	ldd	r24, Y+25	; 0x19
    1c3c:	8a 95       	dec	r24
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_read_address_8bit+0x286>
    1c40:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e8       	ldi	r26, 0x80	; 128
    1c50:	bf e3       	ldi	r27, 0x3F	; 63
    1c52:	8d 8b       	std	Y+21, r24	; 0x15
    1c54:	9e 8b       	std	Y+22, r25	; 0x16
    1c56:	af 8b       	std	Y+23, r26	; 0x17
    1c58:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c60:	98 8d       	ldd	r25, Y+24	; 0x18
    1c62:	2b ea       	ldi	r18, 0xAB	; 171
    1c64:	3a ea       	ldi	r19, 0xAA	; 170
    1c66:	4a e2       	ldi	r20, 0x2A	; 42
    1c68:	50 e4       	ldi	r21, 0x40	; 64
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	89 8b       	std	Y+17, r24	; 0x11
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	ab 8b       	std	Y+19, r26	; 0x13
    1c78:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c7a:	69 89       	ldd	r22, Y+17	; 0x11
    1c7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	1c f4       	brge	.+6      	; 0x1c98 <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	88 8b       	std	Y+16, r24	; 0x10
    1c96:	91 c0       	rjmp	.+290    	; 0x1dba <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    1c98:	69 89       	ldd	r22, Y+17	; 0x11
    1c9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	53 e4       	ldi	r21, 0x43	; 67
    1ca8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cac:	18 16       	cp	r1, r24
    1cae:	0c f0       	brlt	.+2      	; 0x1cb2 <LCD_read_address_8bit+0x2fc>
    1cb0:	7b c0       	rjmp	.+246    	; 0x1da8 <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8c 87       	std	Y+12, r24	; 0x0c
    1ccc:	9d 87       	std	Y+13, r25	; 0x0d
    1cce:	ae 87       	std	Y+14, r26	; 0x0e
    1cd0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cd4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	88 87       	std	Y+8, r24	; 0x08
    1cec:	99 87       	std	Y+9, r25	; 0x09
    1cee:	aa 87       	std	Y+10, r26	; 0x0a
    1cf0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1cf2:	68 85       	ldd	r22, Y+8	; 0x08
    1cf4:	79 85       	ldd	r23, Y+9	; 0x09
    1cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9f 83       	std	Y+7, r25	; 0x07
    1d10:	8e 83       	std	Y+6, r24	; 0x06
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    1d14:	68 85       	ldd	r22, Y+8	; 0x08
    1d16:	79 85       	ldd	r23, Y+9	; 0x09
    1d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d32:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9f 83       	std	Y+7, r25	; 0x07
    1d52:	8e 83       	std	Y+6, r24	; 0x06
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_read_address_8bit+0x3be>
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9d 83       	std	Y+5, r25	; 0x05
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	9d 81       	ldd	r25, Y+5	; 0x05
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_read_address_8bit+0x3ac>
    1d66:	9d 83       	std	Y+5, r25	; 0x05
    1d68:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9f 83       	std	Y+7, r25	; 0x07
    1d72:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8e 81       	ldd	r24, Y+6	; 0x06
    1d76:	9f 81       	ldd	r25, Y+7	; 0x07
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_read_address_8bit+0x3a0>
    1d7c:	24 c0       	rjmp	.+72     	; 0x1dc6 <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	68 85       	ldd	r22, Y+8	; 0x08
    1d80:	79 85       	ldd	r23, Y+9	; 0x09
    1d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9f 83       	std	Y+7, r25	; 0x07
    1d90:	8e 83       	std	Y+6, r24	; 0x06
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	9f 81       	ldd	r25, Y+7	; 0x07
    1d96:	9b 83       	std	Y+3, r25	; 0x03
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_read_address_8bit+0x3e8>
    1da2:	9b 83       	std	Y+3, r25	; 0x03
    1da4:	8a 83       	std	Y+2, r24	; 0x02
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da8:	69 89       	ldd	r22, Y+17	; 0x11
    1daa:	7a 89       	ldd	r23, Y+18	; 0x12
    1dac:	8b 89       	ldd	r24, Y+19	; 0x13
    1dae:	9c 89       	ldd	r25, Y+20	; 0x14
    1db0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	88 8b       	std	Y+16, r24	; 0x10
    1dba:	88 89       	ldd	r24, Y+16	; 0x10
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	8a 95       	dec	r24
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_read_address_8bit+0x40a>
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <DIO_u8_get_port>
    1dcc:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    1dd6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dd8:	8f 77       	andi	r24, 0x7F	; 127
    1dda:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	6f ef       	ldi	r22, 0xFF	; 255
    1de0:	0e 94 29 2b 	call	0x5652	; 0x5652 <DIO_void_set_port_dir>
	return address;
    1de4:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    1de6:	ef 96       	adiw	r28, 0x3f	; 63
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	c3 56       	subi	r28, 0x63	; 99
    1e06:	d0 40       	sbci	r29, 0x00	; 0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	fe 01       	movw	r30, r28
    1e14:	ed 59       	subi	r30, 0x9D	; 157
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	62 e0       	ldi	r22, 0x02	; 2
    1e1e:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e3 5a       	subi	r30, 0xA3	; 163
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e8       	ldi	r26, 0x80	; 128
    1e36:	bf e3       	ldi	r27, 0x3F	; 63
    1e38:	80 83       	st	Z, r24
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	a2 83       	std	Z+2, r26	; 0x02
    1e3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e40:	8e 01       	movw	r16, r28
    1e42:	07 5a       	subi	r16, 0xA7	; 167
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	fe 01       	movw	r30, r28
    1e48:	e3 5a       	subi	r30, 0xA3	; 163
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	2b ea       	ldi	r18, 0xAB	; 171
    1e56:	3a ea       	ldi	r19, 0xAA	; 170
    1e58:	4a e2       	ldi	r20, 0x2A	; 42
    1e5a:	50 e4       	ldi	r21, 0x40	; 64
    1e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	f8 01       	movw	r30, r16
    1e66:	80 83       	st	Z, r24
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	a2 83       	std	Z+2, r26	; 0x02
    1e6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e7 5a       	subi	r30, 0xA7	; 167
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	93 81       	ldd	r25, Z+3	; 0x03
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e8       	ldi	r20, 0x80	; 128
    1e82:	5f e3       	ldi	r21, 0x3F	; 63
    1e84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e88:	88 23       	and	r24, r24
    1e8a:	34 f4       	brge	.+12     	; 0x1e98 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e8 5a       	subi	r30, 0xA8	; 168
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	80 83       	st	Z, r24
    1e96:	e0 c0       	rjmp	.+448    	; 0x2058 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e7 5a       	subi	r30, 0xA7	; 167
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	53 e4       	ldi	r21, 0x43	; 67
    1eae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	0c f0       	brlt	.+2      	; 0x1eb8 <LCD_write_data_4bit+0xc0>
    1eb6:	c0 c0       	rjmp	.+384    	; 0x2038 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e3 5a       	subi	r30, 0xA3	; 163
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a e7       	ldi	r20, 0x7A	; 122
    1ecc:	54 e4       	ldi	r21, 0x44	; 68
    1ece:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ec 5a       	subi	r30, 0xAC	; 172
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 83       	st	Z, r24
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	a2 83       	std	Z+2, r26	; 0x02
    1ee2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	8e 01       	movw	r16, r28
    1ee6:	00 5b       	subi	r16, 0xB0	; 176
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	fe 01       	movw	r30, r28
    1eec:	ec 5a       	subi	r30, 0xAC	; 172
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	80 83       	st	Z, r24
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	a2 83       	std	Z+2, r26	; 0x02
    1f10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f12:	fe 01       	movw	r30, r28
    1f14:	e0 5b       	subi	r30, 0xB0	; 176
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	44 f4       	brge	.+16     	; 0x1f40 <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1f30:	fe 01       	movw	r30, r28
    1f32:	e2 5b       	subi	r30, 0xB2	; 178
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	64 c0       	rjmp	.+200    	; 0x2008 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1f40:	fe 01       	movw	r30, r28
    1f42:	e0 5b       	subi	r30, 0xB0	; 176
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <LCD_write_data_4bit+0x168>
    1f5e:	43 c0       	rjmp	.+134    	; 0x1fe6 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	fe 01       	movw	r30, r28
    1f62:	ec 5a       	subi	r30, 0xAC	; 172
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8e 01       	movw	r16, r28
    1f80:	02 5b       	subi	r16, 0xB2	; 178
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	1f c0       	rjmp	.+62     	; 0x1fd6 <LCD_write_data_4bit+0x1de>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e4 5b       	subi	r30, 0xB4	; 180
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	88 ec       	ldi	r24, 0xC8	; 200
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e4 5b       	subi	r30, 0xB4	; 180
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_write_data_4bit+0x1b8>
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e4 5b       	subi	r30, 0xB4	; 180
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	de 01       	movw	r26, r28
    1fc0:	a2 5b       	subi	r26, 0xB2	; 178
    1fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e2 5b       	subi	r30, 0xB2	; 178
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	11 96       	adiw	r26, 0x01	; 1
    1fd2:	9c 93       	st	X, r25
    1fd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e2 5b       	subi	r30, 0xB2	; 178
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	d1 f6       	brne	.-76     	; 0x1f98 <LCD_write_data_4bit+0x1a0>
    1fe4:	4b c0       	rjmp	.+150    	; 0x207c <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	8e 01       	movw	r16, r28
    1fe8:	02 5b       	subi	r16, 0xB2	; 178
    1fea:	1f 4f       	sbci	r17, 0xFF	; 255
    1fec:	fe 01       	movw	r30, r28
    1fee:	e0 5b       	subi	r30, 0xB0	; 176
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
    2008:	de 01       	movw	r26, r28
    200a:	a6 5b       	subi	r26, 0xB6	; 182
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	e2 5b       	subi	r30, 0xB2	; 178
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	9c 93       	st	X, r25
    201c:	8e 93       	st	-X, r24
    201e:	fe 01       	movw	r30, r28
    2020:	e6 5b       	subi	r30, 0xB6	; 182
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_write_data_4bit+0x230>
    202c:	fe 01       	movw	r30, r28
    202e:	e6 5b       	subi	r30, 0xB6	; 182
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	22 c0       	rjmp	.+68     	; 0x207c <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2038:	8e 01       	movw	r16, r28
    203a:	08 5a       	subi	r16, 0xA8	; 168
    203c:	1f 4f       	sbci	r17, 0xFF	; 255
    203e:	fe 01       	movw	r30, r28
    2040:	e7 5a       	subi	r30, 0xA7	; 167
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	f8 01       	movw	r30, r16
    2056:	80 83       	st	Z, r24
    2058:	de 01       	movw	r26, r28
    205a:	a7 5b       	subi	r26, 0xB7	; 183
    205c:	bf 4f       	sbci	r27, 0xFF	; 255
    205e:	fe 01       	movw	r30, r28
    2060:	e8 5a       	subi	r30, 0xA8	; 168
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2068:	fe 01       	movw	r30, r28
    206a:	e7 5b       	subi	r30, 0xB7	; 183
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	8a 95       	dec	r24
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_write_data_4bit+0x278>
    2074:	fe 01       	movw	r30, r28
    2076:	e7 5b       	subi	r30, 0xB7	; 183
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    2084:	fe 01       	movw	r30, r28
    2086:	eb 5b       	subi	r30, 0xBB	; 187
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e8       	ldi	r26, 0x80	; 128
    2090:	bf e3       	ldi	r27, 0x3F	; 63
    2092:	80 83       	st	Z, r24
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	a2 83       	std	Z+2, r26	; 0x02
    2098:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    209a:	8e 01       	movw	r16, r28
    209c:	0f 5b       	subi	r16, 0xBF	; 191
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	eb 5b       	subi	r30, 0xBB	; 187
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	2b ea       	ldi	r18, 0xAB	; 171
    20b0:	3a ea       	ldi	r19, 0xAA	; 170
    20b2:	4a e2       	ldi	r20, 0x2A	; 42
    20b4:	50 e4       	ldi	r21, 0x40	; 64
    20b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	f8 01       	movw	r30, r16
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20c8:	fe 01       	movw	r30, r28
    20ca:	ef 5b       	subi	r30, 0xBF	; 191
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	34 f4       	brge	.+12     	; 0x20f2 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	fe 01       	movw	r30, r28
    20ea:	e0 5c       	subi	r30, 0xC0	; 192
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 83       	st	Z, r24
    20f0:	9d c0       	rjmp	.+314    	; 0x222c <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    20f2:	fe 01       	movw	r30, r28
    20f4:	ef 5b       	subi	r30, 0xBF	; 191
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	60 81       	ld	r22, Z
    20fa:	71 81       	ldd	r23, Z+1	; 0x01
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	53 e4       	ldi	r21, 0x43	; 67
    2108:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	0c f0       	brlt	.+2      	; 0x2112 <LCD_write_data_4bit+0x31a>
    2110:	7e c0       	rjmp	.+252    	; 0x220e <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    2112:	fe 01       	movw	r30, r28
    2114:	eb 5b       	subi	r30, 0xBB	; 187
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a e7       	ldi	r20, 0x7A	; 122
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	8c af       	std	Y+60, r24	; 0x3c
    2132:	9d af       	std	Y+61, r25	; 0x3d
    2134:	ae af       	std	Y+62, r26	; 0x3e
    2136:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6c ad       	ldd	r22, Y+60	; 0x3c
    213a:	7d ad       	ldd	r23, Y+61	; 0x3d
    213c:	8e ad       	ldd	r24, Y+62	; 0x3e
    213e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	88 af       	std	Y+56, r24	; 0x38
    2152:	99 af       	std	Y+57, r25	; 0x39
    2154:	aa af       	std	Y+58, r26	; 0x3a
    2156:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2158:	68 ad       	ldd	r22, Y+56	; 0x38
    215a:	79 ad       	ldd	r23, Y+57	; 0x39
    215c:	8a ad       	ldd	r24, Y+58	; 0x3a
    215e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <LCD_write_data_4bit+0x382>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9f ab       	std	Y+55, r25	; 0x37
    2176:	8e ab       	std	Y+54, r24	; 0x36
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    217a:	68 ad       	ldd	r22, Y+56	; 0x38
    217c:	79 ad       	ldd	r23, Y+57	; 0x39
    217e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2180:	9b ad       	ldd	r25, Y+59	; 0x3b
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6c ad       	ldd	r22, Y+60	; 0x3c
    2194:	7d ad       	ldd	r23, Y+61	; 0x3d
    2196:	8e ad       	ldd	r24, Y+62	; 0x3e
    2198:	9f ad       	ldd	r25, Y+63	; 0x3f
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9f ab       	std	Y+55, r25	; 0x37
    21b8:	8e ab       	std	Y+54, r24	; 0x36
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <LCD_write_data_4bit+0x3e2>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9d ab       	std	Y+53, r25	; 0x35
    21c2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21c4:	8c a9       	ldd	r24, Y+52	; 0x34
    21c6:	9d a9       	ldd	r25, Y+53	; 0x35
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_write_data_4bit+0x3d0>
    21cc:	9d ab       	std	Y+53, r25	; 0x35
    21ce:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8e a9       	ldd	r24, Y+54	; 0x36
    21d2:	9f a9       	ldd	r25, Y+55	; 0x37
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9f ab       	std	Y+55, r25	; 0x37
    21d8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8e a9       	ldd	r24, Y+54	; 0x36
    21dc:	9f a9       	ldd	r25, Y+55	; 0x37
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <LCD_write_data_4bit+0x3c4>
    21e2:	2d c0       	rjmp	.+90     	; 0x223e <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	68 ad       	ldd	r22, Y+56	; 0x38
    21e6:	79 ad       	ldd	r23, Y+57	; 0x39
    21e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    21ea:	9b ad       	ldd	r25, Y+59	; 0x3b
    21ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9f ab       	std	Y+55, r25	; 0x37
    21f6:	8e ab       	std	Y+54, r24	; 0x36
    21f8:	8e a9       	ldd	r24, Y+54	; 0x36
    21fa:	9f a9       	ldd	r25, Y+55	; 0x37
    21fc:	9b ab       	std	Y+51, r25	; 0x33
    21fe:	8a ab       	std	Y+50, r24	; 0x32
    2200:	8a a9       	ldd	r24, Y+50	; 0x32
    2202:	9b a9       	ldd	r25, Y+51	; 0x33
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_write_data_4bit+0x40c>
    2208:	9b ab       	std	Y+51, r25	; 0x33
    220a:	8a ab       	std	Y+50, r24	; 0x32
    220c:	18 c0       	rjmp	.+48     	; 0x223e <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    220e:	fe 01       	movw	r30, r28
    2210:	ef 5b       	subi	r30, 0xBF	; 191
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	fe 01       	movw	r30, r28
    2226:	e0 5c       	subi	r30, 0xC0	; 192
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 83       	st	Z, r24
    222c:	fe 01       	movw	r30, r28
    222e:	e0 5c       	subi	r30, 0xC0	; 192
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2236:	89 a9       	ldd	r24, Y+49	; 0x31
    2238:	8a 95       	dec	r24
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_write_data_4bit+0x440>
    223c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    223e:	fe 01       	movw	r30, r28
    2240:	ee 59       	subi	r30, 0x9E	; 158
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	84 e0       	ldi	r24, 0x04	; 4
    2246:	80 83       	st	Z, r24
    2248:	26 c0       	rjmp	.+76     	; 0x2296 <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    224a:	fe 01       	movw	r30, r28
    224c:	ed 59       	subi	r30, 0x9D	; 157
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	fe 01       	movw	r30, r28
    2258:	ee 59       	subi	r30, 0x9E	; 158
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	88 2f       	mov	r24, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a9 01       	movw	r20, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <LCD_write_data_4bit+0x472>
    2266:	55 95       	asr	r21
    2268:	47 95       	ror	r20
    226a:	8a 95       	dec	r24
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <LCD_write_data_4bit+0x46e>
    226e:	ca 01       	movw	r24, r20
    2270:	98 2f       	mov	r25, r24
    2272:	91 70       	andi	r25, 0x01	; 1
    2274:	fe 01       	movw	r30, r28
    2276:	ee 59       	subi	r30, 0x9E	; 158
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	60 81       	ld	r22, Z
    227e:	49 2f       	mov	r20, r25
    2280:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2284:	de 01       	movw	r26, r28
    2286:	ae 59       	subi	r26, 0x9E	; 158
    2288:	bf 4f       	sbci	r27, 0xFF	; 255
    228a:	fe 01       	movw	r30, r28
    228c:	ee 59       	subi	r30, 0x9E	; 158
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 81       	ld	r24, Z
    2292:	8f 5f       	subi	r24, 0xFF	; 255
    2294:	8c 93       	st	X, r24
    2296:	fe 01       	movw	r30, r28
    2298:	ee 59       	subi	r30, 0x9E	; 158
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	88 30       	cpi	r24, 0x08	; 8
    22a0:	a0 f2       	brcs	.-88     	; 0x224a <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e2       	ldi	r26, 0x20	; 32
    22b0:	b1 e4       	ldi	r27, 0x41	; 65
    22b2:	8d a7       	std	Y+45, r24	; 0x2d
    22b4:	9e a7       	std	Y+46, r25	; 0x2e
    22b6:	af a7       	std	Y+47, r26	; 0x2f
    22b8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    22bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    22be:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c0:	98 a9       	ldd	r25, Y+48	; 0x30
    22c2:	2b ea       	ldi	r18, 0xAB	; 171
    22c4:	3a ea       	ldi	r19, 0xAA	; 170
    22c6:	4a e2       	ldi	r20, 0x2A	; 42
    22c8:	50 e4       	ldi	r21, 0x40	; 64
    22ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	89 a7       	std	Y+41, r24	; 0x29
    22d4:	9a a7       	std	Y+42, r25	; 0x2a
    22d6:	ab a7       	std	Y+43, r26	; 0x2b
    22d8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22da:	69 a5       	ldd	r22, Y+41	; 0x29
    22dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    22de:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	1c f4       	brge	.+6      	; 0x22f8 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	88 a7       	std	Y+40, r24	; 0x28
    22f6:	91 c0       	rjmp	.+290    	; 0x241a <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    22f8:	69 a5       	ldd	r22, Y+41	; 0x29
    22fa:	7a a5       	ldd	r23, Y+42	; 0x2a
    22fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    22fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	53 e4       	ldi	r21, 0x43	; 67
    2308:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	0c f0       	brlt	.+2      	; 0x2312 <LCD_write_data_4bit+0x51a>
    2310:	7b c0       	rjmp	.+246    	; 0x2408 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2312:	6d a5       	ldd	r22, Y+45	; 0x2d
    2314:	7e a5       	ldd	r23, Y+46	; 0x2e
    2316:	8f a5       	ldd	r24, Y+47	; 0x2f
    2318:	98 a9       	ldd	r25, Y+48	; 0x30
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a e7       	ldi	r20, 0x7A	; 122
    2320:	54 e4       	ldi	r21, 0x44	; 68
    2322:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8c a3       	std	Y+36, r24	; 0x24
    232c:	9d a3       	std	Y+37, r25	; 0x25
    232e:	ae a3       	std	Y+38, r26	; 0x26
    2330:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2332:	6c a1       	ldd	r22, Y+36	; 0x24
    2334:	7d a1       	ldd	r23, Y+37	; 0x25
    2336:	8e a1       	ldd	r24, Y+38	; 0x26
    2338:	9f a1       	ldd	r25, Y+39	; 0x27
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a ef       	ldi	r20, 0xFA	; 250
    2340:	54 e4       	ldi	r21, 0x44	; 68
    2342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	88 a3       	std	Y+32, r24	; 0x20
    234c:	99 a3       	std	Y+33, r25	; 0x21
    234e:	aa a3       	std	Y+34, r26	; 0x22
    2350:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2352:	68 a1       	ldd	r22, Y+32	; 0x20
    2354:	79 a1       	ldd	r23, Y+33	; 0x21
    2356:	8a a1       	ldd	r24, Y+34	; 0x22
    2358:	9b a1       	ldd	r25, Y+35	; 0x23
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	2c f4       	brge	.+10     	; 0x2374 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9f 8f       	std	Y+31, r25	; 0x1f
    2370:	8e 8f       	std	Y+30, r24	; 0x1e
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    2374:	68 a1       	ldd	r22, Y+32	; 0x20
    2376:	79 a1       	ldd	r23, Y+33	; 0x21
    2378:	8a a1       	ldd	r24, Y+34	; 0x22
    237a:	9b a1       	ldd	r25, Y+35	; 0x23
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	4c f5       	brge	.+82     	; 0x23de <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238c:	6c a1       	ldd	r22, Y+36	; 0x24
    238e:	7d a1       	ldd	r23, Y+37	; 0x25
    2390:	8e a1       	ldd	r24, Y+38	; 0x26
    2392:	9f a1       	ldd	r25, Y+39	; 0x27
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9f 8f       	std	Y+31, r25	; 0x1f
    23b2:	8e 8f       	std	Y+30, r24	; 0x1e
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <LCD_write_data_4bit+0x5dc>
    23b6:	88 ec       	ldi	r24, 0xC8	; 200
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9d 8f       	std	Y+29, r25	; 0x1d
    23bc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <LCD_write_data_4bit+0x5ca>
    23c6:	9d 8f       	std	Y+29, r25	; 0x1d
    23c8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	9f 8f       	std	Y+31, r25	; 0x1f
    23d2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	69 f7       	brne	.-38     	; 0x23b6 <LCD_write_data_4bit+0x5be>
    23dc:	24 c0       	rjmp	.+72     	; 0x2426 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	68 a1       	ldd	r22, Y+32	; 0x20
    23e0:	79 a1       	ldd	r23, Y+33	; 0x21
    23e2:	8a a1       	ldd	r24, Y+34	; 0x22
    23e4:	9b a1       	ldd	r25, Y+35	; 0x23
    23e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9f 8f       	std	Y+31, r25	; 0x1f
    23f0:	8e 8f       	std	Y+30, r24	; 0x1e
    23f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23f6:	9b 8f       	std	Y+27, r25	; 0x1b
    23f8:	8a 8f       	std	Y+26, r24	; 0x1a
    23fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_write_data_4bit+0x606>
    2402:	9b 8f       	std	Y+27, r25	; 0x1b
    2404:	8a 8f       	std	Y+26, r24	; 0x1a
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2408:	69 a5       	ldd	r22, Y+41	; 0x29
    240a:	7a a5       	ldd	r23, Y+42	; 0x2a
    240c:	8b a5       	ldd	r24, Y+43	; 0x2b
    240e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	88 a7       	std	Y+40, r24	; 0x28
    241a:	88 a5       	ldd	r24, Y+40	; 0x28
    241c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    241e:	89 8d       	ldd	r24, Y+25	; 0x19
    2420:	8a 95       	dec	r24
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_write_data_4bit+0x628>
    2424:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 e8       	ldi	r26, 0x80	; 128
    2434:	bf e3       	ldi	r27, 0x3F	; 63
    2436:	8d 8b       	std	Y+21, r24	; 0x15
    2438:	9e 8b       	std	Y+22, r25	; 0x16
    243a:	af 8b       	std	Y+23, r26	; 0x17
    243c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	2b ea       	ldi	r18, 0xAB	; 171
    2448:	3a ea       	ldi	r19, 0xAA	; 170
    244a:	4a e2       	ldi	r20, 0x2A	; 42
    244c:	50 e4       	ldi	r21, 0x40	; 64
    244e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	89 8b       	std	Y+17, r24	; 0x11
    2458:	9a 8b       	std	Y+18, r25	; 0x12
    245a:	ab 8b       	std	Y+19, r26	; 0x13
    245c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    245e:	69 89       	ldd	r22, Y+17	; 0x11
    2460:	7a 89       	ldd	r23, Y+18	; 0x12
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	1c f4       	brge	.+6      	; 0x247c <LCD_write_data_4bit+0x684>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	88 8b       	std	Y+16, r24	; 0x10
    247a:	91 c0       	rjmp	.+290    	; 0x259e <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    247c:	69 89       	ldd	r22, Y+17	; 0x11
    247e:	7a 89       	ldd	r23, Y+18	; 0x12
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4f e7       	ldi	r20, 0x7F	; 127
    248a:	53 e4       	ldi	r21, 0x43	; 67
    248c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2490:	18 16       	cp	r1, r24
    2492:	0c f0       	brlt	.+2      	; 0x2496 <LCD_write_data_4bit+0x69e>
    2494:	7b c0       	rjmp	.+246    	; 0x258c <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2496:	6d 89       	ldd	r22, Y+21	; 0x15
    2498:	7e 89       	ldd	r23, Y+22	; 0x16
    249a:	8f 89       	ldd	r24, Y+23	; 0x17
    249c:	98 8d       	ldd	r25, Y+24	; 0x18
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	4a e7       	ldi	r20, 0x7A	; 122
    24a4:	54 e4       	ldi	r21, 0x44	; 68
    24a6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	8c 87       	std	Y+12, r24	; 0x0c
    24b0:	9d 87       	std	Y+13, r25	; 0x0d
    24b2:	ae 87       	std	Y+14, r26	; 0x0e
    24b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    24b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    24ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    24bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	88 87       	std	Y+8, r24	; 0x08
    24d0:	99 87       	std	Y+9, r25	; 0x09
    24d2:	aa 87       	std	Y+10, r26	; 0x0a
    24d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24d6:	68 85       	ldd	r22, Y+8	; 0x08
    24d8:	79 85       	ldd	r23, Y+9	; 0x09
    24da:	8a 85       	ldd	r24, Y+10	; 0x0a
    24dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9f 83       	std	Y+7, r25	; 0x07
    24f4:	8e 83       	std	Y+6, r24	; 0x06
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    24f8:	68 85       	ldd	r22, Y+8	; 0x08
    24fa:	79 85       	ldd	r23, Y+9	; 0x09
    24fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6c 85       	ldd	r22, Y+12	; 0x0c
    2512:	7d 85       	ldd	r23, Y+13	; 0x0d
    2514:	8e 85       	ldd	r24, Y+14	; 0x0e
    2516:	9f 85       	ldd	r25, Y+15	; 0x0f
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9f 83       	std	Y+7, r25	; 0x07
    2536:	8e 83       	std	Y+6, r24	; 0x06
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_write_data_4bit+0x760>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9d 83       	std	Y+5, r25	; 0x05
    2540:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	9d 81       	ldd	r25, Y+5	; 0x05
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_write_data_4bit+0x74e>
    254a:	9d 83       	std	Y+5, r25	; 0x05
    254c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8e 81       	ldd	r24, Y+6	; 0x06
    2550:	9f 81       	ldd	r25, Y+7	; 0x07
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9f 83       	std	Y+7, r25	; 0x07
    2556:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8e 81       	ldd	r24, Y+6	; 0x06
    255a:	9f 81       	ldd	r25, Y+7	; 0x07
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_write_data_4bit+0x742>
    2560:	24 c0       	rjmp	.+72     	; 0x25aa <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	68 85       	ldd	r22, Y+8	; 0x08
    2564:	79 85       	ldd	r23, Y+9	; 0x09
    2566:	8a 85       	ldd	r24, Y+10	; 0x0a
    2568:	9b 85       	ldd	r25, Y+11	; 0x0b
    256a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9f 83       	std	Y+7, r25	; 0x07
    2574:	8e 83       	std	Y+6, r24	; 0x06
    2576:	8e 81       	ldd	r24, Y+6	; 0x06
    2578:	9f 81       	ldd	r25, Y+7	; 0x07
    257a:	9b 83       	std	Y+3, r25	; 0x03
    257c:	8a 83       	std	Y+2, r24	; 0x02
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	9b 81       	ldd	r25, Y+3	; 0x03
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_write_data_4bit+0x78a>
    2586:	9b 83       	std	Y+3, r25	; 0x03
    2588:	8a 83       	std	Y+2, r24	; 0x02
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    258c:	69 89       	ldd	r22, Y+17	; 0x11
    258e:	7a 89       	ldd	r23, Y+18	; 0x12
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	88 8b       	std	Y+16, r24	; 0x10
    259e:	88 89       	ldd	r24, Y+16	; 0x10
    25a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	8a 95       	dec	r24
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_write_data_4bit+0x7ac>
    25a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 59       	subi	r30, 0x9F	; 159
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	84 e0       	ldi	r24, 0x04	; 4
    25b2:	80 83       	st	Z, r24
    25b4:	27 c0       	rjmp	.+78     	; 0x2604 <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    25b6:	fe 01       	movw	r30, r28
    25b8:	ed 59       	subi	r30, 0x9D	; 157
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	fe 01       	movw	r30, r28
    25c4:	ef 59       	subi	r30, 0x9F	; 159
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	04 97       	sbiw	r24, 0x04	; 4
    25d0:	f9 01       	movw	r30, r18
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <LCD_write_data_4bit+0x7e0>
    25d4:	f5 95       	asr	r31
    25d6:	e7 95       	ror	r30
    25d8:	8a 95       	dec	r24
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <LCD_write_data_4bit+0x7dc>
    25dc:	cf 01       	movw	r24, r30
    25de:	98 2f       	mov	r25, r24
    25e0:	91 70       	andi	r25, 0x01	; 1
    25e2:	fe 01       	movw	r30, r28
    25e4:	ef 59       	subi	r30, 0x9F	; 159
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	60 81       	ld	r22, Z
    25ec:	49 2f       	mov	r20, r25
    25ee:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    25f2:	de 01       	movw	r26, r28
    25f4:	af 59       	subi	r26, 0x9F	; 159
    25f6:	bf 4f       	sbci	r27, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	ef 59       	subi	r30, 0x9F	; 159
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	8c 93       	st	X, r24
    2604:	fe 01       	movw	r30, r28
    2606:	ef 59       	subi	r30, 0x9F	; 159
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	88 30       	cpi	r24, 0x08	; 8
    260e:	98 f2       	brcs	.-90     	; 0x25b6 <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
}
    2618:	cd 59       	subi	r28, 0x9D	; 157
    261a:	df 4f       	sbci	r29, 0xFF	; 255
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	08 95       	ret

00002630 <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	c3 56       	subi	r28, 0x63	; 99
    263e:	d0 40       	sbci	r29, 0x00	; 0
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	fe 01       	movw	r30, r28
    264c:	ed 59       	subi	r30, 0x9D	; 157
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	62 e0       	ldi	r22, 0x02	; 2
    2656:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    2662:	fe 01       	movw	r30, r28
    2664:	e3 5a       	subi	r30, 0xA3	; 163
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a0 e8       	ldi	r26, 0x80	; 128
    266e:	bf e3       	ldi	r27, 0x3F	; 63
    2670:	80 83       	st	Z, r24
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	a2 83       	std	Z+2, r26	; 0x02
    2676:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2678:	8e 01       	movw	r16, r28
    267a:	07 5a       	subi	r16, 0xA7	; 167
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
    267e:	fe 01       	movw	r30, r28
    2680:	e3 5a       	subi	r30, 0xA3	; 163
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	2b ea       	ldi	r18, 0xAB	; 171
    268e:	3a ea       	ldi	r19, 0xAA	; 170
    2690:	4a e2       	ldi	r20, 0x2A	; 42
    2692:	50 e4       	ldi	r21, 0x40	; 64
    2694:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	f8 01       	movw	r30, r16
    269e:	80 83       	st	Z, r24
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	a2 83       	std	Z+2, r26	; 0x02
    26a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a6:	fe 01       	movw	r30, r28
    26a8:	e7 5a       	subi	r30, 0xA7	; 167
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	34 f4       	brge	.+12     	; 0x26d0 <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    26c4:	fe 01       	movw	r30, r28
    26c6:	e8 5a       	subi	r30, 0xA8	; 168
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	80 83       	st	Z, r24
    26ce:	e0 c0       	rjmp	.+448    	; 0x2890 <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    26d0:	fe 01       	movw	r30, r28
    26d2:	e7 5a       	subi	r30, 0xA7	; 167
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	60 81       	ld	r22, Z
    26d8:	71 81       	ldd	r23, Z+1	; 0x01
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	53 e4       	ldi	r21, 0x43	; 67
    26e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	0c f0       	brlt	.+2      	; 0x26f0 <LCD_write_cmd_4bit+0xc0>
    26ee:	c0 c0       	rjmp	.+384    	; 0x2870 <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    26f0:	fe 01       	movw	r30, r28
    26f2:	e3 5a       	subi	r30, 0xA3	; 163
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	60 81       	ld	r22, Z
    26f8:	71 81       	ldd	r23, Z+1	; 0x01
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4a e7       	ldi	r20, 0x7A	; 122
    2704:	54 e4       	ldi	r21, 0x44	; 68
    2706:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	fe 01       	movw	r30, r28
    2710:	ec 5a       	subi	r30, 0xAC	; 172
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 83       	st	Z, r24
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	a2 83       	std	Z+2, r26	; 0x02
    271a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271c:	8e 01       	movw	r16, r28
    271e:	00 5b       	subi	r16, 0xB0	; 176
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	fe 01       	movw	r30, r28
    2724:	ec 5a       	subi	r30, 0xAC	; 172
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a ef       	ldi	r20, 0xFA	; 250
    2736:	54 e4       	ldi	r21, 0x44	; 68
    2738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	f8 01       	movw	r30, r16
    2742:	80 83       	st	Z, r24
    2744:	91 83       	std	Z+1, r25	; 0x01
    2746:	a2 83       	std	Z+2, r26	; 0x02
    2748:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    274a:	fe 01       	movw	r30, r28
    274c:	e0 5b       	subi	r30, 0xB0	; 176
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f e3       	ldi	r21, 0x3F	; 63
    2760:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2764:	88 23       	and	r24, r24
    2766:	44 f4       	brge	.+16     	; 0x2778 <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    2768:	fe 01       	movw	r30, r28
    276a:	e2 5b       	subi	r30, 0xB2	; 178
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	64 c0       	rjmp	.+200    	; 0x2840 <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    2778:	fe 01       	movw	r30, r28
    277a:	e0 5b       	subi	r30, 0xB0	; 176
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	0c f0       	brlt	.+2      	; 0x2798 <LCD_write_cmd_4bit+0x168>
    2796:	43 c0       	rjmp	.+134    	; 0x281e <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	fe 01       	movw	r30, r28
    279a:	ec 5a       	subi	r30, 0xAC	; 172
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8e 01       	movw	r16, r28
    27b8:	02 5b       	subi	r16, 0xB2	; 178
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	f8 01       	movw	r30, r16
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	1f c0       	rjmp	.+62     	; 0x280e <LCD_write_cmd_4bit+0x1de>
    27d0:	fe 01       	movw	r30, r28
    27d2:	e4 5b       	subi	r30, 0xB4	; 180
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	88 ec       	ldi	r24, 0xC8	; 200
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27de:	fe 01       	movw	r30, r28
    27e0:	e4 5b       	subi	r30, 0xB4	; 180
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <LCD_write_cmd_4bit+0x1b8>
    27ec:	fe 01       	movw	r30, r28
    27ee:	e4 5b       	subi	r30, 0xB4	; 180
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	de 01       	movw	r26, r28
    27f8:	a2 5b       	subi	r26, 0xB2	; 178
    27fa:	bf 4f       	sbci	r27, 0xFF	; 255
    27fc:	fe 01       	movw	r30, r28
    27fe:	e2 5b       	subi	r30, 0xB2	; 178
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	11 96       	adiw	r26, 0x01	; 1
    280a:	9c 93       	st	X, r25
    280c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	fe 01       	movw	r30, r28
    2810:	e2 5b       	subi	r30, 0xB2	; 178
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	d1 f6       	brne	.-76     	; 0x27d0 <LCD_write_cmd_4bit+0x1a0>
    281c:	4b c0       	rjmp	.+150    	; 0x28b4 <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	8e 01       	movw	r16, r28
    2820:	02 5b       	subi	r16, 0xB2	; 178
    2822:	1f 4f       	sbci	r17, 0xFF	; 255
    2824:	fe 01       	movw	r30, r28
    2826:	e0 5b       	subi	r30, 0xB0	; 176
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	f8 01       	movw	r30, r16
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	de 01       	movw	r26, r28
    2842:	a6 5b       	subi	r26, 0xB6	; 182
    2844:	bf 4f       	sbci	r27, 0xFF	; 255
    2846:	fe 01       	movw	r30, r28
    2848:	e2 5b       	subi	r30, 0xB2	; 178
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	11 96       	adiw	r26, 0x01	; 1
    2852:	9c 93       	st	X, r25
    2854:	8e 93       	st	-X, r24
    2856:	fe 01       	movw	r30, r28
    2858:	e6 5b       	subi	r30, 0xB6	; 182
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_write_cmd_4bit+0x230>
    2864:	fe 01       	movw	r30, r28
    2866:	e6 5b       	subi	r30, 0xB6	; 182
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
    286e:	22 c0       	rjmp	.+68     	; 0x28b4 <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2870:	8e 01       	movw	r16, r28
    2872:	08 5a       	subi	r16, 0xA8	; 168
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e7 5a       	subi	r30, 0xA7	; 167
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	f8 01       	movw	r30, r16
    288e:	80 83       	st	Z, r24
    2890:	de 01       	movw	r26, r28
    2892:	a7 5b       	subi	r26, 0xB7	; 183
    2894:	bf 4f       	sbci	r27, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	e8 5a       	subi	r30, 0xA8	; 168
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28a0:	fe 01       	movw	r30, r28
    28a2:	e7 5b       	subi	r30, 0xB7	; 183
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	8a 95       	dec	r24
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <LCD_write_cmd_4bit+0x278>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e7 5b       	subi	r30, 0xB7	; 183
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    28bc:	fe 01       	movw	r30, r28
    28be:	eb 5b       	subi	r30, 0xBB	; 187
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	a0 e8       	ldi	r26, 0x80	; 128
    28c8:	bf e3       	ldi	r27, 0x3F	; 63
    28ca:	80 83       	st	Z, r24
    28cc:	91 83       	std	Z+1, r25	; 0x01
    28ce:	a2 83       	std	Z+2, r26	; 0x02
    28d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28d2:	8e 01       	movw	r16, r28
    28d4:	0f 5b       	subi	r16, 0xBF	; 191
    28d6:	1f 4f       	sbci	r17, 0xFF	; 255
    28d8:	fe 01       	movw	r30, r28
    28da:	eb 5b       	subi	r30, 0xBB	; 187
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	60 81       	ld	r22, Z
    28e0:	71 81       	ldd	r23, Z+1	; 0x01
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	2b ea       	ldi	r18, 0xAB	; 171
    28e8:	3a ea       	ldi	r19, 0xAA	; 170
    28ea:	4a e2       	ldi	r20, 0x2A	; 42
    28ec:	50 e4       	ldi	r21, 0x40	; 64
    28ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	f8 01       	movw	r30, r16
    28f8:	80 83       	st	Z, r24
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	a2 83       	std	Z+2, r26	; 0x02
    28fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2900:	fe 01       	movw	r30, r28
    2902:	ef 5b       	subi	r30, 0xBF	; 191
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e8       	ldi	r20, 0x80	; 128
    2914:	5f e3       	ldi	r21, 0x3F	; 63
    2916:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    291a:	88 23       	and	r24, r24
    291c:	34 f4       	brge	.+12     	; 0x292a <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	fe 01       	movw	r30, r28
    2922:	e0 5c       	subi	r30, 0xC0	; 192
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	80 83       	st	Z, r24
    2928:	9d c0       	rjmp	.+314    	; 0x2a64 <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    292a:	fe 01       	movw	r30, r28
    292c:	ef 5b       	subi	r30, 0xBF	; 191
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4f e7       	ldi	r20, 0x7F	; 127
    293e:	53 e4       	ldi	r21, 0x43	; 67
    2940:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2944:	18 16       	cp	r1, r24
    2946:	0c f0       	brlt	.+2      	; 0x294a <LCD_write_cmd_4bit+0x31a>
    2948:	7e c0       	rjmp	.+252    	; 0x2a46 <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    294a:	fe 01       	movw	r30, r28
    294c:	eb 5b       	subi	r30, 0xBB	; 187
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	4a e7       	ldi	r20, 0x7A	; 122
    295e:	54 e4       	ldi	r21, 0x44	; 68
    2960:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	8c af       	std	Y+60, r24	; 0x3c
    296a:	9d af       	std	Y+61, r25	; 0x3d
    296c:	ae af       	std	Y+62, r26	; 0x3e
    296e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2970:	6c ad       	ldd	r22, Y+60	; 0x3c
    2972:	7d ad       	ldd	r23, Y+61	; 0x3d
    2974:	8e ad       	ldd	r24, Y+62	; 0x3e
    2976:	9f ad       	ldd	r25, Y+63	; 0x3f
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a ef       	ldi	r20, 0xFA	; 250
    297e:	54 e4       	ldi	r21, 0x44	; 68
    2980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	88 af       	std	Y+56, r24	; 0x38
    298a:	99 af       	std	Y+57, r25	; 0x39
    298c:	aa af       	std	Y+58, r26	; 0x3a
    298e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2990:	68 ad       	ldd	r22, Y+56	; 0x38
    2992:	79 ad       	ldd	r23, Y+57	; 0x39
    2994:	8a ad       	ldd	r24, Y+58	; 0x3a
    2996:	9b ad       	ldd	r25, Y+59	; 0x3b
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e8       	ldi	r20, 0x80	; 128
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29a4:	88 23       	and	r24, r24
    29a6:	2c f4       	brge	.+10     	; 0x29b2 <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9f ab       	std	Y+55, r25	; 0x37
    29ae:	8e ab       	std	Y+54, r24	; 0x36
    29b0:	3f c0       	rjmp	.+126    	; 0x2a30 <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    29b2:	68 ad       	ldd	r22, Y+56	; 0x38
    29b4:	79 ad       	ldd	r23, Y+57	; 0x39
    29b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    29b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	3f ef       	ldi	r19, 0xFF	; 255
    29be:	4f e7       	ldi	r20, 0x7F	; 127
    29c0:	57 e4       	ldi	r21, 0x47	; 71
    29c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29c6:	18 16       	cp	r1, r24
    29c8:	4c f5       	brge	.+82     	; 0x2a1c <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    29cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    29ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    29d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	51 e4       	ldi	r21, 0x41	; 65
    29da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9f ab       	std	Y+55, r25	; 0x37
    29f0:	8e ab       	std	Y+54, r24	; 0x36
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <LCD_write_cmd_4bit+0x3e2>
    29f4:	88 ec       	ldi	r24, 0xC8	; 200
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9d ab       	std	Y+53, r25	; 0x35
    29fa:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29fc:	8c a9       	ldd	r24, Y+52	; 0x34
    29fe:	9d a9       	ldd	r25, Y+53	; 0x35
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <LCD_write_cmd_4bit+0x3d0>
    2a04:	9d ab       	std	Y+53, r25	; 0x35
    2a06:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a08:	8e a9       	ldd	r24, Y+54	; 0x36
    2a0a:	9f a9       	ldd	r25, Y+55	; 0x37
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	9f ab       	std	Y+55, r25	; 0x37
    2a10:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	8e a9       	ldd	r24, Y+54	; 0x36
    2a14:	9f a9       	ldd	r25, Y+55	; 0x37
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	69 f7       	brne	.-38     	; 0x29f4 <LCD_write_cmd_4bit+0x3c4>
    2a1a:	2d c0       	rjmp	.+90     	; 0x2a76 <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	68 ad       	ldd	r22, Y+56	; 0x38
    2a1e:	79 ad       	ldd	r23, Y+57	; 0x39
    2a20:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a22:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9f ab       	std	Y+55, r25	; 0x37
    2a2e:	8e ab       	std	Y+54, r24	; 0x36
    2a30:	8e a9       	ldd	r24, Y+54	; 0x36
    2a32:	9f a9       	ldd	r25, Y+55	; 0x37
    2a34:	9b ab       	std	Y+51, r25	; 0x33
    2a36:	8a ab       	std	Y+50, r24	; 0x32
    2a38:	8a a9       	ldd	r24, Y+50	; 0x32
    2a3a:	9b a9       	ldd	r25, Y+51	; 0x33
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <LCD_write_cmd_4bit+0x40c>
    2a40:	9b ab       	std	Y+51, r25	; 0x33
    2a42:	8a ab       	std	Y+50, r24	; 0x32
    2a44:	18 c0       	rjmp	.+48     	; 0x2a76 <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a46:	fe 01       	movw	r30, r28
    2a48:	ef 5b       	subi	r30, 0xBF	; 191
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	60 81       	ld	r22, Z
    2a4e:	71 81       	ldd	r23, Z+1	; 0x01
    2a50:	82 81       	ldd	r24, Z+2	; 0x02
    2a52:	93 81       	ldd	r25, Z+3	; 0x03
    2a54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e0 5c       	subi	r30, 0xC0	; 192
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 83       	st	Z, r24
    2a64:	fe 01       	movw	r30, r28
    2a66:	e0 5c       	subi	r30, 0xC0	; 192
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a6e:	89 a9       	ldd	r24, Y+49	; 0x31
    2a70:	8a 95       	dec	r24
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_write_cmd_4bit+0x440>
    2a74:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2a76:	fe 01       	movw	r30, r28
    2a78:	ee 59       	subi	r30, 0x9E	; 158
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	84 e0       	ldi	r24, 0x04	; 4
    2a7e:	80 83       	st	Z, r24
    2a80:	26 c0       	rjmp	.+76     	; 0x2ace <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    2a82:	fe 01       	movw	r30, r28
    2a84:	ed 59       	subi	r30, 0x9D	; 157
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ee 59       	subi	r30, 0x9E	; 158
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a9 01       	movw	r20, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <LCD_write_cmd_4bit+0x472>
    2a9e:	55 95       	asr	r21
    2aa0:	47 95       	ror	r20
    2aa2:	8a 95       	dec	r24
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <LCD_write_cmd_4bit+0x46e>
    2aa6:	ca 01       	movw	r24, r20
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	91 70       	andi	r25, 0x01	; 1
    2aac:	fe 01       	movw	r30, r28
    2aae:	ee 59       	subi	r30, 0x9E	; 158
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	60 81       	ld	r22, Z
    2ab6:	49 2f       	mov	r20, r25
    2ab8:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2abc:	de 01       	movw	r26, r28
    2abe:	ae 59       	subi	r26, 0x9E	; 158
    2ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ee 59       	subi	r30, 0x9E	; 158
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	8c 93       	st	X, r24
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ee 59       	subi	r30, 0x9E	; 158
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	88 30       	cpi	r24, 0x08	; 8
    2ad8:	a0 f2       	brcs	.-88     	; 0x2a82 <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a0 e2       	ldi	r26, 0x20	; 32
    2ae8:	b1 e4       	ldi	r27, 0x41	; 65
    2aea:	8d a7       	std	Y+45, r24	; 0x2d
    2aec:	9e a7       	std	Y+46, r25	; 0x2e
    2aee:	af a7       	std	Y+47, r26	; 0x2f
    2af0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2af2:	6d a5       	ldd	r22, Y+45	; 0x2d
    2af4:	7e a5       	ldd	r23, Y+46	; 0x2e
    2af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af8:	98 a9       	ldd	r25, Y+48	; 0x30
    2afa:	2b ea       	ldi	r18, 0xAB	; 171
    2afc:	3a ea       	ldi	r19, 0xAA	; 170
    2afe:	4a e2       	ldi	r20, 0x2A	; 42
    2b00:	50 e4       	ldi	r21, 0x40	; 64
    2b02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	89 a7       	std	Y+41, r24	; 0x29
    2b0c:	9a a7       	std	Y+42, r25	; 0x2a
    2b0e:	ab a7       	std	Y+43, r26	; 0x2b
    2b10:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2b12:	69 a5       	ldd	r22, Y+41	; 0x29
    2b14:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	1c f4       	brge	.+6      	; 0x2b30 <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	88 a7       	std	Y+40, r24	; 0x28
    2b2e:	91 c0       	rjmp	.+290    	; 0x2c52 <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    2b30:	69 a5       	ldd	r22, Y+41	; 0x29
    2b32:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4f e7       	ldi	r20, 0x7F	; 127
    2b3e:	53 e4       	ldi	r21, 0x43	; 67
    2b40:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b44:	18 16       	cp	r1, r24
    2b46:	0c f0       	brlt	.+2      	; 0x2b4a <LCD_write_cmd_4bit+0x51a>
    2b48:	7b c0       	rjmp	.+246    	; 0x2c40 <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2b4a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b4c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b50:	98 a9       	ldd	r25, Y+48	; 0x30
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a e7       	ldi	r20, 0x7A	; 122
    2b58:	54 e4       	ldi	r21, 0x44	; 68
    2b5a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	8c a3       	std	Y+36, r24	; 0x24
    2b64:	9d a3       	std	Y+37, r25	; 0x25
    2b66:	ae a3       	std	Y+38, r26	; 0x26
    2b68:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6a:	6c a1       	ldd	r22, Y+36	; 0x24
    2b6c:	7d a1       	ldd	r23, Y+37	; 0x25
    2b6e:	8e a1       	ldd	r24, Y+38	; 0x26
    2b70:	9f a1       	ldd	r25, Y+39	; 0x27
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	4a ef       	ldi	r20, 0xFA	; 250
    2b78:	54 e4       	ldi	r21, 0x44	; 68
    2b7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	88 a3       	std	Y+32, r24	; 0x20
    2b84:	99 a3       	std	Y+33, r25	; 0x21
    2b86:	aa a3       	std	Y+34, r26	; 0x22
    2b88:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b8a:	68 a1       	ldd	r22, Y+32	; 0x20
    2b8c:	79 a1       	ldd	r23, Y+33	; 0x21
    2b8e:	8a a1       	ldd	r24, Y+34	; 0x22
    2b90:	9b a1       	ldd	r25, Y+35	; 0x23
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5f e3       	ldi	r21, 0x3F	; 63
    2b9a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	2c f4       	brge	.+10     	; 0x2bac <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ba8:	8e 8f       	std	Y+30, r24	; 0x1e
    2baa:	3f c0       	rjmp	.+126    	; 0x2c2a <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    2bac:	68 a1       	ldd	r22, Y+32	; 0x20
    2bae:	79 a1       	ldd	r23, Y+33	; 0x21
    2bb0:	8a a1       	ldd	r24, Y+34	; 0x22
    2bb2:	9b a1       	ldd	r25, Y+35	; 0x23
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	3f ef       	ldi	r19, 0xFF	; 255
    2bb8:	4f e7       	ldi	r20, 0x7F	; 127
    2bba:	57 e4       	ldi	r21, 0x47	; 71
    2bbc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bc0:	18 16       	cp	r1, r24
    2bc2:	4c f5       	brge	.+82     	; 0x2c16 <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc4:	6c a1       	ldd	r22, Y+36	; 0x24
    2bc6:	7d a1       	ldd	r23, Y+37	; 0x25
    2bc8:	8e a1       	ldd	r24, Y+38	; 0x26
    2bca:	9f a1       	ldd	r25, Y+39	; 0x27
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e2       	ldi	r20, 0x20	; 32
    2bd2:	51 e4       	ldi	r21, 0x41	; 65
    2bd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	bc 01       	movw	r22, r24
    2bde:	cd 01       	movw	r24, r26
    2be0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9f 8f       	std	Y+31, r25	; 0x1f
    2bea:	8e 8f       	std	Y+30, r24	; 0x1e
    2bec:	0f c0       	rjmp	.+30     	; 0x2c0c <LCD_write_cmd_4bit+0x5dc>
    2bee:	88 ec       	ldi	r24, 0xC8	; 200
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9d 8f       	std	Y+29, r25	; 0x1d
    2bf4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bf6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bf8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <LCD_write_cmd_4bit+0x5ca>
    2bfe:	9d 8f       	std	Y+29, r25	; 0x1d
    2c00:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	9f 8f       	std	Y+31, r25	; 0x1f
    2c0a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c0e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	69 f7       	brne	.-38     	; 0x2bee <LCD_write_cmd_4bit+0x5be>
    2c14:	24 c0       	rjmp	.+72     	; 0x2c5e <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c16:	68 a1       	ldd	r22, Y+32	; 0x20
    2c18:	79 a1       	ldd	r23, Y+33	; 0x21
    2c1a:	8a a1       	ldd	r24, Y+34	; 0x22
    2c1c:	9b a1       	ldd	r25, Y+35	; 0x23
    2c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9f 8f       	std	Y+31, r25	; 0x1f
    2c28:	8e 8f       	std	Y+30, r24	; 0x1e
    2c2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c2e:	9b 8f       	std	Y+27, r25	; 0x1b
    2c30:	8a 8f       	std	Y+26, r24	; 0x1a
    2c32:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c34:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <LCD_write_cmd_4bit+0x606>
    2c3a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c3c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c40:	69 a5       	ldd	r22, Y+41	; 0x29
    2c42:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	88 a7       	std	Y+40, r24	; 0x28
    2c52:	88 a5       	ldd	r24, Y+40	; 0x28
    2c54:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c56:	89 8d       	ldd	r24, Y+25	; 0x19
    2c58:	8a 95       	dec	r24
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <LCD_write_cmd_4bit+0x628>
    2c5c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e8       	ldi	r26, 0x80	; 128
    2c6c:	bf e3       	ldi	r27, 0x3F	; 63
    2c6e:	8d 8b       	std	Y+21, r24	; 0x15
    2c70:	9e 8b       	std	Y+22, r25	; 0x16
    2c72:	af 8b       	std	Y+23, r26	; 0x17
    2c74:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c76:	6d 89       	ldd	r22, Y+21	; 0x15
    2c78:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7e:	2b ea       	ldi	r18, 0xAB	; 171
    2c80:	3a ea       	ldi	r19, 0xAA	; 170
    2c82:	4a e2       	ldi	r20, 0x2A	; 42
    2c84:	50 e4       	ldi	r21, 0x40	; 64
    2c86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	89 8b       	std	Y+17, r24	; 0x11
    2c90:	9a 8b       	std	Y+18, r25	; 0x12
    2c92:	ab 8b       	std	Y+19, r26	; 0x13
    2c94:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c96:	69 89       	ldd	r22, Y+17	; 0x11
    2c98:	7a 89       	ldd	r23, Y+18	; 0x12
    2c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e8       	ldi	r20, 0x80	; 128
    2ca4:	5f e3       	ldi	r21, 0x3F	; 63
    2ca6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	1c f4       	brge	.+6      	; 0x2cb4 <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	88 8b       	std	Y+16, r24	; 0x10
    2cb2:	91 c0       	rjmp	.+290    	; 0x2dd6 <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    2cb4:	69 89       	ldd	r22, Y+17	; 0x11
    2cb6:	7a 89       	ldd	r23, Y+18	; 0x12
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	53 e4       	ldi	r21, 0x43	; 67
    2cc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	0c f0       	brlt	.+2      	; 0x2cce <LCD_write_cmd_4bit+0x69e>
    2ccc:	7b c0       	rjmp	.+246    	; 0x2dc4 <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2cce:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	4a e7       	ldi	r20, 0x7A	; 122
    2cdc:	54 e4       	ldi	r21, 0x44	; 68
    2cde:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	8c 87       	std	Y+12, r24	; 0x0c
    2ce8:	9d 87       	std	Y+13, r25	; 0x0d
    2cea:	ae 87       	std	Y+14, r26	; 0x0e
    2cec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cf0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cf2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a ef       	ldi	r20, 0xFA	; 250
    2cfc:	54 e4       	ldi	r21, 0x44	; 68
    2cfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	88 87       	std	Y+8, r24	; 0x08
    2d08:	99 87       	std	Y+9, r25	; 0x09
    2d0a:	aa 87       	std	Y+10, r26	; 0x0a
    2d0c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d0e:	68 85       	ldd	r22, Y+8	; 0x08
    2d10:	79 85       	ldd	r23, Y+9	; 0x09
    2d12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9f 83       	std	Y+7, r25	; 0x07
    2d2c:	8e 83       	std	Y+6, r24	; 0x06
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    2d30:	68 85       	ldd	r22, Y+8	; 0x08
    2d32:	79 85       	ldd	r23, Y+9	; 0x09
    2d34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9f 83       	std	Y+7, r25	; 0x07
    2d6e:	8e 83       	std	Y+6, r24	; 0x06
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <LCD_write_cmd_4bit+0x760>
    2d72:	88 ec       	ldi	r24, 0xC8	; 200
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	9d 83       	std	Y+5, r25	; 0x05
    2d78:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <LCD_write_cmd_4bit+0x74e>
    2d82:	9d 83       	std	Y+5, r25	; 0x05
    2d84:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	8e 81       	ldd	r24, Y+6	; 0x06
    2d88:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9f 83       	std	Y+7, r25	; 0x07
    2d8e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	8e 81       	ldd	r24, Y+6	; 0x06
    2d92:	9f 81       	ldd	r25, Y+7	; 0x07
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <LCD_write_cmd_4bit+0x742>
    2d98:	24 c0       	rjmp	.+72     	; 0x2de2 <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	68 85       	ldd	r22, Y+8	; 0x08
    2d9c:	79 85       	ldd	r23, Y+9	; 0x09
    2d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9f 83       	std	Y+7, r25	; 0x07
    2dac:	8e 83       	std	Y+6, r24	; 0x06
    2dae:	8e 81       	ldd	r24, Y+6	; 0x06
    2db0:	9f 81       	ldd	r25, Y+7	; 0x07
    2db2:	9b 83       	std	Y+3, r25	; 0x03
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <LCD_write_cmd_4bit+0x78a>
    2dbe:	9b 83       	std	Y+3, r25	; 0x03
    2dc0:	8a 83       	std	Y+2, r24	; 0x02
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc4:	69 89       	ldd	r22, Y+17	; 0x11
    2dc6:	7a 89       	ldd	r23, Y+18	; 0x12
    2dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dca:	9c 89       	ldd	r25, Y+20	; 0x14
    2dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	88 8b       	std	Y+16, r24	; 0x10
    2dd6:	88 89       	ldd	r24, Y+16	; 0x10
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	8a 95       	dec	r24
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <LCD_write_cmd_4bit+0x7ac>
    2de0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2de2:	fe 01       	movw	r30, r28
    2de4:	ef 59       	subi	r30, 0x9F	; 159
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	84 e0       	ldi	r24, 0x04	; 4
    2dea:	80 83       	st	Z, r24
    2dec:	27 c0       	rjmp	.+78     	; 0x2e3c <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    2dee:	fe 01       	movw	r30, r28
    2df0:	ed 59       	subi	r30, 0x9D	; 157
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	80 81       	ld	r24, Z
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	ef 59       	subi	r30, 0x9F	; 159
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	80 81       	ld	r24, Z
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	04 97       	sbiw	r24, 0x04	; 4
    2e08:	f9 01       	movw	r30, r18
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <LCD_write_cmd_4bit+0x7e0>
    2e0c:	f5 95       	asr	r31
    2e0e:	e7 95       	ror	r30
    2e10:	8a 95       	dec	r24
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <LCD_write_cmd_4bit+0x7dc>
    2e14:	cf 01       	movw	r24, r30
    2e16:	98 2f       	mov	r25, r24
    2e18:	91 70       	andi	r25, 0x01	; 1
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	ef 59       	subi	r30, 0x9F	; 159
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	60 81       	ld	r22, Z
    2e24:	49 2f       	mov	r20, r25
    2e26:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2e2a:	de 01       	movw	r26, r28
    2e2c:	af 59       	subi	r26, 0x9F	; 159
    2e2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e30:	fe 01       	movw	r30, r28
    2e32:	ef 59       	subi	r30, 0x9F	; 159
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 81       	ld	r24, Z
    2e38:	8f 5f       	subi	r24, 0xFF	; 255
    2e3a:	8c 93       	st	X, r24
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ef 59       	subi	r30, 0x9F	; 159
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 81       	ld	r24, Z
    2e44:	88 30       	cpi	r24, 0x08	; 8
    2e46:	98 f2       	brcs	.-90     	; 0x2dee <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	60 e0       	ldi	r22, 0x00	; 0
    2e4c:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
}
    2e50:	cd 59       	subi	r28, 0x9D	; 157
    2e52:	df 4f       	sbci	r29, 0xFF	; 255
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	cb 5a       	subi	r28, 0xAB	; 171
    2e76:	d0 40       	sbci	r29, 0x00	; 0
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	62 e0       	ldi	r22, 0x02	; 2
    2e86:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    2e92:	fe 01       	movw	r30, r28
    2e94:	eb 55       	subi	r30, 0x5B	; 91
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	a0 e8       	ldi	r26, 0x80	; 128
    2e9e:	bf e3       	ldi	r27, 0x3F	; 63
    2ea0:	80 83       	st	Z, r24
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	a2 83       	std	Z+2, r26	; 0x02
    2ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ea8:	8e 01       	movw	r16, r28
    2eaa:	0f 55       	subi	r16, 0x5F	; 95
    2eac:	1f 4f       	sbci	r17, 0xFF	; 255
    2eae:	fe 01       	movw	r30, r28
    2eb0:	eb 55       	subi	r30, 0x5B	; 91
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	60 81       	ld	r22, Z
    2eb6:	71 81       	ldd	r23, Z+1	; 0x01
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	2b ea       	ldi	r18, 0xAB	; 171
    2ebe:	3a ea       	ldi	r19, 0xAA	; 170
    2ec0:	4a e2       	ldi	r20, 0x2A	; 42
    2ec2:	50 e4       	ldi	r21, 0x40	; 64
    2ec4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	f8 01       	movw	r30, r16
    2ece:	80 83       	st	Z, r24
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	a2 83       	std	Z+2, r26	; 0x02
    2ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ef 55       	subi	r30, 0x5F	; 95
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e8       	ldi	r20, 0x80	; 128
    2eea:	5f e3       	ldi	r21, 0x3F	; 63
    2eec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ef0:	88 23       	and	r24, r24
    2ef2:	34 f4       	brge	.+12     	; 0x2f00 <LCD_function_set_4bit+0x98>
		__ticks = 1;
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e0 56       	subi	r30, 0x60	; 96
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	80 83       	st	Z, r24
    2efe:	e0 c0       	rjmp	.+448    	; 0x30c0 <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    2f00:	fe 01       	movw	r30, r28
    2f02:	ef 55       	subi	r30, 0x5F	; 95
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	53 e4       	ldi	r21, 0x43	; 67
    2f16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	0c f0       	brlt	.+2      	; 0x2f20 <LCD_function_set_4bit+0xb8>
    2f1e:	c0 c0       	rjmp	.+384    	; 0x30a0 <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2f20:	fe 01       	movw	r30, r28
    2f22:	eb 55       	subi	r30, 0x5B	; 91
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4a e7       	ldi	r20, 0x7A	; 122
    2f34:	54 e4       	ldi	r21, 0x44	; 68
    2f36:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e4 56       	subi	r30, 0x64	; 100
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 83       	st	Z, r24
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	a2 83       	std	Z+2, r26	; 0x02
    2f4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4c:	8e 01       	movw	r16, r28
    2f4e:	08 56       	subi	r16, 0x68	; 104
    2f50:	1f 4f       	sbci	r17, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	e4 56       	subi	r30, 0x64	; 100
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a ef       	ldi	r20, 0xFA	; 250
    2f66:	54 e4       	ldi	r21, 0x44	; 68
    2f68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	f8 01       	movw	r30, r16
    2f72:	80 83       	st	Z, r24
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	a2 83       	std	Z+2, r26	; 0x02
    2f78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e8 56       	subi	r30, 0x68	; 104
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e8       	ldi	r20, 0x80	; 128
    2f8e:	5f e3       	ldi	r21, 0x3F	; 63
    2f90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	44 f4       	brge	.+16     	; 0x2fa8 <LCD_function_set_4bit+0x140>
		__ticks = 1;
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ea 56       	subi	r30, 0x6A	; 106
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	80 83       	st	Z, r24
    2fa6:	64 c0       	rjmp	.+200    	; 0x3070 <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e8 56       	subi	r30, 0x68	; 104
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	3f ef       	ldi	r19, 0xFF	; 255
    2fba:	4f e7       	ldi	r20, 0x7F	; 127
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fc2:	18 16       	cp	r1, r24
    2fc4:	0c f0       	brlt	.+2      	; 0x2fc8 <LCD_function_set_4bit+0x160>
    2fc6:	43 c0       	rjmp	.+134    	; 0x304e <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e4 56       	subi	r30, 0x64	; 100
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	51 e4       	ldi	r21, 0x41	; 65
    2fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8e 01       	movw	r16, r28
    2fe8:	0a 56       	subi	r16, 0x6A	; 106
    2fea:	1f 4f       	sbci	r17, 0xFF	; 255
    2fec:	bc 01       	movw	r22, r24
    2fee:	cd 01       	movw	r24, r26
    2ff0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
    2ffe:	1f c0       	rjmp	.+62     	; 0x303e <LCD_function_set_4bit+0x1d6>
    3000:	fe 01       	movw	r30, r28
    3002:	ec 56       	subi	r30, 0x6C	; 108
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	88 ec       	ldi	r24, 0xC8	; 200
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    300e:	fe 01       	movw	r30, r28
    3010:	ec 56       	subi	r30, 0x6C	; 108
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	91 81       	ldd	r25, Z+1	; 0x01
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <LCD_function_set_4bit+0x1b0>
    301c:	fe 01       	movw	r30, r28
    301e:	ec 56       	subi	r30, 0x6C	; 108
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3026:	de 01       	movw	r26, r28
    3028:	aa 56       	subi	r26, 0x6A	; 106
    302a:	bf 4f       	sbci	r27, 0xFF	; 255
    302c:	fe 01       	movw	r30, r28
    302e:	ea 56       	subi	r30, 0x6A	; 106
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	11 96       	adiw	r26, 0x01	; 1
    303a:	9c 93       	st	X, r25
    303c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303e:	fe 01       	movw	r30, r28
    3040:	ea 56       	subi	r30, 0x6A	; 106
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	80 81       	ld	r24, Z
    3046:	91 81       	ldd	r25, Z+1	; 0x01
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	d1 f6       	brne	.-76     	; 0x3000 <LCD_function_set_4bit+0x198>
    304c:	4b c0       	rjmp	.+150    	; 0x30e4 <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304e:	8e 01       	movw	r16, r28
    3050:	0a 56       	subi	r16, 0x6A	; 106
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e8 56       	subi	r30, 0x68	; 104
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	60 81       	ld	r22, Z
    305c:	71 81       	ldd	r23, Z+1	; 0x01
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	93 81       	ldd	r25, Z+3	; 0x03
    3062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	f8 01       	movw	r30, r16
    306c:	91 83       	std	Z+1, r25	; 0x01
    306e:	80 83       	st	Z, r24
    3070:	de 01       	movw	r26, r28
    3072:	ae 56       	subi	r26, 0x6E	; 110
    3074:	bf 4f       	sbci	r27, 0xFF	; 255
    3076:	fe 01       	movw	r30, r28
    3078:	ea 56       	subi	r30, 0x6A	; 106
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 81       	ld	r24, Z
    307e:	91 81       	ldd	r25, Z+1	; 0x01
    3080:	11 96       	adiw	r26, 0x01	; 1
    3082:	9c 93       	st	X, r25
    3084:	8e 93       	st	-X, r24
    3086:	fe 01       	movw	r30, r28
    3088:	ee 56       	subi	r30, 0x6E	; 110
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <LCD_function_set_4bit+0x228>
    3094:	fe 01       	movw	r30, r28
    3096:	ee 56       	subi	r30, 0x6E	; 110
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
    309e:	22 c0       	rjmp	.+68     	; 0x30e4 <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30a0:	8e 01       	movw	r16, r28
    30a2:	00 56       	subi	r16, 0x60	; 96
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	fe 01       	movw	r30, r28
    30a8:	ef 55       	subi	r30, 0x5F	; 95
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	60 81       	ld	r22, Z
    30ae:	71 81       	ldd	r23, Z+1	; 0x01
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	93 81       	ldd	r25, Z+3	; 0x03
    30b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	f8 01       	movw	r30, r16
    30be:	80 83       	st	Z, r24
    30c0:	de 01       	movw	r26, r28
    30c2:	af 56       	subi	r26, 0x6F	; 111
    30c4:	bf 4f       	sbci	r27, 0xFF	; 255
    30c6:	fe 01       	movw	r30, r28
    30c8:	e0 56       	subi	r30, 0x60	; 96
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	80 81       	ld	r24, Z
    30ce:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30d0:	fe 01       	movw	r30, r28
    30d2:	ef 56       	subi	r30, 0x6F	; 111
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 81       	ld	r24, Z
    30d8:	8a 95       	dec	r24
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_function_set_4bit+0x270>
    30dc:	fe 01       	movw	r30, r28
    30de:	ef 56       	subi	r30, 0x6F	; 111
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    30ec:	fe 01       	movw	r30, r28
    30ee:	e3 57       	subi	r30, 0x73	; 115
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 e8       	ldi	r26, 0x80	; 128
    30f8:	bf e3       	ldi	r27, 0x3F	; 63
    30fa:	80 83       	st	Z, r24
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	a2 83       	std	Z+2, r26	; 0x02
    3100:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3102:	8e 01       	movw	r16, r28
    3104:	07 57       	subi	r16, 0x77	; 119
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	fe 01       	movw	r30, r28
    310a:	e3 57       	subi	r30, 0x73	; 115
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	2b ea       	ldi	r18, 0xAB	; 171
    3118:	3a ea       	ldi	r19, 0xAA	; 170
    311a:	4a e2       	ldi	r20, 0x2A	; 42
    311c:	50 e4       	ldi	r21, 0x40	; 64
    311e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	f8 01       	movw	r30, r16
    3128:	80 83       	st	Z, r24
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	a2 83       	std	Z+2, r26	; 0x02
    312e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3130:	fe 01       	movw	r30, r28
    3132:	e7 57       	subi	r30, 0x77	; 119
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e8       	ldi	r20, 0x80	; 128
    3144:	5f e3       	ldi	r21, 0x3F	; 63
    3146:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    314a:	88 23       	and	r24, r24
    314c:	34 f4       	brge	.+12     	; 0x315a <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    314e:	fe 01       	movw	r30, r28
    3150:	e8 57       	subi	r30, 0x78	; 120
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	80 83       	st	Z, r24
    3158:	e0 c0       	rjmp	.+448    	; 0x331a <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    315a:	fe 01       	movw	r30, r28
    315c:	e7 57       	subi	r30, 0x77	; 119
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4f e7       	ldi	r20, 0x7F	; 127
    316e:	53 e4       	ldi	r21, 0x43	; 67
    3170:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3174:	18 16       	cp	r1, r24
    3176:	0c f0       	brlt	.+2      	; 0x317a <LCD_function_set_4bit+0x312>
    3178:	c0 c0       	rjmp	.+384    	; 0x32fa <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    317a:	fe 01       	movw	r30, r28
    317c:	e3 57       	subi	r30, 0x73	; 115
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	60 81       	ld	r22, Z
    3182:	71 81       	ldd	r23, Z+1	; 0x01
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	93 81       	ldd	r25, Z+3	; 0x03
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	4a e7       	ldi	r20, 0x7A	; 122
    318e:	54 e4       	ldi	r21, 0x44	; 68
    3190:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	fe 01       	movw	r30, r28
    319a:	ec 57       	subi	r30, 0x7C	; 124
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 83       	st	Z, r24
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	a2 83       	std	Z+2, r26	; 0x02
    31a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a6:	8e 01       	movw	r16, r28
    31a8:	00 58       	subi	r16, 0x80	; 128
    31aa:	1f 4f       	sbci	r17, 0xFF	; 255
    31ac:	fe 01       	movw	r30, r28
    31ae:	ec 57       	subi	r30, 0x7C	; 124
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	60 81       	ld	r22, Z
    31b4:	71 81       	ldd	r23, Z+1	; 0x01
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	93 81       	ldd	r25, Z+3	; 0x03
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	4a ef       	ldi	r20, 0xFA	; 250
    31c0:	54 e4       	ldi	r21, 0x44	; 68
    31c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	f8 01       	movw	r30, r16
    31cc:	80 83       	st	Z, r24
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	a2 83       	std	Z+2, r26	; 0x02
    31d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d4:	fe 01       	movw	r30, r28
    31d6:	e0 58       	subi	r30, 0x80	; 128
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	82 81       	ldd	r24, Z+2	; 0x02
    31e0:	93 81       	ldd	r25, Z+3	; 0x03
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e8       	ldi	r20, 0x80	; 128
    31e8:	5f e3       	ldi	r21, 0x3F	; 63
    31ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    31ee:	88 23       	and	r24, r24
    31f0:	44 f4       	brge	.+16     	; 0x3202 <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    31f2:	fe 01       	movw	r30, r28
    31f4:	e2 58       	subi	r30, 0x82	; 130
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	91 83       	std	Z+1, r25	; 0x01
    31fe:	80 83       	st	Z, r24
    3200:	64 c0       	rjmp	.+200    	; 0x32ca <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    3202:	fe 01       	movw	r30, r28
    3204:	e0 58       	subi	r30, 0x80	; 128
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	60 81       	ld	r22, Z
    320a:	71 81       	ldd	r23, Z+1	; 0x01
    320c:	82 81       	ldd	r24, Z+2	; 0x02
    320e:	93 81       	ldd	r25, Z+3	; 0x03
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	3f ef       	ldi	r19, 0xFF	; 255
    3214:	4f e7       	ldi	r20, 0x7F	; 127
    3216:	57 e4       	ldi	r21, 0x47	; 71
    3218:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    321c:	18 16       	cp	r1, r24
    321e:	0c f0       	brlt	.+2      	; 0x3222 <LCD_function_set_4bit+0x3ba>
    3220:	43 c0       	rjmp	.+134    	; 0x32a8 <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3222:	fe 01       	movw	r30, r28
    3224:	ec 57       	subi	r30, 0x7C	; 124
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e2       	ldi	r20, 0x20	; 32
    3236:	51 e4       	ldi	r21, 0x41	; 65
    3238:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	8e 01       	movw	r16, r28
    3242:	02 58       	subi	r16, 0x82	; 130
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	f8 01       	movw	r30, r16
    3254:	91 83       	std	Z+1, r25	; 0x01
    3256:	80 83       	st	Z, r24
    3258:	1f c0       	rjmp	.+62     	; 0x3298 <LCD_function_set_4bit+0x430>
    325a:	fe 01       	movw	r30, r28
    325c:	e4 58       	subi	r30, 0x84	; 132
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	88 ec       	ldi	r24, 0xC8	; 200
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3268:	fe 01       	movw	r30, r28
    326a:	e4 58       	subi	r30, 0x84	; 132
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	f1 f7       	brne	.-4      	; 0x3272 <LCD_function_set_4bit+0x40a>
    3276:	fe 01       	movw	r30, r28
    3278:	e4 58       	subi	r30, 0x84	; 132
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3280:	de 01       	movw	r26, r28
    3282:	a2 58       	subi	r26, 0x82	; 130
    3284:	bf 4f       	sbci	r27, 0xFF	; 255
    3286:	fe 01       	movw	r30, r28
    3288:	e2 58       	subi	r30, 0x82	; 130
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 81       	ld	r24, Z
    328e:	91 81       	ldd	r25, Z+1	; 0x01
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	11 96       	adiw	r26, 0x01	; 1
    3294:	9c 93       	st	X, r25
    3296:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3298:	fe 01       	movw	r30, r28
    329a:	e2 58       	subi	r30, 0x82	; 130
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	d1 f6       	brne	.-76     	; 0x325a <LCD_function_set_4bit+0x3f2>
    32a6:	4b c0       	rjmp	.+150    	; 0x333e <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a8:	8e 01       	movw	r16, r28
    32aa:	02 58       	subi	r16, 0x82	; 130
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	fe 01       	movw	r30, r28
    32b0:	e0 58       	subi	r30, 0x80	; 128
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	f8 01       	movw	r30, r16
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
    32ca:	de 01       	movw	r26, r28
    32cc:	a6 58       	subi	r26, 0x86	; 134
    32ce:	bf 4f       	sbci	r27, 0xFF	; 255
    32d0:	fe 01       	movw	r30, r28
    32d2:	e2 58       	subi	r30, 0x82	; 130
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	11 96       	adiw	r26, 0x01	; 1
    32dc:	9c 93       	st	X, r25
    32de:	8e 93       	st	-X, r24
    32e0:	fe 01       	movw	r30, r28
    32e2:	e6 58       	subi	r30, 0x86	; 134
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	80 81       	ld	r24, Z
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <LCD_function_set_4bit+0x482>
    32ee:	fe 01       	movw	r30, r28
    32f0:	e6 58       	subi	r30, 0x86	; 134
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	80 83       	st	Z, r24
    32f8:	22 c0       	rjmp	.+68     	; 0x333e <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32fa:	8e 01       	movw	r16, r28
    32fc:	08 57       	subi	r16, 0x78	; 120
    32fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3300:	fe 01       	movw	r30, r28
    3302:	e7 57       	subi	r30, 0x77	; 119
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	60 81       	ld	r22, Z
    3308:	71 81       	ldd	r23, Z+1	; 0x01
    330a:	82 81       	ldd	r24, Z+2	; 0x02
    330c:	93 81       	ldd	r25, Z+3	; 0x03
    330e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	f8 01       	movw	r30, r16
    3318:	80 83       	st	Z, r24
    331a:	de 01       	movw	r26, r28
    331c:	a7 58       	subi	r26, 0x87	; 135
    331e:	bf 4f       	sbci	r27, 0xFF	; 255
    3320:	fe 01       	movw	r30, r28
    3322:	e8 57       	subi	r30, 0x78	; 120
    3324:	ff 4f       	sbci	r31, 0xFF	; 255
    3326:	80 81       	ld	r24, Z
    3328:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    332a:	fe 01       	movw	r30, r28
    332c:	e7 58       	subi	r30, 0x87	; 135
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 81       	ld	r24, Z
    3332:	8a 95       	dec	r24
    3334:	f1 f7       	brne	.-4      	; 0x3332 <LCD_function_set_4bit+0x4ca>
    3336:	fe 01       	movw	r30, r28
    3338:	e7 58       	subi	r30, 0x87	; 135
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    333e:	fe 01       	movw	r30, r28
    3340:	e5 55       	subi	r30, 0x55	; 85
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	10 82       	st	Z, r1
    3346:	23 c0       	rjmp	.+70     	; 0x338e <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    3348:	fe 01       	movw	r30, r28
    334a:	e5 55       	subi	r30, 0x55	; 85
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	48 2f       	mov	r20, r24
    3352:	4c 5f       	subi	r20, 0xFC	; 252
    3354:	fe 01       	movw	r30, r28
    3356:	e5 55       	subi	r30, 0x55	; 85
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	28 2f       	mov	r18, r24
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	82 e0       	ldi	r24, 0x02	; 2
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	02 c0       	rjmp	.+4      	; 0x336a <LCD_function_set_4bit+0x502>
    3366:	95 95       	asr	r25
    3368:	87 95       	ror	r24
    336a:	2a 95       	dec	r18
    336c:	e2 f7       	brpl	.-8      	; 0x3366 <LCD_function_set_4bit+0x4fe>
    336e:	98 2f       	mov	r25, r24
    3370:	91 70       	andi	r25, 0x01	; 1
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	64 2f       	mov	r22, r20
    3376:	49 2f       	mov	r20, r25
    3378:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    337c:	de 01       	movw	r26, r28
    337e:	a5 55       	subi	r26, 0x55	; 85
    3380:	bf 4f       	sbci	r27, 0xFF	; 255
    3382:	fe 01       	movw	r30, r28
    3384:	e5 55       	subi	r30, 0x55	; 85
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	8f 5f       	subi	r24, 0xFF	; 255
    338c:	8c 93       	st	X, r24
    338e:	fe 01       	movw	r30, r28
    3390:	e5 55       	subi	r30, 0x55	; 85
    3392:	ff 4f       	sbci	r31, 0xFF	; 255
    3394:	80 81       	ld	r24, Z
    3396:	84 30       	cpi	r24, 0x04	; 4
    3398:	b8 f2       	brcs	.-82     	; 0x3348 <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	60 e0       	ldi	r22, 0x00	; 0
    339e:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    33a2:	fe 01       	movw	r30, r28
    33a4:	eb 58       	subi	r30, 0x8B	; 139
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	a0 e2       	ldi	r26, 0x20	; 32
    33ae:	b1 e4       	ldi	r27, 0x41	; 65
    33b0:	80 83       	st	Z, r24
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	a2 83       	std	Z+2, r26	; 0x02
    33b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33b8:	8e 01       	movw	r16, r28
    33ba:	0f 58       	subi	r16, 0x8F	; 143
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	fe 01       	movw	r30, r28
    33c0:	eb 58       	subi	r30, 0x8B	; 139
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	60 81       	ld	r22, Z
    33c6:	71 81       	ldd	r23, Z+1	; 0x01
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	2b ea       	ldi	r18, 0xAB	; 171
    33ce:	3a ea       	ldi	r19, 0xAA	; 170
    33d0:	4a e2       	ldi	r20, 0x2A	; 42
    33d2:	50 e4       	ldi	r21, 0x40	; 64
    33d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	f8 01       	movw	r30, r16
    33de:	80 83       	st	Z, r24
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	a2 83       	std	Z+2, r26	; 0x02
    33e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33e6:	fe 01       	movw	r30, r28
    33e8:	ef 58       	subi	r30, 0x8F	; 143
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	60 81       	ld	r22, Z
    33ee:	71 81       	ldd	r23, Z+1	; 0x01
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	93 81       	ldd	r25, Z+3	; 0x03
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e8       	ldi	r20, 0x80	; 128
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3400:	88 23       	and	r24, r24
    3402:	34 f4       	brge	.+12     	; 0x3410 <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    3404:	fe 01       	movw	r30, r28
    3406:	e0 59       	subi	r30, 0x90	; 144
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 83       	st	Z, r24
    340e:	e0 c0       	rjmp	.+448    	; 0x35d0 <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    3410:	fe 01       	movw	r30, r28
    3412:	ef 58       	subi	r30, 0x8F	; 143
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	60 81       	ld	r22, Z
    3418:	71 81       	ldd	r23, Z+1	; 0x01
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	93 81       	ldd	r25, Z+3	; 0x03
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	53 e4       	ldi	r21, 0x43	; 67
    3426:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	0c f0       	brlt	.+2      	; 0x3430 <LCD_function_set_4bit+0x5c8>
    342e:	c0 c0       	rjmp	.+384    	; 0x35b0 <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    3430:	fe 01       	movw	r30, r28
    3432:	eb 58       	subi	r30, 0x8B	; 139
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	60 81       	ld	r22, Z
    3438:	71 81       	ldd	r23, Z+1	; 0x01
    343a:	82 81       	ldd	r24, Z+2	; 0x02
    343c:	93 81       	ldd	r25, Z+3	; 0x03
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	4a e7       	ldi	r20, 0x7A	; 122
    3444:	54 e4       	ldi	r21, 0x44	; 68
    3446:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	fe 01       	movw	r30, r28
    3450:	e4 59       	subi	r30, 0x94	; 148
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 83       	st	Z, r24
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	a2 83       	std	Z+2, r26	; 0x02
    345a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345c:	8e 01       	movw	r16, r28
    345e:	08 59       	subi	r16, 0x98	; 152
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	fe 01       	movw	r30, r28
    3464:	e4 59       	subi	r30, 0x94	; 148
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	60 81       	ld	r22, Z
    346a:	71 81       	ldd	r23, Z+1	; 0x01
    346c:	82 81       	ldd	r24, Z+2	; 0x02
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	4a ef       	ldi	r20, 0xFA	; 250
    3476:	54 e4       	ldi	r21, 0x44	; 68
    3478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	f8 01       	movw	r30, r16
    3482:	80 83       	st	Z, r24
    3484:	91 83       	std	Z+1, r25	; 0x01
    3486:	a2 83       	std	Z+2, r26	; 0x02
    3488:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    348a:	fe 01       	movw	r30, r28
    348c:	e8 59       	subi	r30, 0x98	; 152
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e8       	ldi	r20, 0x80	; 128
    349e:	5f e3       	ldi	r21, 0x3F	; 63
    34a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34a4:	88 23       	and	r24, r24
    34a6:	44 f4       	brge	.+16     	; 0x34b8 <LCD_function_set_4bit+0x650>
		__ticks = 1;
    34a8:	fe 01       	movw	r30, r28
    34aa:	ea 59       	subi	r30, 0x9A	; 154
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	80 83       	st	Z, r24
    34b6:	64 c0       	rjmp	.+200    	; 0x3580 <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    34b8:	fe 01       	movw	r30, r28
    34ba:	e8 59       	subi	r30, 0x98	; 152
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	60 81       	ld	r22, Z
    34c0:	71 81       	ldd	r23, Z+1	; 0x01
    34c2:	82 81       	ldd	r24, Z+2	; 0x02
    34c4:	93 81       	ldd	r25, Z+3	; 0x03
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	3f ef       	ldi	r19, 0xFF	; 255
    34ca:	4f e7       	ldi	r20, 0x7F	; 127
    34cc:	57 e4       	ldi	r21, 0x47	; 71
    34ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34d2:	18 16       	cp	r1, r24
    34d4:	0c f0       	brlt	.+2      	; 0x34d8 <LCD_function_set_4bit+0x670>
    34d6:	43 c0       	rjmp	.+134    	; 0x355e <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d8:	fe 01       	movw	r30, r28
    34da:	e4 59       	subi	r30, 0x94	; 148
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	60 81       	ld	r22, Z
    34e0:	71 81       	ldd	r23, Z+1	; 0x01
    34e2:	82 81       	ldd	r24, Z+2	; 0x02
    34e4:	93 81       	ldd	r25, Z+3	; 0x03
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	40 e2       	ldi	r20, 0x20	; 32
    34ec:	51 e4       	ldi	r21, 0x41	; 65
    34ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	8e 01       	movw	r16, r28
    34f8:	0a 59       	subi	r16, 0x9A	; 154
    34fa:	1f 4f       	sbci	r17, 0xFF	; 255
    34fc:	bc 01       	movw	r22, r24
    34fe:	cd 01       	movw	r24, r26
    3500:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	f8 01       	movw	r30, r16
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	80 83       	st	Z, r24
    350e:	1f c0       	rjmp	.+62     	; 0x354e <LCD_function_set_4bit+0x6e6>
    3510:	fe 01       	movw	r30, r28
    3512:	ec 59       	subi	r30, 0x9C	; 156
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	88 ec       	ldi	r24, 0xC8	; 200
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    351e:	fe 01       	movw	r30, r28
    3520:	ec 59       	subi	r30, 0x9C	; 156
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	80 81       	ld	r24, Z
    3526:	91 81       	ldd	r25, Z+1	; 0x01
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <LCD_function_set_4bit+0x6c0>
    352c:	fe 01       	movw	r30, r28
    352e:	ec 59       	subi	r30, 0x9C	; 156
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3536:	de 01       	movw	r26, r28
    3538:	aa 59       	subi	r26, 0x9A	; 154
    353a:	bf 4f       	sbci	r27, 0xFF	; 255
    353c:	fe 01       	movw	r30, r28
    353e:	ea 59       	subi	r30, 0x9A	; 154
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	80 81       	ld	r24, Z
    3544:	91 81       	ldd	r25, Z+1	; 0x01
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	11 96       	adiw	r26, 0x01	; 1
    354a:	9c 93       	st	X, r25
    354c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    354e:	fe 01       	movw	r30, r28
    3550:	ea 59       	subi	r30, 0x9A	; 154
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	91 81       	ldd	r25, Z+1	; 0x01
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	d1 f6       	brne	.-76     	; 0x3510 <LCD_function_set_4bit+0x6a8>
    355c:	4b c0       	rjmp	.+150    	; 0x35f4 <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355e:	8e 01       	movw	r16, r28
    3560:	0a 59       	subi	r16, 0x9A	; 154
    3562:	1f 4f       	sbci	r17, 0xFF	; 255
    3564:	fe 01       	movw	r30, r28
    3566:	e8 59       	subi	r30, 0x98	; 152
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	60 81       	ld	r22, Z
    356c:	71 81       	ldd	r23, Z+1	; 0x01
    356e:	82 81       	ldd	r24, Z+2	; 0x02
    3570:	93 81       	ldd	r25, Z+3	; 0x03
    3572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	f8 01       	movw	r30, r16
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	80 83       	st	Z, r24
    3580:	de 01       	movw	r26, r28
    3582:	ae 59       	subi	r26, 0x9E	; 158
    3584:	bf 4f       	sbci	r27, 0xFF	; 255
    3586:	fe 01       	movw	r30, r28
    3588:	ea 59       	subi	r30, 0x9A	; 154
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	80 81       	ld	r24, Z
    358e:	91 81       	ldd	r25, Z+1	; 0x01
    3590:	11 96       	adiw	r26, 0x01	; 1
    3592:	9c 93       	st	X, r25
    3594:	8e 93       	st	-X, r24
    3596:	fe 01       	movw	r30, r28
    3598:	ee 59       	subi	r30, 0x9E	; 158
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	80 81       	ld	r24, Z
    359e:	91 81       	ldd	r25, Z+1	; 0x01
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <LCD_function_set_4bit+0x738>
    35a4:	fe 01       	movw	r30, r28
    35a6:	ee 59       	subi	r30, 0x9E	; 158
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	91 83       	std	Z+1, r25	; 0x01
    35ac:	80 83       	st	Z, r24
    35ae:	22 c0       	rjmp	.+68     	; 0x35f4 <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35b0:	8e 01       	movw	r16, r28
    35b2:	00 59       	subi	r16, 0x90	; 144
    35b4:	1f 4f       	sbci	r17, 0xFF	; 255
    35b6:	fe 01       	movw	r30, r28
    35b8:	ef 58       	subi	r30, 0x8F	; 143
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	60 81       	ld	r22, Z
    35be:	71 81       	ldd	r23, Z+1	; 0x01
    35c0:	82 81       	ldd	r24, Z+2	; 0x02
    35c2:	93 81       	ldd	r25, Z+3	; 0x03
    35c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	f8 01       	movw	r30, r16
    35ce:	80 83       	st	Z, r24
    35d0:	de 01       	movw	r26, r28
    35d2:	af 59       	subi	r26, 0x9F	; 159
    35d4:	bf 4f       	sbci	r27, 0xFF	; 255
    35d6:	fe 01       	movw	r30, r28
    35d8:	e0 59       	subi	r30, 0x90	; 144
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35e0:	fe 01       	movw	r30, r28
    35e2:	ef 59       	subi	r30, 0x9F	; 159
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	80 81       	ld	r24, Z
    35e8:	8a 95       	dec	r24
    35ea:	f1 f7       	brne	.-4      	; 0x35e8 <LCD_function_set_4bit+0x780>
    35ec:	fe 01       	movw	r30, r28
    35ee:	ef 59       	subi	r30, 0x9F	; 159
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    35fc:	fe 01       	movw	r30, r28
    35fe:	e3 5a       	subi	r30, 0xA3	; 163
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	a0 e8       	ldi	r26, 0x80	; 128
    3608:	bf e3       	ldi	r27, 0x3F	; 63
    360a:	80 83       	st	Z, r24
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	a2 83       	std	Z+2, r26	; 0x02
    3610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3612:	8e 01       	movw	r16, r28
    3614:	07 5a       	subi	r16, 0xA7	; 167
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	e3 5a       	subi	r30, 0xA3	; 163
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	2b ea       	ldi	r18, 0xAB	; 171
    3628:	3a ea       	ldi	r19, 0xAA	; 170
    362a:	4a e2       	ldi	r20, 0x2A	; 42
    362c:	50 e4       	ldi	r21, 0x40	; 64
    362e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	f8 01       	movw	r30, r16
    3638:	80 83       	st	Z, r24
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	a2 83       	std	Z+2, r26	; 0x02
    363e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3640:	fe 01       	movw	r30, r28
    3642:	e7 5a       	subi	r30, 0xA7	; 167
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e8       	ldi	r20, 0x80	; 128
    3654:	5f e3       	ldi	r21, 0x3F	; 63
    3656:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    365a:	88 23       	and	r24, r24
    365c:	34 f4       	brge	.+12     	; 0x366a <LCD_function_set_4bit+0x802>
		__ticks = 1;
    365e:	fe 01       	movw	r30, r28
    3660:	e8 5a       	subi	r30, 0xA8	; 168
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	80 83       	st	Z, r24
    3668:	e0 c0       	rjmp	.+448    	; 0x382a <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    366a:	fe 01       	movw	r30, r28
    366c:	e7 5a       	subi	r30, 0xA7	; 167
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	4f e7       	ldi	r20, 0x7F	; 127
    367e:	53 e4       	ldi	r21, 0x43	; 67
    3680:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3684:	18 16       	cp	r1, r24
    3686:	0c f0       	brlt	.+2      	; 0x368a <LCD_function_set_4bit+0x822>
    3688:	c0 c0       	rjmp	.+384    	; 0x380a <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    368a:	fe 01       	movw	r30, r28
    368c:	e3 5a       	subi	r30, 0xA3	; 163
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	4a e7       	ldi	r20, 0x7A	; 122
    369e:	54 e4       	ldi	r21, 0x44	; 68
    36a0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	fe 01       	movw	r30, r28
    36aa:	ec 5a       	subi	r30, 0xAC	; 172
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 83       	st	Z, r24
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	a2 83       	std	Z+2, r26	; 0x02
    36b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b6:	8e 01       	movw	r16, r28
    36b8:	00 5b       	subi	r16, 0xB0	; 176
    36ba:	1f 4f       	sbci	r17, 0xFF	; 255
    36bc:	fe 01       	movw	r30, r28
    36be:	ec 5a       	subi	r30, 0xAC	; 172
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	4a ef       	ldi	r20, 0xFA	; 250
    36d0:	54 e4       	ldi	r21, 0x44	; 68
    36d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	f8 01       	movw	r30, r16
    36dc:	80 83       	st	Z, r24
    36de:	91 83       	std	Z+1, r25	; 0x01
    36e0:	a2 83       	std	Z+2, r26	; 0x02
    36e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e4:	fe 01       	movw	r30, r28
    36e6:	e0 5b       	subi	r30, 0xB0	; 176
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	60 81       	ld	r22, Z
    36ec:	71 81       	ldd	r23, Z+1	; 0x01
    36ee:	82 81       	ldd	r24, Z+2	; 0x02
    36f0:	93 81       	ldd	r25, Z+3	; 0x03
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	44 f4       	brge	.+16     	; 0x3712 <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    3702:	fe 01       	movw	r30, r28
    3704:	e2 5b       	subi	r30, 0xB2	; 178
    3706:	ff 4f       	sbci	r31, 0xFF	; 255
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	80 83       	st	Z, r24
    3710:	64 c0       	rjmp	.+200    	; 0x37da <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    3712:	fe 01       	movw	r30, r28
    3714:	e0 5b       	subi	r30, 0xB0	; 176
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	60 81       	ld	r22, Z
    371a:	71 81       	ldd	r23, Z+1	; 0x01
    371c:	82 81       	ldd	r24, Z+2	; 0x02
    371e:	93 81       	ldd	r25, Z+3	; 0x03
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	3f ef       	ldi	r19, 0xFF	; 255
    3724:	4f e7       	ldi	r20, 0x7F	; 127
    3726:	57 e4       	ldi	r21, 0x47	; 71
    3728:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    372c:	18 16       	cp	r1, r24
    372e:	0c f0       	brlt	.+2      	; 0x3732 <LCD_function_set_4bit+0x8ca>
    3730:	43 c0       	rjmp	.+134    	; 0x37b8 <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	fe 01       	movw	r30, r28
    3734:	ec 5a       	subi	r30, 0xAC	; 172
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 e2       	ldi	r20, 0x20	; 32
    3746:	51 e4       	ldi	r21, 0x41	; 65
    3748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	8e 01       	movw	r16, r28
    3752:	02 5b       	subi	r16, 0xB2	; 178
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	bc 01       	movw	r22, r24
    3758:	cd 01       	movw	r24, r26
    375a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	f8 01       	movw	r30, r16
    3764:	91 83       	std	Z+1, r25	; 0x01
    3766:	80 83       	st	Z, r24
    3768:	1f c0       	rjmp	.+62     	; 0x37a8 <LCD_function_set_4bit+0x940>
    376a:	fe 01       	movw	r30, r28
    376c:	e4 5b       	subi	r30, 0xB4	; 180
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	88 ec       	ldi	r24, 0xC8	; 200
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	91 83       	std	Z+1, r25	; 0x01
    3776:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3778:	fe 01       	movw	r30, r28
    377a:	e4 5b       	subi	r30, 0xB4	; 180
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	91 81       	ldd	r25, Z+1	; 0x01
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <LCD_function_set_4bit+0x91a>
    3786:	fe 01       	movw	r30, r28
    3788:	e4 5b       	subi	r30, 0xB4	; 180
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3790:	de 01       	movw	r26, r28
    3792:	a2 5b       	subi	r26, 0xB2	; 178
    3794:	bf 4f       	sbci	r27, 0xFF	; 255
    3796:	fe 01       	movw	r30, r28
    3798:	e2 5b       	subi	r30, 0xB2	; 178
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	11 96       	adiw	r26, 0x01	; 1
    37a4:	9c 93       	st	X, r25
    37a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a8:	fe 01       	movw	r30, r28
    37aa:	e2 5b       	subi	r30, 0xB2	; 178
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	d1 f6       	brne	.-76     	; 0x376a <LCD_function_set_4bit+0x902>
    37b6:	4b c0       	rjmp	.+150    	; 0x384e <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b8:	8e 01       	movw	r16, r28
    37ba:	02 5b       	subi	r16, 0xB2	; 178
    37bc:	1f 4f       	sbci	r17, 0xFF	; 255
    37be:	fe 01       	movw	r30, r28
    37c0:	e0 5b       	subi	r30, 0xB0	; 176
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	60 81       	ld	r22, Z
    37c6:	71 81       	ldd	r23, Z+1	; 0x01
    37c8:	82 81       	ldd	r24, Z+2	; 0x02
    37ca:	93 81       	ldd	r25, Z+3	; 0x03
    37cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	f8 01       	movw	r30, r16
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	80 83       	st	Z, r24
    37da:	de 01       	movw	r26, r28
    37dc:	a6 5b       	subi	r26, 0xB6	; 182
    37de:	bf 4f       	sbci	r27, 0xFF	; 255
    37e0:	fe 01       	movw	r30, r28
    37e2:	e2 5b       	subi	r30, 0xB2	; 178
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	11 96       	adiw	r26, 0x01	; 1
    37ec:	9c 93       	st	X, r25
    37ee:	8e 93       	st	-X, r24
    37f0:	fe 01       	movw	r30, r28
    37f2:	e6 5b       	subi	r30, 0xB6	; 182
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	80 81       	ld	r24, Z
    37f8:	91 81       	ldd	r25, Z+1	; 0x01
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <LCD_function_set_4bit+0x992>
    37fe:	fe 01       	movw	r30, r28
    3800:	e6 5b       	subi	r30, 0xB6	; 182
    3802:	ff 4f       	sbci	r31, 0xFF	; 255
    3804:	91 83       	std	Z+1, r25	; 0x01
    3806:	80 83       	st	Z, r24
    3808:	22 c0       	rjmp	.+68     	; 0x384e <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    380a:	8e 01       	movw	r16, r28
    380c:	08 5a       	subi	r16, 0xA8	; 168
    380e:	1f 4f       	sbci	r17, 0xFF	; 255
    3810:	fe 01       	movw	r30, r28
    3812:	e7 5a       	subi	r30, 0xA7	; 167
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	60 81       	ld	r22, Z
    3818:	71 81       	ldd	r23, Z+1	; 0x01
    381a:	82 81       	ldd	r24, Z+2	; 0x02
    381c:	93 81       	ldd	r25, Z+3	; 0x03
    381e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	f8 01       	movw	r30, r16
    3828:	80 83       	st	Z, r24
    382a:	de 01       	movw	r26, r28
    382c:	a7 5b       	subi	r26, 0xB7	; 183
    382e:	bf 4f       	sbci	r27, 0xFF	; 255
    3830:	fe 01       	movw	r30, r28
    3832:	e8 5a       	subi	r30, 0xA8	; 168
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 81       	ld	r24, Z
    3838:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    383a:	fe 01       	movw	r30, r28
    383c:	e7 5b       	subi	r30, 0xB7	; 183
    383e:	ff 4f       	sbci	r31, 0xFF	; 255
    3840:	80 81       	ld	r24, Z
    3842:	8a 95       	dec	r24
    3844:	f1 f7       	brne	.-4      	; 0x3842 <LCD_function_set_4bit+0x9da>
    3846:	fe 01       	movw	r30, r28
    3848:	e7 5b       	subi	r30, 0xB7	; 183
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    384e:	fe 01       	movw	r30, r28
    3850:	e6 55       	subi	r30, 0x56	; 86
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	10 82       	st	Z, r1
    3856:	23 c0       	rjmp	.+70     	; 0x389e <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    3858:	fe 01       	movw	r30, r28
    385a:	e6 55       	subi	r30, 0x56	; 86
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	48 2f       	mov	r20, r24
    3862:	4c 5f       	subi	r20, 0xFC	; 252
    3864:	fe 01       	movw	r30, r28
    3866:	e6 55       	subi	r30, 0x56	; 86
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 81       	ld	r24, Z
    386c:	28 2f       	mov	r18, r24
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	82 e0       	ldi	r24, 0x02	; 2
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	02 c0       	rjmp	.+4      	; 0x387a <LCD_function_set_4bit+0xa12>
    3876:	95 95       	asr	r25
    3878:	87 95       	ror	r24
    387a:	2a 95       	dec	r18
    387c:	e2 f7       	brpl	.-8      	; 0x3876 <LCD_function_set_4bit+0xa0e>
    387e:	98 2f       	mov	r25, r24
    3880:	91 70       	andi	r25, 0x01	; 1
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	64 2f       	mov	r22, r20
    3886:	49 2f       	mov	r20, r25
    3888:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    388c:	de 01       	movw	r26, r28
    388e:	a6 55       	subi	r26, 0x56	; 86
    3890:	bf 4f       	sbci	r27, 0xFF	; 255
    3892:	fe 01       	movw	r30, r28
    3894:	e6 55       	subi	r30, 0x56	; 86
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	80 81       	ld	r24, Z
    389a:	8f 5f       	subi	r24, 0xFF	; 255
    389c:	8c 93       	st	X, r24
    389e:	fe 01       	movw	r30, r28
    38a0:	e6 55       	subi	r30, 0x56	; 86
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	84 30       	cpi	r24, 0x04	; 4
    38a8:	b8 f2       	brcs	.-82     	; 0x3858 <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    38b2:	fe 01       	movw	r30, r28
    38b4:	eb 5b       	subi	r30, 0xBB	; 187
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	a0 e2       	ldi	r26, 0x20	; 32
    38be:	b1 e4       	ldi	r27, 0x41	; 65
    38c0:	80 83       	st	Z, r24
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	a2 83       	std	Z+2, r26	; 0x02
    38c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38c8:	8e 01       	movw	r16, r28
    38ca:	0f 5b       	subi	r16, 0xBF	; 191
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	fe 01       	movw	r30, r28
    38d0:	eb 5b       	subi	r30, 0xBB	; 187
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	60 81       	ld	r22, Z
    38d6:	71 81       	ldd	r23, Z+1	; 0x01
    38d8:	82 81       	ldd	r24, Z+2	; 0x02
    38da:	93 81       	ldd	r25, Z+3	; 0x03
    38dc:	2b ea       	ldi	r18, 0xAB	; 171
    38de:	3a ea       	ldi	r19, 0xAA	; 170
    38e0:	4a e2       	ldi	r20, 0x2A	; 42
    38e2:	50 e4       	ldi	r21, 0x40	; 64
    38e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	f8 01       	movw	r30, r16
    38ee:	80 83       	st	Z, r24
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	a2 83       	std	Z+2, r26	; 0x02
    38f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38f6:	fe 01       	movw	r30, r28
    38f8:	ef 5b       	subi	r30, 0xBF	; 191
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	60 81       	ld	r22, Z
    38fe:	71 81       	ldd	r23, Z+1	; 0x01
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	93 81       	ldd	r25, Z+3	; 0x03
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	40 e8       	ldi	r20, 0x80	; 128
    390a:	5f e3       	ldi	r21, 0x3F	; 63
    390c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3910:	88 23       	and	r24, r24
    3912:	34 f4       	brge	.+12     	; 0x3920 <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	fe 01       	movw	r30, r28
    3918:	e0 5c       	subi	r30, 0xC0	; 192
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	80 83       	st	Z, r24
    391e:	9d c0       	rjmp	.+314    	; 0x3a5a <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    3920:	fe 01       	movw	r30, r28
    3922:	ef 5b       	subi	r30, 0xBF	; 191
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	60 81       	ld	r22, Z
    3928:	71 81       	ldd	r23, Z+1	; 0x01
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	93 81       	ldd	r25, Z+3	; 0x03
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	4f e7       	ldi	r20, 0x7F	; 127
    3934:	53 e4       	ldi	r21, 0x43	; 67
    3936:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    393a:	18 16       	cp	r1, r24
    393c:	0c f0       	brlt	.+2      	; 0x3940 <LCD_function_set_4bit+0xad8>
    393e:	7e c0       	rjmp	.+252    	; 0x3a3c <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    3940:	fe 01       	movw	r30, r28
    3942:	eb 5b       	subi	r30, 0xBB	; 187
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	4a e7       	ldi	r20, 0x7A	; 122
    3954:	54 e4       	ldi	r21, 0x44	; 68
    3956:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	8c af       	std	Y+60, r24	; 0x3c
    3960:	9d af       	std	Y+61, r25	; 0x3d
    3962:	ae af       	std	Y+62, r26	; 0x3e
    3964:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3966:	6c ad       	ldd	r22, Y+60	; 0x3c
    3968:	7d ad       	ldd	r23, Y+61	; 0x3d
    396a:	8e ad       	ldd	r24, Y+62	; 0x3e
    396c:	9f ad       	ldd	r25, Y+63	; 0x3f
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	4a ef       	ldi	r20, 0xFA	; 250
    3974:	54 e4       	ldi	r21, 0x44	; 68
    3976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	88 af       	std	Y+56, r24	; 0x38
    3980:	99 af       	std	Y+57, r25	; 0x39
    3982:	aa af       	std	Y+58, r26	; 0x3a
    3984:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3986:	68 ad       	ldd	r22, Y+56	; 0x38
    3988:	79 ad       	ldd	r23, Y+57	; 0x39
    398a:	8a ad       	ldd	r24, Y+58	; 0x3a
    398c:	9b ad       	ldd	r25, Y+59	; 0x3b
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	40 e8       	ldi	r20, 0x80	; 128
    3994:	5f e3       	ldi	r21, 0x3F	; 63
    3996:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    399a:	88 23       	and	r24, r24
    399c:	2c f4       	brge	.+10     	; 0x39a8 <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	9f ab       	std	Y+55, r25	; 0x37
    39a4:	8e ab       	std	Y+54, r24	; 0x36
    39a6:	3f c0       	rjmp	.+126    	; 0x3a26 <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    39a8:	68 ad       	ldd	r22, Y+56	; 0x38
    39aa:	79 ad       	ldd	r23, Y+57	; 0x39
    39ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    39ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	3f ef       	ldi	r19, 0xFF	; 255
    39b4:	4f e7       	ldi	r20, 0x7F	; 127
    39b6:	57 e4       	ldi	r21, 0x47	; 71
    39b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    39bc:	18 16       	cp	r1, r24
    39be:	4c f5       	brge	.+82     	; 0x3a12 <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    39c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    39c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    39c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	40 e2       	ldi	r20, 0x20	; 32
    39ce:	51 e4       	ldi	r21, 0x41	; 65
    39d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	bc 01       	movw	r22, r24
    39da:	cd 01       	movw	r24, r26
    39dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	9f ab       	std	Y+55, r25	; 0x37
    39e6:	8e ab       	std	Y+54, r24	; 0x36
    39e8:	0f c0       	rjmp	.+30     	; 0x3a08 <LCD_function_set_4bit+0xba0>
    39ea:	88 ec       	ldi	r24, 0xC8	; 200
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	9d ab       	std	Y+53, r25	; 0x35
    39f0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39f2:	8c a9       	ldd	r24, Y+52	; 0x34
    39f4:	9d a9       	ldd	r25, Y+53	; 0x35
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <LCD_function_set_4bit+0xb8e>
    39fa:	9d ab       	std	Y+53, r25	; 0x35
    39fc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39fe:	8e a9       	ldd	r24, Y+54	; 0x36
    3a00:	9f a9       	ldd	r25, Y+55	; 0x37
    3a02:	01 97       	sbiw	r24, 0x01	; 1
    3a04:	9f ab       	std	Y+55, r25	; 0x37
    3a06:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a08:	8e a9       	ldd	r24, Y+54	; 0x36
    3a0a:	9f a9       	ldd	r25, Y+55	; 0x37
    3a0c:	00 97       	sbiw	r24, 0x00	; 0
    3a0e:	69 f7       	brne	.-38     	; 0x39ea <LCD_function_set_4bit+0xb82>
    3a10:	2d c0       	rjmp	.+90     	; 0x3a6c <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a12:	68 ad       	ldd	r22, Y+56	; 0x38
    3a14:	79 ad       	ldd	r23, Y+57	; 0x39
    3a16:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a18:	9b ad       	ldd	r25, Y+59	; 0x3b
    3a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	9f ab       	std	Y+55, r25	; 0x37
    3a24:	8e ab       	std	Y+54, r24	; 0x36
    3a26:	8e a9       	ldd	r24, Y+54	; 0x36
    3a28:	9f a9       	ldd	r25, Y+55	; 0x37
    3a2a:	9b ab       	std	Y+51, r25	; 0x33
    3a2c:	8a ab       	std	Y+50, r24	; 0x32
    3a2e:	8a a9       	ldd	r24, Y+50	; 0x32
    3a30:	9b a9       	ldd	r25, Y+51	; 0x33
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	f1 f7       	brne	.-4      	; 0x3a32 <LCD_function_set_4bit+0xbca>
    3a36:	9b ab       	std	Y+51, r25	; 0x33
    3a38:	8a ab       	std	Y+50, r24	; 0x32
    3a3a:	18 c0       	rjmp	.+48     	; 0x3a6c <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	ef 5b       	subi	r30, 0xBF	; 191
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	60 81       	ld	r22, Z
    3a44:	71 81       	ldd	r23, Z+1	; 0x01
    3a46:	82 81       	ldd	r24, Z+2	; 0x02
    3a48:	93 81       	ldd	r25, Z+3	; 0x03
    3a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	fe 01       	movw	r30, r28
    3a54:	e0 5c       	subi	r30, 0xC0	; 192
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	80 83       	st	Z, r24
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	e0 5c       	subi	r30, 0xC0	; 192
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	80 81       	ld	r24, Z
    3a62:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a64:	89 a9       	ldd	r24, Y+49	; 0x31
    3a66:	8a 95       	dec	r24
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <LCD_function_set_4bit+0xbfe>
    3a6a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	60 e0       	ldi	r22, 0x00	; 0
    3a70:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a0 e8       	ldi	r26, 0x80	; 128
    3a7a:	bf e3       	ldi	r27, 0x3F	; 63
    3a7c:	8d a7       	std	Y+45, r24	; 0x2d
    3a7e:	9e a7       	std	Y+46, r25	; 0x2e
    3a80:	af a7       	std	Y+47, r26	; 0x2f
    3a82:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a84:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a86:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a88:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a8a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a8c:	2b ea       	ldi	r18, 0xAB	; 171
    3a8e:	3a ea       	ldi	r19, 0xAA	; 170
    3a90:	4a e2       	ldi	r20, 0x2A	; 42
    3a92:	50 e4       	ldi	r21, 0x40	; 64
    3a94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	89 a7       	std	Y+41, r24	; 0x29
    3a9e:	9a a7       	std	Y+42, r25	; 0x2a
    3aa0:	ab a7       	std	Y+43, r26	; 0x2b
    3aa2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3aa4:	69 a5       	ldd	r22, Y+41	; 0x29
    3aa6:	7a a5       	ldd	r23, Y+42	; 0x2a
    3aa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aaa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e8       	ldi	r20, 0x80	; 128
    3ab2:	5f e3       	ldi	r21, 0x3F	; 63
    3ab4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ab8:	88 23       	and	r24, r24
    3aba:	1c f4       	brge	.+6      	; 0x3ac2 <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	88 a7       	std	Y+40, r24	; 0x28
    3ac0:	91 c0       	rjmp	.+290    	; 0x3be4 <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    3ac2:	69 a5       	ldd	r22, Y+41	; 0x29
    3ac4:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ac6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ac8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	4f e7       	ldi	r20, 0x7F	; 127
    3ad0:	53 e4       	ldi	r21, 0x43	; 67
    3ad2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ad6:	18 16       	cp	r1, r24
    3ad8:	0c f0       	brlt	.+2      	; 0x3adc <LCD_function_set_4bit+0xc74>
    3ada:	7b c0       	rjmp	.+246    	; 0x3bd2 <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    3adc:	6d a5       	ldd	r22, Y+45	; 0x2d
    3ade:	7e a5       	ldd	r23, Y+46	; 0x2e
    3ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	4a e7       	ldi	r20, 0x7A	; 122
    3aea:	54 e4       	ldi	r21, 0x44	; 68
    3aec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	8c a3       	std	Y+36, r24	; 0x24
    3af6:	9d a3       	std	Y+37, r25	; 0x25
    3af8:	ae a3       	std	Y+38, r26	; 0x26
    3afa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afc:	6c a1       	ldd	r22, Y+36	; 0x24
    3afe:	7d a1       	ldd	r23, Y+37	; 0x25
    3b00:	8e a1       	ldd	r24, Y+38	; 0x26
    3b02:	9f a1       	ldd	r25, Y+39	; 0x27
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	4a ef       	ldi	r20, 0xFA	; 250
    3b0a:	54 e4       	ldi	r21, 0x44	; 68
    3b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	88 a3       	std	Y+32, r24	; 0x20
    3b16:	99 a3       	std	Y+33, r25	; 0x21
    3b18:	aa a3       	std	Y+34, r26	; 0x22
    3b1a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3b1c:	68 a1       	ldd	r22, Y+32	; 0x20
    3b1e:	79 a1       	ldd	r23, Y+33	; 0x21
    3b20:	8a a1       	ldd	r24, Y+34	; 0x22
    3b22:	9b a1       	ldd	r25, Y+35	; 0x23
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	40 e8       	ldi	r20, 0x80	; 128
    3b2a:	5f e3       	ldi	r21, 0x3F	; 63
    3b2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b30:	88 23       	and	r24, r24
    3b32:	2c f4       	brge	.+10     	; 0x3b3e <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	9f 8f       	std	Y+31, r25	; 0x1f
    3b3a:	8e 8f       	std	Y+30, r24	; 0x1e
    3b3c:	3f c0       	rjmp	.+126    	; 0x3bbc <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    3b3e:	68 a1       	ldd	r22, Y+32	; 0x20
    3b40:	79 a1       	ldd	r23, Y+33	; 0x21
    3b42:	8a a1       	ldd	r24, Y+34	; 0x22
    3b44:	9b a1       	ldd	r25, Y+35	; 0x23
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	3f ef       	ldi	r19, 0xFF	; 255
    3b4a:	4f e7       	ldi	r20, 0x7F	; 127
    3b4c:	57 e4       	ldi	r21, 0x47	; 71
    3b4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b52:	18 16       	cp	r1, r24
    3b54:	4c f5       	brge	.+82     	; 0x3ba8 <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b56:	6c a1       	ldd	r22, Y+36	; 0x24
    3b58:	7d a1       	ldd	r23, Y+37	; 0x25
    3b5a:	8e a1       	ldd	r24, Y+38	; 0x26
    3b5c:	9f a1       	ldd	r25, Y+39	; 0x27
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	51 e4       	ldi	r21, 0x41	; 65
    3b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9f 8f       	std	Y+31, r25	; 0x1f
    3b7c:	8e 8f       	std	Y+30, r24	; 0x1e
    3b7e:	0f c0       	rjmp	.+30     	; 0x3b9e <LCD_function_set_4bit+0xd36>
    3b80:	88 ec       	ldi	r24, 0xC8	; 200
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	9d 8f       	std	Y+29, r25	; 0x1d
    3b86:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b88:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <LCD_function_set_4bit+0xd24>
    3b90:	9d 8f       	std	Y+29, r25	; 0x1d
    3b92:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	9f 8f       	std	Y+31, r25	; 0x1f
    3b9c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ba0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	69 f7       	brne	.-38     	; 0x3b80 <LCD_function_set_4bit+0xd18>
    3ba6:	24 c0       	rjmp	.+72     	; 0x3bf0 <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba8:	68 a1       	ldd	r22, Y+32	; 0x20
    3baa:	79 a1       	ldd	r23, Y+33	; 0x21
    3bac:	8a a1       	ldd	r24, Y+34	; 0x22
    3bae:	9b a1       	ldd	r25, Y+35	; 0x23
    3bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	9f 8f       	std	Y+31, r25	; 0x1f
    3bba:	8e 8f       	std	Y+30, r24	; 0x1e
    3bbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bbe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3bc0:	9b 8f       	std	Y+27, r25	; 0x1b
    3bc2:	8a 8f       	std	Y+26, r24	; 0x1a
    3bc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3bc6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <LCD_function_set_4bit+0xd60>
    3bcc:	9b 8f       	std	Y+27, r25	; 0x1b
    3bce:	8a 8f       	std	Y+26, r24	; 0x1a
    3bd0:	0f c0       	rjmp	.+30     	; 0x3bf0 <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bd2:	69 a5       	ldd	r22, Y+41	; 0x29
    3bd4:	7a a5       	ldd	r23, Y+42	; 0x2a
    3bd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	88 a7       	std	Y+40, r24	; 0x28
    3be4:	88 a5       	ldd	r24, Y+40	; 0x28
    3be6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3be8:	89 8d       	ldd	r24, Y+25	; 0x19
    3bea:	8a 95       	dec	r24
    3bec:	f1 f7       	brne	.-4      	; 0x3bea <LCD_function_set_4bit+0xd82>
    3bee:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	e7 55       	subi	r30, 0x57	; 87
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	10 82       	st	Z, r1
    3bf8:	23 c0       	rjmp	.+70     	; 0x3c40 <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e7 55       	subi	r30, 0x57	; 87
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	80 81       	ld	r24, Z
    3c02:	48 2f       	mov	r20, r24
    3c04:	4c 5f       	subi	r20, 0xFC	; 252
    3c06:	fe 01       	movw	r30, r28
    3c08:	e7 55       	subi	r30, 0x57	; 87
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	28 2f       	mov	r18, r24
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	88 e0       	ldi	r24, 0x08	; 8
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <LCD_function_set_4bit+0xdb4>
    3c18:	95 95       	asr	r25
    3c1a:	87 95       	ror	r24
    3c1c:	2a 95       	dec	r18
    3c1e:	e2 f7       	brpl	.-8      	; 0x3c18 <LCD_function_set_4bit+0xdb0>
    3c20:	98 2f       	mov	r25, r24
    3c22:	91 70       	andi	r25, 0x01	; 1
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	64 2f       	mov	r22, r20
    3c28:	49 2f       	mov	r20, r25
    3c2a:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3c2e:	de 01       	movw	r26, r28
    3c30:	a7 55       	subi	r26, 0x57	; 87
    3c32:	bf 4f       	sbci	r27, 0xFF	; 255
    3c34:	fe 01       	movw	r30, r28
    3c36:	e7 55       	subi	r30, 0x57	; 87
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 81       	ld	r24, Z
    3c3c:	8f 5f       	subi	r24, 0xFF	; 255
    3c3e:	8c 93       	st	X, r24
    3c40:	fe 01       	movw	r30, r28
    3c42:	e7 55       	subi	r30, 0x57	; 87
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	84 30       	cpi	r24, 0x04	; 4
    3c4a:	b8 f2       	brcs	.-82     	; 0x3bfa <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	a0 e2       	ldi	r26, 0x20	; 32
    3c5a:	b1 e4       	ldi	r27, 0x41	; 65
    3c5c:	8d 8b       	std	Y+21, r24	; 0x15
    3c5e:	9e 8b       	std	Y+22, r25	; 0x16
    3c60:	af 8b       	std	Y+23, r26	; 0x17
    3c62:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c64:	6d 89       	ldd	r22, Y+21	; 0x15
    3c66:	7e 89       	ldd	r23, Y+22	; 0x16
    3c68:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c6c:	2b ea       	ldi	r18, 0xAB	; 171
    3c6e:	3a ea       	ldi	r19, 0xAA	; 170
    3c70:	4a e2       	ldi	r20, 0x2A	; 42
    3c72:	50 e4       	ldi	r21, 0x40	; 64
    3c74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	89 8b       	std	Y+17, r24	; 0x11
    3c7e:	9a 8b       	std	Y+18, r25	; 0x12
    3c80:	ab 8b       	std	Y+19, r26	; 0x13
    3c82:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3c84:	69 89       	ldd	r22, Y+17	; 0x11
    3c86:	7a 89       	ldd	r23, Y+18	; 0x12
    3c88:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e8       	ldi	r20, 0x80	; 128
    3c92:	5f e3       	ldi	r21, 0x3F	; 63
    3c94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c98:	88 23       	and	r24, r24
    3c9a:	1c f4       	brge	.+6      	; 0x3ca2 <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	88 8b       	std	Y+16, r24	; 0x10
    3ca0:	91 c0       	rjmp	.+290    	; 0x3dc4 <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    3ca2:	69 89       	ldd	r22, Y+17	; 0x11
    3ca4:	7a 89       	ldd	r23, Y+18	; 0x12
    3ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	4f e7       	ldi	r20, 0x7F	; 127
    3cb0:	53 e4       	ldi	r21, 0x43	; 67
    3cb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3cb6:	18 16       	cp	r1, r24
    3cb8:	0c f0       	brlt	.+2      	; 0x3cbc <LCD_function_set_4bit+0xe54>
    3cba:	7b c0       	rjmp	.+246    	; 0x3db2 <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    3cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    3cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    3cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	4a e7       	ldi	r20, 0x7A	; 122
    3cca:	54 e4       	ldi	r21, 0x44	; 68
    3ccc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	8c 87       	std	Y+12, r24	; 0x0c
    3cd6:	9d 87       	std	Y+13, r25	; 0x0d
    3cd8:	ae 87       	std	Y+14, r26	; 0x0e
    3cda:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cdc:	6c 85       	ldd	r22, Y+12	; 0x0c
    3cde:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ce0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ce2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	4a ef       	ldi	r20, 0xFA	; 250
    3cea:	54 e4       	ldi	r21, 0x44	; 68
    3cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	88 87       	std	Y+8, r24	; 0x08
    3cf6:	99 87       	std	Y+9, r25	; 0x09
    3cf8:	aa 87       	std	Y+10, r26	; 0x0a
    3cfa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3cfc:	68 85       	ldd	r22, Y+8	; 0x08
    3cfe:	79 85       	ldd	r23, Y+9	; 0x09
    3d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e8       	ldi	r20, 0x80	; 128
    3d0a:	5f e3       	ldi	r21, 0x3F	; 63
    3d0c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3d10:	88 23       	and	r24, r24
    3d12:	2c f4       	brge	.+10     	; 0x3d1e <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	9f 83       	std	Y+7, r25	; 0x07
    3d1a:	8e 83       	std	Y+6, r24	; 0x06
    3d1c:	3f c0       	rjmp	.+126    	; 0x3d9c <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    3d1e:	68 85       	ldd	r22, Y+8	; 0x08
    3d20:	79 85       	ldd	r23, Y+9	; 0x09
    3d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	3f ef       	ldi	r19, 0xFF	; 255
    3d2a:	4f e7       	ldi	r20, 0x7F	; 127
    3d2c:	57 e4       	ldi	r21, 0x47	; 71
    3d2e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3d32:	18 16       	cp	r1, r24
    3d34:	4c f5       	brge	.+82     	; 0x3d88 <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d36:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d38:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e2       	ldi	r20, 0x20	; 32
    3d44:	51 e4       	ldi	r21, 0x41	; 65
    3d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	9f 83       	std	Y+7, r25	; 0x07
    3d5c:	8e 83       	std	Y+6, r24	; 0x06
    3d5e:	0f c0       	rjmp	.+30     	; 0x3d7e <LCD_function_set_4bit+0xf16>
    3d60:	88 ec       	ldi	r24, 0xC8	; 200
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	9d 83       	std	Y+5, r25	; 0x05
    3d66:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d68:	8c 81       	ldd	r24, Y+4	; 0x04
    3d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d6c:	01 97       	sbiw	r24, 0x01	; 1
    3d6e:	f1 f7       	brne	.-4      	; 0x3d6c <LCD_function_set_4bit+0xf04>
    3d70:	9d 83       	std	Y+5, r25	; 0x05
    3d72:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d74:	8e 81       	ldd	r24, Y+6	; 0x06
    3d76:	9f 81       	ldd	r25, Y+7	; 0x07
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	9f 83       	std	Y+7, r25	; 0x07
    3d7c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d80:	9f 81       	ldd	r25, Y+7	; 0x07
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	69 f7       	brne	.-38     	; 0x3d60 <LCD_function_set_4bit+0xef8>
    3d86:	24 c0       	rjmp	.+72     	; 0x3dd0 <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d88:	68 85       	ldd	r22, Y+8	; 0x08
    3d8a:	79 85       	ldd	r23, Y+9	; 0x09
    3d8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	9f 83       	std	Y+7, r25	; 0x07
    3d9a:	8e 83       	std	Y+6, r24	; 0x06
    3d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    3da0:	9b 83       	std	Y+3, r25	; 0x03
    3da2:	8a 83       	std	Y+2, r24	; 0x02
    3da4:	8a 81       	ldd	r24, Y+2	; 0x02
    3da6:	9b 81       	ldd	r25, Y+3	; 0x03
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	f1 f7       	brne	.-4      	; 0x3da8 <LCD_function_set_4bit+0xf40>
    3dac:	9b 83       	std	Y+3, r25	; 0x03
    3dae:	8a 83       	std	Y+2, r24	; 0x02
    3db0:	0f c0       	rjmp	.+30     	; 0x3dd0 <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3db2:	69 89       	ldd	r22, Y+17	; 0x11
    3db4:	7a 89       	ldd	r23, Y+18	; 0x12
    3db6:	8b 89       	ldd	r24, Y+19	; 0x13
    3db8:	9c 89       	ldd	r25, Y+20	; 0x14
    3dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	88 8b       	std	Y+16, r24	; 0x10
    3dc4:	88 89       	ldd	r24, Y+16	; 0x10
    3dc6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	8a 95       	dec	r24
    3dcc:	f1 f7       	brne	.-4      	; 0x3dca <LCD_function_set_4bit+0xf62>
    3dce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    3dd0:	c5 55       	subi	r28, 0x55	; 85
    3dd2:	df 4f       	sbci	r29, 0xFF	; 255
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	08 95       	ret

00003de8 <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    3de8:	0f 93       	push	r16
    3dea:	1f 93       	push	r17
    3dec:	df 93       	push	r29
    3dee:	cf 93       	push	r28
    3df0:	cd b7       	in	r28, 0x3d	; 61
    3df2:	de b7       	in	r29, 0x3e	; 62
    3df4:	c1 56       	subi	r28, 0x61	; 97
    3df6:	d0 40       	sbci	r29, 0x00	; 0
    3df8:	0f b6       	in	r0, 0x3f	; 63
    3dfa:	f8 94       	cli
    3dfc:	de bf       	out	0x3e, r29	; 62
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	67 e0       	ldi	r22, 0x07	; 7
    3e06:	40 e0       	ldi	r20, 0x00	; 0
    3e08:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	66 e0       	ldi	r22, 0x06	; 6
    3e10:	40 e0       	ldi	r20, 0x00	; 0
    3e12:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	65 e0       	ldi	r22, 0x05	; 5
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	64 e0       	ldi	r22, 0x04	; 4
    3e24:	40 e0       	ldi	r20, 0x00	; 0
    3e26:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	62 e0       	ldi	r22, 0x02	; 2
    3e2e:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	61 e0       	ldi	r22, 0x01	; 1
    3e36:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e3 5a       	subi	r30, 0xA3	; 163
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	a0 e8       	ldi	r26, 0x80	; 128
    3e46:	bf e3       	ldi	r27, 0x3F	; 63
    3e48:	80 83       	st	Z, r24
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	a2 83       	std	Z+2, r26	; 0x02
    3e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e50:	8e 01       	movw	r16, r28
    3e52:	07 5a       	subi	r16, 0xA7	; 167
    3e54:	1f 4f       	sbci	r17, 0xFF	; 255
    3e56:	fe 01       	movw	r30, r28
    3e58:	e3 5a       	subi	r30, 0xA3	; 163
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	2b ea       	ldi	r18, 0xAB	; 171
    3e66:	3a ea       	ldi	r19, 0xAA	; 170
    3e68:	4a e2       	ldi	r20, 0x2A	; 42
    3e6a:	50 e4       	ldi	r21, 0x40	; 64
    3e6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	f8 01       	movw	r30, r16
    3e76:	80 83       	st	Z, r24
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	a2 83       	std	Z+2, r26	; 0x02
    3e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e7 5a       	subi	r30, 0xA7	; 167
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	60 81       	ld	r22, Z
    3e86:	71 81       	ldd	r23, Z+1	; 0x01
    3e88:	82 81       	ldd	r24, Z+2	; 0x02
    3e8a:	93 81       	ldd	r25, Z+3	; 0x03
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e8       	ldi	r20, 0x80	; 128
    3e92:	5f e3       	ldi	r21, 0x3F	; 63
    3e94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3e98:	88 23       	and	r24, r24
    3e9a:	34 f4       	brge	.+12     	; 0x3ea8 <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e8 5a       	subi	r30, 0xA8	; 168
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	80 83       	st	Z, r24
    3ea6:	e0 c0       	rjmp	.+448    	; 0x4068 <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e7 5a       	subi	r30, 0xA7	; 167
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	60 81       	ld	r22, Z
    3eb0:	71 81       	ldd	r23, Z+1	; 0x01
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	4f e7       	ldi	r20, 0x7F	; 127
    3ebc:	53 e4       	ldi	r21, 0x43	; 67
    3ebe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ec2:	18 16       	cp	r1, r24
    3ec4:	0c f0       	brlt	.+2      	; 0x3ec8 <LCD_read_data_4bit+0xe0>
    3ec6:	c0 c0       	rjmp	.+384    	; 0x4048 <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    3ec8:	fe 01       	movw	r30, r28
    3eca:	e3 5a       	subi	r30, 0xA3	; 163
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	60 81       	ld	r22, Z
    3ed0:	71 81       	ldd	r23, Z+1	; 0x01
    3ed2:	82 81       	ldd	r24, Z+2	; 0x02
    3ed4:	93 81       	ldd	r25, Z+3	; 0x03
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	4a e7       	ldi	r20, 0x7A	; 122
    3edc:	54 e4       	ldi	r21, 0x44	; 68
    3ede:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	ec 5a       	subi	r30, 0xAC	; 172
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	80 83       	st	Z, r24
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	a2 83       	std	Z+2, r26	; 0x02
    3ef2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ef4:	8e 01       	movw	r16, r28
    3ef6:	00 5b       	subi	r16, 0xB0	; 176
    3ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    3efa:	fe 01       	movw	r30, r28
    3efc:	ec 5a       	subi	r30, 0xAC	; 172
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	60 81       	ld	r22, Z
    3f02:	71 81       	ldd	r23, Z+1	; 0x01
    3f04:	82 81       	ldd	r24, Z+2	; 0x02
    3f06:	93 81       	ldd	r25, Z+3	; 0x03
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	4a ef       	ldi	r20, 0xFA	; 250
    3f0e:	54 e4       	ldi	r21, 0x44	; 68
    3f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	f8 01       	movw	r30, r16
    3f1a:	80 83       	st	Z, r24
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	a2 83       	std	Z+2, r26	; 0x02
    3f20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f22:	fe 01       	movw	r30, r28
    3f24:	e0 5b       	subi	r30, 0xB0	; 176
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e8       	ldi	r20, 0x80	; 128
    3f36:	5f e3       	ldi	r21, 0x3F	; 63
    3f38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3f3c:	88 23       	and	r24, r24
    3f3e:	44 f4       	brge	.+16     	; 0x3f50 <LCD_read_data_4bit+0x168>
		__ticks = 1;
    3f40:	fe 01       	movw	r30, r28
    3f42:	e2 5b       	subi	r30, 0xB2	; 178
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
    3f4e:	64 c0       	rjmp	.+200    	; 0x4018 <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    3f50:	fe 01       	movw	r30, r28
    3f52:	e0 5b       	subi	r30, 0xB0	; 176
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	60 81       	ld	r22, Z
    3f58:	71 81       	ldd	r23, Z+1	; 0x01
    3f5a:	82 81       	ldd	r24, Z+2	; 0x02
    3f5c:	93 81       	ldd	r25, Z+3	; 0x03
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	3f ef       	ldi	r19, 0xFF	; 255
    3f62:	4f e7       	ldi	r20, 0x7F	; 127
    3f64:	57 e4       	ldi	r21, 0x47	; 71
    3f66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3f6a:	18 16       	cp	r1, r24
    3f6c:	0c f0       	brlt	.+2      	; 0x3f70 <LCD_read_data_4bit+0x188>
    3f6e:	43 c0       	rjmp	.+134    	; 0x3ff6 <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f70:	fe 01       	movw	r30, r28
    3f72:	ec 5a       	subi	r30, 0xAC	; 172
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	60 81       	ld	r22, Z
    3f78:	71 81       	ldd	r23, Z+1	; 0x01
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e2       	ldi	r20, 0x20	; 32
    3f84:	51 e4       	ldi	r21, 0x41	; 65
    3f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	8e 01       	movw	r16, r28
    3f90:	02 5b       	subi	r16, 0xB2	; 178
    3f92:	1f 4f       	sbci	r17, 0xFF	; 255
    3f94:	bc 01       	movw	r22, r24
    3f96:	cd 01       	movw	r24, r26
    3f98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	f8 01       	movw	r30, r16
    3fa2:	91 83       	std	Z+1, r25	; 0x01
    3fa4:	80 83       	st	Z, r24
    3fa6:	1f c0       	rjmp	.+62     	; 0x3fe6 <LCD_read_data_4bit+0x1fe>
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e4 5b       	subi	r30, 0xB4	; 180
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	88 ec       	ldi	r24, 0xC8	; 200
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	e4 5b       	subi	r30, 0xB4	; 180
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	80 81       	ld	r24, Z
    3fbe:	91 81       	ldd	r25, Z+1	; 0x01
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	f1 f7       	brne	.-4      	; 0x3fc0 <LCD_read_data_4bit+0x1d8>
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e4 5b       	subi	r30, 0xB4	; 180
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fce:	de 01       	movw	r26, r28
    3fd0:	a2 5b       	subi	r26, 0xB2	; 178
    3fd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	e2 5b       	subi	r30, 0xB2	; 178
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	80 81       	ld	r24, Z
    3fdc:	91 81       	ldd	r25, Z+1	; 0x01
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	11 96       	adiw	r26, 0x01	; 1
    3fe2:	9c 93       	st	X, r25
    3fe4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e2 5b       	subi	r30, 0xB2	; 178
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	80 81       	ld	r24, Z
    3fee:	91 81       	ldd	r25, Z+1	; 0x01
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	d1 f6       	brne	.-76     	; 0x3fa8 <LCD_read_data_4bit+0x1c0>
    3ff4:	4b c0       	rjmp	.+150    	; 0x408c <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff6:	8e 01       	movw	r16, r28
    3ff8:	02 5b       	subi	r16, 0xB2	; 178
    3ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e0 5b       	subi	r30, 0xB0	; 176
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	60 81       	ld	r22, Z
    4004:	71 81       	ldd	r23, Z+1	; 0x01
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	93 81       	ldd	r25, Z+3	; 0x03
    400a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	f8 01       	movw	r30, r16
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	80 83       	st	Z, r24
    4018:	de 01       	movw	r26, r28
    401a:	a6 5b       	subi	r26, 0xB6	; 182
    401c:	bf 4f       	sbci	r27, 0xFF	; 255
    401e:	fe 01       	movw	r30, r28
    4020:	e2 5b       	subi	r30, 0xB2	; 178
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	80 81       	ld	r24, Z
    4026:	91 81       	ldd	r25, Z+1	; 0x01
    4028:	11 96       	adiw	r26, 0x01	; 1
    402a:	9c 93       	st	X, r25
    402c:	8e 93       	st	-X, r24
    402e:	fe 01       	movw	r30, r28
    4030:	e6 5b       	subi	r30, 0xB6	; 182
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	80 81       	ld	r24, Z
    4036:	91 81       	ldd	r25, Z+1	; 0x01
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <LCD_read_data_4bit+0x250>
    403c:	fe 01       	movw	r30, r28
    403e:	e6 5b       	subi	r30, 0xB6	; 182
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	91 83       	std	Z+1, r25	; 0x01
    4044:	80 83       	st	Z, r24
    4046:	22 c0       	rjmp	.+68     	; 0x408c <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4048:	8e 01       	movw	r16, r28
    404a:	08 5a       	subi	r16, 0xA8	; 168
    404c:	1f 4f       	sbci	r17, 0xFF	; 255
    404e:	fe 01       	movw	r30, r28
    4050:	e7 5a       	subi	r30, 0xA7	; 167
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	60 81       	ld	r22, Z
    4056:	71 81       	ldd	r23, Z+1	; 0x01
    4058:	82 81       	ldd	r24, Z+2	; 0x02
    405a:	93 81       	ldd	r25, Z+3	; 0x03
    405c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	f8 01       	movw	r30, r16
    4066:	80 83       	st	Z, r24
    4068:	de 01       	movw	r26, r28
    406a:	a7 5b       	subi	r26, 0xB7	; 183
    406c:	bf 4f       	sbci	r27, 0xFF	; 255
    406e:	fe 01       	movw	r30, r28
    4070:	e8 5a       	subi	r30, 0xA8	; 168
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	80 81       	ld	r24, Z
    4076:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4078:	fe 01       	movw	r30, r28
    407a:	e7 5b       	subi	r30, 0xB7	; 183
    407c:	ff 4f       	sbci	r31, 0xFF	; 255
    407e:	80 81       	ld	r24, Z
    4080:	8a 95       	dec	r24
    4082:	f1 f7       	brne	.-4      	; 0x4080 <LCD_read_data_4bit+0x298>
    4084:	fe 01       	movw	r30, r28
    4086:	e7 5b       	subi	r30, 0xB7	; 183
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    4094:	fe 01       	movw	r30, r28
    4096:	eb 5b       	subi	r30, 0xBB	; 187
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	a0 e8       	ldi	r26, 0x80	; 128
    40a0:	bf e3       	ldi	r27, 0x3F	; 63
    40a2:	80 83       	st	Z, r24
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	a2 83       	std	Z+2, r26	; 0x02
    40a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40aa:	8e 01       	movw	r16, r28
    40ac:	0f 5b       	subi	r16, 0xBF	; 191
    40ae:	1f 4f       	sbci	r17, 0xFF	; 255
    40b0:	fe 01       	movw	r30, r28
    40b2:	eb 5b       	subi	r30, 0xBB	; 187
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	60 81       	ld	r22, Z
    40b8:	71 81       	ldd	r23, Z+1	; 0x01
    40ba:	82 81       	ldd	r24, Z+2	; 0x02
    40bc:	93 81       	ldd	r25, Z+3	; 0x03
    40be:	2b ea       	ldi	r18, 0xAB	; 171
    40c0:	3a ea       	ldi	r19, 0xAA	; 170
    40c2:	4a e2       	ldi	r20, 0x2A	; 42
    40c4:	50 e4       	ldi	r21, 0x40	; 64
    40c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    40ca:	dc 01       	movw	r26, r24
    40cc:	cb 01       	movw	r24, r22
    40ce:	f8 01       	movw	r30, r16
    40d0:	80 83       	st	Z, r24
    40d2:	91 83       	std	Z+1, r25	; 0x01
    40d4:	a2 83       	std	Z+2, r26	; 0x02
    40d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40d8:	fe 01       	movw	r30, r28
    40da:	ef 5b       	subi	r30, 0xBF	; 191
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	60 81       	ld	r22, Z
    40e0:	71 81       	ldd	r23, Z+1	; 0x01
    40e2:	82 81       	ldd	r24, Z+2	; 0x02
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e8       	ldi	r20, 0x80	; 128
    40ec:	5f e3       	ldi	r21, 0x3F	; 63
    40ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    40f2:	88 23       	and	r24, r24
    40f4:	34 f4       	brge	.+12     	; 0x4102 <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	fe 01       	movw	r30, r28
    40fa:	e0 5c       	subi	r30, 0xC0	; 192
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	80 83       	st	Z, r24
    4100:	9d c0       	rjmp	.+314    	; 0x423c <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    4102:	fe 01       	movw	r30, r28
    4104:	ef 5b       	subi	r30, 0xBF	; 191
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	60 81       	ld	r22, Z
    410a:	71 81       	ldd	r23, Z+1	; 0x01
    410c:	82 81       	ldd	r24, Z+2	; 0x02
    410e:	93 81       	ldd	r25, Z+3	; 0x03
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	4f e7       	ldi	r20, 0x7F	; 127
    4116:	53 e4       	ldi	r21, 0x43	; 67
    4118:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    411c:	18 16       	cp	r1, r24
    411e:	0c f0       	brlt	.+2      	; 0x4122 <LCD_read_data_4bit+0x33a>
    4120:	7e c0       	rjmp	.+252    	; 0x421e <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    4122:	fe 01       	movw	r30, r28
    4124:	eb 5b       	subi	r30, 0xBB	; 187
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	60 81       	ld	r22, Z
    412a:	71 81       	ldd	r23, Z+1	; 0x01
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	93 81       	ldd	r25, Z+3	; 0x03
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	4a e7       	ldi	r20, 0x7A	; 122
    4136:	54 e4       	ldi	r21, 0x44	; 68
    4138:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	8c af       	std	Y+60, r24	; 0x3c
    4142:	9d af       	std	Y+61, r25	; 0x3d
    4144:	ae af       	std	Y+62, r26	; 0x3e
    4146:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4148:	6c ad       	ldd	r22, Y+60	; 0x3c
    414a:	7d ad       	ldd	r23, Y+61	; 0x3d
    414c:	8e ad       	ldd	r24, Y+62	; 0x3e
    414e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	4a ef       	ldi	r20, 0xFA	; 250
    4156:	54 e4       	ldi	r21, 0x44	; 68
    4158:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	88 af       	std	Y+56, r24	; 0x38
    4162:	99 af       	std	Y+57, r25	; 0x39
    4164:	aa af       	std	Y+58, r26	; 0x3a
    4166:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4168:	68 ad       	ldd	r22, Y+56	; 0x38
    416a:	79 ad       	ldd	r23, Y+57	; 0x39
    416c:	8a ad       	ldd	r24, Y+58	; 0x3a
    416e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e8       	ldi	r20, 0x80	; 128
    4176:	5f e3       	ldi	r21, 0x3F	; 63
    4178:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    417c:	88 23       	and	r24, r24
    417e:	2c f4       	brge	.+10     	; 0x418a <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	9f ab       	std	Y+55, r25	; 0x37
    4186:	8e ab       	std	Y+54, r24	; 0x36
    4188:	3f c0       	rjmp	.+126    	; 0x4208 <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    418a:	68 ad       	ldd	r22, Y+56	; 0x38
    418c:	79 ad       	ldd	r23, Y+57	; 0x39
    418e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4190:	9b ad       	ldd	r25, Y+59	; 0x3b
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	3f ef       	ldi	r19, 0xFF	; 255
    4196:	4f e7       	ldi	r20, 0x7F	; 127
    4198:	57 e4       	ldi	r21, 0x47	; 71
    419a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    419e:	18 16       	cp	r1, r24
    41a0:	4c f5       	brge	.+82     	; 0x41f4 <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a2:	6c ad       	ldd	r22, Y+60	; 0x3c
    41a4:	7d ad       	ldd	r23, Y+61	; 0x3d
    41a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    41a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e2       	ldi	r20, 0x20	; 32
    41b0:	51 e4       	ldi	r21, 0x41	; 65
    41b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	9f ab       	std	Y+55, r25	; 0x37
    41c8:	8e ab       	std	Y+54, r24	; 0x36
    41ca:	0f c0       	rjmp	.+30     	; 0x41ea <LCD_read_data_4bit+0x402>
    41cc:	88 ec       	ldi	r24, 0xC8	; 200
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	9d ab       	std	Y+53, r25	; 0x35
    41d2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41d4:	8c a9       	ldd	r24, Y+52	; 0x34
    41d6:	9d a9       	ldd	r25, Y+53	; 0x35
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	f1 f7       	brne	.-4      	; 0x41d8 <LCD_read_data_4bit+0x3f0>
    41dc:	9d ab       	std	Y+53, r25	; 0x35
    41de:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e0:	8e a9       	ldd	r24, Y+54	; 0x36
    41e2:	9f a9       	ldd	r25, Y+55	; 0x37
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	9f ab       	std	Y+55, r25	; 0x37
    41e8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ea:	8e a9       	ldd	r24, Y+54	; 0x36
    41ec:	9f a9       	ldd	r25, Y+55	; 0x37
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	69 f7       	brne	.-38     	; 0x41cc <LCD_read_data_4bit+0x3e4>
    41f2:	2d c0       	rjmp	.+90     	; 0x424e <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f4:	68 ad       	ldd	r22, Y+56	; 0x38
    41f6:	79 ad       	ldd	r23, Y+57	; 0x39
    41f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    41fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    41fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	9f ab       	std	Y+55, r25	; 0x37
    4206:	8e ab       	std	Y+54, r24	; 0x36
    4208:	8e a9       	ldd	r24, Y+54	; 0x36
    420a:	9f a9       	ldd	r25, Y+55	; 0x37
    420c:	9b ab       	std	Y+51, r25	; 0x33
    420e:	8a ab       	std	Y+50, r24	; 0x32
    4210:	8a a9       	ldd	r24, Y+50	; 0x32
    4212:	9b a9       	ldd	r25, Y+51	; 0x33
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	f1 f7       	brne	.-4      	; 0x4214 <LCD_read_data_4bit+0x42c>
    4218:	9b ab       	std	Y+51, r25	; 0x33
    421a:	8a ab       	std	Y+50, r24	; 0x32
    421c:	18 c0       	rjmp	.+48     	; 0x424e <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    421e:	fe 01       	movw	r30, r28
    4220:	ef 5b       	subi	r30, 0xBF	; 191
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	fe 01       	movw	r30, r28
    4236:	e0 5c       	subi	r30, 0xC0	; 192
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 83       	st	Z, r24
    423c:	fe 01       	movw	r30, r28
    423e:	e0 5c       	subi	r30, 0xC0	; 192
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	80 81       	ld	r24, Z
    4244:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4246:	89 a9       	ldd	r24, Y+49	; 0x31
    4248:	8a 95       	dec	r24
    424a:	f1 f7       	brne	.-4      	; 0x4248 <LCD_read_data_4bit+0x460>
    424c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <DIO_u8_get_port>
    4254:	fe 01       	movw	r30, r28
    4256:	ef 59       	subi	r30, 0x9F	; 159
    4258:	ff 4f       	sbci	r31, 0xFF	; 255
    425a:	82 95       	swap	r24
    425c:	80 7f       	andi	r24, 0xF0	; 240
    425e:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	a0 e2       	ldi	r26, 0x20	; 32
    426e:	b1 e4       	ldi	r27, 0x41	; 65
    4270:	8d a7       	std	Y+45, r24	; 0x2d
    4272:	9e a7       	std	Y+46, r25	; 0x2e
    4274:	af a7       	std	Y+47, r26	; 0x2f
    4276:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4278:	6d a5       	ldd	r22, Y+45	; 0x2d
    427a:	7e a5       	ldd	r23, Y+46	; 0x2e
    427c:	8f a5       	ldd	r24, Y+47	; 0x2f
    427e:	98 a9       	ldd	r25, Y+48	; 0x30
    4280:	2b ea       	ldi	r18, 0xAB	; 171
    4282:	3a ea       	ldi	r19, 0xAA	; 170
    4284:	4a e2       	ldi	r20, 0x2A	; 42
    4286:	50 e4       	ldi	r21, 0x40	; 64
    4288:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	89 a7       	std	Y+41, r24	; 0x29
    4292:	9a a7       	std	Y+42, r25	; 0x2a
    4294:	ab a7       	std	Y+43, r26	; 0x2b
    4296:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4298:	69 a5       	ldd	r22, Y+41	; 0x29
    429a:	7a a5       	ldd	r23, Y+42	; 0x2a
    429c:	8b a5       	ldd	r24, Y+43	; 0x2b
    429e:	9c a5       	ldd	r25, Y+44	; 0x2c
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e8       	ldi	r20, 0x80	; 128
    42a6:	5f e3       	ldi	r21, 0x3F	; 63
    42a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    42ac:	88 23       	and	r24, r24
    42ae:	1c f4       	brge	.+6      	; 0x42b6 <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	88 a7       	std	Y+40, r24	; 0x28
    42b4:	91 c0       	rjmp	.+290    	; 0x43d8 <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    42b6:	69 a5       	ldd	r22, Y+41	; 0x29
    42b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    42ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    42bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	4f e7       	ldi	r20, 0x7F	; 127
    42c4:	53 e4       	ldi	r21, 0x43	; 67
    42c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    42ca:	18 16       	cp	r1, r24
    42cc:	0c f0       	brlt	.+2      	; 0x42d0 <LCD_read_data_4bit+0x4e8>
    42ce:	7b c0       	rjmp	.+246    	; 0x43c6 <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    42d0:	6d a5       	ldd	r22, Y+45	; 0x2d
    42d2:	7e a5       	ldd	r23, Y+46	; 0x2e
    42d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    42d6:	98 a9       	ldd	r25, Y+48	; 0x30
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	4a e7       	ldi	r20, 0x7A	; 122
    42de:	54 e4       	ldi	r21, 0x44	; 68
    42e0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	8c a3       	std	Y+36, r24	; 0x24
    42ea:	9d a3       	std	Y+37, r25	; 0x25
    42ec:	ae a3       	std	Y+38, r26	; 0x26
    42ee:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f0:	6c a1       	ldd	r22, Y+36	; 0x24
    42f2:	7d a1       	ldd	r23, Y+37	; 0x25
    42f4:	8e a1       	ldd	r24, Y+38	; 0x26
    42f6:	9f a1       	ldd	r25, Y+39	; 0x27
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	4a ef       	ldi	r20, 0xFA	; 250
    42fe:	54 e4       	ldi	r21, 0x44	; 68
    4300:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	88 a3       	std	Y+32, r24	; 0x20
    430a:	99 a3       	std	Y+33, r25	; 0x21
    430c:	aa a3       	std	Y+34, r26	; 0x22
    430e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4310:	68 a1       	ldd	r22, Y+32	; 0x20
    4312:	79 a1       	ldd	r23, Y+33	; 0x21
    4314:	8a a1       	ldd	r24, Y+34	; 0x22
    4316:	9b a1       	ldd	r25, Y+35	; 0x23
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	40 e8       	ldi	r20, 0x80	; 128
    431e:	5f e3       	ldi	r21, 0x3F	; 63
    4320:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4324:	88 23       	and	r24, r24
    4326:	2c f4       	brge	.+10     	; 0x4332 <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	9f 8f       	std	Y+31, r25	; 0x1f
    432e:	8e 8f       	std	Y+30, r24	; 0x1e
    4330:	3f c0       	rjmp	.+126    	; 0x43b0 <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    4332:	68 a1       	ldd	r22, Y+32	; 0x20
    4334:	79 a1       	ldd	r23, Y+33	; 0x21
    4336:	8a a1       	ldd	r24, Y+34	; 0x22
    4338:	9b a1       	ldd	r25, Y+35	; 0x23
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	3f ef       	ldi	r19, 0xFF	; 255
    433e:	4f e7       	ldi	r20, 0x7F	; 127
    4340:	57 e4       	ldi	r21, 0x47	; 71
    4342:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4346:	18 16       	cp	r1, r24
    4348:	4c f5       	brge	.+82     	; 0x439c <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434a:	6c a1       	ldd	r22, Y+36	; 0x24
    434c:	7d a1       	ldd	r23, Y+37	; 0x25
    434e:	8e a1       	ldd	r24, Y+38	; 0x26
    4350:	9f a1       	ldd	r25, Y+39	; 0x27
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e2       	ldi	r20, 0x20	; 32
    4358:	51 e4       	ldi	r21, 0x41	; 65
    435a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	bc 01       	movw	r22, r24
    4364:	cd 01       	movw	r24, r26
    4366:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	9f 8f       	std	Y+31, r25	; 0x1f
    4370:	8e 8f       	std	Y+30, r24	; 0x1e
    4372:	0f c0       	rjmp	.+30     	; 0x4392 <LCD_read_data_4bit+0x5aa>
    4374:	88 ec       	ldi	r24, 0xC8	; 200
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	9d 8f       	std	Y+29, r25	; 0x1d
    437a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    437c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    437e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4380:	01 97       	sbiw	r24, 0x01	; 1
    4382:	f1 f7       	brne	.-4      	; 0x4380 <LCD_read_data_4bit+0x598>
    4384:	9d 8f       	std	Y+29, r25	; 0x1d
    4386:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4388:	8e 8d       	ldd	r24, Y+30	; 0x1e
    438a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	9f 8f       	std	Y+31, r25	; 0x1f
    4390:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4392:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4394:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4396:	00 97       	sbiw	r24, 0x00	; 0
    4398:	69 f7       	brne	.-38     	; 0x4374 <LCD_read_data_4bit+0x58c>
    439a:	24 c0       	rjmp	.+72     	; 0x43e4 <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    439c:	68 a1       	ldd	r22, Y+32	; 0x20
    439e:	79 a1       	ldd	r23, Y+33	; 0x21
    43a0:	8a a1       	ldd	r24, Y+34	; 0x22
    43a2:	9b a1       	ldd	r25, Y+35	; 0x23
    43a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	9f 8f       	std	Y+31, r25	; 0x1f
    43ae:	8e 8f       	std	Y+30, r24	; 0x1e
    43b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43b4:	9b 8f       	std	Y+27, r25	; 0x1b
    43b6:	8a 8f       	std	Y+26, r24	; 0x1a
    43b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	f1 f7       	brne	.-4      	; 0x43bc <LCD_read_data_4bit+0x5d4>
    43c0:	9b 8f       	std	Y+27, r25	; 0x1b
    43c2:	8a 8f       	std	Y+26, r24	; 0x1a
    43c4:	0f c0       	rjmp	.+30     	; 0x43e4 <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43c6:	69 a5       	ldd	r22, Y+41	; 0x29
    43c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    43ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    43cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    43ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	88 a7       	std	Y+40, r24	; 0x28
    43d8:	88 a5       	ldd	r24, Y+40	; 0x28
    43da:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    43dc:	89 8d       	ldd	r24, Y+25	; 0x19
    43de:	8a 95       	dec	r24
    43e0:	f1 f7       	brne	.-4      	; 0x43de <LCD_read_data_4bit+0x5f6>
    43e2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	0e 94 7d 2c 	call	0x58fa	; 0x58fa <DIO_void_set_pin>
    43ec:	80 e0       	ldi	r24, 0x00	; 0
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	a0 e8       	ldi	r26, 0x80	; 128
    43f2:	bf e3       	ldi	r27, 0x3F	; 63
    43f4:	8d 8b       	std	Y+21, r24	; 0x15
    43f6:	9e 8b       	std	Y+22, r25	; 0x16
    43f8:	af 8b       	std	Y+23, r26	; 0x17
    43fa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    43fc:	6d 89       	ldd	r22, Y+21	; 0x15
    43fe:	7e 89       	ldd	r23, Y+22	; 0x16
    4400:	8f 89       	ldd	r24, Y+23	; 0x17
    4402:	98 8d       	ldd	r25, Y+24	; 0x18
    4404:	2b ea       	ldi	r18, 0xAB	; 171
    4406:	3a ea       	ldi	r19, 0xAA	; 170
    4408:	4a e2       	ldi	r20, 0x2A	; 42
    440a:	50 e4       	ldi	r21, 0x40	; 64
    440c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4410:	dc 01       	movw	r26, r24
    4412:	cb 01       	movw	r24, r22
    4414:	89 8b       	std	Y+17, r24	; 0x11
    4416:	9a 8b       	std	Y+18, r25	; 0x12
    4418:	ab 8b       	std	Y+19, r26	; 0x13
    441a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    441c:	69 89       	ldd	r22, Y+17	; 0x11
    441e:	7a 89       	ldd	r23, Y+18	; 0x12
    4420:	8b 89       	ldd	r24, Y+19	; 0x13
    4422:	9c 89       	ldd	r25, Y+20	; 0x14
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	40 e8       	ldi	r20, 0x80	; 128
    442a:	5f e3       	ldi	r21, 0x3F	; 63
    442c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4430:	88 23       	and	r24, r24
    4432:	1c f4       	brge	.+6      	; 0x443a <LCD_read_data_4bit+0x652>
		__ticks = 1;
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	88 8b       	std	Y+16, r24	; 0x10
    4438:	91 c0       	rjmp	.+290    	; 0x455c <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    443a:	69 89       	ldd	r22, Y+17	; 0x11
    443c:	7a 89       	ldd	r23, Y+18	; 0x12
    443e:	8b 89       	ldd	r24, Y+19	; 0x13
    4440:	9c 89       	ldd	r25, Y+20	; 0x14
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	4f e7       	ldi	r20, 0x7F	; 127
    4448:	53 e4       	ldi	r21, 0x43	; 67
    444a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    444e:	18 16       	cp	r1, r24
    4450:	0c f0       	brlt	.+2      	; 0x4454 <LCD_read_data_4bit+0x66c>
    4452:	7b c0       	rjmp	.+246    	; 0x454a <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    4454:	6d 89       	ldd	r22, Y+21	; 0x15
    4456:	7e 89       	ldd	r23, Y+22	; 0x16
    4458:	8f 89       	ldd	r24, Y+23	; 0x17
    445a:	98 8d       	ldd	r25, Y+24	; 0x18
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	4a e7       	ldi	r20, 0x7A	; 122
    4462:	54 e4       	ldi	r21, 0x44	; 68
    4464:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	8c 87       	std	Y+12, r24	; 0x0c
    446e:	9d 87       	std	Y+13, r25	; 0x0d
    4470:	ae 87       	std	Y+14, r26	; 0x0e
    4472:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4474:	6c 85       	ldd	r22, Y+12	; 0x0c
    4476:	7d 85       	ldd	r23, Y+13	; 0x0d
    4478:	8e 85       	ldd	r24, Y+14	; 0x0e
    447a:	9f 85       	ldd	r25, Y+15	; 0x0f
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	4a ef       	ldi	r20, 0xFA	; 250
    4482:	54 e4       	ldi	r21, 0x44	; 68
    4484:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	88 87       	std	Y+8, r24	; 0x08
    448e:	99 87       	std	Y+9, r25	; 0x09
    4490:	aa 87       	std	Y+10, r26	; 0x0a
    4492:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4494:	68 85       	ldd	r22, Y+8	; 0x08
    4496:	79 85       	ldd	r23, Y+9	; 0x09
    4498:	8a 85       	ldd	r24, Y+10	; 0x0a
    449a:	9b 85       	ldd	r25, Y+11	; 0x0b
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	40 e8       	ldi	r20, 0x80	; 128
    44a2:	5f e3       	ldi	r21, 0x3F	; 63
    44a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    44a8:	88 23       	and	r24, r24
    44aa:	2c f4       	brge	.+10     	; 0x44b6 <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	9f 83       	std	Y+7, r25	; 0x07
    44b2:	8e 83       	std	Y+6, r24	; 0x06
    44b4:	3f c0       	rjmp	.+126    	; 0x4534 <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    44b6:	68 85       	ldd	r22, Y+8	; 0x08
    44b8:	79 85       	ldd	r23, Y+9	; 0x09
    44ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    44bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	3f ef       	ldi	r19, 0xFF	; 255
    44c2:	4f e7       	ldi	r20, 0x7F	; 127
    44c4:	57 e4       	ldi	r21, 0x47	; 71
    44c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    44ca:	18 16       	cp	r1, r24
    44cc:	4c f5       	brge	.+82     	; 0x4520 <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    44d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    44d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    44d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	40 e2       	ldi	r20, 0x20	; 32
    44dc:	51 e4       	ldi	r21, 0x41	; 65
    44de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44e2:	dc 01       	movw	r26, r24
    44e4:	cb 01       	movw	r24, r22
    44e6:	bc 01       	movw	r22, r24
    44e8:	cd 01       	movw	r24, r26
    44ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	9f 83       	std	Y+7, r25	; 0x07
    44f4:	8e 83       	std	Y+6, r24	; 0x06
    44f6:	0f c0       	rjmp	.+30     	; 0x4516 <LCD_read_data_4bit+0x72e>
    44f8:	88 ec       	ldi	r24, 0xC8	; 200
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	9d 83       	std	Y+5, r25	; 0x05
    44fe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4500:	8c 81       	ldd	r24, Y+4	; 0x04
    4502:	9d 81       	ldd	r25, Y+5	; 0x05
    4504:	01 97       	sbiw	r24, 0x01	; 1
    4506:	f1 f7       	brne	.-4      	; 0x4504 <LCD_read_data_4bit+0x71c>
    4508:	9d 83       	std	Y+5, r25	; 0x05
    450a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450c:	8e 81       	ldd	r24, Y+6	; 0x06
    450e:	9f 81       	ldd	r25, Y+7	; 0x07
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	9f 83       	std	Y+7, r25	; 0x07
    4514:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4516:	8e 81       	ldd	r24, Y+6	; 0x06
    4518:	9f 81       	ldd	r25, Y+7	; 0x07
    451a:	00 97       	sbiw	r24, 0x00	; 0
    451c:	69 f7       	brne	.-38     	; 0x44f8 <LCD_read_data_4bit+0x710>
    451e:	24 c0       	rjmp	.+72     	; 0x4568 <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4520:	68 85       	ldd	r22, Y+8	; 0x08
    4522:	79 85       	ldd	r23, Y+9	; 0x09
    4524:	8a 85       	ldd	r24, Y+10	; 0x0a
    4526:	9b 85       	ldd	r25, Y+11	; 0x0b
    4528:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	9f 83       	std	Y+7, r25	; 0x07
    4532:	8e 83       	std	Y+6, r24	; 0x06
    4534:	8e 81       	ldd	r24, Y+6	; 0x06
    4536:	9f 81       	ldd	r25, Y+7	; 0x07
    4538:	9b 83       	std	Y+3, r25	; 0x03
    453a:	8a 83       	std	Y+2, r24	; 0x02
    453c:	8a 81       	ldd	r24, Y+2	; 0x02
    453e:	9b 81       	ldd	r25, Y+3	; 0x03
    4540:	01 97       	sbiw	r24, 0x01	; 1
    4542:	f1 f7       	brne	.-4      	; 0x4540 <LCD_read_data_4bit+0x758>
    4544:	9b 83       	std	Y+3, r25	; 0x03
    4546:	8a 83       	std	Y+2, r24	; 0x02
    4548:	0f c0       	rjmp	.+30     	; 0x4568 <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    454a:	69 89       	ldd	r22, Y+17	; 0x11
    454c:	7a 89       	ldd	r23, Y+18	; 0x12
    454e:	8b 89       	ldd	r24, Y+19	; 0x13
    4550:	9c 89       	ldd	r25, Y+20	; 0x14
    4552:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	88 8b       	std	Y+16, r24	; 0x10
    455c:	88 89       	ldd	r24, Y+16	; 0x10
    455e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4560:	89 81       	ldd	r24, Y+1	; 0x01
    4562:	8a 95       	dec	r24
    4564:	f1 f7       	brne	.-4      	; 0x4562 <LCD_read_data_4bit+0x77a>
    4566:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <DIO_u8_get_port>
    456e:	98 2f       	mov	r25, r24
    4570:	de 01       	movw	r26, r28
    4572:	af 59       	subi	r26, 0x9F	; 159
    4574:	bf 4f       	sbci	r27, 0xFF	; 255
    4576:	fe 01       	movw	r30, r28
    4578:	ef 59       	subi	r30, 0x9F	; 159
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	80 81       	ld	r24, Z
    457e:	89 2b       	or	r24, r25
    4580:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	60 e0       	ldi	r22, 0x00	; 0
    4586:	0e 94 ad 2c 	call	0x595a	; 0x595a <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    458a:	de 01       	movw	r26, r28
    458c:	af 59       	subi	r26, 0x9F	; 159
    458e:	bf 4f       	sbci	r27, 0xFF	; 255
    4590:	fe 01       	movw	r30, r28
    4592:	ef 59       	subi	r30, 0x9F	; 159
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	8f 77       	andi	r24, 0x7F	; 127
    459a:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	67 e0       	ldi	r22, 0x07	; 7
    45a0:	4f ef       	ldi	r20, 0xFF	; 255
    45a2:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	66 e0       	ldi	r22, 0x06	; 6
    45aa:	4f ef       	ldi	r20, 0xFF	; 255
    45ac:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	65 e0       	ldi	r22, 0x05	; 5
    45b4:	4f ef       	ldi	r20, 0xFF	; 255
    45b6:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	64 e0       	ldi	r22, 0x04	; 4
    45be:	4f ef       	ldi	r20, 0xFF	; 255
    45c0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    45c4:	fe 01       	movw	r30, r28
    45c6:	ef 59       	subi	r30, 0x9F	; 159
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	80 81       	ld	r24, Z
}
    45cc:	cf 59       	subi	r28, 0x9F	; 159
    45ce:	df 4f       	sbci	r29, 0xFF	; 255
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	cf 91       	pop	r28
    45dc:	df 91       	pop	r29
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	08 95       	ret

000045e4 <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    45e4:	0f 93       	push	r16
    45e6:	1f 93       	push	r17
    45e8:	df 93       	push	r29
    45ea:	cf 93       	push	r28
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
    45f0:	cc 54       	subi	r28, 0x4C	; 76
    45f2:	d0 40       	sbci	r29, 0x00	; 0
    45f4:	0f b6       	in	r0, 0x3f	; 63
    45f6:	f8 94       	cli
    45f8:	de bf       	out	0x3e, r29	; 62
    45fa:	0f be       	out	0x3f, r0	; 63
    45fc:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	67 e0       	ldi	r22, 0x07	; 7
    4602:	4f ef       	ldi	r20, 0xFF	; 255
    4604:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	66 e0       	ldi	r22, 0x06	; 6
    460c:	4f ef       	ldi	r20, 0xFF	; 255
    460e:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	65 e0       	ldi	r22, 0x05	; 5
    4616:	4f ef       	ldi	r20, 0xFF	; 255
    4618:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	64 e0       	ldi	r22, 0x04	; 4
    4620:	4f ef       	ldi	r20, 0xFF	; 255
    4622:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	60 e0       	ldi	r22, 0x00	; 0
    462a:	4f ef       	ldi	r20, 0xFF	; 255
    462c:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	61 e0       	ldi	r22, 0x01	; 1
    4634:	4f ef       	ldi	r20, 0xFF	; 255
    4636:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	62 e0       	ldi	r22, 0x02	; 2
    463e:	4f ef       	ldi	r20, 0xFF	; 255
    4640:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DIO_void_set_pin_dir>
    4644:	fe 01       	movw	r30, r28
    4646:	e7 5b       	subi	r30, 0xB7	; 183
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	a8 e4       	ldi	r26, 0x48	; 72
    4650:	b2 e4       	ldi	r27, 0x42	; 66
    4652:	80 83       	st	Z, r24
    4654:	91 83       	std	Z+1, r25	; 0x01
    4656:	a2 83       	std	Z+2, r26	; 0x02
    4658:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465a:	8e 01       	movw	r16, r28
    465c:	0b 5b       	subi	r16, 0xBB	; 187
    465e:	1f 4f       	sbci	r17, 0xFF	; 255
    4660:	fe 01       	movw	r30, r28
    4662:	e7 5b       	subi	r30, 0xB7	; 183
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	60 81       	ld	r22, Z
    4668:	71 81       	ldd	r23, Z+1	; 0x01
    466a:	82 81       	ldd	r24, Z+2	; 0x02
    466c:	93 81       	ldd	r25, Z+3	; 0x03
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	4a ef       	ldi	r20, 0xFA	; 250
    4674:	54 e4       	ldi	r21, 0x44	; 68
    4676:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	f8 01       	movw	r30, r16
    4680:	80 83       	st	Z, r24
    4682:	91 83       	std	Z+1, r25	; 0x01
    4684:	a2 83       	std	Z+2, r26	; 0x02
    4686:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4688:	fe 01       	movw	r30, r28
    468a:	eb 5b       	subi	r30, 0xBB	; 187
    468c:	ff 4f       	sbci	r31, 0xFF	; 255
    468e:	60 81       	ld	r22, Z
    4690:	71 81       	ldd	r23, Z+1	; 0x01
    4692:	82 81       	ldd	r24, Z+2	; 0x02
    4694:	93 81       	ldd	r25, Z+3	; 0x03
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	40 e8       	ldi	r20, 0x80	; 128
    469c:	5f e3       	ldi	r21, 0x3F	; 63
    469e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    46a2:	88 23       	and	r24, r24
    46a4:	44 f4       	brge	.+16     	; 0x46b6 <LCD_init+0xd2>
		__ticks = 1;
    46a6:	fe 01       	movw	r30, r28
    46a8:	ed 5b       	subi	r30, 0xBD	; 189
    46aa:	ff 4f       	sbci	r31, 0xFF	; 255
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	91 83       	std	Z+1, r25	; 0x01
    46b2:	80 83       	st	Z, r24
    46b4:	64 c0       	rjmp	.+200    	; 0x477e <LCD_init+0x19a>
	else if (__tmp > 65535)
    46b6:	fe 01       	movw	r30, r28
    46b8:	eb 5b       	subi	r30, 0xBB	; 187
    46ba:	ff 4f       	sbci	r31, 0xFF	; 255
    46bc:	60 81       	ld	r22, Z
    46be:	71 81       	ldd	r23, Z+1	; 0x01
    46c0:	82 81       	ldd	r24, Z+2	; 0x02
    46c2:	93 81       	ldd	r25, Z+3	; 0x03
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	3f ef       	ldi	r19, 0xFF	; 255
    46c8:	4f e7       	ldi	r20, 0x7F	; 127
    46ca:	57 e4       	ldi	r21, 0x47	; 71
    46cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    46d0:	18 16       	cp	r1, r24
    46d2:	0c f0       	brlt	.+2      	; 0x46d6 <LCD_init+0xf2>
    46d4:	43 c0       	rjmp	.+134    	; 0x475c <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d6:	fe 01       	movw	r30, r28
    46d8:	e7 5b       	subi	r30, 0xB7	; 183
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	60 81       	ld	r22, Z
    46de:	71 81       	ldd	r23, Z+1	; 0x01
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	93 81       	ldd	r25, Z+3	; 0x03
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	40 e2       	ldi	r20, 0x20	; 32
    46ea:	51 e4       	ldi	r21, 0x41	; 65
    46ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	8e 01       	movw	r16, r28
    46f6:	0d 5b       	subi	r16, 0xBD	; 189
    46f8:	1f 4f       	sbci	r17, 0xFF	; 255
    46fa:	bc 01       	movw	r22, r24
    46fc:	cd 01       	movw	r24, r26
    46fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4702:	dc 01       	movw	r26, r24
    4704:	cb 01       	movw	r24, r22
    4706:	f8 01       	movw	r30, r16
    4708:	91 83       	std	Z+1, r25	; 0x01
    470a:	80 83       	st	Z, r24
    470c:	1f c0       	rjmp	.+62     	; 0x474c <LCD_init+0x168>
    470e:	fe 01       	movw	r30, r28
    4710:	ef 5b       	subi	r30, 0xBF	; 191
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	88 ec       	ldi	r24, 0xC8	; 200
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	91 83       	std	Z+1, r25	; 0x01
    471a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    471c:	fe 01       	movw	r30, r28
    471e:	ef 5b       	subi	r30, 0xBF	; 191
    4720:	ff 4f       	sbci	r31, 0xFF	; 255
    4722:	80 81       	ld	r24, Z
    4724:	91 81       	ldd	r25, Z+1	; 0x01
    4726:	01 97       	sbiw	r24, 0x01	; 1
    4728:	f1 f7       	brne	.-4      	; 0x4726 <LCD_init+0x142>
    472a:	fe 01       	movw	r30, r28
    472c:	ef 5b       	subi	r30, 0xBF	; 191
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4734:	de 01       	movw	r26, r28
    4736:	ad 5b       	subi	r26, 0xBD	; 189
    4738:	bf 4f       	sbci	r27, 0xFF	; 255
    473a:	fe 01       	movw	r30, r28
    473c:	ed 5b       	subi	r30, 0xBD	; 189
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	01 97       	sbiw	r24, 0x01	; 1
    4746:	11 96       	adiw	r26, 0x01	; 1
    4748:	9c 93       	st	X, r25
    474a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474c:	fe 01       	movw	r30, r28
    474e:	ed 5b       	subi	r30, 0xBD	; 189
    4750:	ff 4f       	sbci	r31, 0xFF	; 255
    4752:	80 81       	ld	r24, Z
    4754:	91 81       	ldd	r25, Z+1	; 0x01
    4756:	00 97       	sbiw	r24, 0x00	; 0
    4758:	d1 f6       	brne	.-76     	; 0x470e <LCD_init+0x12a>
    475a:	24 c0       	rjmp	.+72     	; 0x47a4 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475c:	8e 01       	movw	r16, r28
    475e:	0d 5b       	subi	r16, 0xBD	; 189
    4760:	1f 4f       	sbci	r17, 0xFF	; 255
    4762:	fe 01       	movw	r30, r28
    4764:	eb 5b       	subi	r30, 0xBB	; 187
    4766:	ff 4f       	sbci	r31, 0xFF	; 255
    4768:	60 81       	ld	r22, Z
    476a:	71 81       	ldd	r23, Z+1	; 0x01
    476c:	82 81       	ldd	r24, Z+2	; 0x02
    476e:	93 81       	ldd	r25, Z+3	; 0x03
    4770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	f8 01       	movw	r30, r16
    477a:	91 83       	std	Z+1, r25	; 0x01
    477c:	80 83       	st	Z, r24
    477e:	fe 01       	movw	r30, r28
    4780:	ed 5b       	subi	r30, 0xBD	; 189
    4782:	ff 4f       	sbci	r31, 0xFF	; 255
    4784:	80 81       	ld	r24, Z
    4786:	91 81       	ldd	r25, Z+1	; 0x01
    4788:	fe 01       	movw	r30, r28
    478a:	ff 96       	adiw	r30, 0x3f	; 63
    478c:	91 83       	std	Z+1, r25	; 0x01
    478e:	80 83       	st	Z, r24
    4790:	fe 01       	movw	r30, r28
    4792:	ff 96       	adiw	r30, 0x3f	; 63
    4794:	80 81       	ld	r24, Z
    4796:	91 81       	ldd	r25, Z+1	; 0x01
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	f1 f7       	brne	.-4      	; 0x4798 <LCD_init+0x1b4>
    479c:	fe 01       	movw	r30, r28
    479e:	ff 96       	adiw	r30, 0x3f	; 63
    47a0:	91 83       	std	Z+1, r25	; 0x01
    47a2:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    47a4:	0e 94 34 17 	call	0x2e68	; 0x2e68 <LCD_function_set_4bit>
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	a8 e4       	ldi	r26, 0x48	; 72
    47ae:	b2 e4       	ldi	r27, 0x42	; 66
    47b0:	8b af       	std	Y+59, r24	; 0x3b
    47b2:	9c af       	std	Y+60, r25	; 0x3c
    47b4:	ad af       	std	Y+61, r26	; 0x3d
    47b6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    47b8:	6b ad       	ldd	r22, Y+59	; 0x3b
    47ba:	7c ad       	ldd	r23, Y+60	; 0x3c
    47bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    47be:	9e ad       	ldd	r25, Y+62	; 0x3e
    47c0:	2b ea       	ldi	r18, 0xAB	; 171
    47c2:	3a ea       	ldi	r19, 0xAA	; 170
    47c4:	4a e2       	ldi	r20, 0x2A	; 42
    47c6:	50 e4       	ldi	r21, 0x40	; 64
    47c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47cc:	dc 01       	movw	r26, r24
    47ce:	cb 01       	movw	r24, r22
    47d0:	8f ab       	std	Y+55, r24	; 0x37
    47d2:	98 af       	std	Y+56, r25	; 0x38
    47d4:	a9 af       	std	Y+57, r26	; 0x39
    47d6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    47d8:	6f a9       	ldd	r22, Y+55	; 0x37
    47da:	78 ad       	ldd	r23, Y+56	; 0x38
    47dc:	89 ad       	ldd	r24, Y+57	; 0x39
    47de:	9a ad       	ldd	r25, Y+58	; 0x3a
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	40 e8       	ldi	r20, 0x80	; 128
    47e6:	5f e3       	ldi	r21, 0x3F	; 63
    47e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    47ec:	88 23       	and	r24, r24
    47ee:	1c f4       	brge	.+6      	; 0x47f6 <LCD_init+0x212>
		__ticks = 1;
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	8e ab       	std	Y+54, r24	; 0x36
    47f4:	91 c0       	rjmp	.+290    	; 0x4918 <LCD_init+0x334>
	else if (__tmp > 255)
    47f6:	6f a9       	ldd	r22, Y+55	; 0x37
    47f8:	78 ad       	ldd	r23, Y+56	; 0x38
    47fa:	89 ad       	ldd	r24, Y+57	; 0x39
    47fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	4f e7       	ldi	r20, 0x7F	; 127
    4804:	53 e4       	ldi	r21, 0x43	; 67
    4806:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    480a:	18 16       	cp	r1, r24
    480c:	0c f0       	brlt	.+2      	; 0x4810 <LCD_init+0x22c>
    480e:	7b c0       	rjmp	.+246    	; 0x4906 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    4810:	6b ad       	ldd	r22, Y+59	; 0x3b
    4812:	7c ad       	ldd	r23, Y+60	; 0x3c
    4814:	8d ad       	ldd	r24, Y+61	; 0x3d
    4816:	9e ad       	ldd	r25, Y+62	; 0x3e
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	4a e7       	ldi	r20, 0x7A	; 122
    481e:	54 e4       	ldi	r21, 0x44	; 68
    4820:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4824:	dc 01       	movw	r26, r24
    4826:	cb 01       	movw	r24, r22
    4828:	8a ab       	std	Y+50, r24	; 0x32
    482a:	9b ab       	std	Y+51, r25	; 0x33
    482c:	ac ab       	std	Y+52, r26	; 0x34
    482e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4830:	6a a9       	ldd	r22, Y+50	; 0x32
    4832:	7b a9       	ldd	r23, Y+51	; 0x33
    4834:	8c a9       	ldd	r24, Y+52	; 0x34
    4836:	9d a9       	ldd	r25, Y+53	; 0x35
    4838:	20 e0       	ldi	r18, 0x00	; 0
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	4a ef       	ldi	r20, 0xFA	; 250
    483e:	54 e4       	ldi	r21, 0x44	; 68
    4840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	8e a7       	std	Y+46, r24	; 0x2e
    484a:	9f a7       	std	Y+47, r25	; 0x2f
    484c:	a8 ab       	std	Y+48, r26	; 0x30
    484e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    4850:	6e a5       	ldd	r22, Y+46	; 0x2e
    4852:	7f a5       	ldd	r23, Y+47	; 0x2f
    4854:	88 a9       	ldd	r24, Y+48	; 0x30
    4856:	99 a9       	ldd	r25, Y+49	; 0x31
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e8       	ldi	r20, 0x80	; 128
    485e:	5f e3       	ldi	r21, 0x3F	; 63
    4860:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4864:	88 23       	and	r24, r24
    4866:	2c f4       	brge	.+10     	; 0x4872 <LCD_init+0x28e>
		__ticks = 1;
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	9d a7       	std	Y+45, r25	; 0x2d
    486e:	8c a7       	std	Y+44, r24	; 0x2c
    4870:	3f c0       	rjmp	.+126    	; 0x48f0 <LCD_init+0x30c>
	else if (__tmp > 65535)
    4872:	6e a5       	ldd	r22, Y+46	; 0x2e
    4874:	7f a5       	ldd	r23, Y+47	; 0x2f
    4876:	88 a9       	ldd	r24, Y+48	; 0x30
    4878:	99 a9       	ldd	r25, Y+49	; 0x31
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	3f ef       	ldi	r19, 0xFF	; 255
    487e:	4f e7       	ldi	r20, 0x7F	; 127
    4880:	57 e4       	ldi	r21, 0x47	; 71
    4882:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4886:	18 16       	cp	r1, r24
    4888:	4c f5       	brge	.+82     	; 0x48dc <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    488a:	6a a9       	ldd	r22, Y+50	; 0x32
    488c:	7b a9       	ldd	r23, Y+51	; 0x33
    488e:	8c a9       	ldd	r24, Y+52	; 0x34
    4890:	9d a9       	ldd	r25, Y+53	; 0x35
    4892:	20 e0       	ldi	r18, 0x00	; 0
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	40 e2       	ldi	r20, 0x20	; 32
    4898:	51 e4       	ldi	r21, 0x41	; 65
    489a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	bc 01       	movw	r22, r24
    48a4:	cd 01       	movw	r24, r26
    48a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	9d a7       	std	Y+45, r25	; 0x2d
    48b0:	8c a7       	std	Y+44, r24	; 0x2c
    48b2:	0f c0       	rjmp	.+30     	; 0x48d2 <LCD_init+0x2ee>
    48b4:	88 ec       	ldi	r24, 0xC8	; 200
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	9b a7       	std	Y+43, r25	; 0x2b
    48ba:	8a a7       	std	Y+42, r24	; 0x2a
    48bc:	8a a5       	ldd	r24, Y+42	; 0x2a
    48be:	9b a5       	ldd	r25, Y+43	; 0x2b
    48c0:	01 97       	sbiw	r24, 0x01	; 1
    48c2:	f1 f7       	brne	.-4      	; 0x48c0 <LCD_init+0x2dc>
    48c4:	9b a7       	std	Y+43, r25	; 0x2b
    48c6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    48ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	9d a7       	std	Y+45, r25	; 0x2d
    48d0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    48d4:	9d a5       	ldd	r25, Y+45	; 0x2d
    48d6:	00 97       	sbiw	r24, 0x00	; 0
    48d8:	69 f7       	brne	.-38     	; 0x48b4 <LCD_init+0x2d0>
    48da:	24 c0       	rjmp	.+72     	; 0x4924 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48dc:	6e a5       	ldd	r22, Y+46	; 0x2e
    48de:	7f a5       	ldd	r23, Y+47	; 0x2f
    48e0:	88 a9       	ldd	r24, Y+48	; 0x30
    48e2:	99 a9       	ldd	r25, Y+49	; 0x31
    48e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	9d a7       	std	Y+45, r25	; 0x2d
    48ee:	8c a7       	std	Y+44, r24	; 0x2c
    48f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    48f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    48f4:	99 a7       	std	Y+41, r25	; 0x29
    48f6:	88 a7       	std	Y+40, r24	; 0x28
    48f8:	88 a5       	ldd	r24, Y+40	; 0x28
    48fa:	99 a5       	ldd	r25, Y+41	; 0x29
    48fc:	01 97       	sbiw	r24, 0x01	; 1
    48fe:	f1 f7       	brne	.-4      	; 0x48fc <LCD_init+0x318>
    4900:	99 a7       	std	Y+41, r25	; 0x29
    4902:	88 a7       	std	Y+40, r24	; 0x28
    4904:	0f c0       	rjmp	.+30     	; 0x4924 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4906:	6f a9       	ldd	r22, Y+55	; 0x37
    4908:	78 ad       	ldd	r23, Y+56	; 0x38
    490a:	89 ad       	ldd	r24, Y+57	; 0x39
    490c:	9a ad       	ldd	r25, Y+58	; 0x3a
    490e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	8e ab       	std	Y+54, r24	; 0x36
    4918:	8e a9       	ldd	r24, Y+54	; 0x36
    491a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    491c:	8f a1       	ldd	r24, Y+39	; 0x27
    491e:	8a 95       	dec	r24
    4920:	f1 f7       	brne	.-4      	; 0x491e <LCD_init+0x33a>
    4922:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    4924:	8c e0       	ldi	r24, 0x0C	; 12
    4926:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_write_cmd_4bit>
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	a8 e4       	ldi	r26, 0x48	; 72
    4930:	b2 e4       	ldi	r27, 0x42	; 66
    4932:	8b a3       	std	Y+35, r24	; 0x23
    4934:	9c a3       	std	Y+36, r25	; 0x24
    4936:	ad a3       	std	Y+37, r26	; 0x25
    4938:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    493a:	6b a1       	ldd	r22, Y+35	; 0x23
    493c:	7c a1       	ldd	r23, Y+36	; 0x24
    493e:	8d a1       	ldd	r24, Y+37	; 0x25
    4940:	9e a1       	ldd	r25, Y+38	; 0x26
    4942:	2b ea       	ldi	r18, 0xAB	; 171
    4944:	3a ea       	ldi	r19, 0xAA	; 170
    4946:	4a e2       	ldi	r20, 0x2A	; 42
    4948:	50 e4       	ldi	r21, 0x40	; 64
    494a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	8f 8f       	std	Y+31, r24	; 0x1f
    4954:	98 a3       	std	Y+32, r25	; 0x20
    4956:	a9 a3       	std	Y+33, r26	; 0x21
    4958:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    495a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    495c:	78 a1       	ldd	r23, Y+32	; 0x20
    495e:	89 a1       	ldd	r24, Y+33	; 0x21
    4960:	9a a1       	ldd	r25, Y+34	; 0x22
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	40 e8       	ldi	r20, 0x80	; 128
    4968:	5f e3       	ldi	r21, 0x3F	; 63
    496a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    496e:	88 23       	and	r24, r24
    4970:	1c f4       	brge	.+6      	; 0x4978 <LCD_init+0x394>
		__ticks = 1;
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	8e 8f       	std	Y+30, r24	; 0x1e
    4976:	91 c0       	rjmp	.+290    	; 0x4a9a <LCD_init+0x4b6>
	else if (__tmp > 255)
    4978:	6f 8d       	ldd	r22, Y+31	; 0x1f
    497a:	78 a1       	ldd	r23, Y+32	; 0x20
    497c:	89 a1       	ldd	r24, Y+33	; 0x21
    497e:	9a a1       	ldd	r25, Y+34	; 0x22
    4980:	20 e0       	ldi	r18, 0x00	; 0
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	4f e7       	ldi	r20, 0x7F	; 127
    4986:	53 e4       	ldi	r21, 0x43	; 67
    4988:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    498c:	18 16       	cp	r1, r24
    498e:	0c f0       	brlt	.+2      	; 0x4992 <LCD_init+0x3ae>
    4990:	7b c0       	rjmp	.+246    	; 0x4a88 <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    4992:	6b a1       	ldd	r22, Y+35	; 0x23
    4994:	7c a1       	ldd	r23, Y+36	; 0x24
    4996:	8d a1       	ldd	r24, Y+37	; 0x25
    4998:	9e a1       	ldd	r25, Y+38	; 0x26
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	4a e7       	ldi	r20, 0x7A	; 122
    49a0:	54 e4       	ldi	r21, 0x44	; 68
    49a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    49a6:	dc 01       	movw	r26, r24
    49a8:	cb 01       	movw	r24, r22
    49aa:	8a 8f       	std	Y+26, r24	; 0x1a
    49ac:	9b 8f       	std	Y+27, r25	; 0x1b
    49ae:	ac 8f       	std	Y+28, r26	; 0x1c
    49b0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    49b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    49b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    49b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	30 e0       	ldi	r19, 0x00	; 0
    49be:	4a ef       	ldi	r20, 0xFA	; 250
    49c0:	54 e4       	ldi	r21, 0x44	; 68
    49c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49c6:	dc 01       	movw	r26, r24
    49c8:	cb 01       	movw	r24, r22
    49ca:	8e 8b       	std	Y+22, r24	; 0x16
    49cc:	9f 8b       	std	Y+23, r25	; 0x17
    49ce:	a8 8f       	std	Y+24, r26	; 0x18
    49d0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    49d2:	6e 89       	ldd	r22, Y+22	; 0x16
    49d4:	7f 89       	ldd	r23, Y+23	; 0x17
    49d6:	88 8d       	ldd	r24, Y+24	; 0x18
    49d8:	99 8d       	ldd	r25, Y+25	; 0x19
    49da:	20 e0       	ldi	r18, 0x00	; 0
    49dc:	30 e0       	ldi	r19, 0x00	; 0
    49de:	40 e8       	ldi	r20, 0x80	; 128
    49e0:	5f e3       	ldi	r21, 0x3F	; 63
    49e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    49e6:	88 23       	and	r24, r24
    49e8:	2c f4       	brge	.+10     	; 0x49f4 <LCD_init+0x410>
		__ticks = 1;
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	9d 8b       	std	Y+21, r25	; 0x15
    49f0:	8c 8b       	std	Y+20, r24	; 0x14
    49f2:	3f c0       	rjmp	.+126    	; 0x4a72 <LCD_init+0x48e>
	else if (__tmp > 65535)
    49f4:	6e 89       	ldd	r22, Y+22	; 0x16
    49f6:	7f 89       	ldd	r23, Y+23	; 0x17
    49f8:	88 8d       	ldd	r24, Y+24	; 0x18
    49fa:	99 8d       	ldd	r25, Y+25	; 0x19
    49fc:	20 e0       	ldi	r18, 0x00	; 0
    49fe:	3f ef       	ldi	r19, 0xFF	; 255
    4a00:	4f e7       	ldi	r20, 0x7F	; 127
    4a02:	57 e4       	ldi	r21, 0x47	; 71
    4a04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4a08:	18 16       	cp	r1, r24
    4a0a:	4c f5       	brge	.+82     	; 0x4a5e <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a0c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4a0e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4a10:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4a12:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	40 e2       	ldi	r20, 0x20	; 32
    4a1a:	51 e4       	ldi	r21, 0x41	; 65
    4a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	bc 01       	movw	r22, r24
    4a26:	cd 01       	movw	r24, r26
    4a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	9d 8b       	std	Y+21, r25	; 0x15
    4a32:	8c 8b       	std	Y+20, r24	; 0x14
    4a34:	0f c0       	rjmp	.+30     	; 0x4a54 <LCD_init+0x470>
    4a36:	88 ec       	ldi	r24, 0xC8	; 200
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	9b 8b       	std	Y+19, r25	; 0x13
    4a3c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4a3e:	8a 89       	ldd	r24, Y+18	; 0x12
    4a40:	9b 89       	ldd	r25, Y+19	; 0x13
    4a42:	01 97       	sbiw	r24, 0x01	; 1
    4a44:	f1 f7       	brne	.-4      	; 0x4a42 <LCD_init+0x45e>
    4a46:	9b 8b       	std	Y+19, r25	; 0x13
    4a48:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a4a:	8c 89       	ldd	r24, Y+20	; 0x14
    4a4c:	9d 89       	ldd	r25, Y+21	; 0x15
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	9d 8b       	std	Y+21, r25	; 0x15
    4a52:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a54:	8c 89       	ldd	r24, Y+20	; 0x14
    4a56:	9d 89       	ldd	r25, Y+21	; 0x15
    4a58:	00 97       	sbiw	r24, 0x00	; 0
    4a5a:	69 f7       	brne	.-38     	; 0x4a36 <LCD_init+0x452>
    4a5c:	24 c0       	rjmp	.+72     	; 0x4aa6 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a5e:	6e 89       	ldd	r22, Y+22	; 0x16
    4a60:	7f 89       	ldd	r23, Y+23	; 0x17
    4a62:	88 8d       	ldd	r24, Y+24	; 0x18
    4a64:	99 8d       	ldd	r25, Y+25	; 0x19
    4a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a6a:	dc 01       	movw	r26, r24
    4a6c:	cb 01       	movw	r24, r22
    4a6e:	9d 8b       	std	Y+21, r25	; 0x15
    4a70:	8c 8b       	std	Y+20, r24	; 0x14
    4a72:	8c 89       	ldd	r24, Y+20	; 0x14
    4a74:	9d 89       	ldd	r25, Y+21	; 0x15
    4a76:	99 8b       	std	Y+17, r25	; 0x11
    4a78:	88 8b       	std	Y+16, r24	; 0x10
    4a7a:	88 89       	ldd	r24, Y+16	; 0x10
    4a7c:	99 89       	ldd	r25, Y+17	; 0x11
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	f1 f7       	brne	.-4      	; 0x4a7e <LCD_init+0x49a>
    4a82:	99 8b       	std	Y+17, r25	; 0x11
    4a84:	88 8b       	std	Y+16, r24	; 0x10
    4a86:	0f c0       	rjmp	.+30     	; 0x4aa6 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4a8a:	78 a1       	ldd	r23, Y+32	; 0x20
    4a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    4a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    4a90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	8e 8f       	std	Y+30, r24	; 0x1e
    4a9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a9c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4aa0:	8a 95       	dec	r24
    4aa2:	f1 f7       	brne	.-4      	; 0x4aa0 <LCD_init+0x4bc>
    4aa4:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_write_cmd_4bit>
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	a0 e0       	ldi	r26, 0x00	; 0
    4ab2:	b0 e4       	ldi	r27, 0x40	; 64
    4ab4:	8b 87       	std	Y+11, r24	; 0x0b
    4ab6:	9c 87       	std	Y+12, r25	; 0x0c
    4ab8:	ad 87       	std	Y+13, r26	; 0x0d
    4aba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	4a ef       	ldi	r20, 0xFA	; 250
    4aca:	54 e4       	ldi	r21, 0x44	; 68
    4acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	cb 01       	movw	r24, r22
    4ad4:	8f 83       	std	Y+7, r24	; 0x07
    4ad6:	98 87       	std	Y+8, r25	; 0x08
    4ad8:	a9 87       	std	Y+9, r26	; 0x09
    4ada:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4adc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ade:	78 85       	ldd	r23, Y+8	; 0x08
    4ae0:	89 85       	ldd	r24, Y+9	; 0x09
    4ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ae4:	20 e0       	ldi	r18, 0x00	; 0
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	40 e8       	ldi	r20, 0x80	; 128
    4aea:	5f e3       	ldi	r21, 0x3F	; 63
    4aec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4af0:	88 23       	and	r24, r24
    4af2:	2c f4       	brge	.+10     	; 0x4afe <LCD_init+0x51a>
		__ticks = 1;
    4af4:	81 e0       	ldi	r24, 0x01	; 1
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	9e 83       	std	Y+6, r25	; 0x06
    4afa:	8d 83       	std	Y+5, r24	; 0x05
    4afc:	3f c0       	rjmp	.+126    	; 0x4b7c <LCD_init+0x598>
	else if (__tmp > 65535)
    4afe:	6f 81       	ldd	r22, Y+7	; 0x07
    4b00:	78 85       	ldd	r23, Y+8	; 0x08
    4b02:	89 85       	ldd	r24, Y+9	; 0x09
    4b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	3f ef       	ldi	r19, 0xFF	; 255
    4b0a:	4f e7       	ldi	r20, 0x7F	; 127
    4b0c:	57 e4       	ldi	r21, 0x47	; 71
    4b0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4b12:	18 16       	cp	r1, r24
    4b14:	4c f5       	brge	.+82     	; 0x4b68 <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	30 e0       	ldi	r19, 0x00	; 0
    4b22:	40 e2       	ldi	r20, 0x20	; 32
    4b24:	51 e4       	ldi	r21, 0x41	; 65
    4b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	bc 01       	movw	r22, r24
    4b30:	cd 01       	movw	r24, r26
    4b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b36:	dc 01       	movw	r26, r24
    4b38:	cb 01       	movw	r24, r22
    4b3a:	9e 83       	std	Y+6, r25	; 0x06
    4b3c:	8d 83       	std	Y+5, r24	; 0x05
    4b3e:	0f c0       	rjmp	.+30     	; 0x4b5e <LCD_init+0x57a>
    4b40:	88 ec       	ldi	r24, 0xC8	; 200
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	9c 83       	std	Y+4, r25	; 0x04
    4b46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b48:	8b 81       	ldd	r24, Y+3	; 0x03
    4b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	f1 f7       	brne	.-4      	; 0x4b4c <LCD_init+0x568>
    4b50:	9c 83       	std	Y+4, r25	; 0x04
    4b52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b54:	8d 81       	ldd	r24, Y+5	; 0x05
    4b56:	9e 81       	ldd	r25, Y+6	; 0x06
    4b58:	01 97       	sbiw	r24, 0x01	; 1
    4b5a:	9e 83       	std	Y+6, r25	; 0x06
    4b5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b60:	9e 81       	ldd	r25, Y+6	; 0x06
    4b62:	00 97       	sbiw	r24, 0x00	; 0
    4b64:	69 f7       	brne	.-38     	; 0x4b40 <LCD_init+0x55c>
    4b66:	14 c0       	rjmp	.+40     	; 0x4b90 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b68:	6f 81       	ldd	r22, Y+7	; 0x07
    4b6a:	78 85       	ldd	r23, Y+8	; 0x08
    4b6c:	89 85       	ldd	r24, Y+9	; 0x09
    4b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b74:	dc 01       	movw	r26, r24
    4b76:	cb 01       	movw	r24, r22
    4b78:	9e 83       	std	Y+6, r25	; 0x06
    4b7a:	8d 83       	std	Y+5, r24	; 0x05
    4b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b80:	9a 83       	std	Y+2, r25	; 0x02
    4b82:	89 83       	std	Y+1, r24	; 0x01
    4b84:	89 81       	ldd	r24, Y+1	; 0x01
    4b86:	9a 81       	ldd	r25, Y+2	; 0x02
    4b88:	01 97       	sbiw	r24, 0x01	; 1
    4b8a:	f1 f7       	brne	.-4      	; 0x4b88 <LCD_init+0x5a4>
    4b8c:	9a 83       	std	Y+2, r25	; 0x02
    4b8e:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    4b90:	c4 5b       	subi	r28, 0xB4	; 180
    4b92:	df 4f       	sbci	r29, 0xFF	; 255
    4b94:	0f b6       	in	r0, 0x3f	; 63
    4b96:	f8 94       	cli
    4b98:	de bf       	out	0x3e, r29	; 62
    4b9a:	0f be       	out	0x3f, r0	; 63
    4b9c:	cd bf       	out	0x3d, r28	; 61
    4b9e:	cf 91       	pop	r28
    4ba0:	df 91       	pop	r29
    4ba2:	1f 91       	pop	r17
    4ba4:	0f 91       	pop	r16
    4ba6:	08 95       	ret

00004ba8 <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    4ba8:	df 93       	push	r29
    4baa:	cf 93       	push	r28
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
    4bb0:	6b 97       	sbiw	r28, 0x1b	; 27
    4bb2:	0f b6       	in	r0, 0x3f	; 63
    4bb4:	f8 94       	cli
    4bb6:	de bf       	out	0x3e, r29	; 62
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	cd bf       	out	0x3d, r28	; 61
    4bbc:	8a 8f       	std	Y+26, r24	; 0x1a
    4bbe:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    4bc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4bc2:	88 2f       	mov	r24, r24
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	02 96       	adiw	r24, 0x02	; 2
    4bc8:	00 24       	eor	r0, r0
    4bca:	96 95       	lsr	r25
    4bcc:	87 95       	ror	r24
    4bce:	07 94       	ror	r0
    4bd0:	96 95       	lsr	r25
    4bd2:	87 95       	ror	r24
    4bd4:	07 94       	ror	r0
    4bd6:	98 2f       	mov	r25, r24
    4bd8:	80 2d       	mov	r24, r0
    4bda:	98 2f       	mov	r25, r24
    4bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bde:	89 0f       	add	r24, r25
    4be0:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    4be2:	89 8d       	ldd	r24, Y+25	; 0x19
    4be4:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_write_cmd_4bit>
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	a8 e4       	ldi	r26, 0x48	; 72
    4bee:	b2 e4       	ldi	r27, 0x42	; 66
    4bf0:	8d 8b       	std	Y+21, r24	; 0x15
    4bf2:	9e 8b       	std	Y+22, r25	; 0x16
    4bf4:	af 8b       	std	Y+23, r26	; 0x17
    4bf6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    4bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    4bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    4bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    4c00:	2b ea       	ldi	r18, 0xAB	; 171
    4c02:	3a ea       	ldi	r19, 0xAA	; 170
    4c04:	4a e2       	ldi	r20, 0x2A	; 42
    4c06:	50 e4       	ldi	r21, 0x40	; 64
    4c08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	89 8b       	std	Y+17, r24	; 0x11
    4c12:	9a 8b       	std	Y+18, r25	; 0x12
    4c14:	ab 8b       	std	Y+19, r26	; 0x13
    4c16:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4c18:	69 89       	ldd	r22, Y+17	; 0x11
    4c1a:	7a 89       	ldd	r23, Y+18	; 0x12
    4c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	40 e8       	ldi	r20, 0x80	; 128
    4c26:	5f e3       	ldi	r21, 0x3F	; 63
    4c28:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4c2c:	88 23       	and	r24, r24
    4c2e:	1c f4       	brge	.+6      	; 0x4c36 <LCD_set_cursor+0x8e>
		__ticks = 1;
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	88 8b       	std	Y+16, r24	; 0x10
    4c34:	91 c0       	rjmp	.+290    	; 0x4d58 <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    4c36:	69 89       	ldd	r22, Y+17	; 0x11
    4c38:	7a 89       	ldd	r23, Y+18	; 0x12
    4c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	4f e7       	ldi	r20, 0x7F	; 127
    4c44:	53 e4       	ldi	r21, 0x43	; 67
    4c46:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4c4a:	18 16       	cp	r1, r24
    4c4c:	0c f0       	brlt	.+2      	; 0x4c50 <LCD_set_cursor+0xa8>
    4c4e:	7b c0       	rjmp	.+246    	; 0x4d46 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    4c50:	6d 89       	ldd	r22, Y+21	; 0x15
    4c52:	7e 89       	ldd	r23, Y+22	; 0x16
    4c54:	8f 89       	ldd	r24, Y+23	; 0x17
    4c56:	98 8d       	ldd	r25, Y+24	; 0x18
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	4a e7       	ldi	r20, 0x7A	; 122
    4c5e:	54 e4       	ldi	r21, 0x44	; 68
    4c60:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	8c 87       	std	Y+12, r24	; 0x0c
    4c6a:	9d 87       	std	Y+13, r25	; 0x0d
    4c6c:	ae 87       	std	Y+14, r26	; 0x0e
    4c6e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c70:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c72:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c74:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c76:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c78:	20 e0       	ldi	r18, 0x00	; 0
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	4a ef       	ldi	r20, 0xFA	; 250
    4c7e:	54 e4       	ldi	r21, 0x44	; 68
    4c80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c84:	dc 01       	movw	r26, r24
    4c86:	cb 01       	movw	r24, r22
    4c88:	88 87       	std	Y+8, r24	; 0x08
    4c8a:	99 87       	std	Y+9, r25	; 0x09
    4c8c:	aa 87       	std	Y+10, r26	; 0x0a
    4c8e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c90:	68 85       	ldd	r22, Y+8	; 0x08
    4c92:	79 85       	ldd	r23, Y+9	; 0x09
    4c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c96:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	30 e0       	ldi	r19, 0x00	; 0
    4c9c:	40 e8       	ldi	r20, 0x80	; 128
    4c9e:	5f e3       	ldi	r21, 0x3F	; 63
    4ca0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4ca4:	88 23       	and	r24, r24
    4ca6:	2c f4       	brge	.+10     	; 0x4cb2 <LCD_set_cursor+0x10a>
		__ticks = 1;
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	9f 83       	std	Y+7, r25	; 0x07
    4cae:	8e 83       	std	Y+6, r24	; 0x06
    4cb0:	3f c0       	rjmp	.+126    	; 0x4d30 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4cb2:	68 85       	ldd	r22, Y+8	; 0x08
    4cb4:	79 85       	ldd	r23, Y+9	; 0x09
    4cb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cba:	20 e0       	ldi	r18, 0x00	; 0
    4cbc:	3f ef       	ldi	r19, 0xFF	; 255
    4cbe:	4f e7       	ldi	r20, 0x7F	; 127
    4cc0:	57 e4       	ldi	r21, 0x47	; 71
    4cc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4cc6:	18 16       	cp	r1, r24
    4cc8:	4c f5       	brge	.+82     	; 0x4d1c <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cca:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ccc:	7d 85       	ldd	r23, Y+13	; 0x0d
    4cce:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
    4cd4:	30 e0       	ldi	r19, 0x00	; 0
    4cd6:	40 e2       	ldi	r20, 0x20	; 32
    4cd8:	51 e4       	ldi	r21, 0x41	; 65
    4cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4cde:	dc 01       	movw	r26, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	bc 01       	movw	r22, r24
    4ce4:	cd 01       	movw	r24, r26
    4ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	9f 83       	std	Y+7, r25	; 0x07
    4cf0:	8e 83       	std	Y+6, r24	; 0x06
    4cf2:	0f c0       	rjmp	.+30     	; 0x4d12 <LCD_set_cursor+0x16a>
    4cf4:	88 ec       	ldi	r24, 0xC8	; 200
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	9d 83       	std	Y+5, r25	; 0x05
    4cfa:	8c 83       	std	Y+4, r24	; 0x04
    4cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    4cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    4d00:	01 97       	sbiw	r24, 0x01	; 1
    4d02:	f1 f7       	brne	.-4      	; 0x4d00 <LCD_set_cursor+0x158>
    4d04:	9d 83       	std	Y+5, r25	; 0x05
    4d06:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d08:	8e 81       	ldd	r24, Y+6	; 0x06
    4d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    4d0c:	01 97       	sbiw	r24, 0x01	; 1
    4d0e:	9f 83       	std	Y+7, r25	; 0x07
    4d10:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d12:	8e 81       	ldd	r24, Y+6	; 0x06
    4d14:	9f 81       	ldd	r25, Y+7	; 0x07
    4d16:	00 97       	sbiw	r24, 0x00	; 0
    4d18:	69 f7       	brne	.-38     	; 0x4cf4 <LCD_set_cursor+0x14c>
    4d1a:	24 c0       	rjmp	.+72     	; 0x4d64 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d1c:	68 85       	ldd	r22, Y+8	; 0x08
    4d1e:	79 85       	ldd	r23, Y+9	; 0x09
    4d20:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d22:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	9f 83       	std	Y+7, r25	; 0x07
    4d2e:	8e 83       	std	Y+6, r24	; 0x06
    4d30:	8e 81       	ldd	r24, Y+6	; 0x06
    4d32:	9f 81       	ldd	r25, Y+7	; 0x07
    4d34:	9b 83       	std	Y+3, r25	; 0x03
    4d36:	8a 83       	std	Y+2, r24	; 0x02
    4d38:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d3c:	01 97       	sbiw	r24, 0x01	; 1
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <LCD_set_cursor+0x194>
    4d40:	9b 83       	std	Y+3, r25	; 0x03
    4d42:	8a 83       	std	Y+2, r24	; 0x02
    4d44:	0f c0       	rjmp	.+30     	; 0x4d64 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d46:	69 89       	ldd	r22, Y+17	; 0x11
    4d48:	7a 89       	ldd	r23, Y+18	; 0x12
    4d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d52:	dc 01       	movw	r26, r24
    4d54:	cb 01       	movw	r24, r22
    4d56:	88 8b       	std	Y+16, r24	; 0x10
    4d58:	88 89       	ldd	r24, Y+16	; 0x10
    4d5a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d5c:	89 81       	ldd	r24, Y+1	; 0x01
    4d5e:	8a 95       	dec	r24
    4d60:	f1 f7       	brne	.-4      	; 0x4d5e <LCD_set_cursor+0x1b6>
    4d62:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    4d64:	6b 96       	adiw	r28, 0x1b	; 27
    4d66:	0f b6       	in	r0, 0x3f	; 63
    4d68:	f8 94       	cli
    4d6a:	de bf       	out	0x3e, r29	; 62
    4d6c:	0f be       	out	0x3f, r0	; 63
    4d6e:	cd bf       	out	0x3d, r28	; 61
    4d70:	cf 91       	pop	r28
    4d72:	df 91       	pop	r29
    4d74:	08 95       	ret

00004d76 <LCD_clear>:

void LCD_clear(void){
    4d76:	df 93       	push	r29
    4d78:	cf 93       	push	r28
    4d7a:	cd b7       	in	r28, 0x3d	; 61
    4d7c:	de b7       	in	r29, 0x3e	; 62
    4d7e:	6c 97       	sbiw	r28, 0x1c	; 28
    4d80:	0f b6       	in	r0, 0x3f	; 63
    4d82:	f8 94       	cli
    4d84:	de bf       	out	0x3e, r29	; 62
    4d86:	0f be       	out	0x3f, r0	; 63
    4d88:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_write_cmd_4bit>
    4d90:	80 e0       	ldi	r24, 0x00	; 0
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	a0 e0       	ldi	r26, 0x00	; 0
    4d96:	b0 e4       	ldi	r27, 0x40	; 64
    4d98:	89 8f       	std	Y+25, r24	; 0x19
    4d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    4d9c:	ab 8f       	std	Y+27, r26	; 0x1b
    4d9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4da0:	69 8d       	ldd	r22, Y+25	; 0x19
    4da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	4a ef       	ldi	r20, 0xFA	; 250
    4dae:	54 e4       	ldi	r21, 0x44	; 68
    4db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	8d 8b       	std	Y+21, r24	; 0x15
    4dba:	9e 8b       	std	Y+22, r25	; 0x16
    4dbc:	af 8b       	std	Y+23, r26	; 0x17
    4dbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4dc0:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc2:	7e 89       	ldd	r23, Y+22	; 0x16
    4dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    4dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	40 e8       	ldi	r20, 0x80	; 128
    4dce:	5f e3       	ldi	r21, 0x3F	; 63
    4dd0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4dd4:	88 23       	and	r24, r24
    4dd6:	2c f4       	brge	.+10     	; 0x4de2 <LCD_clear+0x6c>
		__ticks = 1;
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	9c 8b       	std	Y+20, r25	; 0x14
    4dde:	8b 8b       	std	Y+19, r24	; 0x13
    4de0:	3f c0       	rjmp	.+126    	; 0x4e60 <LCD_clear+0xea>
	else if (__tmp > 65535)
    4de2:	6d 89       	ldd	r22, Y+21	; 0x15
    4de4:	7e 89       	ldd	r23, Y+22	; 0x16
    4de6:	8f 89       	ldd	r24, Y+23	; 0x17
    4de8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	3f ef       	ldi	r19, 0xFF	; 255
    4dee:	4f e7       	ldi	r20, 0x7F	; 127
    4df0:	57 e4       	ldi	r21, 0x47	; 71
    4df2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4df6:	18 16       	cp	r1, r24
    4df8:	4c f5       	brge	.+82     	; 0x4e4c <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    4dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	40 e2       	ldi	r20, 0x20	; 32
    4e08:	51 e4       	ldi	r21, 0x41	; 65
    4e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	bc 01       	movw	r22, r24
    4e14:	cd 01       	movw	r24, r26
    4e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	9c 8b       	std	Y+20, r25	; 0x14
    4e20:	8b 8b       	std	Y+19, r24	; 0x13
    4e22:	0f c0       	rjmp	.+30     	; 0x4e42 <LCD_clear+0xcc>
    4e24:	88 ec       	ldi	r24, 0xC8	; 200
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	9a 8b       	std	Y+18, r25	; 0x12
    4e2a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e2c:	89 89       	ldd	r24, Y+17	; 0x11
    4e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    4e30:	01 97       	sbiw	r24, 0x01	; 1
    4e32:	f1 f7       	brne	.-4      	; 0x4e30 <LCD_clear+0xba>
    4e34:	9a 8b       	std	Y+18, r25	; 0x12
    4e36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e38:	8b 89       	ldd	r24, Y+19	; 0x13
    4e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e3c:	01 97       	sbiw	r24, 0x01	; 1
    4e3e:	9c 8b       	std	Y+20, r25	; 0x14
    4e40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e42:	8b 89       	ldd	r24, Y+19	; 0x13
    4e44:	9c 89       	ldd	r25, Y+20	; 0x14
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	69 f7       	brne	.-38     	; 0x4e24 <LCD_clear+0xae>
    4e4a:	14 c0       	rjmp	.+40     	; 0x4e74 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e50:	8f 89       	ldd	r24, Y+23	; 0x17
    4e52:	98 8d       	ldd	r25, Y+24	; 0x18
    4e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e58:	dc 01       	movw	r26, r24
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	9c 8b       	std	Y+20, r25	; 0x14
    4e5e:	8b 8b       	std	Y+19, r24	; 0x13
    4e60:	8b 89       	ldd	r24, Y+19	; 0x13
    4e62:	9c 89       	ldd	r25, Y+20	; 0x14
    4e64:	98 8b       	std	Y+16, r25	; 0x10
    4e66:	8f 87       	std	Y+15, r24	; 0x0f
    4e68:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e6a:	98 89       	ldd	r25, Y+16	; 0x10
    4e6c:	01 97       	sbiw	r24, 0x01	; 1
    4e6e:	f1 f7       	brne	.-4      	; 0x4e6c <LCD_clear+0xf6>
    4e70:	98 8b       	std	Y+16, r25	; 0x10
    4e72:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    4e74:	82 e0       	ldi	r24, 0x02	; 2
    4e76:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_write_cmd_4bit>
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	a0 e0       	ldi	r26, 0x00	; 0
    4e80:	b0 e4       	ldi	r27, 0x40	; 64
    4e82:	8b 87       	std	Y+11, r24	; 0x0b
    4e84:	9c 87       	std	Y+12, r25	; 0x0c
    4e86:	ad 87       	std	Y+13, r26	; 0x0d
    4e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	4a ef       	ldi	r20, 0xFA	; 250
    4e98:	54 e4       	ldi	r21, 0x44	; 68
    4e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	cb 01       	movw	r24, r22
    4ea2:	8f 83       	std	Y+7, r24	; 0x07
    4ea4:	98 87       	std	Y+8, r25	; 0x08
    4ea6:	a9 87       	std	Y+9, r26	; 0x09
    4ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    4eac:	78 85       	ldd	r23, Y+8	; 0x08
    4eae:	89 85       	ldd	r24, Y+9	; 0x09
    4eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e8       	ldi	r20, 0x80	; 128
    4eb8:	5f e3       	ldi	r21, 0x3F	; 63
    4eba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4ebe:	88 23       	and	r24, r24
    4ec0:	2c f4       	brge	.+10     	; 0x4ecc <LCD_clear+0x156>
		__ticks = 1;
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	9e 83       	std	Y+6, r25	; 0x06
    4ec8:	8d 83       	std	Y+5, r24	; 0x05
    4eca:	3f c0       	rjmp	.+126    	; 0x4f4a <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    4ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ece:	78 85       	ldd	r23, Y+8	; 0x08
    4ed0:	89 85       	ldd	r24, Y+9	; 0x09
    4ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ed4:	20 e0       	ldi	r18, 0x00	; 0
    4ed6:	3f ef       	ldi	r19, 0xFF	; 255
    4ed8:	4f e7       	ldi	r20, 0x7F	; 127
    4eda:	57 e4       	ldi	r21, 0x47	; 71
    4edc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4ee0:	18 16       	cp	r1, r24
    4ee2:	4c f5       	brge	.+82     	; 0x4f36 <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eec:	20 e0       	ldi	r18, 0x00	; 0
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	40 e2       	ldi	r20, 0x20	; 32
    4ef2:	51 e4       	ldi	r21, 0x41	; 65
    4ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	bc 01       	movw	r22, r24
    4efe:	cd 01       	movw	r24, r26
    4f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f04:	dc 01       	movw	r26, r24
    4f06:	cb 01       	movw	r24, r22
    4f08:	9e 83       	std	Y+6, r25	; 0x06
    4f0a:	8d 83       	std	Y+5, r24	; 0x05
    4f0c:	0f c0       	rjmp	.+30     	; 0x4f2c <LCD_clear+0x1b6>
    4f0e:	88 ec       	ldi	r24, 0xC8	; 200
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	9c 83       	std	Y+4, r25	; 0x04
    4f14:	8b 83       	std	Y+3, r24	; 0x03
    4f16:	8b 81       	ldd	r24, Y+3	; 0x03
    4f18:	9c 81       	ldd	r25, Y+4	; 0x04
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	f1 f7       	brne	.-4      	; 0x4f1a <LCD_clear+0x1a4>
    4f1e:	9c 83       	std	Y+4, r25	; 0x04
    4f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f22:	8d 81       	ldd	r24, Y+5	; 0x05
    4f24:	9e 81       	ldd	r25, Y+6	; 0x06
    4f26:	01 97       	sbiw	r24, 0x01	; 1
    4f28:	9e 83       	std	Y+6, r25	; 0x06
    4f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f30:	00 97       	sbiw	r24, 0x00	; 0
    4f32:	69 f7       	brne	.-38     	; 0x4f0e <LCD_clear+0x198>
    4f34:	14 c0       	rjmp	.+40     	; 0x4f5e <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f36:	6f 81       	ldd	r22, Y+7	; 0x07
    4f38:	78 85       	ldd	r23, Y+8	; 0x08
    4f3a:	89 85       	ldd	r24, Y+9	; 0x09
    4f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f42:	dc 01       	movw	r26, r24
    4f44:	cb 01       	movw	r24, r22
    4f46:	9e 83       	std	Y+6, r25	; 0x06
    4f48:	8d 83       	std	Y+5, r24	; 0x05
    4f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f4e:	9a 83       	std	Y+2, r25	; 0x02
    4f50:	89 83       	std	Y+1, r24	; 0x01
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	9a 81       	ldd	r25, Y+2	; 0x02
    4f56:	01 97       	sbiw	r24, 0x01	; 1
    4f58:	f1 f7       	brne	.-4      	; 0x4f56 <LCD_clear+0x1e0>
    4f5a:	9a 83       	std	Y+2, r25	; 0x02
    4f5c:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    4f5e:	6c 96       	adiw	r28, 0x1c	; 28
    4f60:	0f b6       	in	r0, 0x3f	; 63
    4f62:	f8 94       	cli
    4f64:	de bf       	out	0x3e, r29	; 62
    4f66:	0f be       	out	0x3f, r0	; 63
    4f68:	cd bf       	out	0x3d, r28	; 61
    4f6a:	cf 91       	pop	r28
    4f6c:	df 91       	pop	r29
    4f6e:	08 95       	ret

00004f70 <LCD_off>:

void LCD_off(void ){
    4f70:	df 93       	push	r29
    4f72:	cf 93       	push	r28
    4f74:	cd b7       	in	r28, 0x3d	; 61
    4f76:	de b7       	in	r29, 0x3e	; 62
    4f78:	2e 97       	sbiw	r28, 0x0e	; 14
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	f8 94       	cli
    4f7e:	de bf       	out	0x3e, r29	; 62
    4f80:	0f be       	out	0x3f, r0	; 63
    4f82:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    4f84:	88 e0       	ldi	r24, 0x08	; 8
    4f86:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_write_cmd_4bit>
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	a8 e4       	ldi	r26, 0x48	; 72
    4f90:	b2 e4       	ldi	r27, 0x42	; 66
    4f92:	8b 87       	std	Y+11, r24	; 0x0b
    4f94:	9c 87       	std	Y+12, r25	; 0x0c
    4f96:	ad 87       	std	Y+13, r26	; 0x0d
    4f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	4a ef       	ldi	r20, 0xFA	; 250
    4fa8:	54 e4       	ldi	r21, 0x44	; 68
    4faa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4fae:	dc 01       	movw	r26, r24
    4fb0:	cb 01       	movw	r24, r22
    4fb2:	8f 83       	std	Y+7, r24	; 0x07
    4fb4:	98 87       	std	Y+8, r25	; 0x08
    4fb6:	a9 87       	std	Y+9, r26	; 0x09
    4fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fba:	6f 81       	ldd	r22, Y+7	; 0x07
    4fbc:	78 85       	ldd	r23, Y+8	; 0x08
    4fbe:	89 85       	ldd	r24, Y+9	; 0x09
    4fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	40 e8       	ldi	r20, 0x80	; 128
    4fc8:	5f e3       	ldi	r21, 0x3F	; 63
    4fca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    4fce:	88 23       	and	r24, r24
    4fd0:	2c f4       	brge	.+10     	; 0x4fdc <LCD_off+0x6c>
		__ticks = 1;
    4fd2:	81 e0       	ldi	r24, 0x01	; 1
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	9e 83       	std	Y+6, r25	; 0x06
    4fd8:	8d 83       	std	Y+5, r24	; 0x05
    4fda:	3f c0       	rjmp	.+126    	; 0x505a <LCD_off+0xea>
	else if (__tmp > 65535)
    4fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    4fde:	78 85       	ldd	r23, Y+8	; 0x08
    4fe0:	89 85       	ldd	r24, Y+9	; 0x09
    4fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	3f ef       	ldi	r19, 0xFF	; 255
    4fe8:	4f e7       	ldi	r20, 0x7F	; 127
    4fea:	57 e4       	ldi	r21, 0x47	; 71
    4fec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    4ff0:	18 16       	cp	r1, r24
    4ff2:	4c f5       	brge	.+82     	; 0x5046 <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ffc:	20 e0       	ldi	r18, 0x00	; 0
    4ffe:	30 e0       	ldi	r19, 0x00	; 0
    5000:	40 e2       	ldi	r20, 0x20	; 32
    5002:	51 e4       	ldi	r21, 0x41	; 65
    5004:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5008:	dc 01       	movw	r26, r24
    500a:	cb 01       	movw	r24, r22
    500c:	bc 01       	movw	r22, r24
    500e:	cd 01       	movw	r24, r26
    5010:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    5018:	9e 83       	std	Y+6, r25	; 0x06
    501a:	8d 83       	std	Y+5, r24	; 0x05
    501c:	0f c0       	rjmp	.+30     	; 0x503c <LCD_off+0xcc>
    501e:	88 ec       	ldi	r24, 0xC8	; 200
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	9c 83       	std	Y+4, r25	; 0x04
    5024:	8b 83       	std	Y+3, r24	; 0x03
    5026:	8b 81       	ldd	r24, Y+3	; 0x03
    5028:	9c 81       	ldd	r25, Y+4	; 0x04
    502a:	01 97       	sbiw	r24, 0x01	; 1
    502c:	f1 f7       	brne	.-4      	; 0x502a <LCD_off+0xba>
    502e:	9c 83       	std	Y+4, r25	; 0x04
    5030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5032:	8d 81       	ldd	r24, Y+5	; 0x05
    5034:	9e 81       	ldd	r25, Y+6	; 0x06
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	9e 83       	std	Y+6, r25	; 0x06
    503a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    503c:	8d 81       	ldd	r24, Y+5	; 0x05
    503e:	9e 81       	ldd	r25, Y+6	; 0x06
    5040:	00 97       	sbiw	r24, 0x00	; 0
    5042:	69 f7       	brne	.-38     	; 0x501e <LCD_off+0xae>
    5044:	14 c0       	rjmp	.+40     	; 0x506e <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5046:	6f 81       	ldd	r22, Y+7	; 0x07
    5048:	78 85       	ldd	r23, Y+8	; 0x08
    504a:	89 85       	ldd	r24, Y+9	; 0x09
    504c:	9a 85       	ldd	r25, Y+10	; 0x0a
    504e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5052:	dc 01       	movw	r26, r24
    5054:	cb 01       	movw	r24, r22
    5056:	9e 83       	std	Y+6, r25	; 0x06
    5058:	8d 83       	std	Y+5, r24	; 0x05
    505a:	8d 81       	ldd	r24, Y+5	; 0x05
    505c:	9e 81       	ldd	r25, Y+6	; 0x06
    505e:	9a 83       	std	Y+2, r25	; 0x02
    5060:	89 83       	std	Y+1, r24	; 0x01
    5062:	89 81       	ldd	r24, Y+1	; 0x01
    5064:	9a 81       	ldd	r25, Y+2	; 0x02
    5066:	01 97       	sbiw	r24, 0x01	; 1
    5068:	f1 f7       	brne	.-4      	; 0x5066 <LCD_off+0xf6>
    506a:	9a 83       	std	Y+2, r25	; 0x02
    506c:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    506e:	2e 96       	adiw	r28, 0x0e	; 14
    5070:	0f b6       	in	r0, 0x3f	; 63
    5072:	f8 94       	cli
    5074:	de bf       	out	0x3e, r29	; 62
    5076:	0f be       	out	0x3f, r0	; 63
    5078:	cd bf       	out	0x3d, r28	; 61
    507a:	cf 91       	pop	r28
    507c:	df 91       	pop	r29
    507e:	08 95       	ret

00005080 <LCD_on>:

void LCD_on(void ){
    5080:	df 93       	push	r29
    5082:	cf 93       	push	r28
    5084:	cd b7       	in	r28, 0x3d	; 61
    5086:	de b7       	in	r29, 0x3e	; 62
    5088:	68 97       	sbiw	r28, 0x18	; 24
    508a:	0f b6       	in	r0, 0x3f	; 63
    508c:	f8 94       	cli
    508e:	de bf       	out	0x3e, r29	; 62
    5090:	0f be       	out	0x3f, r0	; 63
    5092:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    5094:	8c e0       	ldi	r24, 0x0C	; 12
    5096:	0e 94 18 13 	call	0x2630	; 0x2630 <LCD_write_cmd_4bit>
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	a8 e4       	ldi	r26, 0x48	; 72
    50a0:	b2 e4       	ldi	r27, 0x42	; 66
    50a2:	8d 8b       	std	Y+21, r24	; 0x15
    50a4:	9e 8b       	std	Y+22, r25	; 0x16
    50a6:	af 8b       	std	Y+23, r26	; 0x17
    50a8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    50aa:	6d 89       	ldd	r22, Y+21	; 0x15
    50ac:	7e 89       	ldd	r23, Y+22	; 0x16
    50ae:	8f 89       	ldd	r24, Y+23	; 0x17
    50b0:	98 8d       	ldd	r25, Y+24	; 0x18
    50b2:	2b ea       	ldi	r18, 0xAB	; 171
    50b4:	3a ea       	ldi	r19, 0xAA	; 170
    50b6:	4a e2       	ldi	r20, 0x2A	; 42
    50b8:	50 e4       	ldi	r21, 0x40	; 64
    50ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    50be:	dc 01       	movw	r26, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	89 8b       	std	Y+17, r24	; 0x11
    50c4:	9a 8b       	std	Y+18, r25	; 0x12
    50c6:	ab 8b       	std	Y+19, r26	; 0x13
    50c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    50ca:	69 89       	ldd	r22, Y+17	; 0x11
    50cc:	7a 89       	ldd	r23, Y+18	; 0x12
    50ce:	8b 89       	ldd	r24, Y+19	; 0x13
    50d0:	9c 89       	ldd	r25, Y+20	; 0x14
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	40 e8       	ldi	r20, 0x80	; 128
    50d8:	5f e3       	ldi	r21, 0x3F	; 63
    50da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    50de:	88 23       	and	r24, r24
    50e0:	1c f4       	brge	.+6      	; 0x50e8 <LCD_on+0x68>
		__ticks = 1;
    50e2:	81 e0       	ldi	r24, 0x01	; 1
    50e4:	88 8b       	std	Y+16, r24	; 0x10
    50e6:	91 c0       	rjmp	.+290    	; 0x520a <LCD_on+0x18a>
	else if (__tmp > 255)
    50e8:	69 89       	ldd	r22, Y+17	; 0x11
    50ea:	7a 89       	ldd	r23, Y+18	; 0x12
    50ec:	8b 89       	ldd	r24, Y+19	; 0x13
    50ee:	9c 89       	ldd	r25, Y+20	; 0x14
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	30 e0       	ldi	r19, 0x00	; 0
    50f4:	4f e7       	ldi	r20, 0x7F	; 127
    50f6:	53 e4       	ldi	r21, 0x43	; 67
    50f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    50fc:	18 16       	cp	r1, r24
    50fe:	0c f0       	brlt	.+2      	; 0x5102 <LCD_on+0x82>
    5100:	7b c0       	rjmp	.+246    	; 0x51f8 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    5102:	6d 89       	ldd	r22, Y+21	; 0x15
    5104:	7e 89       	ldd	r23, Y+22	; 0x16
    5106:	8f 89       	ldd	r24, Y+23	; 0x17
    5108:	98 8d       	ldd	r25, Y+24	; 0x18
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	4a e7       	ldi	r20, 0x7A	; 122
    5110:	54 e4       	ldi	r21, 0x44	; 68
    5112:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    5116:	dc 01       	movw	r26, r24
    5118:	cb 01       	movw	r24, r22
    511a:	8c 87       	std	Y+12, r24	; 0x0c
    511c:	9d 87       	std	Y+13, r25	; 0x0d
    511e:	ae 87       	std	Y+14, r26	; 0x0e
    5120:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5122:	6c 85       	ldd	r22, Y+12	; 0x0c
    5124:	7d 85       	ldd	r23, Y+13	; 0x0d
    5126:	8e 85       	ldd	r24, Y+14	; 0x0e
    5128:	9f 85       	ldd	r25, Y+15	; 0x0f
    512a:	20 e0       	ldi	r18, 0x00	; 0
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	4a ef       	ldi	r20, 0xFA	; 250
    5130:	54 e4       	ldi	r21, 0x44	; 68
    5132:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5136:	dc 01       	movw	r26, r24
    5138:	cb 01       	movw	r24, r22
    513a:	88 87       	std	Y+8, r24	; 0x08
    513c:	99 87       	std	Y+9, r25	; 0x09
    513e:	aa 87       	std	Y+10, r26	; 0x0a
    5140:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5142:	68 85       	ldd	r22, Y+8	; 0x08
    5144:	79 85       	ldd	r23, Y+9	; 0x09
    5146:	8a 85       	ldd	r24, Y+10	; 0x0a
    5148:	9b 85       	ldd	r25, Y+11	; 0x0b
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	40 e8       	ldi	r20, 0x80	; 128
    5150:	5f e3       	ldi	r21, 0x3F	; 63
    5152:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    5156:	88 23       	and	r24, r24
    5158:	2c f4       	brge	.+10     	; 0x5164 <LCD_on+0xe4>
		__ticks = 1;
    515a:	81 e0       	ldi	r24, 0x01	; 1
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	9f 83       	std	Y+7, r25	; 0x07
    5160:	8e 83       	std	Y+6, r24	; 0x06
    5162:	3f c0       	rjmp	.+126    	; 0x51e2 <LCD_on+0x162>
	else if (__tmp > 65535)
    5164:	68 85       	ldd	r22, Y+8	; 0x08
    5166:	79 85       	ldd	r23, Y+9	; 0x09
    5168:	8a 85       	ldd	r24, Y+10	; 0x0a
    516a:	9b 85       	ldd	r25, Y+11	; 0x0b
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	3f ef       	ldi	r19, 0xFF	; 255
    5170:	4f e7       	ldi	r20, 0x7F	; 127
    5172:	57 e4       	ldi	r21, 0x47	; 71
    5174:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5178:	18 16       	cp	r1, r24
    517a:	4c f5       	brge	.+82     	; 0x51ce <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    517c:	6c 85       	ldd	r22, Y+12	; 0x0c
    517e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5180:	8e 85       	ldd	r24, Y+14	; 0x0e
    5182:	9f 85       	ldd	r25, Y+15	; 0x0f
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	40 e2       	ldi	r20, 0x20	; 32
    518a:	51 e4       	ldi	r21, 0x41	; 65
    518c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	bc 01       	movw	r22, r24
    5196:	cd 01       	movw	r24, r26
    5198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	9f 83       	std	Y+7, r25	; 0x07
    51a2:	8e 83       	std	Y+6, r24	; 0x06
    51a4:	0f c0       	rjmp	.+30     	; 0x51c4 <LCD_on+0x144>
    51a6:	88 ec       	ldi	r24, 0xC8	; 200
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	9d 83       	std	Y+5, r25	; 0x05
    51ac:	8c 83       	std	Y+4, r24	; 0x04
    51ae:	8c 81       	ldd	r24, Y+4	; 0x04
    51b0:	9d 81       	ldd	r25, Y+5	; 0x05
    51b2:	01 97       	sbiw	r24, 0x01	; 1
    51b4:	f1 f7       	brne	.-4      	; 0x51b2 <LCD_on+0x132>
    51b6:	9d 83       	std	Y+5, r25	; 0x05
    51b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51ba:	8e 81       	ldd	r24, Y+6	; 0x06
    51bc:	9f 81       	ldd	r25, Y+7	; 0x07
    51be:	01 97       	sbiw	r24, 0x01	; 1
    51c0:	9f 83       	std	Y+7, r25	; 0x07
    51c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51c4:	8e 81       	ldd	r24, Y+6	; 0x06
    51c6:	9f 81       	ldd	r25, Y+7	; 0x07
    51c8:	00 97       	sbiw	r24, 0x00	; 0
    51ca:	69 f7       	brne	.-38     	; 0x51a6 <LCD_on+0x126>
    51cc:	24 c0       	rjmp	.+72     	; 0x5216 <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51ce:	68 85       	ldd	r22, Y+8	; 0x08
    51d0:	79 85       	ldd	r23, Y+9	; 0x09
    51d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    51d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    51d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	9f 83       	std	Y+7, r25	; 0x07
    51e0:	8e 83       	std	Y+6, r24	; 0x06
    51e2:	8e 81       	ldd	r24, Y+6	; 0x06
    51e4:	9f 81       	ldd	r25, Y+7	; 0x07
    51e6:	9b 83       	std	Y+3, r25	; 0x03
    51e8:	8a 83       	std	Y+2, r24	; 0x02
    51ea:	8a 81       	ldd	r24, Y+2	; 0x02
    51ec:	9b 81       	ldd	r25, Y+3	; 0x03
    51ee:	01 97       	sbiw	r24, 0x01	; 1
    51f0:	f1 f7       	brne	.-4      	; 0x51ee <LCD_on+0x16e>
    51f2:	9b 83       	std	Y+3, r25	; 0x03
    51f4:	8a 83       	std	Y+2, r24	; 0x02
    51f6:	0f c0       	rjmp	.+30     	; 0x5216 <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    51f8:	69 89       	ldd	r22, Y+17	; 0x11
    51fa:	7a 89       	ldd	r23, Y+18	; 0x12
    51fc:	8b 89       	ldd	r24, Y+19	; 0x13
    51fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	88 8b       	std	Y+16, r24	; 0x10
    520a:	88 89       	ldd	r24, Y+16	; 0x10
    520c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    520e:	89 81       	ldd	r24, Y+1	; 0x01
    5210:	8a 95       	dec	r24
    5212:	f1 f7       	brne	.-4      	; 0x5210 <LCD_on+0x190>
    5214:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    5216:	68 96       	adiw	r28, 0x18	; 24
    5218:	0f b6       	in	r0, 0x3f	; 63
    521a:	f8 94       	cli
    521c:	de bf       	out	0x3e, r29	; 62
    521e:	0f be       	out	0x3f, r0	; 63
    5220:	cd bf       	out	0x3d, r28	; 61
    5222:	cf 91       	pop	r28
    5224:	df 91       	pop	r29
    5226:	08 95       	ret

00005228 <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    5228:	df 93       	push	r29
    522a:	cf 93       	push	r28
    522c:	00 d0       	rcall	.+0      	; 0x522e <LCD_create_char+0x6>
    522e:	0f 92       	push	r0
    5230:	cd b7       	in	r28, 0x3d	; 61
    5232:	de b7       	in	r29, 0x3e	; 62
    5234:	9a 83       	std	Y+2, r25	; 0x02
    5236:	89 83       	std	Y+1, r24	; 0x01
    5238:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    523a:	0f 90       	pop	r0
    523c:	0f 90       	pop	r0
    523e:	0f 90       	pop	r0
    5240:	cf 91       	pop	r28
    5242:	df 91       	pop	r29
    5244:	08 95       	ret

00005246 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    5246:	df 93       	push	r29
    5248:	cf 93       	push	r28
    524a:	cd b7       	in	r28, 0x3d	; 61
    524c:	de b7       	in	r29, 0x3e	; 62
    524e:	69 97       	sbiw	r28, 0x19	; 25
    5250:	0f b6       	in	r0, 0x3f	; 63
    5252:	f8 94       	cli
    5254:	de bf       	out	0x3e, r29	; 62
    5256:	0f be       	out	0x3f, r0	; 63
    5258:	cd bf       	out	0x3d, r28	; 61
    525a:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    525c:	89 8d       	ldd	r24, Y+25	; 0x19
    525e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <LCD_write_data_4bit>
    5262:	80 e0       	ldi	r24, 0x00	; 0
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	a8 e4       	ldi	r26, 0x48	; 72
    5268:	b2 e4       	ldi	r27, 0x42	; 66
    526a:	8d 8b       	std	Y+21, r24	; 0x15
    526c:	9e 8b       	std	Y+22, r25	; 0x16
    526e:	af 8b       	std	Y+23, r26	; 0x17
    5270:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5272:	6d 89       	ldd	r22, Y+21	; 0x15
    5274:	7e 89       	ldd	r23, Y+22	; 0x16
    5276:	8f 89       	ldd	r24, Y+23	; 0x17
    5278:	98 8d       	ldd	r25, Y+24	; 0x18
    527a:	2b ea       	ldi	r18, 0xAB	; 171
    527c:	3a ea       	ldi	r19, 0xAA	; 170
    527e:	4a e2       	ldi	r20, 0x2A	; 42
    5280:	50 e4       	ldi	r21, 0x40	; 64
    5282:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	89 8b       	std	Y+17, r24	; 0x11
    528c:	9a 8b       	std	Y+18, r25	; 0x12
    528e:	ab 8b       	std	Y+19, r26	; 0x13
    5290:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5292:	69 89       	ldd	r22, Y+17	; 0x11
    5294:	7a 89       	ldd	r23, Y+18	; 0x12
    5296:	8b 89       	ldd	r24, Y+19	; 0x13
    5298:	9c 89       	ldd	r25, Y+20	; 0x14
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	40 e8       	ldi	r20, 0x80	; 128
    52a0:	5f e3       	ldi	r21, 0x3F	; 63
    52a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    52a6:	88 23       	and	r24, r24
    52a8:	1c f4       	brge	.+6      	; 0x52b0 <LCD_write_char+0x6a>
		__ticks = 1;
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	88 8b       	std	Y+16, r24	; 0x10
    52ae:	91 c0       	rjmp	.+290    	; 0x53d2 <LCD_write_char+0x18c>
	else if (__tmp > 255)
    52b0:	69 89       	ldd	r22, Y+17	; 0x11
    52b2:	7a 89       	ldd	r23, Y+18	; 0x12
    52b4:	8b 89       	ldd	r24, Y+19	; 0x13
    52b6:	9c 89       	ldd	r25, Y+20	; 0x14
    52b8:	20 e0       	ldi	r18, 0x00	; 0
    52ba:	30 e0       	ldi	r19, 0x00	; 0
    52bc:	4f e7       	ldi	r20, 0x7F	; 127
    52be:	53 e4       	ldi	r21, 0x43	; 67
    52c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    52c4:	18 16       	cp	r1, r24
    52c6:	0c f0       	brlt	.+2      	; 0x52ca <LCD_write_char+0x84>
    52c8:	7b c0       	rjmp	.+246    	; 0x53c0 <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    52ca:	6d 89       	ldd	r22, Y+21	; 0x15
    52cc:	7e 89       	ldd	r23, Y+22	; 0x16
    52ce:	8f 89       	ldd	r24, Y+23	; 0x17
    52d0:	98 8d       	ldd	r25, Y+24	; 0x18
    52d2:	20 e0       	ldi	r18, 0x00	; 0
    52d4:	30 e0       	ldi	r19, 0x00	; 0
    52d6:	4a e7       	ldi	r20, 0x7A	; 122
    52d8:	54 e4       	ldi	r21, 0x44	; 68
    52da:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    52de:	dc 01       	movw	r26, r24
    52e0:	cb 01       	movw	r24, r22
    52e2:	8c 87       	std	Y+12, r24	; 0x0c
    52e4:	9d 87       	std	Y+13, r25	; 0x0d
    52e6:	ae 87       	std	Y+14, r26	; 0x0e
    52e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    52ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    52ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    52f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    52f2:	20 e0       	ldi	r18, 0x00	; 0
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	4a ef       	ldi	r20, 0xFA	; 250
    52f8:	54 e4       	ldi	r21, 0x44	; 68
    52fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    52fe:	dc 01       	movw	r26, r24
    5300:	cb 01       	movw	r24, r22
    5302:	88 87       	std	Y+8, r24	; 0x08
    5304:	99 87       	std	Y+9, r25	; 0x09
    5306:	aa 87       	std	Y+10, r26	; 0x0a
    5308:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    530a:	68 85       	ldd	r22, Y+8	; 0x08
    530c:	79 85       	ldd	r23, Y+9	; 0x09
    530e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5310:	9b 85       	ldd	r25, Y+11	; 0x0b
    5312:	20 e0       	ldi	r18, 0x00	; 0
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	40 e8       	ldi	r20, 0x80	; 128
    5318:	5f e3       	ldi	r21, 0x3F	; 63
    531a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    531e:	88 23       	and	r24, r24
    5320:	2c f4       	brge	.+10     	; 0x532c <LCD_write_char+0xe6>
		__ticks = 1;
    5322:	81 e0       	ldi	r24, 0x01	; 1
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	9f 83       	std	Y+7, r25	; 0x07
    5328:	8e 83       	std	Y+6, r24	; 0x06
    532a:	3f c0       	rjmp	.+126    	; 0x53aa <LCD_write_char+0x164>
	else if (__tmp > 65535)
    532c:	68 85       	ldd	r22, Y+8	; 0x08
    532e:	79 85       	ldd	r23, Y+9	; 0x09
    5330:	8a 85       	ldd	r24, Y+10	; 0x0a
    5332:	9b 85       	ldd	r25, Y+11	; 0x0b
    5334:	20 e0       	ldi	r18, 0x00	; 0
    5336:	3f ef       	ldi	r19, 0xFF	; 255
    5338:	4f e7       	ldi	r20, 0x7F	; 127
    533a:	57 e4       	ldi	r21, 0x47	; 71
    533c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    5340:	18 16       	cp	r1, r24
    5342:	4c f5       	brge	.+82     	; 0x5396 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5344:	6c 85       	ldd	r22, Y+12	; 0x0c
    5346:	7d 85       	ldd	r23, Y+13	; 0x0d
    5348:	8e 85       	ldd	r24, Y+14	; 0x0e
    534a:	9f 85       	ldd	r25, Y+15	; 0x0f
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	40 e2       	ldi	r20, 0x20	; 32
    5352:	51 e4       	ldi	r21, 0x41	; 65
    5354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5358:	dc 01       	movw	r26, r24
    535a:	cb 01       	movw	r24, r22
    535c:	bc 01       	movw	r22, r24
    535e:	cd 01       	movw	r24, r26
    5360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5364:	dc 01       	movw	r26, r24
    5366:	cb 01       	movw	r24, r22
    5368:	9f 83       	std	Y+7, r25	; 0x07
    536a:	8e 83       	std	Y+6, r24	; 0x06
    536c:	0f c0       	rjmp	.+30     	; 0x538c <LCD_write_char+0x146>
    536e:	88 ec       	ldi	r24, 0xC8	; 200
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	9d 83       	std	Y+5, r25	; 0x05
    5374:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5376:	8c 81       	ldd	r24, Y+4	; 0x04
    5378:	9d 81       	ldd	r25, Y+5	; 0x05
    537a:	01 97       	sbiw	r24, 0x01	; 1
    537c:	f1 f7       	brne	.-4      	; 0x537a <LCD_write_char+0x134>
    537e:	9d 83       	std	Y+5, r25	; 0x05
    5380:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5382:	8e 81       	ldd	r24, Y+6	; 0x06
    5384:	9f 81       	ldd	r25, Y+7	; 0x07
    5386:	01 97       	sbiw	r24, 0x01	; 1
    5388:	9f 83       	std	Y+7, r25	; 0x07
    538a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    538c:	8e 81       	ldd	r24, Y+6	; 0x06
    538e:	9f 81       	ldd	r25, Y+7	; 0x07
    5390:	00 97       	sbiw	r24, 0x00	; 0
    5392:	69 f7       	brne	.-38     	; 0x536e <LCD_write_char+0x128>
    5394:	24 c0       	rjmp	.+72     	; 0x53de <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5396:	68 85       	ldd	r22, Y+8	; 0x08
    5398:	79 85       	ldd	r23, Y+9	; 0x09
    539a:	8a 85       	ldd	r24, Y+10	; 0x0a
    539c:	9b 85       	ldd	r25, Y+11	; 0x0b
    539e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    53a2:	dc 01       	movw	r26, r24
    53a4:	cb 01       	movw	r24, r22
    53a6:	9f 83       	std	Y+7, r25	; 0x07
    53a8:	8e 83       	std	Y+6, r24	; 0x06
    53aa:	8e 81       	ldd	r24, Y+6	; 0x06
    53ac:	9f 81       	ldd	r25, Y+7	; 0x07
    53ae:	9b 83       	std	Y+3, r25	; 0x03
    53b0:	8a 83       	std	Y+2, r24	; 0x02
    53b2:	8a 81       	ldd	r24, Y+2	; 0x02
    53b4:	9b 81       	ldd	r25, Y+3	; 0x03
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	f1 f7       	brne	.-4      	; 0x53b6 <LCD_write_char+0x170>
    53ba:	9b 83       	std	Y+3, r25	; 0x03
    53bc:	8a 83       	std	Y+2, r24	; 0x02
    53be:	0f c0       	rjmp	.+30     	; 0x53de <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    53c0:	69 89       	ldd	r22, Y+17	; 0x11
    53c2:	7a 89       	ldd	r23, Y+18	; 0x12
    53c4:	8b 89       	ldd	r24, Y+19	; 0x13
    53c6:	9c 89       	ldd	r25, Y+20	; 0x14
    53c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	88 8b       	std	Y+16, r24	; 0x10
    53d2:	88 89       	ldd	r24, Y+16	; 0x10
    53d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    53d6:	89 81       	ldd	r24, Y+1	; 0x01
    53d8:	8a 95       	dec	r24
    53da:	f1 f7       	brne	.-4      	; 0x53d8 <LCD_write_char+0x192>
    53dc:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    53de:	69 96       	adiw	r28, 0x19	; 25
    53e0:	0f b6       	in	r0, 0x3f	; 63
    53e2:	f8 94       	cli
    53e4:	de bf       	out	0x3e, r29	; 62
    53e6:	0f be       	out	0x3f, r0	; 63
    53e8:	cd bf       	out	0x3d, r28	; 61
    53ea:	cf 91       	pop	r28
    53ec:	df 91       	pop	r29
    53ee:	08 95       	ret

000053f0 <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    53f0:	df 93       	push	r29
    53f2:	cf 93       	push	r28
    53f4:	00 d0       	rcall	.+0      	; 0x53f6 <LCD_write_str+0x6>
    53f6:	0f 92       	push	r0
    53f8:	cd b7       	in	r28, 0x3d	; 61
    53fa:	de b7       	in	r29, 0x3e	; 62
    53fc:	9b 83       	std	Y+3, r25	; 0x03
    53fe:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    5400:	19 82       	std	Y+1, r1	; 0x01
    5402:	0e c0       	rjmp	.+28     	; 0x5420 <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    5404:	89 81       	ldd	r24, Y+1	; 0x01
    5406:	28 2f       	mov	r18, r24
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	8a 81       	ldd	r24, Y+2	; 0x02
    540c:	9b 81       	ldd	r25, Y+3	; 0x03
    540e:	fc 01       	movw	r30, r24
    5410:	e2 0f       	add	r30, r18
    5412:	f3 1f       	adc	r31, r19
    5414:	80 81       	ld	r24, Z
    5416:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>
		// Increment the string index
		i++;
    541a:	89 81       	ldd	r24, Y+1	; 0x01
    541c:	8f 5f       	subi	r24, 0xFF	; 255
    541e:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    5420:	89 81       	ldd	r24, Y+1	; 0x01
    5422:	28 2f       	mov	r18, r24
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	8a 81       	ldd	r24, Y+2	; 0x02
    5428:	9b 81       	ldd	r25, Y+3	; 0x03
    542a:	fc 01       	movw	r30, r24
    542c:	e2 0f       	add	r30, r18
    542e:	f3 1f       	adc	r31, r19
    5430:	80 81       	ld	r24, Z
    5432:	88 23       	and	r24, r24
    5434:	39 f7       	brne	.-50     	; 0x5404 <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    5436:	0f 90       	pop	r0
    5438:	0f 90       	pop	r0
    543a:	0f 90       	pop	r0
    543c:	cf 91       	pop	r28
    543e:	df 91       	pop	r29
    5440:	08 95       	ret

00005442 <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    5442:	0f 93       	push	r16
    5444:	1f 93       	push	r17
    5446:	df 93       	push	r29
    5448:	cf 93       	push	r28
    544a:	cd b7       	in	r28, 0x3d	; 61
    544c:	de b7       	in	r29, 0x3e	; 62
    544e:	60 97       	sbiw	r28, 0x10	; 16
    5450:	0f b6       	in	r0, 0x3f	; 63
    5452:	f8 94       	cli
    5454:	de bf       	out	0x3e, r29	; 62
    5456:	0f be       	out	0x3f, r0	; 63
    5458:	cd bf       	out	0x3d, r28	; 61
    545a:	6d 87       	std	Y+13, r22	; 0x0d
    545c:	7e 87       	std	Y+14, r23	; 0x0e
    545e:	8f 87       	std	Y+15, r24	; 0x0f
    5460:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    5462:	8d 85       	ldd	r24, Y+13	; 0x0d
    5464:	9e 85       	ldd	r25, Y+14	; 0x0e
    5466:	af 85       	ldd	r26, Y+15	; 0x0f
    5468:	b8 89       	ldd	r27, Y+16	; 0x10
    546a:	00 97       	sbiw	r24, 0x00	; 0
    546c:	a1 05       	cpc	r26, r1
    546e:	b1 05       	cpc	r27, r1
    5470:	21 f4       	brne	.+8      	; 0x547a <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    5472:	80 e3       	ldi	r24, 0x30	; 48
    5474:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>
    5478:	18 c0       	rjmp	.+48     	; 0x54aa <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    547a:	8d 85       	ldd	r24, Y+13	; 0x0d
    547c:	9e 85       	ldd	r25, Y+14	; 0x0e
    547e:	af 85       	ldd	r26, Y+15	; 0x0f
    5480:	b8 89       	ldd	r27, Y+16	; 0x10
    5482:	bb 23       	and	r27, r27
    5484:	94 f4       	brge	.+36     	; 0x54aa <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    5486:	8d e2       	ldi	r24, 0x2D	; 45
    5488:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    548c:	8d 85       	ldd	r24, Y+13	; 0x0d
    548e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5490:	af 85       	ldd	r26, Y+15	; 0x0f
    5492:	b8 89       	ldd	r27, Y+16	; 0x10
    5494:	b0 95       	com	r27
    5496:	a0 95       	com	r26
    5498:	90 95       	com	r25
    549a:	81 95       	neg	r24
    549c:	9f 4f       	sbci	r25, 0xFF	; 255
    549e:	af 4f       	sbci	r26, 0xFF	; 255
    54a0:	bf 4f       	sbci	r27, 0xFF	; 255
    54a2:	8d 87       	std	Y+13, r24	; 0x0d
    54a4:	9e 87       	std	Y+14, r25	; 0x0e
    54a6:	af 87       	std	Y+15, r26	; 0x0f
    54a8:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    54aa:	1a 82       	std	Y+2, r1	; 0x02
    54ac:	2d c0       	rjmp	.+90     	; 0x5508 <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    54ae:	8a 81       	ldd	r24, Y+2	; 0x02
    54b0:	08 2f       	mov	r16, r24
    54b2:	10 e0       	ldi	r17, 0x00	; 0
    54b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54b8:	af 85       	ldd	r26, Y+15	; 0x0f
    54ba:	b8 89       	ldd	r27, Y+16	; 0x10
    54bc:	2a e0       	ldi	r18, 0x0A	; 10
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	40 e0       	ldi	r20, 0x00	; 0
    54c2:	50 e0       	ldi	r21, 0x00	; 0
    54c4:	bc 01       	movw	r22, r24
    54c6:	cd 01       	movw	r24, r26
    54c8:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__divmodsi4>
    54cc:	dc 01       	movw	r26, r24
    54ce:	cb 01       	movw	r24, r22
    54d0:	28 2f       	mov	r18, r24
    54d2:	ce 01       	movw	r24, r28
    54d4:	03 96       	adiw	r24, 0x03	; 3
    54d6:	fc 01       	movw	r30, r24
    54d8:	e0 0f       	add	r30, r16
    54da:	f1 1f       	adc	r31, r17
    54dc:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    54de:	8d 85       	ldd	r24, Y+13	; 0x0d
    54e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    54e2:	af 85       	ldd	r26, Y+15	; 0x0f
    54e4:	b8 89       	ldd	r27, Y+16	; 0x10
    54e6:	2a e0       	ldi	r18, 0x0A	; 10
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e0       	ldi	r20, 0x00	; 0
    54ec:	50 e0       	ldi	r21, 0x00	; 0
    54ee:	bc 01       	movw	r22, r24
    54f0:	cd 01       	movw	r24, r26
    54f2:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__divmodsi4>
    54f6:	da 01       	movw	r26, r20
    54f8:	c9 01       	movw	r24, r18
    54fa:	8d 87       	std	Y+13, r24	; 0x0d
    54fc:	9e 87       	std	Y+14, r25	; 0x0e
    54fe:	af 87       	std	Y+15, r26	; 0x0f
    5500:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    5502:	8a 81       	ldd	r24, Y+2	; 0x02
    5504:	8f 5f       	subi	r24, 0xFF	; 255
    5506:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    5508:	8a 81       	ldd	r24, Y+2	; 0x02
    550a:	8b 30       	cpi	r24, 0x0B	; 11
    550c:	40 f4       	brcc	.+16     	; 0x551e <LCD_write_s32_number+0xdc>
    550e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5510:	9e 85       	ldd	r25, Y+14	; 0x0e
    5512:	af 85       	ldd	r26, Y+15	; 0x0f
    5514:	b8 89       	ldd	r27, Y+16	; 0x10
    5516:	00 97       	sbiw	r24, 0x00	; 0
    5518:	a1 05       	cpc	r26, r1
    551a:	b1 05       	cpc	r27, r1
    551c:	41 f6       	brne	.-112    	; 0x54ae <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	89 83       	std	Y+1, r24	; 0x01
    5522:	14 c0       	rjmp	.+40     	; 0x554c <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    5524:	8a 81       	ldd	r24, Y+2	; 0x02
    5526:	28 2f       	mov	r18, r24
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	89 81       	ldd	r24, Y+1	; 0x01
    552c:	88 2f       	mov	r24, r24
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	28 1b       	sub	r18, r24
    5532:	39 0b       	sbc	r19, r25
    5534:	ce 01       	movw	r24, r28
    5536:	03 96       	adiw	r24, 0x03	; 3
    5538:	fc 01       	movw	r30, r24
    553a:	e2 0f       	add	r30, r18
    553c:	f3 1f       	adc	r31, r19
    553e:	80 81       	ld	r24, Z
    5540:	80 5d       	subi	r24, 0xD0	; 208
    5542:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	8f 5f       	subi	r24, 0xFF	; 255
    554a:	89 83       	std	Y+1, r24	; 0x01
    554c:	89 81       	ldd	r24, Y+1	; 0x01
    554e:	28 2f       	mov	r18, r24
    5550:	30 e0       	ldi	r19, 0x00	; 0
    5552:	8a 81       	ldd	r24, Y+2	; 0x02
    5554:	88 2f       	mov	r24, r24
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	01 96       	adiw	r24, 0x01	; 1
    555a:	28 17       	cp	r18, r24
    555c:	39 07       	cpc	r19, r25
    555e:	14 f3       	brlt	.-60     	; 0x5524 <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    5560:	60 96       	adiw	r28, 0x10	; 16
    5562:	0f b6       	in	r0, 0x3f	; 63
    5564:	f8 94       	cli
    5566:	de bf       	out	0x3e, r29	; 62
    5568:	0f be       	out	0x3f, r0	; 63
    556a:	cd bf       	out	0x3d, r28	; 61
    556c:	cf 91       	pop	r28
    556e:	df 91       	pop	r29
    5570:	1f 91       	pop	r17
    5572:	0f 91       	pop	r16
    5574:	08 95       	ret

00005576 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    5576:	ef 92       	push	r14
    5578:	ff 92       	push	r15
    557a:	0f 93       	push	r16
    557c:	1f 93       	push	r17
    557e:	df 93       	push	r29
    5580:	cf 93       	push	r28
    5582:	cd b7       	in	r28, 0x3d	; 61
    5584:	de b7       	in	r29, 0x3e	; 62
    5586:	2d 97       	sbiw	r28, 0x0d	; 13
    5588:	0f b6       	in	r0, 0x3f	; 63
    558a:	f8 94       	cli
    558c:	de bf       	out	0x3e, r29	; 62
    558e:	0f be       	out	0x3f, r0	; 63
    5590:	cd bf       	out	0x3d, r28	; 61
    5592:	69 87       	std	Y+9, r22	; 0x09
    5594:	7a 87       	std	Y+10, r23	; 0x0a
    5596:	8b 87       	std	Y+11, r24	; 0x0b
    5598:	9c 87       	std	Y+12, r25	; 0x0c
    559a:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    559c:	69 85       	ldd	r22, Y+9	; 0x09
    559e:	7a 85       	ldd	r23, Y+10	; 0x0a
    55a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    55a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    55a4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    55a8:	dc 01       	movw	r26, r24
    55aa:	cb 01       	movw	r24, r22
    55ac:	8d 83       	std	Y+5, r24	; 0x05
    55ae:	9e 83       	std	Y+6, r25	; 0x06
    55b0:	af 83       	std	Y+7, r26	; 0x07
    55b2:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    55b4:	6d 81       	ldd	r22, Y+5	; 0x05
    55b6:	7e 81       	ldd	r23, Y+6	; 0x06
    55b8:	8f 81       	ldd	r24, Y+7	; 0x07
    55ba:	98 85       	ldd	r25, Y+8	; 0x08
    55bc:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    55c0:	9b 01       	movw	r18, r22
    55c2:	ac 01       	movw	r20, r24
    55c4:	69 85       	ldd	r22, Y+9	; 0x09
    55c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    55c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    55cc:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    55d0:	dc 01       	movw	r26, r24
    55d2:	cb 01       	movw	r24, r22
    55d4:	7c 01       	movw	r14, r24
    55d6:	8d 01       	movw	r16, r26
    55d8:	8a e0       	ldi	r24, 0x0A	; 10
    55da:	6d 85       	ldd	r22, Y+13	; 0x0d
    55dc:	0e 94 4d 09 	call	0x129a	; 0x129a <LCD_pow>
    55e0:	dc 01       	movw	r26, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	bc 01       	movw	r22, r24
    55e6:	cd 01       	movw	r24, r26
    55e8:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    55ec:	9b 01       	movw	r18, r22
    55ee:	ac 01       	movw	r20, r24
    55f0:	c8 01       	movw	r24, r16
    55f2:	b7 01       	movw	r22, r14
    55f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	bc 01       	movw	r22, r24
    55fe:	cd 01       	movw	r24, r26
    5600:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    5604:	dc 01       	movw	r26, r24
    5606:	cb 01       	movw	r24, r22
    5608:	89 83       	std	Y+1, r24	; 0x01
    560a:	9a 83       	std	Y+2, r25	; 0x02
    560c:	ab 83       	std	Y+3, r26	; 0x03
    560e:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    5610:	8d 81       	ldd	r24, Y+5	; 0x05
    5612:	9e 81       	ldd	r25, Y+6	; 0x06
    5614:	af 81       	ldd	r26, Y+7	; 0x07
    5616:	b8 85       	ldd	r27, Y+8	; 0x08
    5618:	bc 01       	movw	r22, r24
    561a:	cd 01       	movw	r24, r26
    561c:	0e 94 21 2a 	call	0x5442	; 0x5442 <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    5620:	8e e2       	ldi	r24, 0x2E	; 46
    5622:	0e 94 23 29 	call	0x5246	; 0x5246 <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    5626:	89 81       	ldd	r24, Y+1	; 0x01
    5628:	9a 81       	ldd	r25, Y+2	; 0x02
    562a:	ab 81       	ldd	r26, Y+3	; 0x03
    562c:	bc 81       	ldd	r27, Y+4	; 0x04
    562e:	8f 77       	andi	r24, 0x7F	; 127
    5630:	bc 01       	movw	r22, r24
    5632:	cd 01       	movw	r24, r26
    5634:	0e 94 21 2a 	call	0x5442	; 0x5442 <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    5638:	2d 96       	adiw	r28, 0x0d	; 13
    563a:	0f b6       	in	r0, 0x3f	; 63
    563c:	f8 94       	cli
    563e:	de bf       	out	0x3e, r29	; 62
    5640:	0f be       	out	0x3f, r0	; 63
    5642:	cd bf       	out	0x3d, r28	; 61
    5644:	cf 91       	pop	r28
    5646:	df 91       	pop	r29
    5648:	1f 91       	pop	r17
    564a:	0f 91       	pop	r16
    564c:	ff 90       	pop	r15
    564e:	ef 90       	pop	r14
    5650:	08 95       	ret

00005652 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    5652:	df 93       	push	r29
    5654:	cf 93       	push	r28
    5656:	00 d0       	rcall	.+0      	; 0x5658 <DIO_void_set_port_dir+0x6>
    5658:	cd b7       	in	r28, 0x3d	; 61
    565a:	de b7       	in	r29, 0x3e	; 62
    565c:	89 83       	std	Y+1, r24	; 0x01
    565e:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    5660:	89 81       	ldd	r24, Y+1	; 0x01
    5662:	88 2f       	mov	r24, r24
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	88 0f       	add	r24, r24
    5668:	99 1f       	adc	r25, r25
    566a:	fc 01       	movw	r30, r24
    566c:	ee 57       	subi	r30, 0x7E	; 126
    566e:	fe 4f       	sbci	r31, 0xFE	; 254
    5670:	01 90       	ld	r0, Z+
    5672:	f0 81       	ld	r31, Z
    5674:	e0 2d       	mov	r30, r0
    5676:	8a 81       	ldd	r24, Y+2	; 0x02
    5678:	80 83       	st	Z, r24
}
    567a:	0f 90       	pop	r0
    567c:	0f 90       	pop	r0
    567e:	cf 91       	pop	r28
    5680:	df 91       	pop	r29
    5682:	08 95       	ret

00005684 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    5684:	df 93       	push	r29
    5686:	cf 93       	push	r28
    5688:	0f 92       	push	r0
    568a:	cd b7       	in	r28, 0x3d	; 61
    568c:	de b7       	in	r29, 0x3e	; 62
    568e:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	88 2f       	mov	r24, r24
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	88 0f       	add	r24, r24
    5698:	99 1f       	adc	r25, r25
    569a:	fc 01       	movw	r30, r24
    569c:	ee 57       	subi	r30, 0x7E	; 126
    569e:	fe 4f       	sbci	r31, 0xFE	; 254
    56a0:	01 90       	ld	r0, Z+
    56a2:	f0 81       	ld	r31, Z
    56a4:	e0 2d       	mov	r30, r0
    56a6:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    56a8:	89 81       	ldd	r24, Y+1	; 0x01
    56aa:	88 2f       	mov	r24, r24
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	88 0f       	add	r24, r24
    56b0:	99 1f       	adc	r25, r25
    56b2:	fc 01       	movw	r30, r24
    56b4:	e6 57       	subi	r30, 0x76	; 118
    56b6:	fe 4f       	sbci	r31, 0xFE	; 254
    56b8:	01 90       	ld	r0, Z+
    56ba:	f0 81       	ld	r31, Z
    56bc:	e0 2d       	mov	r30, r0
    56be:	8f ef       	ldi	r24, 0xFF	; 255
    56c0:	80 83       	st	Z, r24
}
    56c2:	0f 90       	pop	r0
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret

000056ca <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    56ca:	df 93       	push	r29
    56cc:	cf 93       	push	r28
    56ce:	00 d0       	rcall	.+0      	; 0x56d0 <DIO_void_set_pin_dir+0x6>
    56d0:	0f 92       	push	r0
    56d2:	cd b7       	in	r28, 0x3d	; 61
    56d4:	de b7       	in	r29, 0x3e	; 62
    56d6:	89 83       	std	Y+1, r24	; 0x01
    56d8:	6a 83       	std	Y+2, r22	; 0x02
    56da:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    56dc:	8b 81       	ldd	r24, Y+3	; 0x03
    56de:	88 23       	and	r24, r24
    56e0:	29 f1       	breq	.+74     	; 0x572c <DIO_void_set_pin_dir+0x62>
    56e2:	89 81       	ldd	r24, Y+1	; 0x01
    56e4:	88 2f       	mov	r24, r24
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	88 0f       	add	r24, r24
    56ea:	99 1f       	adc	r25, r25
    56ec:	fc 01       	movw	r30, r24
    56ee:	ee 57       	subi	r30, 0x7E	; 126
    56f0:	fe 4f       	sbci	r31, 0xFE	; 254
    56f2:	a0 81       	ld	r26, Z
    56f4:	b1 81       	ldd	r27, Z+1	; 0x01
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
    56f8:	88 2f       	mov	r24, r24
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	88 0f       	add	r24, r24
    56fe:	99 1f       	adc	r25, r25
    5700:	fc 01       	movw	r30, r24
    5702:	ee 57       	subi	r30, 0x7E	; 126
    5704:	fe 4f       	sbci	r31, 0xFE	; 254
    5706:	01 90       	ld	r0, Z+
    5708:	f0 81       	ld	r31, Z
    570a:	e0 2d       	mov	r30, r0
    570c:	80 81       	ld	r24, Z
    570e:	48 2f       	mov	r20, r24
    5710:	8a 81       	ldd	r24, Y+2	; 0x02
    5712:	28 2f       	mov	r18, r24
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	02 2e       	mov	r0, r18
    571c:	02 c0       	rjmp	.+4      	; 0x5722 <DIO_void_set_pin_dir+0x58>
    571e:	88 0f       	add	r24, r24
    5720:	99 1f       	adc	r25, r25
    5722:	0a 94       	dec	r0
    5724:	e2 f7       	brpl	.-8      	; 0x571e <DIO_void_set_pin_dir+0x54>
    5726:	84 2b       	or	r24, r20
    5728:	8c 93       	st	X, r24
    572a:	25 c0       	rjmp	.+74     	; 0x5776 <DIO_void_set_pin_dir+0xac>
    572c:	89 81       	ldd	r24, Y+1	; 0x01
    572e:	88 2f       	mov	r24, r24
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	88 0f       	add	r24, r24
    5734:	99 1f       	adc	r25, r25
    5736:	fc 01       	movw	r30, r24
    5738:	ee 57       	subi	r30, 0x7E	; 126
    573a:	fe 4f       	sbci	r31, 0xFE	; 254
    573c:	a0 81       	ld	r26, Z
    573e:	b1 81       	ldd	r27, Z+1	; 0x01
    5740:	89 81       	ldd	r24, Y+1	; 0x01
    5742:	88 2f       	mov	r24, r24
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	88 0f       	add	r24, r24
    5748:	99 1f       	adc	r25, r25
    574a:	fc 01       	movw	r30, r24
    574c:	ee 57       	subi	r30, 0x7E	; 126
    574e:	fe 4f       	sbci	r31, 0xFE	; 254
    5750:	01 90       	ld	r0, Z+
    5752:	f0 81       	ld	r31, Z
    5754:	e0 2d       	mov	r30, r0
    5756:	80 81       	ld	r24, Z
    5758:	48 2f       	mov	r20, r24
    575a:	8a 81       	ldd	r24, Y+2	; 0x02
    575c:	28 2f       	mov	r18, r24
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	02 2e       	mov	r0, r18
    5766:	02 c0       	rjmp	.+4      	; 0x576c <DIO_void_set_pin_dir+0xa2>
    5768:	88 0f       	add	r24, r24
    576a:	99 1f       	adc	r25, r25
    576c:	0a 94       	dec	r0
    576e:	e2 f7       	brpl	.-8      	; 0x5768 <DIO_void_set_pin_dir+0x9e>
    5770:	80 95       	com	r24
    5772:	84 23       	and	r24, r20
    5774:	8c 93       	st	X, r24
}
    5776:	0f 90       	pop	r0
    5778:	0f 90       	pop	r0
    577a:	0f 90       	pop	r0
    577c:	cf 91       	pop	r28
    577e:	df 91       	pop	r29
    5780:	08 95       	ret

00005782 <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5782:	df 93       	push	r29
    5784:	cf 93       	push	r28
    5786:	00 d0       	rcall	.+0      	; 0x5788 <DIO_void_set_pin_in_pullUP+0x6>
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
    578c:	89 83       	std	Y+1, r24	; 0x01
    578e:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5790:	89 81       	ldd	r24, Y+1	; 0x01
    5792:	88 2f       	mov	r24, r24
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	88 0f       	add	r24, r24
    5798:	99 1f       	adc	r25, r25
    579a:	fc 01       	movw	r30, r24
    579c:	ee 57       	subi	r30, 0x7E	; 126
    579e:	fe 4f       	sbci	r31, 0xFE	; 254
    57a0:	a0 81       	ld	r26, Z
    57a2:	b1 81       	ldd	r27, Z+1	; 0x01
    57a4:	89 81       	ldd	r24, Y+1	; 0x01
    57a6:	88 2f       	mov	r24, r24
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	88 0f       	add	r24, r24
    57ac:	99 1f       	adc	r25, r25
    57ae:	fc 01       	movw	r30, r24
    57b0:	ee 57       	subi	r30, 0x7E	; 126
    57b2:	fe 4f       	sbci	r31, 0xFE	; 254
    57b4:	01 90       	ld	r0, Z+
    57b6:	f0 81       	ld	r31, Z
    57b8:	e0 2d       	mov	r30, r0
    57ba:	80 81       	ld	r24, Z
    57bc:	48 2f       	mov	r20, r24
    57be:	8a 81       	ldd	r24, Y+2	; 0x02
    57c0:	28 2f       	mov	r18, r24
    57c2:	30 e0       	ldi	r19, 0x00	; 0
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	02 c0       	rjmp	.+4      	; 0x57ce <DIO_void_set_pin_in_pullUP+0x4c>
    57ca:	88 0f       	add	r24, r24
    57cc:	99 1f       	adc	r25, r25
    57ce:	2a 95       	dec	r18
    57d0:	e2 f7       	brpl	.-8      	; 0x57ca <DIO_void_set_pin_in_pullUP+0x48>
    57d2:	80 95       	com	r24
    57d4:	84 23       	and	r24, r20
    57d6:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    57d8:	89 81       	ldd	r24, Y+1	; 0x01
    57da:	88 2f       	mov	r24, r24
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	88 0f       	add	r24, r24
    57e0:	99 1f       	adc	r25, r25
    57e2:	fc 01       	movw	r30, r24
    57e4:	e6 57       	subi	r30, 0x76	; 118
    57e6:	fe 4f       	sbci	r31, 0xFE	; 254
    57e8:	a0 81       	ld	r26, Z
    57ea:	b1 81       	ldd	r27, Z+1	; 0x01
    57ec:	89 81       	ldd	r24, Y+1	; 0x01
    57ee:	88 2f       	mov	r24, r24
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	88 0f       	add	r24, r24
    57f4:	99 1f       	adc	r25, r25
    57f6:	fc 01       	movw	r30, r24
    57f8:	e6 57       	subi	r30, 0x76	; 118
    57fa:	fe 4f       	sbci	r31, 0xFE	; 254
    57fc:	01 90       	ld	r0, Z+
    57fe:	f0 81       	ld	r31, Z
    5800:	e0 2d       	mov	r30, r0
    5802:	80 81       	ld	r24, Z
    5804:	48 2f       	mov	r20, r24
    5806:	8a 81       	ldd	r24, Y+2	; 0x02
    5808:	28 2f       	mov	r18, r24
    580a:	30 e0       	ldi	r19, 0x00	; 0
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	02 2e       	mov	r0, r18
    5812:	02 c0       	rjmp	.+4      	; 0x5818 <DIO_void_set_pin_in_pullUP+0x96>
    5814:	88 0f       	add	r24, r24
    5816:	99 1f       	adc	r25, r25
    5818:	0a 94       	dec	r0
    581a:	e2 f7       	brpl	.-8      	; 0x5814 <DIO_void_set_pin_in_pullUP+0x92>
    581c:	84 2b       	or	r24, r20
    581e:	8c 93       	st	X, r24
}
    5820:	0f 90       	pop	r0
    5822:	0f 90       	pop	r0
    5824:	cf 91       	pop	r28
    5826:	df 91       	pop	r29
    5828:	08 95       	ret

0000582a <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    582a:	df 93       	push	r29
    582c:	cf 93       	push	r28
    582e:	0f 92       	push	r0
    5830:	cd b7       	in	r28, 0x3d	; 61
    5832:	de b7       	in	r29, 0x3e	; 62
    5834:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    5836:	89 81       	ldd	r24, Y+1	; 0x01
    5838:	88 2f       	mov	r24, r24
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	88 0f       	add	r24, r24
    583e:	99 1f       	adc	r25, r25
    5840:	fc 01       	movw	r30, r24
    5842:	e6 57       	subi	r30, 0x76	; 118
    5844:	fe 4f       	sbci	r31, 0xFE	; 254
    5846:	01 90       	ld	r0, Z+
    5848:	f0 81       	ld	r31, Z
    584a:	e0 2d       	mov	r30, r0
    584c:	8f ef       	ldi	r24, 0xFF	; 255
    584e:	80 83       	st	Z, r24
}
    5850:	0f 90       	pop	r0
    5852:	cf 91       	pop	r28
    5854:	df 91       	pop	r29
    5856:	08 95       	ret

00005858 <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    5858:	df 93       	push	r29
    585a:	cf 93       	push	r28
    585c:	0f 92       	push	r0
    585e:	cd b7       	in	r28, 0x3d	; 61
    5860:	de b7       	in	r29, 0x3e	; 62
    5862:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    5864:	89 81       	ldd	r24, Y+1	; 0x01
    5866:	88 2f       	mov	r24, r24
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	88 0f       	add	r24, r24
    586c:	99 1f       	adc	r25, r25
    586e:	fc 01       	movw	r30, r24
    5870:	e6 57       	subi	r30, 0x76	; 118
    5872:	fe 4f       	sbci	r31, 0xFE	; 254
    5874:	01 90       	ld	r0, Z+
    5876:	f0 81       	ld	r31, Z
    5878:	e0 2d       	mov	r30, r0
    587a:	10 82       	st	Z, r1
}
    587c:	0f 90       	pop	r0
    587e:	cf 91       	pop	r28
    5880:	df 91       	pop	r29
    5882:	08 95       	ret

00005884 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    5884:	df 93       	push	r29
    5886:	cf 93       	push	r28
    5888:	0f 92       	push	r0
    588a:	cd b7       	in	r28, 0x3d	; 61
    588c:	de b7       	in	r29, 0x3e	; 62
    588e:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    5890:	89 81       	ldd	r24, Y+1	; 0x01
    5892:	88 2f       	mov	r24, r24
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	88 0f       	add	r24, r24
    5898:	99 1f       	adc	r25, r25
    589a:	fc 01       	movw	r30, r24
    589c:	e6 57       	subi	r30, 0x76	; 118
    589e:	fe 4f       	sbci	r31, 0xFE	; 254
    58a0:	a0 81       	ld	r26, Z
    58a2:	b1 81       	ldd	r27, Z+1	; 0x01
    58a4:	89 81       	ldd	r24, Y+1	; 0x01
    58a6:	88 2f       	mov	r24, r24
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	88 0f       	add	r24, r24
    58ac:	99 1f       	adc	r25, r25
    58ae:	fc 01       	movw	r30, r24
    58b0:	e6 57       	subi	r30, 0x76	; 118
    58b2:	fe 4f       	sbci	r31, 0xFE	; 254
    58b4:	01 90       	ld	r0, Z+
    58b6:	f0 81       	ld	r31, Z
    58b8:	e0 2d       	mov	r30, r0
    58ba:	80 81       	ld	r24, Z
    58bc:	80 95       	com	r24
    58be:	8c 93       	st	X, r24
}
    58c0:	0f 90       	pop	r0
    58c2:	cf 91       	pop	r28
    58c4:	df 91       	pop	r29
    58c6:	08 95       	ret

000058c8 <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    58c8:	df 93       	push	r29
    58ca:	cf 93       	push	r28
    58cc:	00 d0       	rcall	.+0      	; 0x58ce <DIO_void_assign_port+0x6>
    58ce:	cd b7       	in	r28, 0x3d	; 61
    58d0:	de b7       	in	r29, 0x3e	; 62
    58d2:	89 83       	std	Y+1, r24	; 0x01
    58d4:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
    58d8:	88 2f       	mov	r24, r24
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	88 0f       	add	r24, r24
    58de:	99 1f       	adc	r25, r25
    58e0:	fc 01       	movw	r30, r24
    58e2:	e6 57       	subi	r30, 0x76	; 118
    58e4:	fe 4f       	sbci	r31, 0xFE	; 254
    58e6:	01 90       	ld	r0, Z+
    58e8:	f0 81       	ld	r31, Z
    58ea:	e0 2d       	mov	r30, r0
    58ec:	8a 81       	ldd	r24, Y+2	; 0x02
    58ee:	80 83       	st	Z, r24
}
    58f0:	0f 90       	pop	r0
    58f2:	0f 90       	pop	r0
    58f4:	cf 91       	pop	r28
    58f6:	df 91       	pop	r29
    58f8:	08 95       	ret

000058fa <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    58fa:	df 93       	push	r29
    58fc:	cf 93       	push	r28
    58fe:	00 d0       	rcall	.+0      	; 0x5900 <DIO_void_set_pin+0x6>
    5900:	cd b7       	in	r28, 0x3d	; 61
    5902:	de b7       	in	r29, 0x3e	; 62
    5904:	89 83       	std	Y+1, r24	; 0x01
    5906:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5908:	89 81       	ldd	r24, Y+1	; 0x01
    590a:	88 2f       	mov	r24, r24
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	88 0f       	add	r24, r24
    5910:	99 1f       	adc	r25, r25
    5912:	fc 01       	movw	r30, r24
    5914:	e6 57       	subi	r30, 0x76	; 118
    5916:	fe 4f       	sbci	r31, 0xFE	; 254
    5918:	a0 81       	ld	r26, Z
    591a:	b1 81       	ldd	r27, Z+1	; 0x01
    591c:	89 81       	ldd	r24, Y+1	; 0x01
    591e:	88 2f       	mov	r24, r24
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	88 0f       	add	r24, r24
    5924:	99 1f       	adc	r25, r25
    5926:	fc 01       	movw	r30, r24
    5928:	e6 57       	subi	r30, 0x76	; 118
    592a:	fe 4f       	sbci	r31, 0xFE	; 254
    592c:	01 90       	ld	r0, Z+
    592e:	f0 81       	ld	r31, Z
    5930:	e0 2d       	mov	r30, r0
    5932:	80 81       	ld	r24, Z
    5934:	48 2f       	mov	r20, r24
    5936:	8a 81       	ldd	r24, Y+2	; 0x02
    5938:	28 2f       	mov	r18, r24
    593a:	30 e0       	ldi	r19, 0x00	; 0
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	90 e0       	ldi	r25, 0x00	; 0
    5940:	02 2e       	mov	r0, r18
    5942:	02 c0       	rjmp	.+4      	; 0x5948 <DIO_void_set_pin+0x4e>
    5944:	88 0f       	add	r24, r24
    5946:	99 1f       	adc	r25, r25
    5948:	0a 94       	dec	r0
    594a:	e2 f7       	brpl	.-8      	; 0x5944 <DIO_void_set_pin+0x4a>
    594c:	84 2b       	or	r24, r20
    594e:	8c 93       	st	X, r24
}
    5950:	0f 90       	pop	r0
    5952:	0f 90       	pop	r0
    5954:	cf 91       	pop	r28
    5956:	df 91       	pop	r29
    5958:	08 95       	ret

0000595a <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    595a:	df 93       	push	r29
    595c:	cf 93       	push	r28
    595e:	00 d0       	rcall	.+0      	; 0x5960 <DIO_void_clear_pin+0x6>
    5960:	cd b7       	in	r28, 0x3d	; 61
    5962:	de b7       	in	r29, 0x3e	; 62
    5964:	89 83       	std	Y+1, r24	; 0x01
    5966:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5968:	89 81       	ldd	r24, Y+1	; 0x01
    596a:	88 2f       	mov	r24, r24
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	88 0f       	add	r24, r24
    5970:	99 1f       	adc	r25, r25
    5972:	fc 01       	movw	r30, r24
    5974:	e6 57       	subi	r30, 0x76	; 118
    5976:	fe 4f       	sbci	r31, 0xFE	; 254
    5978:	a0 81       	ld	r26, Z
    597a:	b1 81       	ldd	r27, Z+1	; 0x01
    597c:	89 81       	ldd	r24, Y+1	; 0x01
    597e:	88 2f       	mov	r24, r24
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	88 0f       	add	r24, r24
    5984:	99 1f       	adc	r25, r25
    5986:	fc 01       	movw	r30, r24
    5988:	e6 57       	subi	r30, 0x76	; 118
    598a:	fe 4f       	sbci	r31, 0xFE	; 254
    598c:	01 90       	ld	r0, Z+
    598e:	f0 81       	ld	r31, Z
    5990:	e0 2d       	mov	r30, r0
    5992:	80 81       	ld	r24, Z
    5994:	48 2f       	mov	r20, r24
    5996:	8a 81       	ldd	r24, Y+2	; 0x02
    5998:	28 2f       	mov	r18, r24
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	02 2e       	mov	r0, r18
    59a2:	02 c0       	rjmp	.+4      	; 0x59a8 <DIO_void_clear_pin+0x4e>
    59a4:	88 0f       	add	r24, r24
    59a6:	99 1f       	adc	r25, r25
    59a8:	0a 94       	dec	r0
    59aa:	e2 f7       	brpl	.-8      	; 0x59a4 <DIO_void_clear_pin+0x4a>
    59ac:	80 95       	com	r24
    59ae:	84 23       	and	r24, r20
    59b0:	8c 93       	st	X, r24
}
    59b2:	0f 90       	pop	r0
    59b4:	0f 90       	pop	r0
    59b6:	cf 91       	pop	r28
    59b8:	df 91       	pop	r29
    59ba:	08 95       	ret

000059bc <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    59bc:	df 93       	push	r29
    59be:	cf 93       	push	r28
    59c0:	00 d0       	rcall	.+0      	; 0x59c2 <DIO_void_toggle_pin+0x6>
    59c2:	cd b7       	in	r28, 0x3d	; 61
    59c4:	de b7       	in	r29, 0x3e	; 62
    59c6:	89 83       	std	Y+1, r24	; 0x01
    59c8:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    59ca:	89 81       	ldd	r24, Y+1	; 0x01
    59cc:	88 2f       	mov	r24, r24
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	88 0f       	add	r24, r24
    59d2:	99 1f       	adc	r25, r25
    59d4:	fc 01       	movw	r30, r24
    59d6:	e6 57       	subi	r30, 0x76	; 118
    59d8:	fe 4f       	sbci	r31, 0xFE	; 254
    59da:	a0 81       	ld	r26, Z
    59dc:	b1 81       	ldd	r27, Z+1	; 0x01
    59de:	89 81       	ldd	r24, Y+1	; 0x01
    59e0:	88 2f       	mov	r24, r24
    59e2:	90 e0       	ldi	r25, 0x00	; 0
    59e4:	88 0f       	add	r24, r24
    59e6:	99 1f       	adc	r25, r25
    59e8:	fc 01       	movw	r30, r24
    59ea:	e6 57       	subi	r30, 0x76	; 118
    59ec:	fe 4f       	sbci	r31, 0xFE	; 254
    59ee:	01 90       	ld	r0, Z+
    59f0:	f0 81       	ld	r31, Z
    59f2:	e0 2d       	mov	r30, r0
    59f4:	80 81       	ld	r24, Z
    59f6:	48 2f       	mov	r20, r24
    59f8:	8a 81       	ldd	r24, Y+2	; 0x02
    59fa:	28 2f       	mov	r18, r24
    59fc:	30 e0       	ldi	r19, 0x00	; 0
    59fe:	81 e0       	ldi	r24, 0x01	; 1
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	02 2e       	mov	r0, r18
    5a04:	02 c0       	rjmp	.+4      	; 0x5a0a <DIO_void_toggle_pin+0x4e>
    5a06:	88 0f       	add	r24, r24
    5a08:	99 1f       	adc	r25, r25
    5a0a:	0a 94       	dec	r0
    5a0c:	e2 f7       	brpl	.-8      	; 0x5a06 <DIO_void_toggle_pin+0x4a>
    5a0e:	84 27       	eor	r24, r20
    5a10:	8c 93       	st	X, r24
}
    5a12:	0f 90       	pop	r0
    5a14:	0f 90       	pop	r0
    5a16:	cf 91       	pop	r28
    5a18:	df 91       	pop	r29
    5a1a:	08 95       	ret

00005a1c <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    5a1c:	df 93       	push	r29
    5a1e:	cf 93       	push	r28
    5a20:	00 d0       	rcall	.+0      	; 0x5a22 <DIO_void_assign_pin+0x6>
    5a22:	0f 92       	push	r0
    5a24:	cd b7       	in	r28, 0x3d	; 61
    5a26:	de b7       	in	r29, 0x3e	; 62
    5a28:	89 83       	std	Y+1, r24	; 0x01
    5a2a:	6a 83       	std	Y+2, r22	; 0x02
    5a2c:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    5a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a30:	88 23       	and	r24, r24
    5a32:	29 f1       	breq	.+74     	; 0x5a7e <DIO_void_assign_pin+0x62>
    5a34:	89 81       	ldd	r24, Y+1	; 0x01
    5a36:	88 2f       	mov	r24, r24
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	88 0f       	add	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	fc 01       	movw	r30, r24
    5a40:	e6 57       	subi	r30, 0x76	; 118
    5a42:	fe 4f       	sbci	r31, 0xFE	; 254
    5a44:	a0 81       	ld	r26, Z
    5a46:	b1 81       	ldd	r27, Z+1	; 0x01
    5a48:	89 81       	ldd	r24, Y+1	; 0x01
    5a4a:	88 2f       	mov	r24, r24
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	88 0f       	add	r24, r24
    5a50:	99 1f       	adc	r25, r25
    5a52:	fc 01       	movw	r30, r24
    5a54:	e6 57       	subi	r30, 0x76	; 118
    5a56:	fe 4f       	sbci	r31, 0xFE	; 254
    5a58:	01 90       	ld	r0, Z+
    5a5a:	f0 81       	ld	r31, Z
    5a5c:	e0 2d       	mov	r30, r0
    5a5e:	80 81       	ld	r24, Z
    5a60:	48 2f       	mov	r20, r24
    5a62:	8a 81       	ldd	r24, Y+2	; 0x02
    5a64:	28 2f       	mov	r18, r24
    5a66:	30 e0       	ldi	r19, 0x00	; 0
    5a68:	81 e0       	ldi	r24, 0x01	; 1
    5a6a:	90 e0       	ldi	r25, 0x00	; 0
    5a6c:	02 2e       	mov	r0, r18
    5a6e:	02 c0       	rjmp	.+4      	; 0x5a74 <DIO_void_assign_pin+0x58>
    5a70:	88 0f       	add	r24, r24
    5a72:	99 1f       	adc	r25, r25
    5a74:	0a 94       	dec	r0
    5a76:	e2 f7       	brpl	.-8      	; 0x5a70 <DIO_void_assign_pin+0x54>
    5a78:	84 2b       	or	r24, r20
    5a7a:	8c 93       	st	X, r24
    5a7c:	25 c0       	rjmp	.+74     	; 0x5ac8 <DIO_void_assign_pin+0xac>
    5a7e:	89 81       	ldd	r24, Y+1	; 0x01
    5a80:	88 2f       	mov	r24, r24
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	88 0f       	add	r24, r24
    5a86:	99 1f       	adc	r25, r25
    5a88:	fc 01       	movw	r30, r24
    5a8a:	e6 57       	subi	r30, 0x76	; 118
    5a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a8e:	a0 81       	ld	r26, Z
    5a90:	b1 81       	ldd	r27, Z+1	; 0x01
    5a92:	89 81       	ldd	r24, Y+1	; 0x01
    5a94:	88 2f       	mov	r24, r24
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	88 0f       	add	r24, r24
    5a9a:	99 1f       	adc	r25, r25
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	e6 57       	subi	r30, 0x76	; 118
    5aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    5aa2:	01 90       	ld	r0, Z+
    5aa4:	f0 81       	ld	r31, Z
    5aa6:	e0 2d       	mov	r30, r0
    5aa8:	80 81       	ld	r24, Z
    5aaa:	48 2f       	mov	r20, r24
    5aac:	8a 81       	ldd	r24, Y+2	; 0x02
    5aae:	28 2f       	mov	r18, r24
    5ab0:	30 e0       	ldi	r19, 0x00	; 0
    5ab2:	81 e0       	ldi	r24, 0x01	; 1
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	02 2e       	mov	r0, r18
    5ab8:	02 c0       	rjmp	.+4      	; 0x5abe <DIO_void_assign_pin+0xa2>
    5aba:	88 0f       	add	r24, r24
    5abc:	99 1f       	adc	r25, r25
    5abe:	0a 94       	dec	r0
    5ac0:	e2 f7       	brpl	.-8      	; 0x5aba <DIO_void_assign_pin+0x9e>
    5ac2:	80 95       	com	r24
    5ac4:	84 23       	and	r24, r20
    5ac6:	8c 93       	st	X, r24
}
    5ac8:	0f 90       	pop	r0
    5aca:	0f 90       	pop	r0
    5acc:	0f 90       	pop	r0
    5ace:	cf 91       	pop	r28
    5ad0:	df 91       	pop	r29
    5ad2:	08 95       	ret

00005ad4 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    5ad4:	df 93       	push	r29
    5ad6:	cf 93       	push	r28
    5ad8:	0f 92       	push	r0
    5ada:	cd b7       	in	r28, 0x3d	; 61
    5adc:	de b7       	in	r29, 0x3e	; 62
    5ade:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    5ae0:	89 81       	ldd	r24, Y+1	; 0x01
    5ae2:	88 2f       	mov	r24, r24
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	88 0f       	add	r24, r24
    5ae8:	99 1f       	adc	r25, r25
    5aea:	fc 01       	movw	r30, r24
    5aec:	e6 58       	subi	r30, 0x86	; 134
    5aee:	fe 4f       	sbci	r31, 0xFE	; 254
    5af0:	01 90       	ld	r0, Z+
    5af2:	f0 81       	ld	r31, Z
    5af4:	e0 2d       	mov	r30, r0
    5af6:	80 81       	ld	r24, Z
}
    5af8:	0f 90       	pop	r0
    5afa:	cf 91       	pop	r28
    5afc:	df 91       	pop	r29
    5afe:	08 95       	ret

00005b00 <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5b00:	df 93       	push	r29
    5b02:	cf 93       	push	r28
    5b04:	00 d0       	rcall	.+0      	; 0x5b06 <DIO_u8_get_pin+0x6>
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62
    5b0a:	89 83       	std	Y+1, r24	; 0x01
    5b0c:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5b0e:	89 81       	ldd	r24, Y+1	; 0x01
    5b10:	88 2f       	mov	r24, r24
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	88 0f       	add	r24, r24
    5b16:	99 1f       	adc	r25, r25
    5b18:	fc 01       	movw	r30, r24
    5b1a:	e6 58       	subi	r30, 0x86	; 134
    5b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    5b1e:	01 90       	ld	r0, Z+
    5b20:	f0 81       	ld	r31, Z
    5b22:	e0 2d       	mov	r30, r0
    5b24:	80 81       	ld	r24, Z
    5b26:	28 2f       	mov	r18, r24
    5b28:	30 e0       	ldi	r19, 0x00	; 0
    5b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b2c:	88 2f       	mov	r24, r24
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	a9 01       	movw	r20, r18
    5b32:	02 c0       	rjmp	.+4      	; 0x5b38 <DIO_u8_get_pin+0x38>
    5b34:	55 95       	asr	r21
    5b36:	47 95       	ror	r20
    5b38:	8a 95       	dec	r24
    5b3a:	e2 f7       	brpl	.-8      	; 0x5b34 <DIO_u8_get_pin+0x34>
    5b3c:	ca 01       	movw	r24, r20
    5b3e:	81 70       	andi	r24, 0x01	; 1
}
    5b40:	0f 90       	pop	r0
    5b42:	0f 90       	pop	r0
    5b44:	cf 91       	pop	r28
    5b46:	df 91       	pop	r29
    5b48:	08 95       	ret

00005b4a <__mulsi3>:
    5b4a:	62 9f       	mul	r22, r18
    5b4c:	d0 01       	movw	r26, r0
    5b4e:	73 9f       	mul	r23, r19
    5b50:	f0 01       	movw	r30, r0
    5b52:	82 9f       	mul	r24, r18
    5b54:	e0 0d       	add	r30, r0
    5b56:	f1 1d       	adc	r31, r1
    5b58:	64 9f       	mul	r22, r20
    5b5a:	e0 0d       	add	r30, r0
    5b5c:	f1 1d       	adc	r31, r1
    5b5e:	92 9f       	mul	r25, r18
    5b60:	f0 0d       	add	r31, r0
    5b62:	83 9f       	mul	r24, r19
    5b64:	f0 0d       	add	r31, r0
    5b66:	74 9f       	mul	r23, r20
    5b68:	f0 0d       	add	r31, r0
    5b6a:	65 9f       	mul	r22, r21
    5b6c:	f0 0d       	add	r31, r0
    5b6e:	99 27       	eor	r25, r25
    5b70:	72 9f       	mul	r23, r18
    5b72:	b0 0d       	add	r27, r0
    5b74:	e1 1d       	adc	r30, r1
    5b76:	f9 1f       	adc	r31, r25
    5b78:	63 9f       	mul	r22, r19
    5b7a:	b0 0d       	add	r27, r0
    5b7c:	e1 1d       	adc	r30, r1
    5b7e:	f9 1f       	adc	r31, r25
    5b80:	bd 01       	movw	r22, r26
    5b82:	cf 01       	movw	r24, r30
    5b84:	11 24       	eor	r1, r1
    5b86:	08 95       	ret

00005b88 <__divmodsi4>:
    5b88:	97 fb       	bst	r25, 7
    5b8a:	09 2e       	mov	r0, r25
    5b8c:	05 26       	eor	r0, r21
    5b8e:	0e d0       	rcall	.+28     	; 0x5bac <__divmodsi4_neg1>
    5b90:	57 fd       	sbrc	r21, 7
    5b92:	04 d0       	rcall	.+8      	; 0x5b9c <__divmodsi4_neg2>
    5b94:	14 d0       	rcall	.+40     	; 0x5bbe <__udivmodsi4>
    5b96:	0a d0       	rcall	.+20     	; 0x5bac <__divmodsi4_neg1>
    5b98:	00 1c       	adc	r0, r0
    5b9a:	38 f4       	brcc	.+14     	; 0x5baa <__divmodsi4_exit>

00005b9c <__divmodsi4_neg2>:
    5b9c:	50 95       	com	r21
    5b9e:	40 95       	com	r20
    5ba0:	30 95       	com	r19
    5ba2:	21 95       	neg	r18
    5ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ba6:	4f 4f       	sbci	r20, 0xFF	; 255
    5ba8:	5f 4f       	sbci	r21, 0xFF	; 255

00005baa <__divmodsi4_exit>:
    5baa:	08 95       	ret

00005bac <__divmodsi4_neg1>:
    5bac:	f6 f7       	brtc	.-4      	; 0x5baa <__divmodsi4_exit>
    5bae:	90 95       	com	r25
    5bb0:	80 95       	com	r24
    5bb2:	70 95       	com	r23
    5bb4:	61 95       	neg	r22
    5bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bba:	9f 4f       	sbci	r25, 0xFF	; 255
    5bbc:	08 95       	ret

00005bbe <__udivmodsi4>:
    5bbe:	a1 e2       	ldi	r26, 0x21	; 33
    5bc0:	1a 2e       	mov	r1, r26
    5bc2:	aa 1b       	sub	r26, r26
    5bc4:	bb 1b       	sub	r27, r27
    5bc6:	fd 01       	movw	r30, r26
    5bc8:	0d c0       	rjmp	.+26     	; 0x5be4 <__udivmodsi4_ep>

00005bca <__udivmodsi4_loop>:
    5bca:	aa 1f       	adc	r26, r26
    5bcc:	bb 1f       	adc	r27, r27
    5bce:	ee 1f       	adc	r30, r30
    5bd0:	ff 1f       	adc	r31, r31
    5bd2:	a2 17       	cp	r26, r18
    5bd4:	b3 07       	cpc	r27, r19
    5bd6:	e4 07       	cpc	r30, r20
    5bd8:	f5 07       	cpc	r31, r21
    5bda:	20 f0       	brcs	.+8      	; 0x5be4 <__udivmodsi4_ep>
    5bdc:	a2 1b       	sub	r26, r18
    5bde:	b3 0b       	sbc	r27, r19
    5be0:	e4 0b       	sbc	r30, r20
    5be2:	f5 0b       	sbc	r31, r21

00005be4 <__udivmodsi4_ep>:
    5be4:	66 1f       	adc	r22, r22
    5be6:	77 1f       	adc	r23, r23
    5be8:	88 1f       	adc	r24, r24
    5bea:	99 1f       	adc	r25, r25
    5bec:	1a 94       	dec	r1
    5bee:	69 f7       	brne	.-38     	; 0x5bca <__udivmodsi4_loop>
    5bf0:	60 95       	com	r22
    5bf2:	70 95       	com	r23
    5bf4:	80 95       	com	r24
    5bf6:	90 95       	com	r25
    5bf8:	9b 01       	movw	r18, r22
    5bfa:	ac 01       	movw	r20, r24
    5bfc:	bd 01       	movw	r22, r26
    5bfe:	cf 01       	movw	r24, r30
    5c00:	08 95       	ret

00005c02 <__prologue_saves__>:
    5c02:	2f 92       	push	r2
    5c04:	3f 92       	push	r3
    5c06:	4f 92       	push	r4
    5c08:	5f 92       	push	r5
    5c0a:	6f 92       	push	r6
    5c0c:	7f 92       	push	r7
    5c0e:	8f 92       	push	r8
    5c10:	9f 92       	push	r9
    5c12:	af 92       	push	r10
    5c14:	bf 92       	push	r11
    5c16:	cf 92       	push	r12
    5c18:	df 92       	push	r13
    5c1a:	ef 92       	push	r14
    5c1c:	ff 92       	push	r15
    5c1e:	0f 93       	push	r16
    5c20:	1f 93       	push	r17
    5c22:	cf 93       	push	r28
    5c24:	df 93       	push	r29
    5c26:	cd b7       	in	r28, 0x3d	; 61
    5c28:	de b7       	in	r29, 0x3e	; 62
    5c2a:	ca 1b       	sub	r28, r26
    5c2c:	db 0b       	sbc	r29, r27
    5c2e:	0f b6       	in	r0, 0x3f	; 63
    5c30:	f8 94       	cli
    5c32:	de bf       	out	0x3e, r29	; 62
    5c34:	0f be       	out	0x3f, r0	; 63
    5c36:	cd bf       	out	0x3d, r28	; 61
    5c38:	09 94       	ijmp

00005c3a <__epilogue_restores__>:
    5c3a:	2a 88       	ldd	r2, Y+18	; 0x12
    5c3c:	39 88       	ldd	r3, Y+17	; 0x11
    5c3e:	48 88       	ldd	r4, Y+16	; 0x10
    5c40:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c42:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c44:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c46:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c48:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c4c:	b9 84       	ldd	r11, Y+9	; 0x09
    5c4e:	c8 84       	ldd	r12, Y+8	; 0x08
    5c50:	df 80       	ldd	r13, Y+7	; 0x07
    5c52:	ee 80       	ldd	r14, Y+6	; 0x06
    5c54:	fd 80       	ldd	r15, Y+5	; 0x05
    5c56:	0c 81       	ldd	r16, Y+4	; 0x04
    5c58:	1b 81       	ldd	r17, Y+3	; 0x03
    5c5a:	aa 81       	ldd	r26, Y+2	; 0x02
    5c5c:	b9 81       	ldd	r27, Y+1	; 0x01
    5c5e:	ce 0f       	add	r28, r30
    5c60:	d1 1d       	adc	r29, r1
    5c62:	0f b6       	in	r0, 0x3f	; 63
    5c64:	f8 94       	cli
    5c66:	de bf       	out	0x3e, r29	; 62
    5c68:	0f be       	out	0x3f, r0	; 63
    5c6a:	cd bf       	out	0x3d, r28	; 61
    5c6c:	ed 01       	movw	r28, r26
    5c6e:	08 95       	ret

00005c70 <_exit>:
    5c70:	f8 94       	cli

00005c72 <__stop_program>:
    5c72:	ff cf       	rjmp	.-2      	; 0x5c72 <__stop_program>
