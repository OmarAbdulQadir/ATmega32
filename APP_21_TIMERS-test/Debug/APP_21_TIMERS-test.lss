
APP_21_TIMERS-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000c0a  00000c9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800078  00800078  00000cb6  2**0
                  ALLOC
  3 .stab         00000fc0  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001314  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_4>
  14:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_7>
  20:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_8>
  24:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_9>
  28:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_10>
  2c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3c 03 	call	0x678	; 0x678 <main>
  8a:	0c 94 03 06 	jmp	0xc06	; 0xc06 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_init>:
// pointer to temporary configuration struct
static timer_config* copy_ptr_temp_timer_config = NULL;


/* Implementing of the driver functions */
void TIMER_init(timer_config* ptr_timer_config){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <TIMER_init+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	copy_ptr_temp_timer_config = ptr_timer_config;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	90 93 79 00 	sts	0x0079, r25
  a8:	80 93 78 00 	sts	0x0078, r24
}
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <TIMER_set_callback>:

void TIMER_set_callback(u8 copy_int_ref, void (*copy_ptr_call_back_function)(void) ){
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	00 d0       	rcall	.+0      	; 0xbc <TIMER_set_callback+0x6>
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	7b 83       	std	Y+3, r23	; 0x03
  c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 *
	 */
	if((copy_int_ref >= 0)&&(copy_int_ref <= 6))
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	87 30       	cpi	r24, 0x07	; 7
  cc:	60 f4       	brcc	.+24     	; 0xe6 <TIMER_set_callback+0x30>
		call_back_function[copy_int_ref] = copy_ptr_call_back_function;
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	fc 01       	movw	r30, r24
  da:	e6 58       	subi	r30, 0x86	; 134
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	9b 81       	ldd	r25, Y+3	; 0x03
  e2:	91 83       	std	Z+1, r25	; 0x01
  e4:	80 83       	st	Z, r24
}
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	cf 91       	pop	r28
  ee:	df 91       	pop	r29
  f0:	08 95       	ret

000000f2 <TIMER_config>:

void TIMER_config(void ){
  f2:	df 93       	push	r29
  f4:	cf 93       	push	r28
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if (copy_ptr_temp_timer_config != NULL){
  fa:	80 91 78 00 	lds	r24, 0x0078
  fe:	90 91 79 00 	lds	r25, 0x0079
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	09 f4       	brne	.+2      	; 0x108 <TIMER_config+0x16>
 106:	10 c1       	rjmp	.+544    	; 0x328 <TIMER_config+0x236>
		if((copy_ptr_temp_timer_config -> WGM) <= TIMER0_sep){
 108:	e0 91 78 00 	lds	r30, 0x0078
 10c:	f0 91 79 00 	lds	r31, 0x0079
 110:	80 81       	ld	r24, Z
 112:	87 70       	andi	r24, 0x07	; 7
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	91 05       	cpc	r25, r1
 11c:	0c f0       	brlt	.+2      	; 0x120 <TIMER_config+0x2e>
 11e:	77 c0       	rjmp	.+238    	; 0x20e <TIMER_config+0x11c>
			// Set preload value of the TCNT register (1)
			TIMER_TCNT0 = *((u8*)(copy_ptr_temp_timer_config -> preload));
 120:	a2 e5       	ldi	r26, 0x52	; 82
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e0 91 78 00 	lds	r30, 0x0078
 128:	f0 91 79 00 	lds	r31, 0x0079
 12c:	81 81       	ldd	r24, Z+1	; 0x01
 12e:	92 81       	ldd	r25, Z+2	; 0x02
 130:	fc 01       	movw	r30, r24
 132:	80 81       	ld	r24, Z
 134:	8c 93       	st	X, r24
			// Set preload value of the OCR or ICR register (2)
			TIMER_OCR0 = *(((u8*)(copy_ptr_temp_timer_config -> preload))+1);
 136:	ac e5       	ldi	r26, 0x5C	; 92
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e0 91 78 00 	lds	r30, 0x0078
 13e:	f0 91 79 00 	lds	r31, 0x0079
 142:	81 81       	ldd	r24, Z+1	; 0x01
 144:	92 81       	ldd	r25, Z+2	; 0x02
 146:	fc 01       	movw	r30, r24
 148:	31 96       	adiw	r30, 0x01	; 1
 14a:	80 81       	ld	r24, Z
 14c:	8c 93       	st	X, r24
			// Reset timer control register (3)
			TIMER_TCCR0 &= TIMER0_TCCR_Reset;
 14e:	a3 e5       	ldi	r26, 0x53	; 83
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e3 e5       	ldi	r30, 0x53	; 83
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 78       	andi	r24, 0x80	; 128
 15a:	8c 93       	st	X, r24
			// Reset timer interrupt mask register (timer 0 interrupt bits) (4)
			TIMER_TIMSK &= TIMER0_TIMSK_Reset;
 15c:	a9 e5       	ldi	r26, 0x59	; 89
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e9 e5       	ldi	r30, 0x59	; 89
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8c 7f       	andi	r24, 0xFC	; 252
 168:	8c 93       	st	X, r24
			// Set wave form generation mode (5)
			// Enable the interrupt bit (6)
			if((copy_ptr_temp_timer_config -> WGM) == 0){
 16a:	e0 91 78 00 	lds	r30, 0x0078
 16e:	f0 91 79 00 	lds	r31, 0x0079
 172:	80 81       	ld	r24, Z
 174:	87 70       	andi	r24, 0x07	; 7
 176:	88 23       	and	r24, r24
 178:	69 f4       	brne	.+26     	; 0x194 <TIMER_config+0xa2>
				// Normal mode 
				TIMER_TCCR0 |= ((TIMER0_NORM << TIMER_WGM01)&&(TIMER0_NORM << TIMER_WGM00));
 17a:	a3 e5       	ldi	r26, 0x53	; 83
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e3 e5       	ldi	r30, 0x53	; 83
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8c 93       	st	X, r24
				// In normal mode the overflow interrupt is enabled
				TIMER_TIMSK |= ((TIMER_DISABLE << TIMER_OCIE0)&&(TIMER_ENABLE << TIMER_TOIE0));
 186:	a9 e5       	ldi	r26, 0x59	; 89
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e9 e5       	ldi	r30, 0x59	; 89
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8c 93       	st	X, r24
 192:	0d c0       	rjmp	.+26     	; 0x1ae <TIMER_config+0xbc>
			}
			else{
				// Clear timer on compare mode
				TIMER_TCCR0 |= (((TIMER0_CTC >> BIT_SHIFT1) << TIMER_WGM01)&&(TIMER0_CTC << TIMER_WGM00));
 194:	a3 e5       	ldi	r26, 0x53	; 83
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e3 e5       	ldi	r30, 0x53	; 83
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	8c 93       	st	X, r24
				// In compare match mode the compare match interrupt is enabled
				TIMER_TIMSK |= ((TIMER_ENABLE << TIMER_OCIE0)&&(TIMER_DISABLE << TIMER_TOIE0));
 1a2:	a9 e5       	ldi	r26, 0x59	; 89
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e9 e5       	ldi	r30, 0x59	; 89
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8c 93       	st	X, r24
			}
			// Set output compare mode (7)
			TIMER_TCCR0 |= ((copy_ptr_temp_timer_config -> COM) << TIMER_COM00);
 1ae:	a3 e5       	ldi	r26, 0x53	; 83
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e3 e5       	ldi	r30, 0x53	; 83
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	28 2f       	mov	r18, r24
 1ba:	e0 91 78 00 	lds	r30, 0x0078
 1be:	f0 91 79 00 	lds	r31, 0x0079
 1c2:	80 81       	ld	r24, Z
 1c4:	86 95       	lsr	r24
 1c6:	86 95       	lsr	r24
 1c8:	86 95       	lsr	r24
 1ca:	83 70       	andi	r24, 0x03	; 3
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	82 95       	swap	r24
 1d2:	92 95       	swap	r25
 1d4:	90 7f       	andi	r25, 0xF0	; 240
 1d6:	98 27       	eor	r25, r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	98 27       	eor	r25, r24
 1dc:	82 2b       	or	r24, r18
 1de:	8c 93       	st	X, r24
			// Set prescaler value (8)
			TIMER_TCCR0 |= (copy_ptr_temp_timer_config -> CS);
 1e0:	a3 e5       	ldi	r26, 0x53	; 83
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e3 e5       	ldi	r30, 0x53	; 83
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	90 81       	ld	r25, Z
 1ea:	e0 91 78 00 	lds	r30, 0x0078
 1ee:	f0 91 79 00 	lds	r31, 0x0079
 1f2:	80 81       	ld	r24, Z
 1f4:	82 95       	swap	r24
 1f6:	86 95       	lsr	r24
 1f8:	87 70       	andi	r24, 0x07	; 7
 1fa:	89 2b       	or	r24, r25
 1fc:	8c 93       	st	X, r24
			// Enable Global interrupt (9)
			TIMER_SREG |= (TIMER_ENABLE << TIMER_Glob_Init_bit);
 1fe:	af e5       	ldi	r26, 0x5F	; 95
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	ef e5       	ldi	r30, 0x5F	; 95
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	8c 93       	st	X, r24
 20c:	8d c0       	rjmp	.+282    	; 0x328 <TIMER_config+0x236>
		}
		else if(((copy_ptr_temp_timer_config -> WGM) > TIMER0_sep) && ((copy_ptr_temp_timer_config -> WGM) <= TIMER1_sep)){
 20e:	e0 91 78 00 	lds	r30, 0x0078
 212:	f0 91 79 00 	lds	r31, 0x0079
 216:	80 81       	ld	r24, Z
 218:	87 70       	andi	r24, 0x07	; 7
 21a:	88 2f       	mov	r24, r24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	91 05       	cpc	r25, r1
 222:	64 f0       	brlt	.+24     	; 0x23c <TIMER_config+0x14a>
 224:	e0 91 78 00 	lds	r30, 0x0078
 228:	f0 91 79 00 	lds	r31, 0x0079
 22c:	80 81       	ld	r24, Z
 22e:	87 70       	andi	r24, 0x07	; 7
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	85 30       	cpi	r24, 0x05	; 5
 236:	91 05       	cpc	r25, r1
 238:	0c f4       	brge	.+2      	; 0x23c <TIMER_config+0x14a>
 23a:	76 c0       	rjmp	.+236    	; 0x328 <TIMER_config+0x236>

		}
		else{
			// Set preload value of the TCNT register (1)
			TIMER_TCNT2 = *((u8*)(copy_ptr_temp_timer_config -> preload));
 23c:	a4 e4       	ldi	r26, 0x44	; 68
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e0 91 78 00 	lds	r30, 0x0078
 244:	f0 91 79 00 	lds	r31, 0x0079
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	92 81       	ldd	r25, Z+2	; 0x02
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	8c 93       	st	X, r24
			// Set preload value of the OCR or ICR register (2)
			TIMER_OCR2 = *(((u8*)(copy_ptr_temp_timer_config -> preload))+1);
 252:	a3 e4       	ldi	r26, 0x43	; 67
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	e0 91 78 00 	lds	r30, 0x0078
 25a:	f0 91 79 00 	lds	r31, 0x0079
 25e:	81 81       	ldd	r24, Z+1	; 0x01
 260:	92 81       	ldd	r25, Z+2	; 0x02
 262:	fc 01       	movw	r30, r24
 264:	31 96       	adiw	r30, 0x01	; 1
 266:	80 81       	ld	r24, Z
 268:	8c 93       	st	X, r24
			// Reset timer control register (3)
			TIMER_TCCR2 &= TIMER2_TCCR_Reset;
 26a:	a5 e4       	ldi	r26, 0x45	; 69
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e5 e4       	ldi	r30, 0x45	; 69
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 78       	andi	r24, 0x80	; 128
 276:	8c 93       	st	X, r24
			// Reset timer interrupt mask register (timer 2 interrupt bits) (4)
			TIMER_TIMSK &= TIMER2_TIMSK_Reset;
 278:	a9 e5       	ldi	r26, 0x59	; 89
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e9 e5       	ldi	r30, 0x59	; 89
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	8f 73       	andi	r24, 0x3F	; 63
 284:	8c 93       	st	X, r24
			// Set wave form generation mode (5)
			// Enable the interrupt bit (6)
			if((copy_ptr_temp_timer_config -> WGM) == 5){
 286:	e0 91 78 00 	lds	r30, 0x0078
 28a:	f0 91 79 00 	lds	r31, 0x0079
 28e:	80 81       	ld	r24, Z
 290:	87 70       	andi	r24, 0x07	; 7
 292:	85 30       	cpi	r24, 0x05	; 5
 294:	69 f4       	brne	.+26     	; 0x2b0 <TIMER_config+0x1be>
				// Normal mode
				TIMER_TCCR2 |= ((TIMER2_NORM << TIMER_WGM21)&&(TIMER2_NORM << TIMER_WGM20));
 296:	a5 e4       	ldi	r26, 0x45	; 69
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e5 e4       	ldi	r30, 0x45	; 69
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8c 93       	st	X, r24
				// In normal mode the overflow interrupt is enabled
				TIMER_TIMSK |= ((TIMER_DISABLE << TIMER_OCIE2)&&(TIMER_ENABLE << TIMER_TOIE2));
 2a2:	a9 e5       	ldi	r26, 0x59	; 89
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	e9 e5       	ldi	r30, 0x59	; 89
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	8c 93       	st	X, r24
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <TIMER_config+0x1d8>
			}
			else{
				// Clear timer on compare mode
				TIMER_TCCR2 |= (((TIMER2_CTC >> BIT_SHIFT1) << TIMER_WGM21)&&(TIMER2_CTC << TIMER_WGM20));
 2b0:	a5 e4       	ldi	r26, 0x45	; 69
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	e5 e4       	ldi	r30, 0x45	; 69
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	8c 93       	st	X, r24
				// In compare match mode the compare match interrupt is enabled
				TIMER_TIMSK |= ((TIMER_ENABLE << TIMER_OCIE2)&&(TIMER_DISABLE << TIMER_TOIE2));
 2be:	a9 e5       	ldi	r26, 0x59	; 89
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e9 e5       	ldi	r30, 0x59	; 89
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8c 93       	st	X, r24
			}
			// Set output compare mode (7)
			TIMER_TCCR2 |= ((copy_ptr_temp_timer_config -> COM) << TIMER_COM20);
 2ca:	a5 e4       	ldi	r26, 0x45	; 69
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e5 e4       	ldi	r30, 0x45	; 69
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	28 2f       	mov	r18, r24
 2d6:	e0 91 78 00 	lds	r30, 0x0078
 2da:	f0 91 79 00 	lds	r31, 0x0079
 2de:	80 81       	ld	r24, Z
 2e0:	86 95       	lsr	r24
 2e2:	86 95       	lsr	r24
 2e4:	86 95       	lsr	r24
 2e6:	83 70       	andi	r24, 0x03	; 3
 2e8:	88 2f       	mov	r24, r24
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	82 95       	swap	r24
 2ee:	92 95       	swap	r25
 2f0:	90 7f       	andi	r25, 0xF0	; 240
 2f2:	98 27       	eor	r25, r24
 2f4:	80 7f       	andi	r24, 0xF0	; 240
 2f6:	98 27       	eor	r25, r24
 2f8:	82 2b       	or	r24, r18
 2fa:	8c 93       	st	X, r24
			// Set prescaler value (8)
			TIMER_TCCR2 |= (copy_ptr_temp_timer_config -> CS);
 2fc:	a5 e4       	ldi	r26, 0x45	; 69
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e5 e4       	ldi	r30, 0x45	; 69
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	e0 91 78 00 	lds	r30, 0x0078
 30a:	f0 91 79 00 	lds	r31, 0x0079
 30e:	80 81       	ld	r24, Z
 310:	82 95       	swap	r24
 312:	86 95       	lsr	r24
 314:	87 70       	andi	r24, 0x07	; 7
 316:	89 2b       	or	r24, r25
 318:	8c 93       	st	X, r24
			// Enable Global interrupt (9)
			TIMER_SREG |= (TIMER_ENABLE << TIMER_Glob_Init_bit);
 31a:	af e5       	ldi	r26, 0x5F	; 95
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	ef e5       	ldi	r30, 0x5F	; 95
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	80 68       	ori	r24, 0x80	; 128
 326:	8c 93       	st	X, r24
		}
	}
}
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <TIMER_stop>:

void TIMER_stop(void ){
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if (copy_ptr_temp_timer_config != NULL){
 336:	80 91 78 00 	lds	r24, 0x0078
 33a:	90 91 79 00 	lds	r25, 0x0079
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	81 f1       	breq	.+96     	; 0x3a2 <TIMER_stop+0x74>
		if((copy_ptr_temp_timer_config -> WGM) <= TIMER0_sep){
 342:	e0 91 78 00 	lds	r30, 0x0078
 346:	f0 91 79 00 	lds	r31, 0x0079
 34a:	80 81       	ld	r24, Z
 34c:	87 70       	andi	r24, 0x07	; 7
 34e:	88 2f       	mov	r24, r24
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	91 05       	cpc	r25, r1
 356:	44 f4       	brge	.+16     	; 0x368 <TIMER_stop+0x3a>
			TIMER_TCCR0 &= TIMER_STOP_MASK;
 358:	a3 e5       	ldi	r26, 0x53	; 83
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	e3 e5       	ldi	r30, 0x53	; 83
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	88 7f       	andi	r24, 0xF8	; 248
 364:	8c 93       	st	X, r24
 366:	1d c0       	rjmp	.+58     	; 0x3a2 <TIMER_stop+0x74>
		}
		else if(((copy_ptr_temp_timer_config -> WGM) > TIMER0_sep) && ((copy_ptr_temp_timer_config -> WGM) <= TIMER1_sep)){
 368:	e0 91 78 00 	lds	r30, 0x0078
 36c:	f0 91 79 00 	lds	r31, 0x0079
 370:	80 81       	ld	r24, Z
 372:	87 70       	andi	r24, 0x07	; 7
 374:	88 2f       	mov	r24, r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	91 05       	cpc	r25, r1
 37c:	5c f0       	brlt	.+22     	; 0x394 <TIMER_stop+0x66>
 37e:	e0 91 78 00 	lds	r30, 0x0078
 382:	f0 91 79 00 	lds	r31, 0x0079
 386:	80 81       	ld	r24, Z
 388:	87 70       	andi	r24, 0x07	; 7
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	85 30       	cpi	r24, 0x05	; 5
 390:	91 05       	cpc	r25, r1
 392:	3c f0       	brlt	.+14     	; 0x3a2 <TIMER_stop+0x74>
			
		}
		else{
			TIMER_TCCR2 &= TIMER_STOP_MASK;
 394:	a5 e4       	ldi	r26, 0x45	; 69
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	e5 e4       	ldi	r30, 0x45	; 69
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	88 7f       	andi	r24, 0xF8	; 248
 3a0:	8c 93       	st	X, r24
		}
	}
}
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <__vector_11>:

void __vector_11 (void){
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
 3ca:	df 93       	push	r29
 3cc:	cf 93       	push	r28
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER0_OVF] != NULL)
 3d2:	80 91 7a 00 	lds	r24, 0x007A
 3d6:	90 91 7b 00 	lds	r25, 0x007B
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	29 f0       	breq	.+10     	; 0x3e8 <__vector_11+0x40>
		call_back_function[ref_TIMER0_OVF]();
 3de:	e0 91 7a 00 	lds	r30, 0x007A
 3e2:	f0 91 7b 00 	lds	r31, 0x007B
 3e6:	09 95       	icall
}
 3e8:	cf 91       	pop	r28
 3ea:	df 91       	pop	r29
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_10>:

void __vector_10 (void){
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	2f 93       	push	r18
 41a:	3f 93       	push	r19
 41c:	4f 93       	push	r20
 41e:	5f 93       	push	r21
 420:	6f 93       	push	r22
 422:	7f 93       	push	r23
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	af 93       	push	r26
 42a:	bf 93       	push	r27
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
 430:	df 93       	push	r29
 432:	cf 93       	push	r28
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER0_COMP] != NULL)
 438:	80 91 7c 00 	lds	r24, 0x007C
 43c:	90 91 7d 00 	lds	r25, 0x007D
 440:	00 97       	sbiw	r24, 0x00	; 0
 442:	29 f0       	breq	.+10     	; 0x44e <__vector_10+0x40>
		call_back_function[ref_TIMER0_COMP]();
 444:	e0 91 7c 00 	lds	r30, 0x007C
 448:	f0 91 7d 00 	lds	r31, 0x007D
 44c:	09 95       	icall
}
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_9>:

void __vector_9 (void){
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	7f 93       	push	r23
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	af 93       	push	r26
 490:	bf 93       	push	r27
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
 496:	df 93       	push	r29
 498:	cf 93       	push	r28
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER1_OVF] != NULL)
 49e:	80 91 7e 00 	lds	r24, 0x007E
 4a2:	90 91 7f 00 	lds	r25, 0x007F
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <__vector_9+0x40>
		call_back_function[ref_TIMER1_OVF]();
 4aa:	e0 91 7e 00 	lds	r30, 0x007E
 4ae:	f0 91 7f 00 	lds	r31, 0x007F
 4b2:	09 95       	icall
}
 4b4:	cf 91       	pop	r28
 4b6:	df 91       	pop	r29
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <__vector_8>:

void __vector_8 (void){
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
 4fc:	df 93       	push	r29
 4fe:	cf 93       	push	r28
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER1_COMPB] != NULL)
 504:	80 91 80 00 	lds	r24, 0x0080
 508:	90 91 81 00 	lds	r25, 0x0081
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	29 f0       	breq	.+10     	; 0x51a <__vector_8+0x40>
		call_back_function[ref_TIMER1_COMPB]();
 510:	e0 91 80 00 	lds	r30, 0x0080
 514:	f0 91 81 00 	lds	r31, 0x0081
 518:	09 95       	icall
}
 51a:	cf 91       	pop	r28
 51c:	df 91       	pop	r29
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <__vector_7>:

void __vector_7 (void){
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
 562:	df 93       	push	r29
 564:	cf 93       	push	r28
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER1_COMPA] != NULL)
 56a:	80 91 82 00 	lds	r24, 0x0082
 56e:	90 91 83 00 	lds	r25, 0x0083
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	29 f0       	breq	.+10     	; 0x580 <__vector_7+0x40>
		call_back_function[ref_TIMER1_COMPA]();
 576:	e0 91 82 00 	lds	r30, 0x0082
 57a:	f0 91 83 00 	lds	r31, 0x0083
 57e:	09 95       	icall
}
 580:	cf 91       	pop	r28
 582:	df 91       	pop	r29
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_5>:

void __vector_5 (void){
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
 5c8:	df 93       	push	r29
 5ca:	cf 93       	push	r28
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER2_OVF] != NULL)
 5d0:	80 91 84 00 	lds	r24, 0x0084
 5d4:	90 91 85 00 	lds	r25, 0x0085
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	29 f0       	breq	.+10     	; 0x5e6 <__vector_5+0x40>
		call_back_function[ref_TIMER2_OVF]();
 5dc:	e0 91 84 00 	lds	r30, 0x0084
 5e0:	f0 91 85 00 	lds	r31, 0x0085
 5e4:	09 95       	icall
	TIMER_TCNT2= TIMER_BOTTOM;
 5e6:	e4 e4       	ldi	r30, 0x44	; 68
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	10 82       	st	Z, r1
}
 5ec:	cf 91       	pop	r28
 5ee:	df 91       	pop	r29
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	bf 91       	pop	r27
 5f6:	af 91       	pop	r26
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	7f 91       	pop	r23
 5fe:	6f 91       	pop	r22
 600:	5f 91       	pop	r21
 602:	4f 91       	pop	r20
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <__vector_4>:

void __vector_4 (void){
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
 634:	df 93       	push	r29
 636:	cf 93       	push	r28
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if(call_back_function[ref_TIMER2_COMP] != NULL)
 63c:	80 91 86 00 	lds	r24, 0x0086
 640:	90 91 87 00 	lds	r25, 0x0087
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	29 f0       	breq	.+10     	; 0x652 <__vector_4+0x40>
		call_back_function[ref_TIMER2_COMP]();
 648:	e0 91 86 00 	lds	r30, 0x0086
 64c:	f0 91 87 00 	lds	r31, 0x0087
 650:	09 95       	icall
}
 652:	cf 91       	pop	r28
 654:	df 91       	pop	r29
 656:	ff 91       	pop	r31
 658:	ef 91       	pop	r30
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <main>:

// Global variable


// Main function
int main(void){
 678:	df 93       	push	r29
 67a:	cf 93       	push	r28
 67c:	00 d0       	rcall	.+0      	; 0x67e <main+0x6>
 67e:	00 d0       	rcall	.+0      	; 0x680 <main+0x8>
 680:	0f 92       	push	r0
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
	// Setup section

	DIO_void_set_pin_dir(PORTA, B1, OUTPUT);
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	4f ef       	ldi	r20, 0xFF	; 255
 68c:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_void_set_pin_dir>
	DIO_void_set_pin(PORTA, B1);
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	0e 94 db 04 	call	0x9b6	; 0x9b6 <DIO_void_set_pin>

	DIO_void_set_pin_dir(PORTB, B3, OUTPUT);
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	63 e0       	ldi	r22, 0x03	; 3
 69c:	4f ef       	ldi	r20, 0xFF	; 255
 69e:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_void_set_pin_dir>
	DIO_void_clear_pin(PORTB, B3);
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	63 e0       	ldi	r22, 0x03	; 3
 6a6:	0e 94 0b 05 	call	0xa16	; 0xa16 <DIO_void_clear_pin>

	DIO_void_set_pin_dir(PORTD, B7, OUTPUT);
 6aa:	83 e0       	ldi	r24, 0x03	; 3
 6ac:	67 e0       	ldi	r22, 0x07	; 7
 6ae:	4f ef       	ldi	r20, 0xFF	; 255
 6b0:	0e 94 c3 03 	call	0x786	; 0x786 <DIO_void_set_pin_dir>
	DIO_void_set_pin(PORTD, B7);
 6b4:	83 e0       	ldi	r24, 0x03	; 3
 6b6:	67 e0       	ldi	r22, 0x07	; 7
 6b8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <DIO_void_set_pin>

	u8 timer_preload[2]= {0, 200};
 6bc:	19 82       	std	Y+1, r1	; 0x01
 6be:	88 ec       	ldi	r24, 0xC8	; 200
 6c0:	8a 83       	std	Y+2, r24	; 0x02
	timer_config temp_timer_config={ref_TIMER0_WGM_NORM, ref_TIMER_COM_NORM, TIMER_1024PRE, timer_preload};
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	88 7f       	andi	r24, 0xF8	; 248
 6c6:	8b 83       	std	Y+3, r24	; 0x03
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	87 7e       	andi	r24, 0xE7	; 231
 6cc:	8b 83       	std	Y+3, r24	; 0x03
 6ce:	8b 81       	ldd	r24, Y+3	; 0x03
 6d0:	8f 71       	andi	r24, 0x1F	; 31
 6d2:	80 6a       	ori	r24, 0xA0	; 160
 6d4:	8b 83       	std	Y+3, r24	; 0x03
 6d6:	ce 01       	movw	r24, r28
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	9d 83       	std	Y+5, r25	; 0x05
 6dc:	8c 83       	std	Y+4, r24	; 0x04
	TIMER_init(&temp_timer_config);
 6de:	ce 01       	movw	r24, r28
 6e0:	03 96       	adiw	r24, 0x03	; 3
 6e2:	0e 94 49 00 	call	0x92	; 0x92 <TIMER_init>
	TIMER_set_callback(ref_TIMER0_OVF, lde_toggle);
 6e6:	2c e7       	ldi	r18, 0x7C	; 124
 6e8:	33 e0       	ldi	r19, 0x03	; 3
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	b9 01       	movw	r22, r18
 6ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <TIMER_set_callback>
	TIMER_config();
 6f2:	0e 94 79 00 	call	0xf2	; 0xf2 <TIMER_config>
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <main+0x7e>

000006f8 <lde_toggle>:
		// Loop section

	}
	return 0;
}
void lde_toggle(void){
 6f8:	df 93       	push	r29
 6fa:	cf 93       	push	r28
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
	DIO_void_toggle_pin(PORTA, B1);
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	61 e0       	ldi	r22, 0x01	; 1
 704:	0e 94 3c 05 	call	0xa78	; 0xa78 <DIO_void_toggle_pin>
}
 708:	cf 91       	pop	r28
 70a:	df 91       	pop	r29
 70c:	08 95       	ret

0000070e <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	00 d0       	rcall	.+0      	; 0x714 <DIO_void_set_port_dir+0x6>
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	89 83       	std	Y+1, r24	; 0x01
 71a:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	88 2f       	mov	r24, r24
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	fc 01       	movw	r30, r24
 728:	e8 59       	subi	r30, 0x98	; 152
 72a:	ff 4f       	sbci	r31, 0xFF	; 255
 72c:	01 90       	ld	r0, Z+
 72e:	f0 81       	ld	r31, Z
 730:	e0 2d       	mov	r30, r0
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	80 83       	st	Z, r24
}
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	cf 91       	pop	r28
 73c:	df 91       	pop	r29
 73e:	08 95       	ret

00000740 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	0f 92       	push	r0
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	88 2f       	mov	r24, r24
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	fc 01       	movw	r30, r24
 758:	e8 59       	subi	r30, 0x98	; 152
 75a:	ff 4f       	sbci	r31, 0xFF	; 255
 75c:	01 90       	ld	r0, Z+
 75e:	f0 81       	ld	r31, Z
 760:	e0 2d       	mov	r30, r0
 762:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	88 2f       	mov	r24, r24
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	88 0f       	add	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	fc 01       	movw	r30, r24
 770:	e0 59       	subi	r30, 0x90	; 144
 772:	ff 4f       	sbci	r31, 0xFF	; 255
 774:	01 90       	ld	r0, Z+
 776:	f0 81       	ld	r31, Z
 778:	e0 2d       	mov	r30, r0
 77a:	8f ef       	ldi	r24, 0xFF	; 255
 77c:	80 83       	st	Z, r24
}
 77e:	0f 90       	pop	r0
 780:	cf 91       	pop	r28
 782:	df 91       	pop	r29
 784:	08 95       	ret

00000786 <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
 786:	df 93       	push	r29
 788:	cf 93       	push	r28
 78a:	00 d0       	rcall	.+0      	; 0x78c <DIO_void_set_pin_dir+0x6>
 78c:	0f 92       	push	r0
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	89 83       	std	Y+1, r24	; 0x01
 794:	6a 83       	std	Y+2, r22	; 0x02
 796:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	88 23       	and	r24, r24
 79c:	29 f1       	breq	.+74     	; 0x7e8 <DIO_void_set_pin_dir+0x62>
 79e:	89 81       	ldd	r24, Y+1	; 0x01
 7a0:	88 2f       	mov	r24, r24
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	fc 01       	movw	r30, r24
 7aa:	e8 59       	subi	r30, 0x98	; 152
 7ac:	ff 4f       	sbci	r31, 0xFF	; 255
 7ae:	a0 81       	ld	r26, Z
 7b0:	b1 81       	ldd	r27, Z+1	; 0x01
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	88 2f       	mov	r24, r24
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	fc 01       	movw	r30, r24
 7be:	e8 59       	subi	r30, 0x98	; 152
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	01 90       	ld	r0, Z+
 7c4:	f0 81       	ld	r31, Z
 7c6:	e0 2d       	mov	r30, r0
 7c8:	80 81       	ld	r24, Z
 7ca:	48 2f       	mov	r20, r24
 7cc:	8a 81       	ldd	r24, Y+2	; 0x02
 7ce:	28 2f       	mov	r18, r24
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	02 2e       	mov	r0, r18
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_void_set_pin_dir+0x58>
 7da:	88 0f       	add	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	0a 94       	dec	r0
 7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_void_set_pin_dir+0x54>
 7e2:	84 2b       	or	r24, r20
 7e4:	8c 93       	st	X, r24
 7e6:	25 c0       	rjmp	.+74     	; 0x832 <DIO_void_set_pin_dir+0xac>
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	88 2f       	mov	r24, r24
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	fc 01       	movw	r30, r24
 7f4:	e8 59       	subi	r30, 0x98	; 152
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	a0 81       	ld	r26, Z
 7fa:	b1 81       	ldd	r27, Z+1	; 0x01
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	88 2f       	mov	r24, r24
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	fc 01       	movw	r30, r24
 808:	e8 59       	subi	r30, 0x98	; 152
 80a:	ff 4f       	sbci	r31, 0xFF	; 255
 80c:	01 90       	ld	r0, Z+
 80e:	f0 81       	ld	r31, Z
 810:	e0 2d       	mov	r30, r0
 812:	80 81       	ld	r24, Z
 814:	48 2f       	mov	r20, r24
 816:	8a 81       	ldd	r24, Y+2	; 0x02
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 2e       	mov	r0, r18
 822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_void_set_pin_dir+0xa2>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_void_set_pin_dir+0x9e>
 82c:	80 95       	com	r24
 82e:	84 23       	and	r24, r20
 830:	8c 93       	st	X, r24
}
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	cf 91       	pop	r28
 83a:	df 91       	pop	r29
 83c:	08 95       	ret

0000083e <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 83e:	df 93       	push	r29
 840:	cf 93       	push	r28
 842:	00 d0       	rcall	.+0      	; 0x844 <DIO_void_set_pin_in_pullUP+0x6>
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	89 83       	std	Y+1, r24	; 0x01
 84a:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	88 2f       	mov	r24, r24
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	fc 01       	movw	r30, r24
 858:	e8 59       	subi	r30, 0x98	; 152
 85a:	ff 4f       	sbci	r31, 0xFF	; 255
 85c:	a0 81       	ld	r26, Z
 85e:	b1 81       	ldd	r27, Z+1	; 0x01
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	88 2f       	mov	r24, r24
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	fc 01       	movw	r30, r24
 86c:	e8 59       	subi	r30, 0x98	; 152
 86e:	ff 4f       	sbci	r31, 0xFF	; 255
 870:	01 90       	ld	r0, Z+
 872:	f0 81       	ld	r31, Z
 874:	e0 2d       	mov	r30, r0
 876:	80 81       	ld	r24, Z
 878:	48 2f       	mov	r20, r24
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	2a 95       	dec	r18
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	80 95       	com	r24
 890:	84 23       	and	r24, r20
 892:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	88 2f       	mov	r24, r24
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	fc 01       	movw	r30, r24
 8a0:	e0 59       	subi	r30, 0x90	; 144
 8a2:	ff 4f       	sbci	r31, 0xFF	; 255
 8a4:	a0 81       	ld	r26, Z
 8a6:	b1 81       	ldd	r27, Z+1	; 0x01
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	88 2f       	mov	r24, r24
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	fc 01       	movw	r30, r24
 8b4:	e0 59       	subi	r30, 0x90	; 144
 8b6:	ff 4f       	sbci	r31, 0xFF	; 255
 8b8:	01 90       	ld	r0, Z+
 8ba:	f0 81       	ld	r31, Z
 8bc:	e0 2d       	mov	r30, r0
 8be:	80 81       	ld	r24, Z
 8c0:	48 2f       	mov	r20, r24
 8c2:	8a 81       	ldd	r24, Y+2	; 0x02
 8c4:	28 2f       	mov	r18, r24
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	02 2e       	mov	r0, r18
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	0a 94       	dec	r0
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	84 2b       	or	r24, r20
 8da:	8c 93       	st	X, r24
}
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	cf 91       	pop	r28
 8e2:	df 91       	pop	r29
 8e4:	08 95       	ret

000008e6 <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
 8e6:	df 93       	push	r29
 8e8:	cf 93       	push	r28
 8ea:	0f 92       	push	r0
 8ec:	cd b7       	in	r28, 0x3d	; 61
 8ee:	de b7       	in	r29, 0x3e	; 62
 8f0:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
 8f2:	89 81       	ldd	r24, Y+1	; 0x01
 8f4:	88 2f       	mov	r24, r24
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	fc 01       	movw	r30, r24
 8fe:	e0 59       	subi	r30, 0x90	; 144
 900:	ff 4f       	sbci	r31, 0xFF	; 255
 902:	01 90       	ld	r0, Z+
 904:	f0 81       	ld	r31, Z
 906:	e0 2d       	mov	r30, r0
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	80 83       	st	Z, r24
}
 90c:	0f 90       	pop	r0
 90e:	cf 91       	pop	r28
 910:	df 91       	pop	r29
 912:	08 95       	ret

00000914 <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
 914:	df 93       	push	r29
 916:	cf 93       	push	r28
 918:	0f 92       	push	r0
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	88 2f       	mov	r24, r24
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	fc 01       	movw	r30, r24
 92c:	e0 59       	subi	r30, 0x90	; 144
 92e:	ff 4f       	sbci	r31, 0xFF	; 255
 930:	01 90       	ld	r0, Z+
 932:	f0 81       	ld	r31, Z
 934:	e0 2d       	mov	r30, r0
 936:	10 82       	st	Z, r1
}
 938:	0f 90       	pop	r0
 93a:	cf 91       	pop	r28
 93c:	df 91       	pop	r29
 93e:	08 95       	ret

00000940 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
 940:	df 93       	push	r29
 942:	cf 93       	push	r28
 944:	0f 92       	push	r0
 946:	cd b7       	in	r28, 0x3d	; 61
 948:	de b7       	in	r29, 0x3e	; 62
 94a:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	88 2f       	mov	r24, r24
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	fc 01       	movw	r30, r24
 958:	e0 59       	subi	r30, 0x90	; 144
 95a:	ff 4f       	sbci	r31, 0xFF	; 255
 95c:	a0 81       	ld	r26, Z
 95e:	b1 81       	ldd	r27, Z+1	; 0x01
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	88 2f       	mov	r24, r24
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	88 0f       	add	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	fc 01       	movw	r30, r24
 96c:	e0 59       	subi	r30, 0x90	; 144
 96e:	ff 4f       	sbci	r31, 0xFF	; 255
 970:	01 90       	ld	r0, Z+
 972:	f0 81       	ld	r31, Z
 974:	e0 2d       	mov	r30, r0
 976:	80 81       	ld	r24, Z
 978:	80 95       	com	r24
 97a:	8c 93       	st	X, r24
}
 97c:	0f 90       	pop	r0
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	00 d0       	rcall	.+0      	; 0x98a <DIO_void_assign_port+0x6>
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	89 83       	std	Y+1, r24	; 0x01
 990:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	88 2f       	mov	r24, r24
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	fc 01       	movw	r30, r24
 99e:	e0 59       	subi	r30, 0x90	; 144
 9a0:	ff 4f       	sbci	r31, 0xFF	; 255
 9a2:	01 90       	ld	r0, Z+
 9a4:	f0 81       	ld	r31, Z
 9a6:	e0 2d       	mov	r30, r0
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	80 83       	st	Z, r24
}
 9ac:	0f 90       	pop	r0
 9ae:	0f 90       	pop	r0
 9b0:	cf 91       	pop	r28
 9b2:	df 91       	pop	r29
 9b4:	08 95       	ret

000009b6 <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 9b6:	df 93       	push	r29
 9b8:	cf 93       	push	r28
 9ba:	00 d0       	rcall	.+0      	; 0x9bc <DIO_void_set_pin+0x6>
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	89 83       	std	Y+1, r24	; 0x01
 9c2:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	88 2f       	mov	r24, r24
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	fc 01       	movw	r30, r24
 9d0:	e0 59       	subi	r30, 0x90	; 144
 9d2:	ff 4f       	sbci	r31, 0xFF	; 255
 9d4:	a0 81       	ld	r26, Z
 9d6:	b1 81       	ldd	r27, Z+1	; 0x01
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	88 2f       	mov	r24, r24
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	fc 01       	movw	r30, r24
 9e4:	e0 59       	subi	r30, 0x90	; 144
 9e6:	ff 4f       	sbci	r31, 0xFF	; 255
 9e8:	01 90       	ld	r0, Z+
 9ea:	f0 81       	ld	r31, Z
 9ec:	e0 2d       	mov	r30, r0
 9ee:	80 81       	ld	r24, Z
 9f0:	48 2f       	mov	r20, r24
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	28 2f       	mov	r18, r24
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 2e       	mov	r0, r18
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_void_set_pin+0x4e>
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	0a 94       	dec	r0
 a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_void_set_pin+0x4a>
 a08:	84 2b       	or	r24, r20
 a0a:	8c 93       	st	X, r24
}
 a0c:	0f 90       	pop	r0
 a0e:	0f 90       	pop	r0
 a10:	cf 91       	pop	r28
 a12:	df 91       	pop	r29
 a14:	08 95       	ret

00000a16 <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 a16:	df 93       	push	r29
 a18:	cf 93       	push	r28
 a1a:	00 d0       	rcall	.+0      	; 0xa1c <DIO_void_clear_pin+0x6>
 a1c:	cd b7       	in	r28, 0x3d	; 61
 a1e:	de b7       	in	r29, 0x3e	; 62
 a20:	89 83       	std	Y+1, r24	; 0x01
 a22:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 a24:	89 81       	ldd	r24, Y+1	; 0x01
 a26:	88 2f       	mov	r24, r24
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	fc 01       	movw	r30, r24
 a30:	e0 59       	subi	r30, 0x90	; 144
 a32:	ff 4f       	sbci	r31, 0xFF	; 255
 a34:	a0 81       	ld	r26, Z
 a36:	b1 81       	ldd	r27, Z+1	; 0x01
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	88 2f       	mov	r24, r24
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	88 0f       	add	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	fc 01       	movw	r30, r24
 a44:	e0 59       	subi	r30, 0x90	; 144
 a46:	ff 4f       	sbci	r31, 0xFF	; 255
 a48:	01 90       	ld	r0, Z+
 a4a:	f0 81       	ld	r31, Z
 a4c:	e0 2d       	mov	r30, r0
 a4e:	80 81       	ld	r24, Z
 a50:	48 2f       	mov	r20, r24
 a52:	8a 81       	ldd	r24, Y+2	; 0x02
 a54:	28 2f       	mov	r18, r24
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	02 2e       	mov	r0, r18
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_void_clear_pin+0x4e>
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	0a 94       	dec	r0
 a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_void_clear_pin+0x4a>
 a68:	80 95       	com	r24
 a6a:	84 23       	and	r24, r20
 a6c:	8c 93       	st	X, r24
}
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	cf 91       	pop	r28
 a74:	df 91       	pop	r29
 a76:	08 95       	ret

00000a78 <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 a78:	df 93       	push	r29
 a7a:	cf 93       	push	r28
 a7c:	00 d0       	rcall	.+0      	; 0xa7e <DIO_void_toggle_pin+0x6>
 a7e:	cd b7       	in	r28, 0x3d	; 61
 a80:	de b7       	in	r29, 0x3e	; 62
 a82:	89 83       	std	Y+1, r24	; 0x01
 a84:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
 a86:	89 81       	ldd	r24, Y+1	; 0x01
 a88:	88 2f       	mov	r24, r24
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	fc 01       	movw	r30, r24
 a92:	e0 59       	subi	r30, 0x90	; 144
 a94:	ff 4f       	sbci	r31, 0xFF	; 255
 a96:	a0 81       	ld	r26, Z
 a98:	b1 81       	ldd	r27, Z+1	; 0x01
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	88 2f       	mov	r24, r24
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	fc 01       	movw	r30, r24
 aa6:	e0 59       	subi	r30, 0x90	; 144
 aa8:	ff 4f       	sbci	r31, 0xFF	; 255
 aaa:	01 90       	ld	r0, Z+
 aac:	f0 81       	ld	r31, Z
 aae:	e0 2d       	mov	r30, r0
 ab0:	80 81       	ld	r24, Z
 ab2:	48 2f       	mov	r20, r24
 ab4:	8a 81       	ldd	r24, Y+2	; 0x02
 ab6:	28 2f       	mov	r18, r24
 ab8:	30 e0       	ldi	r19, 0x00	; 0
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	02 2e       	mov	r0, r18
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_void_toggle_pin+0x4e>
 ac2:	88 0f       	add	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	0a 94       	dec	r0
 ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_void_toggle_pin+0x4a>
 aca:	84 27       	eor	r24, r20
 acc:	8c 93       	st	X, r24
}
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	cf 91       	pop	r28
 ad4:	df 91       	pop	r29
 ad6:	08 95       	ret

00000ad8 <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
 ad8:	df 93       	push	r29
 ada:	cf 93       	push	r28
 adc:	00 d0       	rcall	.+0      	; 0xade <DIO_void_assign_pin+0x6>
 ade:	0f 92       	push	r0
 ae0:	cd b7       	in	r28, 0x3d	; 61
 ae2:	de b7       	in	r29, 0x3e	; 62
 ae4:	89 83       	std	Y+1, r24	; 0x01
 ae6:	6a 83       	std	Y+2, r22	; 0x02
 ae8:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
 aea:	8b 81       	ldd	r24, Y+3	; 0x03
 aec:	88 23       	and	r24, r24
 aee:	29 f1       	breq	.+74     	; 0xb3a <DIO_void_assign_pin+0x62>
 af0:	89 81       	ldd	r24, Y+1	; 0x01
 af2:	88 2f       	mov	r24, r24
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	fc 01       	movw	r30, r24
 afc:	e0 59       	subi	r30, 0x90	; 144
 afe:	ff 4f       	sbci	r31, 0xFF	; 255
 b00:	a0 81       	ld	r26, Z
 b02:	b1 81       	ldd	r27, Z+1	; 0x01
 b04:	89 81       	ldd	r24, Y+1	; 0x01
 b06:	88 2f       	mov	r24, r24
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	fc 01       	movw	r30, r24
 b10:	e0 59       	subi	r30, 0x90	; 144
 b12:	ff 4f       	sbci	r31, 0xFF	; 255
 b14:	01 90       	ld	r0, Z+
 b16:	f0 81       	ld	r31, Z
 b18:	e0 2d       	mov	r30, r0
 b1a:	80 81       	ld	r24, Z
 b1c:	48 2f       	mov	r20, r24
 b1e:	8a 81       	ldd	r24, Y+2	; 0x02
 b20:	28 2f       	mov	r18, r24
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	02 2e       	mov	r0, r18
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_void_assign_pin+0x58>
 b2c:	88 0f       	add	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	0a 94       	dec	r0
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_void_assign_pin+0x54>
 b34:	84 2b       	or	r24, r20
 b36:	8c 93       	st	X, r24
 b38:	25 c0       	rjmp	.+74     	; 0xb84 <DIO_void_assign_pin+0xac>
 b3a:	89 81       	ldd	r24, Y+1	; 0x01
 b3c:	88 2f       	mov	r24, r24
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	88 0f       	add	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	fc 01       	movw	r30, r24
 b46:	e0 59       	subi	r30, 0x90	; 144
 b48:	ff 4f       	sbci	r31, 0xFF	; 255
 b4a:	a0 81       	ld	r26, Z
 b4c:	b1 81       	ldd	r27, Z+1	; 0x01
 b4e:	89 81       	ldd	r24, Y+1	; 0x01
 b50:	88 2f       	mov	r24, r24
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	88 0f       	add	r24, r24
 b56:	99 1f       	adc	r25, r25
 b58:	fc 01       	movw	r30, r24
 b5a:	e0 59       	subi	r30, 0x90	; 144
 b5c:	ff 4f       	sbci	r31, 0xFF	; 255
 b5e:	01 90       	ld	r0, Z+
 b60:	f0 81       	ld	r31, Z
 b62:	e0 2d       	mov	r30, r0
 b64:	80 81       	ld	r24, Z
 b66:	48 2f       	mov	r20, r24
 b68:	8a 81       	ldd	r24, Y+2	; 0x02
 b6a:	28 2f       	mov	r18, r24
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	02 2e       	mov	r0, r18
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_void_assign_pin+0xa2>
 b76:	88 0f       	add	r24, r24
 b78:	99 1f       	adc	r25, r25
 b7a:	0a 94       	dec	r0
 b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_void_assign_pin+0x9e>
 b7e:	80 95       	com	r24
 b80:	84 23       	and	r24, r20
 b82:	8c 93       	st	X, r24
}
 b84:	0f 90       	pop	r0
 b86:	0f 90       	pop	r0
 b88:	0f 90       	pop	r0
 b8a:	cf 91       	pop	r28
 b8c:	df 91       	pop	r29
 b8e:	08 95       	ret

00000b90 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
 b90:	df 93       	push	r29
 b92:	cf 93       	push	r28
 b94:	0f 92       	push	r0
 b96:	cd b7       	in	r28, 0x3d	; 61
 b98:	de b7       	in	r29, 0x3e	; 62
 b9a:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
 b9c:	89 81       	ldd	r24, Y+1	; 0x01
 b9e:	88 2f       	mov	r24, r24
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	88 0f       	add	r24, r24
 ba4:	99 1f       	adc	r25, r25
 ba6:	fc 01       	movw	r30, r24
 ba8:	e0 5a       	subi	r30, 0xA0	; 160
 baa:	ff 4f       	sbci	r31, 0xFF	; 255
 bac:	01 90       	ld	r0, Z+
 bae:	f0 81       	ld	r31, Z
 bb0:	e0 2d       	mov	r30, r0
 bb2:	80 81       	ld	r24, Z
}
 bb4:	0f 90       	pop	r0
 bb6:	cf 91       	pop	r28
 bb8:	df 91       	pop	r29
 bba:	08 95       	ret

00000bbc <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
 bbc:	df 93       	push	r29
 bbe:	cf 93       	push	r28
 bc0:	00 d0       	rcall	.+0      	; 0xbc2 <DIO_u8_get_pin+0x6>
 bc2:	cd b7       	in	r28, 0x3d	; 61
 bc4:	de b7       	in	r29, 0x3e	; 62
 bc6:	89 83       	std	Y+1, r24	; 0x01
 bc8:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
 bca:	89 81       	ldd	r24, Y+1	; 0x01
 bcc:	88 2f       	mov	r24, r24
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	88 0f       	add	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	fc 01       	movw	r30, r24
 bd6:	e0 5a       	subi	r30, 0xA0	; 160
 bd8:	ff 4f       	sbci	r31, 0xFF	; 255
 bda:	01 90       	ld	r0, Z+
 bdc:	f0 81       	ld	r31, Z
 bde:	e0 2d       	mov	r30, r0
 be0:	80 81       	ld	r24, Z
 be2:	28 2f       	mov	r18, r24
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	8a 81       	ldd	r24, Y+2	; 0x02
 be8:	88 2f       	mov	r24, r24
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	a9 01       	movw	r20, r18
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_u8_get_pin+0x38>
 bf0:	55 95       	asr	r21
 bf2:	47 95       	ror	r20
 bf4:	8a 95       	dec	r24
 bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_u8_get_pin+0x34>
 bf8:	ca 01       	movw	r24, r20
 bfa:	81 70       	andi	r24, 0x01	; 1
}
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	cf 91       	pop	r28
 c02:	df 91       	pop	r29
 c04:	08 95       	ret

00000c06 <_exit>:
 c06:	f8 94       	cli

00000c08 <__stop_program>:
 c08:	ff cf       	rjmp	.-2      	; 0xc08 <__stop_program>
