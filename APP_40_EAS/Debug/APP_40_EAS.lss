
APP_40_EAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00005e9e  00005f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080019c  0080019c  0000606e  2**0
                  ALLOC
  3 .stab         000046a4  00000000  00000000  00006070  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000183a  00000000  00000000  0000a714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000bf4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000c12e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000c360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000ebf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00010219  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000115f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00011b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001255d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6f 2e 	jmp	0x5cde	; 0x5cde <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 08 	call	0x1054	; 0x1054 <main>
      8a:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 16 2f 	jmp	0x5e2c	; 0x5e2c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 16 2f 	jmp	0x5e2c	; 0x5e2c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1e 2f 	jmp	0x5e3c	; 0x5e3c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 26 2f 	jmp	0x5e4c	; 0x5e4c <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 42 2f 	jmp	0x5e84	; 0x5e84 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 1e 2f 	jmp	0x5e3c	; 0x5e3c <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 3a 2f 	jmp	0x5e74	; 0x5e74 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ed 57       	subi	r30, 0x7D	; 125
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <Temp_sensor_voidInit>:
ADC_config_struct Temp_sensor_config = {Temp_ADC_def_ch, Temp_sensor_Prescaler, Temp_sensor_ADATE, Temp_sensor_ADTS, Temp_sensor_ADIE};


/* Implementing of the driver functions */
// Initiate the sensor through a given ADC channel
void Temp_sensor_voidInit(u8 copy_u8_ADC_ch){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if((copy_u8_ADC_ch <= Temp_ADC_max_ch)){
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	50 f4       	brcc	.+20     	; 0xf70 <Temp_sensor_voidInit+0x26>
		Temp_sensor_config.MUX = copy_u8_ADC_ch;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 71       	andi	r24, 0x1F	; 31
     f60:	98 2f       	mov	r25, r24
     f62:	9f 71       	andi	r25, 0x1F	; 31
     f64:	80 91 9c 01 	lds	r24, 0x019C
     f68:	80 7e       	andi	r24, 0xE0	; 224
     f6a:	89 2b       	or	r24, r25
     f6c:	80 93 9c 01 	sts	0x019C, r24
	}
	else{

	}
	ADC_void_init();
     f70:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <ADC_void_init>
}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <Temp_sensor_voidClcTemp>:

// Calculate the current data and return it
f64 Temp_sensor_voidClcTemp(void ){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	29 97       	sbiw	r28, 0x09	; 9
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	/*
	 *
	 */
	u16 currentAccumulator = Temp_sensor_Val_flour;
     f90:	1f 82       	std	Y+7, r1	; 0x07
     f92:	1e 82       	std	Y+6, r1	; 0x06
	u16 current_ADC_data = Temp_sensor_Val_flour;
     f94:	19 86       	std	Y+9, r1	; 0x09
     f96:	18 86       	std	Y+8, r1	; 0x08
	ADC_void_config(&Temp_sensor_config);
     f98:	8c e9       	ldi	r24, 0x9C	; 156
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <ADC_void_config>
	for(u8 acc_counter= Temp_sensor_Val_flour; acc_counter < Temp_sensor_Acc; acc_counter++){
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <Temp_sensor_voidClcTemp+0x46>
		ADC_void_read_data(&current_ADC_data);
     fa4:	ce 01       	movw	r24, r28
     fa6:	08 96       	adiw	r24, 0x08	; 8
     fa8:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <ADC_void_read_data>
		currentAccumulator+= current_ADC_data;
     fac:	28 85       	ldd	r18, Y+8	; 0x08
     fae:	39 85       	ldd	r19, Y+9	; 0x09
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	9f 81       	ldd	r25, Y+7	; 0x07
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	9f 83       	std	Y+7, r25	; 0x07
     fba:	8e 83       	std	Y+6, r24	; 0x06
	 *
	 */
	u16 currentAccumulator = Temp_sensor_Val_flour;
	u16 current_ADC_data = Temp_sensor_Val_flour;
	ADC_void_config(&Temp_sensor_config);
	for(u8 acc_counter= Temp_sensor_Val_flour; acc_counter < Temp_sensor_Acc; acc_counter++){
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	8a 30       	cpi	r24, 0x0A	; 10
     fc6:	70 f3       	brcs	.-36     	; 0xfa4 <Temp_sensor_voidClcTemp+0x28>
		ADC_void_read_data(&current_ADC_data);
		currentAccumulator+= current_ADC_data;
	}
	current_ADC_data = currentAccumulator/Temp_sensor_Acc;
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__udivmodhi4>
     fd6:	cb 01       	movw	r24, r22
     fd8:	99 87       	std	Y+9, r25	; 0x09
     fda:	88 87       	std	Y+8, r24	; 0x08
	f64 current_data = ((current_ADC_data/Temp_sensor_ADC_max)*Temp_V_ref)/Volt_temp_ref;
     fdc:	88 85       	ldd	r24, Y+8	; 0x08
     fde:	99 85       	ldd	r25, Y+9	; 0x09
     fe0:	cc 01       	movw	r24, r24
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	54 e4       	ldi	r21, 0x44	; 68
     ffe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	bc 01       	movw	r22, r24
    1008:	cd 01       	movw	r24, r26
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e4       	ldi	r19, 0x40	; 64
    100e:	4c e9       	ldi	r20, 0x9C	; 156
    1010:	55 e4       	ldi	r21, 0x45	; 69
    1012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	bc 01       	movw	r22, r24
    101c:	cd 01       	movw	r24, r26
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e2       	ldi	r20, 0x20	; 32
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	ac 83       	std	Y+4, r26	; 0x04
    1034:	bd 83       	std	Y+5, r27	; 0x05
	return current_data;
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	ac 81       	ldd	r26, Y+4	; 0x04
    103c:	bd 81       	ldd	r27, Y+5	; 0x05
}
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	29 96       	adiw	r28, 0x09	; 9
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <main>:
#include "../../Drivers/HAL/LCD/LCD_interface.h"
#include "../../Drivers/HAL/Temp_sensor/Temp_sensor_interface.h"
#include "../../Drivers/HAL/LDR_sensor/LDR_sensor_interface.h"

// main function
int main(void){
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	2a 97       	sbiw	r28, 0x0a	; 10
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61

	Temp_sensor_voidInit(0);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Temp_sensor_voidInit>
	LDRsensor_voidInit(1);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 b8 08 	call	0x1170	; 0x1170 <LDRsensor_voidInit>

	LCD_init();
    1074:	0e 94 c8 22 	call	0x4590	; 0x4590 <LCD_init>
	LCD_write_str((u8*)"Temp= ");
    1078:	80 e6       	ldi	r24, 0x60	; 96
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 ce 29 	call	0x539c	; 0x539c <LCD_write_str>
	LCD_set_cursor(1, 0);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <LCD_set_cursor>
	LCD_write_str((u8*)"Light lvl= ");
    1088:	87 e6       	ldi	r24, 0x67	; 103
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 ce 29 	call	0x539c	; 0x539c <LCD_write_str>

	f64 curr_temp, prev_temp;
	u8 curr_light, prev_light;

	curr_temp = Temp_sensor_voidClcTemp();
    1090:	0e 94 be 07 	call	0xf7c	; 0xf7c <Temp_sensor_voidClcTemp>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	8f 83       	std	Y+7, r24	; 0x07
    109a:	98 87       	std	Y+8, r25	; 0x08
    109c:	a9 87       	std	Y+9, r26	; 0x09
    109e:	ba 87       	std	Y+10, r27	; 0x0a
	curr_light = LDRsensor_voidClcInt();
    10a0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LDRsensor_voidClcInt>
    10a4:	8a 83       	std	Y+2, r24	; 0x02

	while(1){

		if(curr_temp != prev_temp){
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	78 85       	ldd	r23, Y+8	; 0x08
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	2b 81       	ldd	r18, Y+3	; 0x03
    10b0:	3c 81       	ldd	r19, Y+4	; 0x04
    10b2:	4d 81       	ldd	r20, Y+5	; 0x05
    10b4:	5e 81       	ldd	r21, Y+6	; 0x06
    10b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    10ba:	88 23       	and	r24, r24
    10bc:	21 f1       	breq	.+72     	; 0x1106 <main+0xb2>
			prev_temp = curr_temp;
    10be:	8f 81       	ldd	r24, Y+7	; 0x07
    10c0:	98 85       	ldd	r25, Y+8	; 0x08
    10c2:	a9 85       	ldd	r26, Y+9	; 0x09
    10c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    10c6:	8b 83       	std	Y+3, r24	; 0x03
    10c8:	9c 83       	std	Y+4, r25	; 0x04
    10ca:	ad 83       	std	Y+5, r26	; 0x05
    10cc:	be 83       	std	Y+6, r27	; 0x06
			LCD_set_cursor(0, 6);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	66 e0       	ldi	r22, 0x06	; 6
    10d2:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <LCD_set_cursor>
			LCD_write_str("     ");
    10d6:	83 e7       	ldi	r24, 0x73	; 115
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 ce 29 	call	0x539c	; 0x539c <LCD_write_str>
			LCD_set_cursor(0, 6);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <LCD_set_cursor>
			LCD_write_float(prev_light, 2);
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	0e 94 91 2a 	call	0x5522	; 0x5522 <LCD_write_float>
		}
		if(curr_temp != prev_temp){
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	2b 81       	ldd	r18, Y+3	; 0x03
    1110:	3c 81       	ldd	r19, Y+4	; 0x04
    1112:	4d 81       	ldd	r20, Y+5	; 0x05
    1114:	5e 81       	ldd	r21, Y+6	; 0x06
    1116:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    111a:	88 23       	and	r24, r24
    111c:	e9 f0       	breq	.+58     	; 0x1158 <main+0x104>
			prev_temp = curr_temp;
    111e:	8f 81       	ldd	r24, Y+7	; 0x07
    1120:	98 85       	ldd	r25, Y+8	; 0x08
    1122:	a9 85       	ldd	r26, Y+9	; 0x09
    1124:	ba 85       	ldd	r27, Y+10	; 0x0a
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	ad 83       	std	Y+5, r26	; 0x05
    112c:	be 83       	std	Y+6, r27	; 0x06
			LCD_set_cursor(1, 11);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	6b e0       	ldi	r22, 0x0B	; 11
    1132:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <LCD_set_cursor>
			LCD_write_str(" ");
    1136:	89 e7       	ldi	r24, 0x79	; 121
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 ce 29 	call	0x539c	; 0x539c <LCD_write_str>
			LCD_set_cursor(1, 11);
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	6b e0       	ldi	r22, 0x0B	; 11
    1142:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <LCD_set_cursor>
			LCD_write_s32_number(prev_light);
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 f7 29 	call	0x53ee	; 0x53ee <LCD_write_s32_number>
		}
		curr_temp = Temp_sensor_voidClcTemp();
    1158:	0e 94 be 07 	call	0xf7c	; 0xf7c <Temp_sensor_voidClcTemp>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8f 83       	std	Y+7, r24	; 0x07
    1162:	98 87       	std	Y+8, r25	; 0x08
    1164:	a9 87       	std	Y+9, r26	; 0x09
    1166:	ba 87       	std	Y+10, r27	; 0x0a
		curr_light = LDRsensor_voidClcInt();
    1168:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LDRsensor_voidClcInt>
    116c:	8a 83       	std	Y+2, r24	; 0x02
    116e:	9b cf       	rjmp	.-202    	; 0x10a6 <main+0x52>

00001170 <LDRsensor_voidInit>:
ADC_config_struct LDR_sensor_config = {LDR_sensor_def_ch, LDR_sensor_Prescaler, LDR_sensor_ADATE, LDR_sensor_ADTS, LDR_sensor_ADIE};


/* Implementing of the driver functions */
// Initiate the sensor through a given ADC channel
void LDRsensor_voidInit(u8 copy_u8_ADC_ch){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if(copy_u8_ADC_ch <= LDR_sensor_max_ch){
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	50 f4       	brcc	.+20     	; 0x1196 <LDRsensor_voidInit+0x26>
		LDR_sensor_config.MUX = copy_u8_ADC_ch;
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	8f 71       	andi	r24, 0x1F	; 31
    1186:	98 2f       	mov	r25, r24
    1188:	9f 71       	andi	r25, 0x1F	; 31
    118a:	80 91 9e 01 	lds	r24, 0x019E
    118e:	80 7e       	andi	r24, 0xE0	; 224
    1190:	89 2b       	or	r24, r25
    1192:	80 93 9e 01 	sts	0x019E, r24
	}
	ADC_void_init();
    1196:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <ADC_void_init>
}
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <LDRsensor_voidClcInt>:

// start calculating the voltage value
u8 LDRsensor_voidClcInt(void ){
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <LDRsensor_voidClcInt+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <LDRsensor_voidClcInt+0x8>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <LDRsensor_voidClcInt+0xa>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	u16 LDR_sensor_Accumulator = LDR_sensor_Val_flour;
    11b0:	1b 82       	std	Y+3, r1	; 0x03
    11b2:	1a 82       	std	Y+2, r1	; 0x02
	u16 LDR_ADC_Data = LDR_sensor_Val_flour;
    11b4:	1d 82       	std	Y+5, r1	; 0x05
    11b6:	1c 82       	std	Y+4, r1	; 0x04
	ADC_void_config(&LDR_sensor_config);
    11b8:	8e e9       	ldi	r24, 0x9E	; 158
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <ADC_void_config>
	for(u8 acc_counter= LDR_sensor_Val_flour; acc_counter < LDRsensor_Acc; acc_counter++){
    11c0:	19 82       	std	Y+1, r1	; 0x01
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <LDRsensor_voidClcInt+0x40>
		ADC_void_read_data(&LDR_ADC_Data);
    11c4:	ce 01       	movw	r24, r28
    11c6:	04 96       	adiw	r24, 0x04	; 4
    11c8:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <ADC_void_read_data>
		LDR_sensor_Accumulator += LDR_ADC_Data;
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	9b 83       	std	Y+3, r25	; 0x03
    11da:	8a 83       	std	Y+2, r24	; 0x02
	 *
	 */
	u16 LDR_sensor_Accumulator = LDR_sensor_Val_flour;
	u16 LDR_ADC_Data = LDR_sensor_Val_flour;
	ADC_void_config(&LDR_sensor_config);
	for(u8 acc_counter= LDR_sensor_Val_flour; acc_counter < LDRsensor_Acc; acc_counter++){
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	8a 30       	cpi	r24, 0x0A	; 10
    11e6:	70 f3       	brcs	.-36     	; 0x11c4 <LDRsensor_voidClcInt+0x22>
		ADC_void_read_data(&LDR_ADC_Data);
		LDR_sensor_Accumulator += LDR_ADC_Data;
	}
	LDR_ADC_Data = LDR_sensor_Accumulator/LDRsensor_Acc;
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	2a e0       	ldi	r18, 0x0A	; 10
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	b9 01       	movw	r22, r18
    11f2:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__udivmodhi4>
    11f6:	cb 01       	movw	r24, r22
    11f8:	9d 83       	std	Y+5, r25	; 0x05
    11fa:	8c 83       	std	Y+4, r24	; 0x04
	#if LDR_connect == 1
		if(LDR_ADC_Data < 150)
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	86 39       	cpi	r24, 0x96	; 150
    1202:	91 05       	cpc	r25, r1
    1204:	10 f4       	brcc	.+4      	; 0x120a <LDRsensor_voidClcInt+0x68>
			return 0;
    1206:	1e 82       	std	Y+6, r1	; 0x06
    1208:	14 c0       	rjmp	.+40     	; 0x1232 <LDRsensor_voidClcInt+0x90>
		else if (LDR_ADC_Data < 500)
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	84 3f       	cpi	r24, 0xF4	; 244
    1212:	92 07       	cpc	r25, r18
    1214:	18 f4       	brcc	.+6      	; 0x121c <LDRsensor_voidClcInt+0x7a>
			return 2;
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	8e 83       	std	Y+6, r24	; 0x06
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <LDRsensor_voidClcInt+0x90>
		else if (LDR_ADC_Data < 750)
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	22 e0       	ldi	r18, 0x02	; 2
    1222:	8e 3e       	cpi	r24, 0xEE	; 238
    1224:	92 07       	cpc	r25, r18
    1226:	18 f4       	brcc	.+6      	; 0x122e <LDRsensor_voidClcInt+0x8c>
			return 4;
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	8e 83       	std	Y+6, r24	; 0x06
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <LDRsensor_voidClcInt+0x90>
		else
			return 6;
    122e:	26 e0       	ldi	r18, 0x06	; 6
    1230:	2e 83       	std	Y+6, r18	; 0x06
    1232:	8e 81       	ldd	r24, Y+6	; 0x06
		else
			return 0;
	#else
		return 10;
	#endif
}
    1234:	26 96       	adiw	r28, 0x06	; 6
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <LCD_pow>:
#include "../../MCAL/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	27 97       	sbiw	r28, 0x07	; 7
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	8e 83       	std	Y+6, r24	; 0x06
    125c:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	8a 83       	std	Y+2, r24	; 0x02
    126a:	9b 83       	std	Y+3, r25	; 0x03
    126c:	ac 83       	std	Y+4, r26	; 0x04
    126e:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    1270:	19 82       	std	Y+1, r1	; 0x01
    1272:	16 c0       	rjmp	.+44     	; 0x12a0 <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
    1274:	8e 81       	ldd	r24, Y+6	; 0x06
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	ac 81       	ldd	r26, Y+4	; 0x04
    1284:	bd 81       	ldd	r27, Y+5	; 0x05
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	9b 83       	std	Y+3, r25	; 0x03
    1296:	ac 83       	std	Y+4, r26	; 0x04
    1298:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8f 81       	ldd	r24, Y+7	; 0x07
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	04 f3       	brlt	.-64     	; 0x1274 <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	ac 81       	ldd	r26, Y+4	; 0x04
    12ba:	bd 81       	ldd	r27, Y+5	; 0x05
}
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	27 96       	adiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	e1 97       	sbiw	r28, 0x31	; 49
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	62 e0       	ldi	r22, 0x02	; 2
    12ec:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e8       	ldi	r26, 0x80	; 128
    12fe:	bf e3       	ldi	r27, 0x3F	; 63
    1300:	8d a7       	std	Y+45, r24	; 0x2d
    1302:	9e a7       	std	Y+46, r25	; 0x2e
    1304:	af a7       	std	Y+47, r26	; 0x2f
    1306:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1308:	6d a5       	ldd	r22, Y+45	; 0x2d
    130a:	7e a5       	ldd	r23, Y+46	; 0x2e
    130c:	8f a5       	ldd	r24, Y+47	; 0x2f
    130e:	98 a9       	ldd	r25, Y+48	; 0x30
    1310:	2b ea       	ldi	r18, 0xAB	; 171
    1312:	3a ea       	ldi	r19, 0xAA	; 170
    1314:	4a e2       	ldi	r20, 0x2A	; 42
    1316:	50 e4       	ldi	r21, 0x40	; 64
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	89 a7       	std	Y+41, r24	; 0x29
    1322:	9a a7       	std	Y+42, r25	; 0x2a
    1324:	ab a7       	std	Y+43, r26	; 0x2b
    1326:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1328:	69 a5       	ldd	r22, Y+41	; 0x29
    132a:	7a a5       	ldd	r23, Y+42	; 0x2a
    132c:	8b a5       	ldd	r24, Y+43	; 0x2b
    132e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	1c f4       	brge	.+6      	; 0x1346 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	88 a7       	std	Y+40, r24	; 0x28
    1344:	91 c0       	rjmp	.+290    	; 0x1468 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    1346:	69 a5       	ldd	r22, Y+41	; 0x29
    1348:	7a a5       	ldd	r23, Y+42	; 0x2a
    134a:	8b a5       	ldd	r24, Y+43	; 0x2b
    134c:	9c a5       	ldd	r25, Y+44	; 0x2c
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4f e7       	ldi	r20, 0x7F	; 127
    1354:	53 e4       	ldi	r21, 0x43	; 67
    1356:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    135a:	18 16       	cp	r1, r24
    135c:	0c f0       	brlt	.+2      	; 0x1360 <LCD_write_data_8bit+0x8e>
    135e:	7b c0       	rjmp	.+246    	; 0x1456 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1360:	6d a5       	ldd	r22, Y+45	; 0x2d
    1362:	7e a5       	ldd	r23, Y+46	; 0x2e
    1364:	8f a5       	ldd	r24, Y+47	; 0x2f
    1366:	98 a9       	ldd	r25, Y+48	; 0x30
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	4a e7       	ldi	r20, 0x7A	; 122
    136e:	54 e4       	ldi	r21, 0x44	; 68
    1370:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	8c a3       	std	Y+36, r24	; 0x24
    137a:	9d a3       	std	Y+37, r25	; 0x25
    137c:	ae a3       	std	Y+38, r26	; 0x26
    137e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1380:	6c a1       	ldd	r22, Y+36	; 0x24
    1382:	7d a1       	ldd	r23, Y+37	; 0x25
    1384:	8e a1       	ldd	r24, Y+38	; 0x26
    1386:	9f a1       	ldd	r25, Y+39	; 0x27
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4a ef       	ldi	r20, 0xFA	; 250
    138e:	54 e4       	ldi	r21, 0x44	; 68
    1390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	88 a3       	std	Y+32, r24	; 0x20
    139a:	99 a3       	std	Y+33, r25	; 0x21
    139c:	aa a3       	std	Y+34, r26	; 0x22
    139e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    13a0:	68 a1       	ldd	r22, Y+32	; 0x20
    13a2:	79 a1       	ldd	r23, Y+33	; 0x21
    13a4:	8a a1       	ldd	r24, Y+34	; 0x22
    13a6:	9b a1       	ldd	r25, Y+35	; 0x23
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9f 8f       	std	Y+31, r25	; 0x1f
    13be:	8e 8f       	std	Y+30, r24	; 0x1e
    13c0:	3f c0       	rjmp	.+126    	; 0x1440 <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    13c2:	68 a1       	ldd	r22, Y+32	; 0x20
    13c4:	79 a1       	ldd	r23, Y+33	; 0x21
    13c6:	8a a1       	ldd	r24, Y+34	; 0x22
    13c8:	9b a1       	ldd	r25, Y+35	; 0x23
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	4f e7       	ldi	r20, 0x7F	; 127
    13d0:	57 e4       	ldi	r21, 0x47	; 71
    13d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	4c f5       	brge	.+82     	; 0x142c <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13da:	6c a1       	ldd	r22, Y+36	; 0x24
    13dc:	7d a1       	ldd	r23, Y+37	; 0x25
    13de:	8e a1       	ldd	r24, Y+38	; 0x26
    13e0:	9f a1       	ldd	r25, Y+39	; 0x27
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9f 8f       	std	Y+31, r25	; 0x1f
    1400:	8e 8f       	std	Y+30, r24	; 0x1e
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <LCD_write_data_8bit+0x150>
    1404:	88 ec       	ldi	r24, 0xC8	; 200
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9d 8f       	std	Y+29, r25	; 0x1d
    140a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    140c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    140e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <LCD_write_data_8bit+0x13e>
    1414:	9d 8f       	std	Y+29, r25	; 0x1d
    1416:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    141a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	9f 8f       	std	Y+31, r25	; 0x1f
    1420:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1424:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f7       	brne	.-38     	; 0x1404 <LCD_write_data_8bit+0x132>
    142a:	24 c0       	rjmp	.+72     	; 0x1474 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	68 a1       	ldd	r22, Y+32	; 0x20
    142e:	79 a1       	ldd	r23, Y+33	; 0x21
    1430:	8a a1       	ldd	r24, Y+34	; 0x22
    1432:	9b a1       	ldd	r25, Y+35	; 0x23
    1434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	9f 8f       	std	Y+31, r25	; 0x1f
    143e:	8e 8f       	std	Y+30, r24	; 0x1e
    1440:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1442:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1444:	9b 8f       	std	Y+27, r25	; 0x1b
    1446:	8a 8f       	std	Y+26, r24	; 0x1a
    1448:	8a 8d       	ldd	r24, Y+26	; 0x1a
    144a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <LCD_write_data_8bit+0x17a>
    1450:	9b 8f       	std	Y+27, r25	; 0x1b
    1452:	8a 8f       	std	Y+26, r24	; 0x1a
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1456:	69 a5       	ldd	r22, Y+41	; 0x29
    1458:	7a a5       	ldd	r23, Y+42	; 0x2a
    145a:	8b a5       	ldd	r24, Y+43	; 0x2b
    145c:	9c a5       	ldd	r25, Y+44	; 0x2c
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	88 a7       	std	Y+40, r24	; 0x28
    1468:	88 a5       	ldd	r24, Y+40	; 0x28
    146a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    146c:	89 8d       	ldd	r24, Y+25	; 0x19
    146e:	8a 95       	dec	r24
    1470:	f1 f7       	brne	.-4      	; 0x146e <LCD_write_data_8bit+0x19c>
    1472:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e8       	ldi	r26, 0x80	; 128
    1482:	bf e3       	ldi	r27, 0x3F	; 63
    1484:	8d 8b       	std	Y+21, r24	; 0x15
    1486:	9e 8b       	std	Y+22, r25	; 0x16
    1488:	af 8b       	std	Y+23, r26	; 0x17
    148a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    148c:	6d 89       	ldd	r22, Y+21	; 0x15
    148e:	7e 89       	ldd	r23, Y+22	; 0x16
    1490:	8f 89       	ldd	r24, Y+23	; 0x17
    1492:	98 8d       	ldd	r25, Y+24	; 0x18
    1494:	2b ea       	ldi	r18, 0xAB	; 171
    1496:	3a ea       	ldi	r19, 0xAA	; 170
    1498:	4a e2       	ldi	r20, 0x2A	; 42
    149a:	50 e4       	ldi	r21, 0x40	; 64
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	89 8b       	std	Y+17, r24	; 0x11
    14a6:	9a 8b       	std	Y+18, r25	; 0x12
    14a8:	ab 8b       	std	Y+19, r26	; 0x13
    14aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    14ac:	69 89       	ldd	r22, Y+17	; 0x11
    14ae:	7a 89       	ldd	r23, Y+18	; 0x12
    14b0:	8b 89       	ldd	r24, Y+19	; 0x13
    14b2:	9c 89       	ldd	r25, Y+20	; 0x14
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	1c f4       	brge	.+6      	; 0x14ca <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	88 8b       	std	Y+16, r24	; 0x10
    14c8:	91 c0       	rjmp	.+290    	; 0x15ec <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    14ca:	69 89       	ldd	r22, Y+17	; 0x11
    14cc:	7a 89       	ldd	r23, Y+18	; 0x12
    14ce:	8b 89       	ldd	r24, Y+19	; 0x13
    14d0:	9c 89       	ldd	r25, Y+20	; 0x14
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	53 e4       	ldi	r21, 0x43	; 67
    14da:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	0c f0       	brlt	.+2      	; 0x14e4 <LCD_write_data_8bit+0x212>
    14e2:	7b c0       	rjmp	.+246    	; 0x15da <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    14e4:	6d 89       	ldd	r22, Y+21	; 0x15
    14e6:	7e 89       	ldd	r23, Y+22	; 0x16
    14e8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ea:	98 8d       	ldd	r25, Y+24	; 0x18
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a e7       	ldi	r20, 0x7A	; 122
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8c 87       	std	Y+12, r24	; 0x0c
    14fe:	9d 87       	std	Y+13, r25	; 0x0d
    1500:	ae 87       	std	Y+14, r26	; 0x0e
    1502:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	6c 85       	ldd	r22, Y+12	; 0x0c
    1506:	7d 85       	ldd	r23, Y+13	; 0x0d
    1508:	8e 85       	ldd	r24, Y+14	; 0x0e
    150a:	9f 85       	ldd	r25, Y+15	; 0x0f
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a ef       	ldi	r20, 0xFA	; 250
    1512:	54 e4       	ldi	r21, 0x44	; 68
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	88 87       	std	Y+8, r24	; 0x08
    151e:	99 87       	std	Y+9, r25	; 0x09
    1520:	aa 87       	std	Y+10, r26	; 0x0a
    1522:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1524:	68 85       	ldd	r22, Y+8	; 0x08
    1526:	79 85       	ldd	r23, Y+9	; 0x09
    1528:	8a 85       	ldd	r24, Y+10	; 0x0a
    152a:	9b 85       	ldd	r25, Y+11	; 0x0b
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	2c f4       	brge	.+10     	; 0x1546 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9f 83       	std	Y+7, r25	; 0x07
    1542:	8e 83       	std	Y+6, r24	; 0x06
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    1546:	68 85       	ldd	r22, Y+8	; 0x08
    1548:	79 85       	ldd	r23, Y+9	; 0x09
    154a:	8a 85       	ldd	r24, Y+10	; 0x0a
    154c:	9b 85       	ldd	r25, Y+11	; 0x0b
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	4c f5       	brge	.+82     	; 0x15b0 <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1560:	7d 85       	ldd	r23, Y+13	; 0x0d
    1562:	8e 85       	ldd	r24, Y+14	; 0x0e
    1564:	9f 85       	ldd	r25, Y+15	; 0x0f
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9f 83       	std	Y+7, r25	; 0x07
    1584:	8e 83       	std	Y+6, r24	; 0x06
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <LCD_write_data_8bit+0x2d4>
    1588:	88 ec       	ldi	r24, 0xC8	; 200
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9d 83       	std	Y+5, r25	; 0x05
    158e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	9d 81       	ldd	r25, Y+5	; 0x05
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <LCD_write_data_8bit+0x2c2>
    1598:	9d 83       	std	Y+5, r25	; 0x05
    159a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8e 81       	ldd	r24, Y+6	; 0x06
    159e:	9f 81       	ldd	r25, Y+7	; 0x07
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9f 83       	std	Y+7, r25	; 0x07
    15a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	9f 81       	ldd	r25, Y+7	; 0x07
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <LCD_write_data_8bit+0x2b6>
    15ae:	24 c0       	rjmp	.+72     	; 0x15f8 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	68 85       	ldd	r22, Y+8	; 0x08
    15b2:	79 85       	ldd	r23, Y+9	; 0x09
    15b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9f 83       	std	Y+7, r25	; 0x07
    15c2:	8e 83       	std	Y+6, r24	; 0x06
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	9f 81       	ldd	r25, Y+7	; 0x07
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_write_data_8bit+0x2fe>
    15d4:	9b 83       	std	Y+3, r25	; 0x03
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	0f c0       	rjmp	.+30     	; 0x15f8 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15da:	69 89       	ldd	r22, Y+17	; 0x11
    15dc:	7a 89       	ldd	r23, Y+18	; 0x12
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
    15e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	88 8b       	std	Y+16, r24	; 0x10
    15ec:	88 89       	ldd	r24, Y+16	; 0x10
    15ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	8a 95       	dec	r24
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_write_data_8bit+0x320>
    15f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	69 a9       	ldd	r22, Y+49	; 0x31
    15fc:	0e 94 3a 2c 	call	0x5874	; 0x5874 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
}
    1608:	e1 96       	adiw	r28, 0x31	; 49
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	e1 97       	sbiw	r28, 0x31	; 49
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	62 e0       	ldi	r22, 0x02	; 2
    1634:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e8       	ldi	r26, 0x80	; 128
    1646:	bf e3       	ldi	r27, 0x3F	; 63
    1648:	8d a7       	std	Y+45, r24	; 0x2d
    164a:	9e a7       	std	Y+46, r25	; 0x2e
    164c:	af a7       	std	Y+47, r26	; 0x2f
    164e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1650:	6d a5       	ldd	r22, Y+45	; 0x2d
    1652:	7e a5       	ldd	r23, Y+46	; 0x2e
    1654:	8f a5       	ldd	r24, Y+47	; 0x2f
    1656:	98 a9       	ldd	r25, Y+48	; 0x30
    1658:	2b ea       	ldi	r18, 0xAB	; 171
    165a:	3a ea       	ldi	r19, 0xAA	; 170
    165c:	4a e2       	ldi	r20, 0x2A	; 42
    165e:	50 e4       	ldi	r21, 0x40	; 64
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	89 a7       	std	Y+41, r24	; 0x29
    166a:	9a a7       	std	Y+42, r25	; 0x2a
    166c:	ab a7       	std	Y+43, r26	; 0x2b
    166e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1670:	69 a5       	ldd	r22, Y+41	; 0x29
    1672:	7a a5       	ldd	r23, Y+42	; 0x2a
    1674:	8b a5       	ldd	r24, Y+43	; 0x2b
    1676:	9c a5       	ldd	r25, Y+44	; 0x2c
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	1c f4       	brge	.+6      	; 0x168e <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	88 a7       	std	Y+40, r24	; 0x28
    168c:	91 c0       	rjmp	.+290    	; 0x17b0 <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    168e:	69 a5       	ldd	r22, Y+41	; 0x29
    1690:	7a a5       	ldd	r23, Y+42	; 0x2a
    1692:	8b a5       	ldd	r24, Y+43	; 0x2b
    1694:	9c a5       	ldd	r25, Y+44	; 0x2c
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	53 e4       	ldi	r21, 0x43	; 67
    169e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	0c f0       	brlt	.+2      	; 0x16a8 <LCD_write_cmd_8bit+0x8e>
    16a6:	7b c0       	rjmp	.+246    	; 0x179e <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    16a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    16aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    16ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ae:	98 a9       	ldd	r25, Y+48	; 0x30
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a e7       	ldi	r20, 0x7A	; 122
    16b6:	54 e4       	ldi	r21, 0x44	; 68
    16b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	8c a3       	std	Y+36, r24	; 0x24
    16c2:	9d a3       	std	Y+37, r25	; 0x25
    16c4:	ae a3       	std	Y+38, r26	; 0x26
    16c6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c8:	6c a1       	ldd	r22, Y+36	; 0x24
    16ca:	7d a1       	ldd	r23, Y+37	; 0x25
    16cc:	8e a1       	ldd	r24, Y+38	; 0x26
    16ce:	9f a1       	ldd	r25, Y+39	; 0x27
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4a ef       	ldi	r20, 0xFA	; 250
    16d6:	54 e4       	ldi	r21, 0x44	; 68
    16d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	88 a3       	std	Y+32, r24	; 0x20
    16e2:	99 a3       	std	Y+33, r25	; 0x21
    16e4:	aa a3       	std	Y+34, r26	; 0x22
    16e6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    16e8:	68 a1       	ldd	r22, Y+32	; 0x20
    16ea:	79 a1       	ldd	r23, Y+33	; 0x21
    16ec:	8a a1       	ldd	r24, Y+34	; 0x22
    16ee:	9b a1       	ldd	r25, Y+35	; 0x23
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	2c f4       	brge	.+10     	; 0x170a <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9f 8f       	std	Y+31, r25	; 0x1f
    1706:	8e 8f       	std	Y+30, r24	; 0x1e
    1708:	3f c0       	rjmp	.+126    	; 0x1788 <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    170a:	68 a1       	ldd	r22, Y+32	; 0x20
    170c:	79 a1       	ldd	r23, Y+33	; 0x21
    170e:	8a a1       	ldd	r24, Y+34	; 0x22
    1710:	9b a1       	ldd	r25, Y+35	; 0x23
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	57 e4       	ldi	r21, 0x47	; 71
    171a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    171e:	18 16       	cp	r1, r24
    1720:	4c f5       	brge	.+82     	; 0x1774 <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1722:	6c a1       	ldd	r22, Y+36	; 0x24
    1724:	7d a1       	ldd	r23, Y+37	; 0x25
    1726:	8e a1       	ldd	r24, Y+38	; 0x26
    1728:	9f a1       	ldd	r25, Y+39	; 0x27
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9f 8f       	std	Y+31, r25	; 0x1f
    1748:	8e 8f       	std	Y+30, r24	; 0x1e
    174a:	0f c0       	rjmp	.+30     	; 0x176a <LCD_write_cmd_8bit+0x150>
    174c:	88 ec       	ldi	r24, 0xC8	; 200
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9d 8f       	std	Y+29, r25	; 0x1d
    1752:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1754:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1756:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <LCD_write_cmd_8bit+0x13e>
    175c:	9d 8f       	std	Y+29, r25	; 0x1d
    175e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1760:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1762:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	9f 8f       	std	Y+31, r25	; 0x1f
    1768:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    176c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	69 f7       	brne	.-38     	; 0x174c <LCD_write_cmd_8bit+0x132>
    1772:	24 c0       	rjmp	.+72     	; 0x17bc <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1774:	68 a1       	ldd	r22, Y+32	; 0x20
    1776:	79 a1       	ldd	r23, Y+33	; 0x21
    1778:	8a a1       	ldd	r24, Y+34	; 0x22
    177a:	9b a1       	ldd	r25, Y+35	; 0x23
    177c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	9f 8f       	std	Y+31, r25	; 0x1f
    1786:	8e 8f       	std	Y+30, r24	; 0x1e
    1788:	8e 8d       	ldd	r24, Y+30	; 0x1e
    178a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    178c:	9b 8f       	std	Y+27, r25	; 0x1b
    178e:	8a 8f       	std	Y+26, r24	; 0x1a
    1790:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1792:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <LCD_write_cmd_8bit+0x17a>
    1798:	9b 8f       	std	Y+27, r25	; 0x1b
    179a:	8a 8f       	std	Y+26, r24	; 0x1a
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    179e:	69 a5       	ldd	r22, Y+41	; 0x29
    17a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    17a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	88 a7       	std	Y+40, r24	; 0x28
    17b0:	88 a5       	ldd	r24, Y+40	; 0x28
    17b2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17b4:	89 8d       	ldd	r24, Y+25	; 0x19
    17b6:	8a 95       	dec	r24
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_write_cmd_8bit+0x19c>
    17ba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e8       	ldi	r26, 0x80	; 128
    17ca:	bf e3       	ldi	r27, 0x3F	; 63
    17cc:	8d 8b       	std	Y+21, r24	; 0x15
    17ce:	9e 8b       	std	Y+22, r25	; 0x16
    17d0:	af 8b       	std	Y+23, r26	; 0x17
    17d2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17d4:	6d 89       	ldd	r22, Y+21	; 0x15
    17d6:	7e 89       	ldd	r23, Y+22	; 0x16
    17d8:	8f 89       	ldd	r24, Y+23	; 0x17
    17da:	98 8d       	ldd	r25, Y+24	; 0x18
    17dc:	2b ea       	ldi	r18, 0xAB	; 171
    17de:	3a ea       	ldi	r19, 0xAA	; 170
    17e0:	4a e2       	ldi	r20, 0x2A	; 42
    17e2:	50 e4       	ldi	r21, 0x40	; 64
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	89 8b       	std	Y+17, r24	; 0x11
    17ee:	9a 8b       	std	Y+18, r25	; 0x12
    17f0:	ab 8b       	std	Y+19, r26	; 0x13
    17f2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    17f4:	69 89       	ldd	r22, Y+17	; 0x11
    17f6:	7a 89       	ldd	r23, Y+18	; 0x12
    17f8:	8b 89       	ldd	r24, Y+19	; 0x13
    17fa:	9c 89       	ldd	r25, Y+20	; 0x14
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	1c f4       	brge	.+6      	; 0x1812 <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	88 8b       	std	Y+16, r24	; 0x10
    1810:	91 c0       	rjmp	.+290    	; 0x1934 <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    1812:	69 89       	ldd	r22, Y+17	; 0x11
    1814:	7a 89       	ldd	r23, Y+18	; 0x12
    1816:	8b 89       	ldd	r24, Y+19	; 0x13
    1818:	9c 89       	ldd	r25, Y+20	; 0x14
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	53 e4       	ldi	r21, 0x43	; 67
    1822:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	0c f0       	brlt	.+2      	; 0x182c <LCD_write_cmd_8bit+0x212>
    182a:	7b c0       	rjmp	.+246    	; 0x1922 <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    182c:	6d 89       	ldd	r22, Y+21	; 0x15
    182e:	7e 89       	ldd	r23, Y+22	; 0x16
    1830:	8f 89       	ldd	r24, Y+23	; 0x17
    1832:	98 8d       	ldd	r25, Y+24	; 0x18
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a e7       	ldi	r20, 0x7A	; 122
    183a:	54 e4       	ldi	r21, 0x44	; 68
    183c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8c 87       	std	Y+12, r24	; 0x0c
    1846:	9d 87       	std	Y+13, r25	; 0x0d
    1848:	ae 87       	std	Y+14, r26	; 0x0e
    184a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184c:	6c 85       	ldd	r22, Y+12	; 0x0c
    184e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1850:	8e 85       	ldd	r24, Y+14	; 0x0e
    1852:	9f 85       	ldd	r25, Y+15	; 0x0f
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a ef       	ldi	r20, 0xFA	; 250
    185a:	54 e4       	ldi	r21, 0x44	; 68
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	88 87       	std	Y+8, r24	; 0x08
    1866:	99 87       	std	Y+9, r25	; 0x09
    1868:	aa 87       	std	Y+10, r26	; 0x0a
    186a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    186c:	68 85       	ldd	r22, Y+8	; 0x08
    186e:	79 85       	ldd	r23, Y+9	; 0x09
    1870:	8a 85       	ldd	r24, Y+10	; 0x0a
    1872:	9b 85       	ldd	r25, Y+11	; 0x0b
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	2c f4       	brge	.+10     	; 0x188e <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9f 83       	std	Y+7, r25	; 0x07
    188a:	8e 83       	std	Y+6, r24	; 0x06
    188c:	3f c0       	rjmp	.+126    	; 0x190c <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    188e:	68 85       	ldd	r22, Y+8	; 0x08
    1890:	79 85       	ldd	r23, Y+9	; 0x09
    1892:	8a 85       	ldd	r24, Y+10	; 0x0a
    1894:	9b 85       	ldd	r25, Y+11	; 0x0b
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    18a2:	18 16       	cp	r1, r24
    18a4:	4c f5       	brge	.+82     	; 0x18f8 <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    18a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    18aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9f 83       	std	Y+7, r25	; 0x07
    18cc:	8e 83       	std	Y+6, r24	; 0x06
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <LCD_write_cmd_8bit+0x2d4>
    18d0:	88 ec       	ldi	r24, 0xC8	; 200
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9d 83       	std	Y+5, r25	; 0x05
    18d6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_write_cmd_8bit+0x2c2>
    18e0:	9d 83       	std	Y+5, r25	; 0x05
    18e2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	9f 81       	ldd	r25, Y+7	; 0x07
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9f 83       	std	Y+7, r25	; 0x07
    18ec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	9f 81       	ldd	r25, Y+7	; 0x07
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <LCD_write_cmd_8bit+0x2b6>
    18f6:	24 c0       	rjmp	.+72     	; 0x1940 <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	68 85       	ldd	r22, Y+8	; 0x08
    18fa:	79 85       	ldd	r23, Y+9	; 0x09
    18fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9f 83       	std	Y+7, r25	; 0x07
    190a:	8e 83       	std	Y+6, r24	; 0x06
    190c:	8e 81       	ldd	r24, Y+6	; 0x06
    190e:	9f 81       	ldd	r25, Y+7	; 0x07
    1910:	9b 83       	std	Y+3, r25	; 0x03
    1912:	8a 83       	std	Y+2, r24	; 0x02
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	9b 81       	ldd	r25, Y+3	; 0x03
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_write_cmd_8bit+0x2fe>
    191c:	9b 83       	std	Y+3, r25	; 0x03
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1922:	69 89       	ldd	r22, Y+17	; 0x11
    1924:	7a 89       	ldd	r23, Y+18	; 0x12
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	88 8b       	std	Y+16, r24	; 0x10
    1934:	88 89       	ldd	r24, Y+16	; 0x10
    1936:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	8a 95       	dec	r24
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_write_cmd_8bit+0x320>
    193e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	69 a9       	ldd	r22, Y+49	; 0x31
    1944:	0e 94 3a 2c 	call	0x5874	; 0x5874 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
}
    1950:	e1 96       	adiw	r28, 0x31	; 49
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	ef 97       	sbiw	r28, 0x3f	; 63
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <DIO_void_set_port_dir>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a8 e4       	ldi	r26, 0x48	; 72
    1984:	b2 e4       	ldi	r27, 0x42	; 66
    1986:	8b af       	std	Y+59, r24	; 0x3b
    1988:	9c af       	std	Y+60, r25	; 0x3c
    198a:	ad af       	std	Y+61, r26	; 0x3d
    198c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1990:	7c ad       	ldd	r23, Y+60	; 0x3c
    1992:	8d ad       	ldd	r24, Y+61	; 0x3d
    1994:	9e ad       	ldd	r25, Y+62	; 0x3e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8f ab       	std	Y+55, r24	; 0x37
    19a8:	98 af       	std	Y+56, r25	; 0x38
    19aa:	a9 af       	std	Y+57, r26	; 0x39
    19ac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19ae:	6f a9       	ldd	r22, Y+55	; 0x37
    19b0:	78 ad       	ldd	r23, Y+56	; 0x38
    19b2:	89 ad       	ldd	r24, Y+57	; 0x39
    19b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9e ab       	std	Y+54, r25	; 0x36
    19cc:	8d ab       	std	Y+53, r24	; 0x35
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    19d0:	6f a9       	ldd	r22, Y+55	; 0x37
    19d2:	78 ad       	ldd	r23, Y+56	; 0x38
    19d4:	89 ad       	ldd	r24, Y+57	; 0x39
    19d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    19ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    19ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e ab       	std	Y+54, r25	; 0x36
    1a0e:	8d ab       	std	Y+53, r24	; 0x35
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <LCD_read_address_8bit+0xce>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9c ab       	std	Y+52, r25	; 0x34
    1a18:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_read_address_8bit+0xbc>
    1a22:	9c ab       	std	Y+52, r25	; 0x34
    1a24:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8d a9       	ldd	r24, Y+53	; 0x35
    1a28:	9e a9       	ldd	r25, Y+54	; 0x36
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9e ab       	std	Y+54, r25	; 0x36
    1a2e:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8d a9       	ldd	r24, Y+53	; 0x35
    1a32:	9e a9       	ldd	r25, Y+54	; 0x36
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <LCD_read_address_8bit+0xb0>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a3c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e ab       	std	Y+54, r25	; 0x36
    1a4c:	8d ab       	std	Y+53, r24	; 0x35
    1a4e:	8d a9       	ldd	r24, Y+53	; 0x35
    1a50:	9e a9       	ldd	r25, Y+54	; 0x36
    1a52:	9a ab       	std	Y+50, r25	; 0x32
    1a54:	89 ab       	std	Y+49, r24	; 0x31
    1a56:	89 a9       	ldd	r24, Y+49	; 0x31
    1a58:	9a a9       	ldd	r25, Y+50	; 0x32
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <LCD_read_address_8bit+0xf8>
    1a5e:	9a ab       	std	Y+50, r25	; 0x32
    1a60:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e8       	ldi	r26, 0x80	; 128
    1a78:	bf e3       	ldi	r27, 0x3F	; 63
    1a7a:	8d a7       	std	Y+45, r24	; 0x2d
    1a7c:	9e a7       	std	Y+46, r25	; 0x2e
    1a7e:	af a7       	std	Y+47, r26	; 0x2f
    1a80:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a82:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a84:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a88:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8a:	2b ea       	ldi	r18, 0xAB	; 171
    1a8c:	3a ea       	ldi	r19, 0xAA	; 170
    1a8e:	4a e2       	ldi	r20, 0x2A	; 42
    1a90:	50 e4       	ldi	r21, 0x40	; 64
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	89 a7       	std	Y+41, r24	; 0x29
    1a9c:	9a a7       	std	Y+42, r25	; 0x2a
    1a9e:	ab a7       	std	Y+43, r26	; 0x2b
    1aa0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1aa2:	69 a5       	ldd	r22, Y+41	; 0x29
    1aa4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1aa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	1c f4       	brge	.+6      	; 0x1ac0 <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	88 a7       	std	Y+40, r24	; 0x28
    1abe:	91 c0       	rjmp	.+290    	; 0x1be2 <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    1ac0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ac2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ac4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	53 e4       	ldi	r21, 0x43	; 67
    1ad0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	0c f0       	brlt	.+2      	; 0x1ada <LCD_read_address_8bit+0x178>
    1ad8:	7b c0       	rjmp	.+246    	; 0x1bd0 <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    1ada:	6d a5       	ldd	r22, Y+45	; 0x2d
    1adc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ade:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a e7       	ldi	r20, 0x7A	; 122
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8c a3       	std	Y+36, r24	; 0x24
    1af4:	9d a3       	std	Y+37, r25	; 0x25
    1af6:	ae a3       	std	Y+38, r26	; 0x26
    1af8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	6c a1       	ldd	r22, Y+36	; 0x24
    1afc:	7d a1       	ldd	r23, Y+37	; 0x25
    1afe:	8e a1       	ldd	r24, Y+38	; 0x26
    1b00:	9f a1       	ldd	r25, Y+39	; 0x27
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	4a ef       	ldi	r20, 0xFA	; 250
    1b08:	54 e4       	ldi	r21, 0x44	; 68
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	88 a3       	std	Y+32, r24	; 0x20
    1b14:	99 a3       	std	Y+33, r25	; 0x21
    1b16:	aa a3       	std	Y+34, r26	; 0x22
    1b18:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b1a:	68 a1       	ldd	r22, Y+32	; 0x20
    1b1c:	79 a1       	ldd	r23, Y+33	; 0x21
    1b1e:	8a a1       	ldd	r24, Y+34	; 0x22
    1b20:	9b a1       	ldd	r25, Y+35	; 0x23
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e8       	ldi	r20, 0x80	; 128
    1b28:	5f e3       	ldi	r21, 0x3F	; 63
    1b2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b2e:	88 23       	and	r24, r24
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9f 8f       	std	Y+31, r25	; 0x1f
    1b38:	8e 8f       	std	Y+30, r24	; 0x1e
    1b3a:	3f c0       	rjmp	.+126    	; 0x1bba <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    1b3c:	68 a1       	ldd	r22, Y+32	; 0x20
    1b3e:	79 a1       	ldd	r23, Y+33	; 0x21
    1b40:	8a a1       	ldd	r24, Y+34	; 0x22
    1b42:	9b a1       	ldd	r25, Y+35	; 0x23
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	57 e4       	ldi	r21, 0x47	; 71
    1b4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	4c f5       	brge	.+82     	; 0x1ba6 <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	6c a1       	ldd	r22, Y+36	; 0x24
    1b56:	7d a1       	ldd	r23, Y+37	; 0x25
    1b58:	8e a1       	ldd	r24, Y+38	; 0x26
    1b5a:	9f a1       	ldd	r25, Y+39	; 0x27
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9f 8f       	std	Y+31, r25	; 0x1f
    1b7a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <LCD_read_address_8bit+0x23a>
    1b7e:	88 ec       	ldi	r24, 0xC8	; 200
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9d 8f       	std	Y+29, r25	; 0x1d
    1b84:	8c 8f       	std	Y+28, r24	; 0x1c
    1b86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b88:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_read_address_8bit+0x228>
    1b8e:	9d 8f       	std	Y+29, r25	; 0x1d
    1b90:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b94:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	9f 8f       	std	Y+31, r25	; 0x1f
    1b9a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	69 f7       	brne	.-38     	; 0x1b7e <LCD_read_address_8bit+0x21c>
    1ba4:	24 c0       	rjmp	.+72     	; 0x1bee <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	68 a1       	ldd	r22, Y+32	; 0x20
    1ba8:	79 a1       	ldd	r23, Y+33	; 0x21
    1baa:	8a a1       	ldd	r24, Y+34	; 0x22
    1bac:	9b a1       	ldd	r25, Y+35	; 0x23
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9f 8f       	std	Y+31, r25	; 0x1f
    1bb8:	8e 8f       	std	Y+30, r24	; 0x1e
    1bba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bbc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bbe:	9b 8f       	std	Y+27, r25	; 0x1b
    1bc0:	8a 8f       	std	Y+26, r24	; 0x1a
    1bc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bc4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <LCD_read_address_8bit+0x264>
    1bca:	9b 8f       	std	Y+27, r25	; 0x1b
    1bcc:	8a 8f       	std	Y+26, r24	; 0x1a
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bd0:	69 a5       	ldd	r22, Y+41	; 0x29
    1bd2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	88 a7       	std	Y+40, r24	; 0x28
    1be2:	88 a5       	ldd	r24, Y+40	; 0x28
    1be4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1be6:	89 8d       	ldd	r24, Y+25	; 0x19
    1be8:	8a 95       	dec	r24
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_read_address_8bit+0x286>
    1bec:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e8       	ldi	r26, 0x80	; 128
    1bfc:	bf e3       	ldi	r27, 0x3F	; 63
    1bfe:	8d 8b       	std	Y+21, r24	; 0x15
    1c00:	9e 8b       	std	Y+22, r25	; 0x16
    1c02:	af 8b       	std	Y+23, r26	; 0x17
    1c04:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	2b ea       	ldi	r18, 0xAB	; 171
    1c10:	3a ea       	ldi	r19, 0xAA	; 170
    1c12:	4a e2       	ldi	r20, 0x2A	; 42
    1c14:	50 e4       	ldi	r21, 0x40	; 64
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	89 8b       	std	Y+17, r24	; 0x11
    1c20:	9a 8b       	std	Y+18, r25	; 0x12
    1c22:	ab 8b       	std	Y+19, r26	; 0x13
    1c24:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c26:	69 89       	ldd	r22, Y+17	; 0x11
    1c28:	7a 89       	ldd	r23, Y+18	; 0x12
    1c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	1c f4       	brge	.+6      	; 0x1c44 <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	88 8b       	std	Y+16, r24	; 0x10
    1c42:	91 c0       	rjmp	.+290    	; 0x1d66 <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    1c44:	69 89       	ldd	r22, Y+17	; 0x11
    1c46:	7a 89       	ldd	r23, Y+18	; 0x12
    1c48:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	53 e4       	ldi	r21, 0x43	; 67
    1c54:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	0c f0       	brlt	.+2      	; 0x1c5e <LCD_read_address_8bit+0x2fc>
    1c5c:	7b c0       	rjmp	.+246    	; 0x1d54 <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    1c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c60:	7e 89       	ldd	r23, Y+22	; 0x16
    1c62:	8f 89       	ldd	r24, Y+23	; 0x17
    1c64:	98 8d       	ldd	r25, Y+24	; 0x18
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a e7       	ldi	r20, 0x7A	; 122
    1c6c:	54 e4       	ldi	r21, 0x44	; 68
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8c 87       	std	Y+12, r24	; 0x0c
    1c78:	9d 87       	std	Y+13, r25	; 0x0d
    1c7a:	ae 87       	std	Y+14, r26	; 0x0e
    1c7c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c80:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c84:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a ef       	ldi	r20, 0xFA	; 250
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	88 87       	std	Y+8, r24	; 0x08
    1c98:	99 87       	std	Y+9, r25	; 0x09
    1c9a:	aa 87       	std	Y+10, r26	; 0x0a
    1c9c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c9e:	68 85       	ldd	r22, Y+8	; 0x08
    1ca0:	79 85       	ldd	r23, Y+9	; 0x09
    1ca2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9f 83       	std	Y+7, r25	; 0x07
    1cbc:	8e 83       	std	Y+6, r24	; 0x06
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    1cc0:	68 85       	ldd	r22, Y+8	; 0x08
    1cc2:	79 85       	ldd	r23, Y+9	; 0x09
    1cc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cda:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cde:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9f 83       	std	Y+7, r25	; 0x07
    1cfe:	8e 83       	std	Y+6, r24	; 0x06
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <LCD_read_address_8bit+0x3be>
    1d02:	88 ec       	ldi	r24, 0xC8	; 200
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9d 83       	std	Y+5, r25	; 0x05
    1d08:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_read_address_8bit+0x3ac>
    1d12:	9d 83       	std	Y+5, r25	; 0x05
    1d14:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8e 81       	ldd	r24, Y+6	; 0x06
    1d18:	9f 81       	ldd	r25, Y+7	; 0x07
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9f 83       	std	Y+7, r25	; 0x07
    1d1e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8e 81       	ldd	r24, Y+6	; 0x06
    1d22:	9f 81       	ldd	r25, Y+7	; 0x07
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <LCD_read_address_8bit+0x3a0>
    1d28:	24 c0       	rjmp	.+72     	; 0x1d72 <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	68 85       	ldd	r22, Y+8	; 0x08
    1d2c:	79 85       	ldd	r23, Y+9	; 0x09
    1d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9f 83       	std	Y+7, r25	; 0x07
    1d3c:	8e 83       	std	Y+6, r24	; 0x06
    1d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d40:	9f 81       	ldd	r25, Y+7	; 0x07
    1d42:	9b 83       	std	Y+3, r25	; 0x03
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_read_address_8bit+0x3e8>
    1d4e:	9b 83       	std	Y+3, r25	; 0x03
    1d50:	8a 83       	std	Y+2, r24	; 0x02
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d54:	69 89       	ldd	r22, Y+17	; 0x11
    1d56:	7a 89       	ldd	r23, Y+18	; 0x12
    1d58:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	88 8b       	std	Y+16, r24	; 0x10
    1d66:	88 89       	ldd	r24, Y+16	; 0x10
    1d68:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	8a 95       	dec	r24
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_read_address_8bit+0x40a>
    1d70:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <DIO_u8_get_port>
    1d78:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    1d82:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d84:	8f 77       	andi	r24, 0x7F	; 127
    1d86:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	6f ef       	ldi	r22, 0xFF	; 255
    1d8c:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <DIO_void_set_port_dir>
	return address;
    1d90:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    1d92:	ef 96       	adiw	r28, 0x3f	; 63
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	c3 56       	subi	r28, 0x63	; 99
    1db2:	d0 40       	sbci	r29, 0x00	; 0
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 59       	subi	r30, 0x9D	; 157
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	62 e0       	ldi	r22, 0x02	; 2
    1dca:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e3 5a       	subi	r30, 0xA3	; 163
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e8       	ldi	r26, 0x80	; 128
    1de2:	bf e3       	ldi	r27, 0x3F	; 63
    1de4:	80 83       	st	Z, r24
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	a2 83       	std	Z+2, r26	; 0x02
    1dea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dec:	8e 01       	movw	r16, r28
    1dee:	07 5a       	subi	r16, 0xA7	; 167
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	fe 01       	movw	r30, r28
    1df4:	e3 5a       	subi	r30, 0xA3	; 163
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	2b ea       	ldi	r18, 0xAB	; 171
    1e02:	3a ea       	ldi	r19, 0xAA	; 170
    1e04:	4a e2       	ldi	r20, 0x2A	; 42
    1e06:	50 e4       	ldi	r21, 0x40	; 64
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	f8 01       	movw	r30, r16
    1e12:	80 83       	st	Z, r24
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	a2 83       	std	Z+2, r26	; 0x02
    1e18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e7 5a       	subi	r30, 0xA7	; 167
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	34 f4       	brge	.+12     	; 0x1e44 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e8 5a       	subi	r30, 0xA8	; 168
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	80 83       	st	Z, r24
    1e42:	e0 c0       	rjmp	.+448    	; 0x2004 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1e44:	fe 01       	movw	r30, r28
    1e46:	e7 5a       	subi	r30, 0xA7	; 167
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	53 e4       	ldi	r21, 0x43	; 67
    1e5a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	0c f0       	brlt	.+2      	; 0x1e64 <LCD_write_data_4bit+0xc0>
    1e62:	c0 c0       	rjmp	.+384    	; 0x1fe4 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1e64:	fe 01       	movw	r30, r28
    1e66:	e3 5a       	subi	r30, 0xA3	; 163
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a e7       	ldi	r20, 0x7A	; 122
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	fe 01       	movw	r30, r28
    1e84:	ec 5a       	subi	r30, 0xAC	; 172
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	8e 01       	movw	r16, r28
    1e92:	00 5b       	subi	r16, 0xB0	; 176
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	fe 01       	movw	r30, r28
    1e98:	ec 5a       	subi	r30, 0xAC	; 172
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a ef       	ldi	r20, 0xFA	; 250
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e0 5b       	subi	r30, 0xB0	; 176
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	44 f4       	brge	.+16     	; 0x1eec <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1edc:	fe 01       	movw	r30, r28
    1ede:	e2 5b       	subi	r30, 0xB2	; 178
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	64 c0       	rjmp	.+200    	; 0x1fb4 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1eec:	fe 01       	movw	r30, r28
    1eee:	e0 5b       	subi	r30, 0xB0	; 176
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	60 81       	ld	r22, Z
    1ef4:	71 81       	ldd	r23, Z+1	; 0x01
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <LCD_write_data_4bit+0x168>
    1f0a:	43 c0       	rjmp	.+134    	; 0x1f92 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ec 5a       	subi	r30, 0xAC	; 172
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	02 5b       	subi	r16, 0xB2	; 178
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	1f c0       	rjmp	.+62     	; 0x1f82 <LCD_write_data_4bit+0x1de>
    1f44:	fe 01       	movw	r30, r28
    1f46:	e4 5b       	subi	r30, 0xB4	; 180
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	88 ec       	ldi	r24, 0xC8	; 200
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f52:	fe 01       	movw	r30, r28
    1f54:	e4 5b       	subi	r30, 0xB4	; 180
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_write_data_4bit+0x1b8>
    1f60:	fe 01       	movw	r30, r28
    1f62:	e4 5b       	subi	r30, 0xB4	; 180
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	de 01       	movw	r26, r28
    1f6c:	a2 5b       	subi	r26, 0xB2	; 178
    1f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f70:	fe 01       	movw	r30, r28
    1f72:	e2 5b       	subi	r30, 0xB2	; 178
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	11 96       	adiw	r26, 0x01	; 1
    1f7e:	9c 93       	st	X, r25
    1f80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	fe 01       	movw	r30, r28
    1f84:	e2 5b       	subi	r30, 0xB2	; 178
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	d1 f6       	brne	.-76     	; 0x1f44 <LCD_write_data_4bit+0x1a0>
    1f90:	4b c0       	rjmp	.+150    	; 0x2028 <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f92:	8e 01       	movw	r16, r28
    1f94:	02 5b       	subi	r16, 0xB2	; 178
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e0 5b       	subi	r30, 0xB0	; 176
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	f8 01       	movw	r30, r16
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	de 01       	movw	r26, r28
    1fb6:	a6 5b       	subi	r26, 0xB6	; 182
    1fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e2 5b       	subi	r30, 0xB2	; 178
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	11 96       	adiw	r26, 0x01	; 1
    1fc6:	9c 93       	st	X, r25
    1fc8:	8e 93       	st	-X, r24
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e6 5b       	subi	r30, 0xB6	; 182
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <LCD_write_data_4bit+0x230>
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e6 5b       	subi	r30, 0xB6	; 182
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	80 83       	st	Z, r24
    1fe2:	22 c0       	rjmp	.+68     	; 0x2028 <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe4:	8e 01       	movw	r16, r28
    1fe6:	08 5a       	subi	r16, 0xA8	; 168
    1fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e7 5a       	subi	r30, 0xA7	; 167
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	de 01       	movw	r26, r28
    2006:	a7 5b       	subi	r26, 0xB7	; 183
    2008:	bf 4f       	sbci	r27, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e8 5a       	subi	r30, 0xA8	; 168
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	80 81       	ld	r24, Z
    2012:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2014:	fe 01       	movw	r30, r28
    2016:	e7 5b       	subi	r30, 0xB7	; 183
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	8a 95       	dec	r24
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_write_data_4bit+0x278>
    2020:	fe 01       	movw	r30, r28
    2022:	e7 5b       	subi	r30, 0xB7	; 183
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2028:	82 e0       	ldi	r24, 0x02	; 2
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    2030:	fe 01       	movw	r30, r28
    2032:	eb 5b       	subi	r30, 0xBB	; 187
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e8       	ldi	r26, 0x80	; 128
    203c:	bf e3       	ldi	r27, 0x3F	; 63
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	a2 83       	std	Z+2, r26	; 0x02
    2044:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2046:	8e 01       	movw	r16, r28
    2048:	0f 5b       	subi	r16, 0xBF	; 191
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	eb 5b       	subi	r30, 0xBB	; 187
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	2b ea       	ldi	r18, 0xAB	; 171
    205c:	3a ea       	ldi	r19, 0xAA	; 170
    205e:	4a e2       	ldi	r20, 0x2A	; 42
    2060:	50 e4       	ldi	r21, 0x40	; 64
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	f8 01       	movw	r30, r16
    206c:	80 83       	st	Z, r24
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	a2 83       	std	Z+2, r26	; 0x02
    2072:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2074:	fe 01       	movw	r30, r28
    2076:	ef 5b       	subi	r30, 0xBF	; 191
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	34 f4       	brge	.+12     	; 0x209e <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	fe 01       	movw	r30, r28
    2096:	e0 5c       	subi	r30, 0xC0	; 192
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 83       	st	Z, r24
    209c:	9d c0       	rjmp	.+314    	; 0x21d8 <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    209e:	fe 01       	movw	r30, r28
    20a0:	ef 5b       	subi	r30, 0xBF	; 191
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	53 e4       	ldi	r21, 0x43	; 67
    20b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	0c f0       	brlt	.+2      	; 0x20be <LCD_write_data_4bit+0x31a>
    20bc:	7e c0       	rjmp	.+252    	; 0x21ba <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    20be:	fe 01       	movw	r30, r28
    20c0:	eb 5b       	subi	r30, 0xBB	; 187
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	54 e4       	ldi	r21, 0x44	; 68
    20d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8c af       	std	Y+60, r24	; 0x3c
    20de:	9d af       	std	Y+61, r25	; 0x3d
    20e0:	ae af       	std	Y+62, r26	; 0x3e
    20e2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    20e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    20e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    20ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	88 af       	std	Y+56, r24	; 0x38
    20fe:	99 af       	std	Y+57, r25	; 0x39
    2100:	aa af       	std	Y+58, r26	; 0x3a
    2102:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2104:	68 ad       	ldd	r22, Y+56	; 0x38
    2106:	79 ad       	ldd	r23, Y+57	; 0x39
    2108:	8a ad       	ldd	r24, Y+58	; 0x3a
    210a:	9b ad       	ldd	r25, Y+59	; 0x3b
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <LCD_write_data_4bit+0x382>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9f ab       	std	Y+55, r25	; 0x37
    2122:	8e ab       	std	Y+54, r24	; 0x36
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    2126:	68 ad       	ldd	r22, Y+56	; 0x38
    2128:	79 ad       	ldd	r23, Y+57	; 0x39
    212a:	8a ad       	ldd	r24, Y+58	; 0x3a
    212c:	9b ad       	ldd	r25, Y+59	; 0x3b
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2140:	7d ad       	ldd	r23, Y+61	; 0x3d
    2142:	8e ad       	ldd	r24, Y+62	; 0x3e
    2144:	9f ad       	ldd	r25, Y+63	; 0x3f
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9f ab       	std	Y+55, r25	; 0x37
    2164:	8e ab       	std	Y+54, r24	; 0x36
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_write_data_4bit+0x3e2>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9d ab       	std	Y+53, r25	; 0x35
    216e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2170:	8c a9       	ldd	r24, Y+52	; 0x34
    2172:	9d a9       	ldd	r25, Y+53	; 0x35
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_write_data_4bit+0x3d0>
    2178:	9d ab       	std	Y+53, r25	; 0x35
    217a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8e a9       	ldd	r24, Y+54	; 0x36
    217e:	9f a9       	ldd	r25, Y+55	; 0x37
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9f ab       	std	Y+55, r25	; 0x37
    2184:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8e a9       	ldd	r24, Y+54	; 0x36
    2188:	9f a9       	ldd	r25, Y+55	; 0x37
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_write_data_4bit+0x3c4>
    218e:	2d c0       	rjmp	.+90     	; 0x21ea <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	68 ad       	ldd	r22, Y+56	; 0x38
    2192:	79 ad       	ldd	r23, Y+57	; 0x39
    2194:	8a ad       	ldd	r24, Y+58	; 0x3a
    2196:	9b ad       	ldd	r25, Y+59	; 0x3b
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9f ab       	std	Y+55, r25	; 0x37
    21a2:	8e ab       	std	Y+54, r24	; 0x36
    21a4:	8e a9       	ldd	r24, Y+54	; 0x36
    21a6:	9f a9       	ldd	r25, Y+55	; 0x37
    21a8:	9b ab       	std	Y+51, r25	; 0x33
    21aa:	8a ab       	std	Y+50, r24	; 0x32
    21ac:	8a a9       	ldd	r24, Y+50	; 0x32
    21ae:	9b a9       	ldd	r25, Y+51	; 0x33
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_write_data_4bit+0x40c>
    21b4:	9b ab       	std	Y+51, r25	; 0x33
    21b6:	8a ab       	std	Y+50, r24	; 0x32
    21b8:	18 c0       	rjmp	.+48     	; 0x21ea <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21ba:	fe 01       	movw	r30, r28
    21bc:	ef 5b       	subi	r30, 0xBF	; 191
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	fe 01       	movw	r30, r28
    21d2:	e0 5c       	subi	r30, 0xC0	; 192
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 83       	st	Z, r24
    21d8:	fe 01       	movw	r30, r28
    21da:	e0 5c       	subi	r30, 0xC0	; 192
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21e2:	89 a9       	ldd	r24, Y+49	; 0x31
    21e4:	8a 95       	dec	r24
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <LCD_write_data_4bit+0x440>
    21e8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    21ea:	fe 01       	movw	r30, r28
    21ec:	ee 59       	subi	r30, 0x9E	; 158
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	84 e0       	ldi	r24, 0x04	; 4
    21f2:	80 83       	st	Z, r24
    21f4:	26 c0       	rjmp	.+76     	; 0x2242 <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    21f6:	fe 01       	movw	r30, r28
    21f8:	ed 59       	subi	r30, 0x9D	; 157
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	fe 01       	movw	r30, r28
    2204:	ee 59       	subi	r30, 0x9E	; 158
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a9 01       	movw	r20, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <LCD_write_data_4bit+0x472>
    2212:	55 95       	asr	r21
    2214:	47 95       	ror	r20
    2216:	8a 95       	dec	r24
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <LCD_write_data_4bit+0x46e>
    221a:	ca 01       	movw	r24, r20
    221c:	98 2f       	mov	r25, r24
    221e:	91 70       	andi	r25, 0x01	; 1
    2220:	fe 01       	movw	r30, r28
    2222:	ee 59       	subi	r30, 0x9E	; 158
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	60 81       	ld	r22, Z
    222a:	49 2f       	mov	r20, r25
    222c:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2230:	de 01       	movw	r26, r28
    2232:	ae 59       	subi	r26, 0x9E	; 158
    2234:	bf 4f       	sbci	r27, 0xFF	; 255
    2236:	fe 01       	movw	r30, r28
    2238:	ee 59       	subi	r30, 0x9E	; 158
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	8c 93       	st	X, r24
    2242:	fe 01       	movw	r30, r28
    2244:	ee 59       	subi	r30, 0x9E	; 158
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	80 81       	ld	r24, Z
    224a:	88 30       	cpi	r24, 0x08	; 8
    224c:	a0 f2       	brcs	.-88     	; 0x21f6 <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e2       	ldi	r26, 0x20	; 32
    225c:	b1 e4       	ldi	r27, 0x41	; 65
    225e:	8d a7       	std	Y+45, r24	; 0x2d
    2260:	9e a7       	std	Y+46, r25	; 0x2e
    2262:	af a7       	std	Y+47, r26	; 0x2f
    2264:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2266:	6d a5       	ldd	r22, Y+45	; 0x2d
    2268:	7e a5       	ldd	r23, Y+46	; 0x2e
    226a:	8f a5       	ldd	r24, Y+47	; 0x2f
    226c:	98 a9       	ldd	r25, Y+48	; 0x30
    226e:	2b ea       	ldi	r18, 0xAB	; 171
    2270:	3a ea       	ldi	r19, 0xAA	; 170
    2272:	4a e2       	ldi	r20, 0x2A	; 42
    2274:	50 e4       	ldi	r21, 0x40	; 64
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	89 a7       	std	Y+41, r24	; 0x29
    2280:	9a a7       	std	Y+42, r25	; 0x2a
    2282:	ab a7       	std	Y+43, r26	; 0x2b
    2284:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2286:	69 a5       	ldd	r22, Y+41	; 0x29
    2288:	7a a5       	ldd	r23, Y+42	; 0x2a
    228a:	8b a5       	ldd	r24, Y+43	; 0x2b
    228c:	9c a5       	ldd	r25, Y+44	; 0x2c
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	1c f4       	brge	.+6      	; 0x22a4 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	88 a7       	std	Y+40, r24	; 0x28
    22a2:	91 c0       	rjmp	.+290    	; 0x23c6 <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    22a4:	69 a5       	ldd	r22, Y+41	; 0x29
    22a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    22a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	53 e4       	ldi	r21, 0x43	; 67
    22b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	0c f0       	brlt	.+2      	; 0x22be <LCD_write_data_4bit+0x51a>
    22bc:	7b c0       	rjmp	.+246    	; 0x23b4 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    22be:	6d a5       	ldd	r22, Y+45	; 0x2d
    22c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    22c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c4:	98 a9       	ldd	r25, Y+48	; 0x30
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8c a3       	std	Y+36, r24	; 0x24
    22d8:	9d a3       	std	Y+37, r25	; 0x25
    22da:	ae a3       	std	Y+38, r26	; 0x26
    22dc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22de:	6c a1       	ldd	r22, Y+36	; 0x24
    22e0:	7d a1       	ldd	r23, Y+37	; 0x25
    22e2:	8e a1       	ldd	r24, Y+38	; 0x26
    22e4:	9f a1       	ldd	r25, Y+39	; 0x27
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a ef       	ldi	r20, 0xFA	; 250
    22ec:	54 e4       	ldi	r21, 0x44	; 68
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	88 a3       	std	Y+32, r24	; 0x20
    22f8:	99 a3       	std	Y+33, r25	; 0x21
    22fa:	aa a3       	std	Y+34, r26	; 0x22
    22fc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2300:	79 a1       	ldd	r23, Y+33	; 0x21
    2302:	8a a1       	ldd	r24, Y+34	; 0x22
    2304:	9b a1       	ldd	r25, Y+35	; 0x23
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	2c f4       	brge	.+10     	; 0x2320 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9f 8f       	std	Y+31, r25	; 0x1f
    231c:	8e 8f       	std	Y+30, r24	; 0x1e
    231e:	3f c0       	rjmp	.+126    	; 0x239e <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    2320:	68 a1       	ldd	r22, Y+32	; 0x20
    2322:	79 a1       	ldd	r23, Y+33	; 0x21
    2324:	8a a1       	ldd	r24, Y+34	; 0x22
    2326:	9b a1       	ldd	r25, Y+35	; 0x23
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	4c f5       	brge	.+82     	; 0x238a <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2338:	6c a1       	ldd	r22, Y+36	; 0x24
    233a:	7d a1       	ldd	r23, Y+37	; 0x25
    233c:	8e a1       	ldd	r24, Y+38	; 0x26
    233e:	9f a1       	ldd	r25, Y+39	; 0x27
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9f 8f       	std	Y+31, r25	; 0x1f
    235e:	8e 8f       	std	Y+30, r24	; 0x1e
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <LCD_write_data_4bit+0x5dc>
    2362:	88 ec       	ldi	r24, 0xC8	; 200
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9d 8f       	std	Y+29, r25	; 0x1d
    2368:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    236a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    236c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <LCD_write_data_4bit+0x5ca>
    2372:	9d 8f       	std	Y+29, r25	; 0x1d
    2374:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2376:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2378:	9f 8d       	ldd	r25, Y+31	; 0x1f
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	9f 8f       	std	Y+31, r25	; 0x1f
    237e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2380:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2382:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	69 f7       	brne	.-38     	; 0x2362 <LCD_write_data_4bit+0x5be>
    2388:	24 c0       	rjmp	.+72     	; 0x23d2 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238a:	68 a1       	ldd	r22, Y+32	; 0x20
    238c:	79 a1       	ldd	r23, Y+33	; 0x21
    238e:	8a a1       	ldd	r24, Y+34	; 0x22
    2390:	9b a1       	ldd	r25, Y+35	; 0x23
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9f 8f       	std	Y+31, r25	; 0x1f
    239c:	8e 8f       	std	Y+30, r24	; 0x1e
    239e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23a2:	9b 8f       	std	Y+27, r25	; 0x1b
    23a4:	8a 8f       	std	Y+26, r24	; 0x1a
    23a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_write_data_4bit+0x606>
    23ae:	9b 8f       	std	Y+27, r25	; 0x1b
    23b0:	8a 8f       	std	Y+26, r24	; 0x1a
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23b4:	69 a5       	ldd	r22, Y+41	; 0x29
    23b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    23b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	88 a7       	std	Y+40, r24	; 0x28
    23c6:	88 a5       	ldd	r24, Y+40	; 0x28
    23c8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23ca:	89 8d       	ldd	r24, Y+25	; 0x19
    23cc:	8a 95       	dec	r24
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_write_data_4bit+0x628>
    23d0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e8       	ldi	r26, 0x80	; 128
    23e0:	bf e3       	ldi	r27, 0x3F	; 63
    23e2:	8d 8b       	std	Y+21, r24	; 0x15
    23e4:	9e 8b       	std	Y+22, r25	; 0x16
    23e6:	af 8b       	std	Y+23, r26	; 0x17
    23e8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23ea:	6d 89       	ldd	r22, Y+21	; 0x15
    23ec:	7e 89       	ldd	r23, Y+22	; 0x16
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	98 8d       	ldd	r25, Y+24	; 0x18
    23f2:	2b ea       	ldi	r18, 0xAB	; 171
    23f4:	3a ea       	ldi	r19, 0xAA	; 170
    23f6:	4a e2       	ldi	r20, 0x2A	; 42
    23f8:	50 e4       	ldi	r21, 0x40	; 64
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	89 8b       	std	Y+17, r24	; 0x11
    2404:	9a 8b       	std	Y+18, r25	; 0x12
    2406:	ab 8b       	std	Y+19, r26	; 0x13
    2408:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    240a:	69 89       	ldd	r22, Y+17	; 0x11
    240c:	7a 89       	ldd	r23, Y+18	; 0x12
    240e:	8b 89       	ldd	r24, Y+19	; 0x13
    2410:	9c 89       	ldd	r25, Y+20	; 0x14
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	1c f4       	brge	.+6      	; 0x2428 <LCD_write_data_4bit+0x684>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	88 8b       	std	Y+16, r24	; 0x10
    2426:	91 c0       	rjmp	.+290    	; 0x254a <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    2428:	69 89       	ldd	r22, Y+17	; 0x11
    242a:	7a 89       	ldd	r23, Y+18	; 0x12
    242c:	8b 89       	ldd	r24, Y+19	; 0x13
    242e:	9c 89       	ldd	r25, Y+20	; 0x14
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	53 e4       	ldi	r21, 0x43	; 67
    2438:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <LCD_write_data_4bit+0x69e>
    2440:	7b c0       	rjmp	.+246    	; 0x2538 <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2442:	6d 89       	ldd	r22, Y+21	; 0x15
    2444:	7e 89       	ldd	r23, Y+22	; 0x16
    2446:	8f 89       	ldd	r24, Y+23	; 0x17
    2448:	98 8d       	ldd	r25, Y+24	; 0x18
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a e7       	ldi	r20, 0x7A	; 122
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8c 87       	std	Y+12, r24	; 0x0c
    245c:	9d 87       	std	Y+13, r25	; 0x0d
    245e:	ae 87       	std	Y+14, r26	; 0x0e
    2460:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6c 85       	ldd	r22, Y+12	; 0x0c
    2464:	7d 85       	ldd	r23, Y+13	; 0x0d
    2466:	8e 85       	ldd	r24, Y+14	; 0x0e
    2468:	9f 85       	ldd	r25, Y+15	; 0x0f
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	88 87       	std	Y+8, r24	; 0x08
    247c:	99 87       	std	Y+9, r25	; 0x09
    247e:	aa 87       	std	Y+10, r26	; 0x0a
    2480:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2482:	68 85       	ldd	r22, Y+8	; 0x08
    2484:	79 85       	ldd	r23, Y+9	; 0x09
    2486:	8a 85       	ldd	r24, Y+10	; 0x0a
    2488:	9b 85       	ldd	r25, Y+11	; 0x0b
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9f 83       	std	Y+7, r25	; 0x07
    24a0:	8e 83       	std	Y+6, r24	; 0x06
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    24a4:	68 85       	ldd	r22, Y+8	; 0x08
    24a6:	79 85       	ldd	r23, Y+9	; 0x09
    24a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    24be:	7d 85       	ldd	r23, Y+13	; 0x0d
    24c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    24c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9f 83       	std	Y+7, r25	; 0x07
    24e2:	8e 83       	std	Y+6, r24	; 0x06
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <LCD_write_data_4bit+0x760>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9d 83       	std	Y+5, r25	; 0x05
    24ec:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	9d 81       	ldd	r25, Y+5	; 0x05
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_write_data_4bit+0x74e>
    24f6:	9d 83       	std	Y+5, r25	; 0x05
    24f8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8e 81       	ldd	r24, Y+6	; 0x06
    24fc:	9f 81       	ldd	r25, Y+7	; 0x07
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9f 83       	std	Y+7, r25	; 0x07
    2502:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8e 81       	ldd	r24, Y+6	; 0x06
    2506:	9f 81       	ldd	r25, Y+7	; 0x07
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <LCD_write_data_4bit+0x742>
    250c:	24 c0       	rjmp	.+72     	; 0x2556 <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	68 85       	ldd	r22, Y+8	; 0x08
    2510:	79 85       	ldd	r23, Y+9	; 0x09
    2512:	8a 85       	ldd	r24, Y+10	; 0x0a
    2514:	9b 85       	ldd	r25, Y+11	; 0x0b
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9f 83       	std	Y+7, r25	; 0x07
    2520:	8e 83       	std	Y+6, r24	; 0x06
    2522:	8e 81       	ldd	r24, Y+6	; 0x06
    2524:	9f 81       	ldd	r25, Y+7	; 0x07
    2526:	9b 83       	std	Y+3, r25	; 0x03
    2528:	8a 83       	std	Y+2, r24	; 0x02
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	9b 81       	ldd	r25, Y+3	; 0x03
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_write_data_4bit+0x78a>
    2532:	9b 83       	std	Y+3, r25	; 0x03
    2534:	8a 83       	std	Y+2, r24	; 0x02
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2538:	69 89       	ldd	r22, Y+17	; 0x11
    253a:	7a 89       	ldd	r23, Y+18	; 0x12
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	88 8b       	std	Y+16, r24	; 0x10
    254a:	88 89       	ldd	r24, Y+16	; 0x10
    254c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	8a 95       	dec	r24
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_write_data_4bit+0x7ac>
    2554:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2556:	fe 01       	movw	r30, r28
    2558:	ef 59       	subi	r30, 0x9F	; 159
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	84 e0       	ldi	r24, 0x04	; 4
    255e:	80 83       	st	Z, r24
    2560:	27 c0       	rjmp	.+78     	; 0x25b0 <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    2562:	fe 01       	movw	r30, r28
    2564:	ed 59       	subi	r30, 0x9D	; 157
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	fe 01       	movw	r30, r28
    2570:	ef 59       	subi	r30, 0x9F	; 159
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	88 2f       	mov	r24, r24
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	04 97       	sbiw	r24, 0x04	; 4
    257c:	f9 01       	movw	r30, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <LCD_write_data_4bit+0x7e0>
    2580:	f5 95       	asr	r31
    2582:	e7 95       	ror	r30
    2584:	8a 95       	dec	r24
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <LCD_write_data_4bit+0x7dc>
    2588:	cf 01       	movw	r24, r30
    258a:	98 2f       	mov	r25, r24
    258c:	91 70       	andi	r25, 0x01	; 1
    258e:	fe 01       	movw	r30, r28
    2590:	ef 59       	subi	r30, 0x9F	; 159
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	60 81       	ld	r22, Z
    2598:	49 2f       	mov	r20, r25
    259a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    259e:	de 01       	movw	r26, r28
    25a0:	af 59       	subi	r26, 0x9F	; 159
    25a2:	bf 4f       	sbci	r27, 0xFF	; 255
    25a4:	fe 01       	movw	r30, r28
    25a6:	ef 59       	subi	r30, 0x9F	; 159
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	80 81       	ld	r24, Z
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	8c 93       	st	X, r24
    25b0:	fe 01       	movw	r30, r28
    25b2:	ef 59       	subi	r30, 0x9F	; 159
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	88 30       	cpi	r24, 0x08	; 8
    25ba:	98 f2       	brcs	.-90     	; 0x2562 <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
}
    25c4:	cd 59       	subi	r28, 0x9D	; 157
    25c6:	df 4f       	sbci	r29, 0xFF	; 255
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	08 95       	ret

000025dc <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	c3 56       	subi	r28, 0x63	; 99
    25ea:	d0 40       	sbci	r29, 0x00	; 0
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	fe 01       	movw	r30, r28
    25f8:	ed 59       	subi	r30, 0x9D	; 157
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	62 e0       	ldi	r22, 0x02	; 2
    2602:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    260e:	fe 01       	movw	r30, r28
    2610:	e3 5a       	subi	r30, 0xA3	; 163
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e8       	ldi	r26, 0x80	; 128
    261a:	bf e3       	ldi	r27, 0x3F	; 63
    261c:	80 83       	st	Z, r24
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	a2 83       	std	Z+2, r26	; 0x02
    2622:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2624:	8e 01       	movw	r16, r28
    2626:	07 5a       	subi	r16, 0xA7	; 167
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	fe 01       	movw	r30, r28
    262c:	e3 5a       	subi	r30, 0xA3	; 163
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	2b ea       	ldi	r18, 0xAB	; 171
    263a:	3a ea       	ldi	r19, 0xAA	; 170
    263c:	4a e2       	ldi	r20, 0x2A	; 42
    263e:	50 e4       	ldi	r21, 0x40	; 64
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	f8 01       	movw	r30, r16
    264a:	80 83       	st	Z, r24
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	a2 83       	std	Z+2, r26	; 0x02
    2650:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2652:	fe 01       	movw	r30, r28
    2654:	e7 5a       	subi	r30, 0xA7	; 167
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    266c:	88 23       	and	r24, r24
    266e:	34 f4       	brge	.+12     	; 0x267c <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    2670:	fe 01       	movw	r30, r28
    2672:	e8 5a       	subi	r30, 0xA8	; 168
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	80 83       	st	Z, r24
    267a:	e0 c0       	rjmp	.+448    	; 0x283c <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    267c:	fe 01       	movw	r30, r28
    267e:	e7 5a       	subi	r30, 0xA7	; 167
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	53 e4       	ldi	r21, 0x43	; 67
    2692:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	0c f0       	brlt	.+2      	; 0x269c <LCD_write_cmd_4bit+0xc0>
    269a:	c0 c0       	rjmp	.+384    	; 0x281c <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    269c:	fe 01       	movw	r30, r28
    269e:	e3 5a       	subi	r30, 0xA3	; 163
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a e7       	ldi	r20, 0x7A	; 122
    26b0:	54 e4       	ldi	r21, 0x44	; 68
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	fe 01       	movw	r30, r28
    26bc:	ec 5a       	subi	r30, 0xAC	; 172
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	80 83       	st	Z, r24
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	a2 83       	std	Z+2, r26	; 0x02
    26c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c8:	8e 01       	movw	r16, r28
    26ca:	00 5b       	subi	r16, 0xB0	; 176
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	ec 5a       	subi	r30, 0xAC	; 172
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	f8 01       	movw	r30, r16
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	a2 83       	std	Z+2, r26	; 0x02
    26f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e0 5b       	subi	r30, 0xB0	; 176
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	44 f4       	brge	.+16     	; 0x2724 <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    2714:	fe 01       	movw	r30, r28
    2716:	e2 5b       	subi	r30, 0xB2	; 178
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
    2722:	64 c0       	rjmp	.+200    	; 0x27ec <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    2724:	fe 01       	movw	r30, r28
    2726:	e0 5b       	subi	r30, 0xB0	; 176
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	0c f0       	brlt	.+2      	; 0x2744 <LCD_write_cmd_4bit+0x168>
    2742:	43 c0       	rjmp	.+134    	; 0x27ca <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	fe 01       	movw	r30, r28
    2746:	ec 5a       	subi	r30, 0xAC	; 172
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e2       	ldi	r20, 0x20	; 32
    2758:	51 e4       	ldi	r21, 0x41	; 65
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8e 01       	movw	r16, r28
    2764:	02 5b       	subi	r16, 0xB2	; 178
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	f8 01       	movw	r30, r16
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    277a:	1f c0       	rjmp	.+62     	; 0x27ba <LCD_write_cmd_4bit+0x1de>
    277c:	fe 01       	movw	r30, r28
    277e:	e4 5b       	subi	r30, 0xB4	; 180
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    278a:	fe 01       	movw	r30, r28
    278c:	e4 5b       	subi	r30, 0xB4	; 180
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_write_cmd_4bit+0x1b8>
    2798:	fe 01       	movw	r30, r28
    279a:	e4 5b       	subi	r30, 0xB4	; 180
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a2:	de 01       	movw	r26, r28
    27a4:	a2 5b       	subi	r26, 0xB2	; 178
    27a6:	bf 4f       	sbci	r27, 0xFF	; 255
    27a8:	fe 01       	movw	r30, r28
    27aa:	e2 5b       	subi	r30, 0xB2	; 178
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	9c 93       	st	X, r25
    27b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	fe 01       	movw	r30, r28
    27bc:	e2 5b       	subi	r30, 0xB2	; 178
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	d1 f6       	brne	.-76     	; 0x277c <LCD_write_cmd_4bit+0x1a0>
    27c8:	4b c0       	rjmp	.+150    	; 0x2860 <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	8e 01       	movw	r16, r28
    27cc:	02 5b       	subi	r16, 0xB2	; 178
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	fe 01       	movw	r30, r28
    27d2:	e0 5b       	subi	r30, 0xB0	; 176
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	f8 01       	movw	r30, r16
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	de 01       	movw	r26, r28
    27ee:	a6 5b       	subi	r26, 0xB6	; 182
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e2 5b       	subi	r30, 0xB2	; 178
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	11 96       	adiw	r26, 0x01	; 1
    27fe:	9c 93       	st	X, r25
    2800:	8e 93       	st	-X, r24
    2802:	fe 01       	movw	r30, r28
    2804:	e6 5b       	subi	r30, 0xB6	; 182
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <LCD_write_cmd_4bit+0x230>
    2810:	fe 01       	movw	r30, r28
    2812:	e6 5b       	subi	r30, 0xB6	; 182
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	80 83       	st	Z, r24
    281a:	22 c0       	rjmp	.+68     	; 0x2860 <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    281c:	8e 01       	movw	r16, r28
    281e:	08 5a       	subi	r16, 0xA8	; 168
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e7 5a       	subi	r30, 0xA7	; 167
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	60 81       	ld	r22, Z
    282a:	71 81       	ldd	r23, Z+1	; 0x01
    282c:	82 81       	ldd	r24, Z+2	; 0x02
    282e:	93 81       	ldd	r25, Z+3	; 0x03
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	f8 01       	movw	r30, r16
    283a:	80 83       	st	Z, r24
    283c:	de 01       	movw	r26, r28
    283e:	a7 5b       	subi	r26, 0xB7	; 183
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	e8 5a       	subi	r30, 0xA8	; 168
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    284c:	fe 01       	movw	r30, r28
    284e:	e7 5b       	subi	r30, 0xB7	; 183
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	8a 95       	dec	r24
    2856:	f1 f7       	brne	.-4      	; 0x2854 <LCD_write_cmd_4bit+0x278>
    2858:	fe 01       	movw	r30, r28
    285a:	e7 5b       	subi	r30, 0xB7	; 183
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    2868:	fe 01       	movw	r30, r28
    286a:	eb 5b       	subi	r30, 0xBB	; 187
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a0 e8       	ldi	r26, 0x80	; 128
    2874:	bf e3       	ldi	r27, 0x3F	; 63
    2876:	80 83       	st	Z, r24
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	a2 83       	std	Z+2, r26	; 0x02
    287c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    287e:	8e 01       	movw	r16, r28
    2880:	0f 5b       	subi	r16, 0xBF	; 191
    2882:	1f 4f       	sbci	r17, 0xFF	; 255
    2884:	fe 01       	movw	r30, r28
    2886:	eb 5b       	subi	r30, 0xBB	; 187
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	60 81       	ld	r22, Z
    288c:	71 81       	ldd	r23, Z+1	; 0x01
    288e:	82 81       	ldd	r24, Z+2	; 0x02
    2890:	93 81       	ldd	r25, Z+3	; 0x03
    2892:	2b ea       	ldi	r18, 0xAB	; 171
    2894:	3a ea       	ldi	r19, 0xAA	; 170
    2896:	4a e2       	ldi	r20, 0x2A	; 42
    2898:	50 e4       	ldi	r21, 0x40	; 64
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	f8 01       	movw	r30, r16
    28a4:	80 83       	st	Z, r24
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	a2 83       	std	Z+2, r26	; 0x02
    28aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28ac:	fe 01       	movw	r30, r28
    28ae:	ef 5b       	subi	r30, 0xBF	; 191
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	34 f4       	brge	.+12     	; 0x28d6 <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	fe 01       	movw	r30, r28
    28ce:	e0 5c       	subi	r30, 0xC0	; 192
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 83       	st	Z, r24
    28d4:	9d c0       	rjmp	.+314    	; 0x2a10 <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    28d6:	fe 01       	movw	r30, r28
    28d8:	ef 5b       	subi	r30, 0xBF	; 191
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4f e7       	ldi	r20, 0x7F	; 127
    28ea:	53 e4       	ldi	r21, 0x43	; 67
    28ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28f0:	18 16       	cp	r1, r24
    28f2:	0c f0       	brlt	.+2      	; 0x28f6 <LCD_write_cmd_4bit+0x31a>
    28f4:	7e c0       	rjmp	.+252    	; 0x29f2 <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    28f6:	fe 01       	movw	r30, r28
    28f8:	eb 5b       	subi	r30, 0xBB	; 187
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	4a e7       	ldi	r20, 0x7A	; 122
    290a:	54 e4       	ldi	r21, 0x44	; 68
    290c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	8c af       	std	Y+60, r24	; 0x3c
    2916:	9d af       	std	Y+61, r25	; 0x3d
    2918:	ae af       	std	Y+62, r26	; 0x3e
    291a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6c ad       	ldd	r22, Y+60	; 0x3c
    291e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2920:	8e ad       	ldd	r24, Y+62	; 0x3e
    2922:	9f ad       	ldd	r25, Y+63	; 0x3f
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a ef       	ldi	r20, 0xFA	; 250
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	88 af       	std	Y+56, r24	; 0x38
    2936:	99 af       	std	Y+57, r25	; 0x39
    2938:	aa af       	std	Y+58, r26	; 0x3a
    293a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    293c:	68 ad       	ldd	r22, Y+56	; 0x38
    293e:	79 ad       	ldd	r23, Y+57	; 0x39
    2940:	8a ad       	ldd	r24, Y+58	; 0x3a
    2942:	9b ad       	ldd	r25, Y+59	; 0x3b
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9f ab       	std	Y+55, r25	; 0x37
    295a:	8e ab       	std	Y+54, r24	; 0x36
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    295e:	68 ad       	ldd	r22, Y+56	; 0x38
    2960:	79 ad       	ldd	r23, Y+57	; 0x39
    2962:	8a ad       	ldd	r24, Y+58	; 0x3a
    2964:	9b ad       	ldd	r25, Y+59	; 0x3b
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6c ad       	ldd	r22, Y+60	; 0x3c
    2978:	7d ad       	ldd	r23, Y+61	; 0x3d
    297a:	8e ad       	ldd	r24, Y+62	; 0x3e
    297c:	9f ad       	ldd	r25, Y+63	; 0x3f
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9f ab       	std	Y+55, r25	; 0x37
    299c:	8e ab       	std	Y+54, r24	; 0x36
    299e:	0f c0       	rjmp	.+30     	; 0x29be <LCD_write_cmd_4bit+0x3e2>
    29a0:	88 ec       	ldi	r24, 0xC8	; 200
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9d ab       	std	Y+53, r25	; 0x35
    29a6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29a8:	8c a9       	ldd	r24, Y+52	; 0x34
    29aa:	9d a9       	ldd	r25, Y+53	; 0x35
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_write_cmd_4bit+0x3d0>
    29b0:	9d ab       	std	Y+53, r25	; 0x35
    29b2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8e a9       	ldd	r24, Y+54	; 0x36
    29b6:	9f a9       	ldd	r25, Y+55	; 0x37
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9f ab       	std	Y+55, r25	; 0x37
    29bc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8e a9       	ldd	r24, Y+54	; 0x36
    29c0:	9f a9       	ldd	r25, Y+55	; 0x37
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <LCD_write_cmd_4bit+0x3c4>
    29c6:	2d c0       	rjmp	.+90     	; 0x2a22 <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	68 ad       	ldd	r22, Y+56	; 0x38
    29ca:	79 ad       	ldd	r23, Y+57	; 0x39
    29cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    29ce:	9b ad       	ldd	r25, Y+59	; 0x3b
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9f ab       	std	Y+55, r25	; 0x37
    29da:	8e ab       	std	Y+54, r24	; 0x36
    29dc:	8e a9       	ldd	r24, Y+54	; 0x36
    29de:	9f a9       	ldd	r25, Y+55	; 0x37
    29e0:	9b ab       	std	Y+51, r25	; 0x33
    29e2:	8a ab       	std	Y+50, r24	; 0x32
    29e4:	8a a9       	ldd	r24, Y+50	; 0x32
    29e6:	9b a9       	ldd	r25, Y+51	; 0x33
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_write_cmd_4bit+0x40c>
    29ec:	9b ab       	std	Y+51, r25	; 0x33
    29ee:	8a ab       	std	Y+50, r24	; 0x32
    29f0:	18 c0       	rjmp	.+48     	; 0x2a22 <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29f2:	fe 01       	movw	r30, r28
    29f4:	ef 5b       	subi	r30, 0xBF	; 191
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	60 81       	ld	r22, Z
    29fa:	71 81       	ldd	r23, Z+1	; 0x01
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e0 5c       	subi	r30, 0xC0	; 192
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 83       	st	Z, r24
    2a10:	fe 01       	movw	r30, r28
    2a12:	e0 5c       	subi	r30, 0xC0	; 192
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a1a:	89 a9       	ldd	r24, Y+49	; 0x31
    2a1c:	8a 95       	dec	r24
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_write_cmd_4bit+0x440>
    2a20:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2a22:	fe 01       	movw	r30, r28
    2a24:	ee 59       	subi	r30, 0x9E	; 158
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	84 e0       	ldi	r24, 0x04	; 4
    2a2a:	80 83       	st	Z, r24
    2a2c:	26 c0       	rjmp	.+76     	; 0x2a7a <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ed 59       	subi	r30, 0x9D	; 157
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ee 59       	subi	r30, 0x9E	; 158
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a9 01       	movw	r20, r18
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <LCD_write_cmd_4bit+0x472>
    2a4a:	55 95       	asr	r21
    2a4c:	47 95       	ror	r20
    2a4e:	8a 95       	dec	r24
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <LCD_write_cmd_4bit+0x46e>
    2a52:	ca 01       	movw	r24, r20
    2a54:	98 2f       	mov	r25, r24
    2a56:	91 70       	andi	r25, 0x01	; 1
    2a58:	fe 01       	movw	r30, r28
    2a5a:	ee 59       	subi	r30, 0x9E	; 158
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	82 e0       	ldi	r24, 0x02	; 2
    2a60:	60 81       	ld	r22, Z
    2a62:	49 2f       	mov	r20, r25
    2a64:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2a68:	de 01       	movw	r26, r28
    2a6a:	ae 59       	subi	r26, 0x9E	; 158
    2a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ee 59       	subi	r30, 0x9E	; 158
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	8f 5f       	subi	r24, 0xFF	; 255
    2a78:	8c 93       	st	X, r24
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ee 59       	subi	r30, 0x9E	; 158
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	88 30       	cpi	r24, 0x08	; 8
    2a84:	a0 f2       	brcs	.-88     	; 0x2a2e <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2a86:	82 e0       	ldi	r24, 0x02	; 2
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	a0 e2       	ldi	r26, 0x20	; 32
    2a94:	b1 e4       	ldi	r27, 0x41	; 65
    2a96:	8d a7       	std	Y+45, r24	; 0x2d
    2a98:	9e a7       	std	Y+46, r25	; 0x2e
    2a9a:	af a7       	std	Y+47, r26	; 0x2f
    2a9c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a9e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2aa0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2aa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa4:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa6:	2b ea       	ldi	r18, 0xAB	; 171
    2aa8:	3a ea       	ldi	r19, 0xAA	; 170
    2aaa:	4a e2       	ldi	r20, 0x2A	; 42
    2aac:	50 e4       	ldi	r21, 0x40	; 64
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	89 a7       	std	Y+41, r24	; 0x29
    2ab8:	9a a7       	std	Y+42, r25	; 0x2a
    2aba:	ab a7       	std	Y+43, r26	; 0x2b
    2abc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2abe:	69 a5       	ldd	r22, Y+41	; 0x29
    2ac0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ac2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ac4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e8       	ldi	r20, 0x80	; 128
    2acc:	5f e3       	ldi	r21, 0x3F	; 63
    2ace:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ad2:	88 23       	and	r24, r24
    2ad4:	1c f4       	brge	.+6      	; 0x2adc <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	88 a7       	std	Y+40, r24	; 0x28
    2ada:	91 c0       	rjmp	.+290    	; 0x2bfe <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    2adc:	69 a5       	ldd	r22, Y+41	; 0x29
    2ade:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ae0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ae2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	53 e4       	ldi	r21, 0x43	; 67
    2aec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	0c f0       	brlt	.+2      	; 0x2af6 <LCD_write_cmd_4bit+0x51a>
    2af4:	7b c0       	rjmp	.+246    	; 0x2bec <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2af6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2af8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afc:	98 a9       	ldd	r25, Y+48	; 0x30
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	4a e7       	ldi	r20, 0x7A	; 122
    2b04:	54 e4       	ldi	r21, 0x44	; 68
    2b06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8c a3       	std	Y+36, r24	; 0x24
    2b10:	9d a3       	std	Y+37, r25	; 0x25
    2b12:	ae a3       	std	Y+38, r26	; 0x26
    2b14:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6c a1       	ldd	r22, Y+36	; 0x24
    2b18:	7d a1       	ldd	r23, Y+37	; 0x25
    2b1a:	8e a1       	ldd	r24, Y+38	; 0x26
    2b1c:	9f a1       	ldd	r25, Y+39	; 0x27
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	88 a3       	std	Y+32, r24	; 0x20
    2b30:	99 a3       	std	Y+33, r25	; 0x21
    2b32:	aa a3       	std	Y+34, r26	; 0x22
    2b34:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b36:	68 a1       	ldd	r22, Y+32	; 0x20
    2b38:	79 a1       	ldd	r23, Y+33	; 0x21
    2b3a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b3c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9f 8f       	std	Y+31, r25	; 0x1f
    2b54:	8e 8f       	std	Y+30, r24	; 0x1e
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    2b58:	68 a1       	ldd	r22, Y+32	; 0x20
    2b5a:	79 a1       	ldd	r23, Y+33	; 0x21
    2b5c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b5e:	9b a1       	ldd	r25, Y+35	; 0x23
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6c a1       	ldd	r22, Y+36	; 0x24
    2b72:	7d a1       	ldd	r23, Y+37	; 0x25
    2b74:	8e a1       	ldd	r24, Y+38	; 0x26
    2b76:	9f a1       	ldd	r25, Y+39	; 0x27
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9f 8f       	std	Y+31, r25	; 0x1f
    2b96:	8e 8f       	std	Y+30, r24	; 0x1e
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <LCD_write_cmd_4bit+0x5dc>
    2b9a:	88 ec       	ldi	r24, 0xC8	; 200
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9d 8f       	std	Y+29, r25	; 0x1d
    2ba0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ba2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ba4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_write_cmd_4bit+0x5ca>
    2baa:	9d 8f       	std	Y+29, r25	; 0x1d
    2bac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9f 8f       	std	Y+31, r25	; 0x1f
    2bb6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <LCD_write_cmd_4bit+0x5be>
    2bc0:	24 c0       	rjmp	.+72     	; 0x2c0a <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	68 a1       	ldd	r22, Y+32	; 0x20
    2bc4:	79 a1       	ldd	r23, Y+33	; 0x21
    2bc6:	8a a1       	ldd	r24, Y+34	; 0x22
    2bc8:	9b a1       	ldd	r25, Y+35	; 0x23
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9f 8f       	std	Y+31, r25	; 0x1f
    2bd4:	8e 8f       	std	Y+30, r24	; 0x1e
    2bd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bda:	9b 8f       	std	Y+27, r25	; 0x1b
    2bdc:	8a 8f       	std	Y+26, r24	; 0x1a
    2bde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2be0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <LCD_write_cmd_4bit+0x606>
    2be6:	9b 8f       	std	Y+27, r25	; 0x1b
    2be8:	8a 8f       	std	Y+26, r24	; 0x1a
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bec:	69 a5       	ldd	r22, Y+41	; 0x29
    2bee:	7a a5       	ldd	r23, Y+42	; 0x2a
    2bf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	88 a7       	std	Y+40, r24	; 0x28
    2bfe:	88 a5       	ldd	r24, Y+40	; 0x28
    2c00:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c02:	89 8d       	ldd	r24, Y+25	; 0x19
    2c04:	8a 95       	dec	r24
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <LCD_write_cmd_4bit+0x628>
    2c08:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e8       	ldi	r26, 0x80	; 128
    2c18:	bf e3       	ldi	r27, 0x3F	; 63
    2c1a:	8d 8b       	std	Y+21, r24	; 0x15
    2c1c:	9e 8b       	std	Y+22, r25	; 0x16
    2c1e:	af 8b       	std	Y+23, r26	; 0x17
    2c20:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c22:	6d 89       	ldd	r22, Y+21	; 0x15
    2c24:	7e 89       	ldd	r23, Y+22	; 0x16
    2c26:	8f 89       	ldd	r24, Y+23	; 0x17
    2c28:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2a:	2b ea       	ldi	r18, 0xAB	; 171
    2c2c:	3a ea       	ldi	r19, 0xAA	; 170
    2c2e:	4a e2       	ldi	r20, 0x2A	; 42
    2c30:	50 e4       	ldi	r21, 0x40	; 64
    2c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	89 8b       	std	Y+17, r24	; 0x11
    2c3c:	9a 8b       	std	Y+18, r25	; 0x12
    2c3e:	ab 8b       	std	Y+19, r26	; 0x13
    2c40:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c42:	69 89       	ldd	r22, Y+17	; 0x11
    2c44:	7a 89       	ldd	r23, Y+18	; 0x12
    2c46:	8b 89       	ldd	r24, Y+19	; 0x13
    2c48:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e8       	ldi	r20, 0x80	; 128
    2c50:	5f e3       	ldi	r21, 0x3F	; 63
    2c52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c56:	88 23       	and	r24, r24
    2c58:	1c f4       	brge	.+6      	; 0x2c60 <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	88 8b       	std	Y+16, r24	; 0x10
    2c5e:	91 c0       	rjmp	.+290    	; 0x2d82 <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    2c60:	69 89       	ldd	r22, Y+17	; 0x11
    2c62:	7a 89       	ldd	r23, Y+18	; 0x12
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	9c 89       	ldd	r25, Y+20	; 0x14
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	53 e4       	ldi	r21, 0x43	; 67
    2c70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	0c f0       	brlt	.+2      	; 0x2c7a <LCD_write_cmd_4bit+0x69e>
    2c78:	7b c0       	rjmp	.+246    	; 0x2d70 <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c80:	98 8d       	ldd	r25, Y+24	; 0x18
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a e7       	ldi	r20, 0x7A	; 122
    2c88:	54 e4       	ldi	r21, 0x44	; 68
    2c8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	8c 87       	std	Y+12, r24	; 0x0c
    2c94:	9d 87       	std	Y+13, r25	; 0x0d
    2c96:	ae 87       	std	Y+14, r26	; 0x0e
    2c98:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c9c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ca0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	4a ef       	ldi	r20, 0xFA	; 250
    2ca8:	54 e4       	ldi	r21, 0x44	; 68
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	88 87       	std	Y+8, r24	; 0x08
    2cb4:	99 87       	std	Y+9, r25	; 0x09
    2cb6:	aa 87       	std	Y+10, r26	; 0x0a
    2cb8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cba:	68 85       	ldd	r22, Y+8	; 0x08
    2cbc:	79 85       	ldd	r23, Y+9	; 0x09
    2cbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e8       	ldi	r20, 0x80	; 128
    2cc8:	5f e3       	ldi	r21, 0x3F	; 63
    2cca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cce:	88 23       	and	r24, r24
    2cd0:	2c f4       	brge	.+10     	; 0x2cdc <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	9f 83       	std	Y+7, r25	; 0x07
    2cd8:	8e 83       	std	Y+6, r24	; 0x06
    2cda:	3f c0       	rjmp	.+126    	; 0x2d5a <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    2cdc:	68 85       	ldd	r22, Y+8	; 0x08
    2cde:	79 85       	ldd	r23, Y+9	; 0x09
    2ce0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ce2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	3f ef       	ldi	r19, 0xFF	; 255
    2ce8:	4f e7       	ldi	r20, 0x7F	; 127
    2cea:	57 e4       	ldi	r21, 0x47	; 71
    2cec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2cf0:	18 16       	cp	r1, r24
    2cf2:	4c f5       	brge	.+82     	; 0x2d46 <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cf6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cf8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cfa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9f 83       	std	Y+7, r25	; 0x07
    2d1a:	8e 83       	std	Y+6, r24	; 0x06
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <LCD_write_cmd_4bit+0x760>
    2d1e:	88 ec       	ldi	r24, 0xC8	; 200
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9d 83       	std	Y+5, r25	; 0x05
    2d24:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d26:	8c 81       	ldd	r24, Y+4	; 0x04
    2d28:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <LCD_write_cmd_4bit+0x74e>
    2d2e:	9d 83       	std	Y+5, r25	; 0x05
    2d30:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d32:	8e 81       	ldd	r24, Y+6	; 0x06
    2d34:	9f 81       	ldd	r25, Y+7	; 0x07
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	9f 83       	std	Y+7, r25	; 0x07
    2d3a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	69 f7       	brne	.-38     	; 0x2d1e <LCD_write_cmd_4bit+0x742>
    2d44:	24 c0       	rjmp	.+72     	; 0x2d8e <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d46:	68 85       	ldd	r22, Y+8	; 0x08
    2d48:	79 85       	ldd	r23, Y+9	; 0x09
    2d4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	9f 83       	std	Y+7, r25	; 0x07
    2d58:	8e 83       	std	Y+6, r24	; 0x06
    2d5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d5e:	9b 83       	std	Y+3, r25	; 0x03
    2d60:	8a 83       	std	Y+2, r24	; 0x02
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <LCD_write_cmd_4bit+0x78a>
    2d6a:	9b 83       	std	Y+3, r25	; 0x03
    2d6c:	8a 83       	std	Y+2, r24	; 0x02
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d70:	69 89       	ldd	r22, Y+17	; 0x11
    2d72:	7a 89       	ldd	r23, Y+18	; 0x12
    2d74:	8b 89       	ldd	r24, Y+19	; 0x13
    2d76:	9c 89       	ldd	r25, Y+20	; 0x14
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	88 8b       	std	Y+16, r24	; 0x10
    2d82:	88 89       	ldd	r24, Y+16	; 0x10
    2d84:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	8a 95       	dec	r24
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_write_cmd_4bit+0x7ac>
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2d8e:	fe 01       	movw	r30, r28
    2d90:	ef 59       	subi	r30, 0x9F	; 159
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	84 e0       	ldi	r24, 0x04	; 4
    2d96:	80 83       	st	Z, r24
    2d98:	27 c0       	rjmp	.+78     	; 0x2de8 <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	ed 59       	subi	r30, 0x9D	; 157
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	28 2f       	mov	r18, r24
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	fe 01       	movw	r30, r28
    2da8:	ef 59       	subi	r30, 0x9F	; 159
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	88 2f       	mov	r24, r24
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	04 97       	sbiw	r24, 0x04	; 4
    2db4:	f9 01       	movw	r30, r18
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <LCD_write_cmd_4bit+0x7e0>
    2db8:	f5 95       	asr	r31
    2dba:	e7 95       	ror	r30
    2dbc:	8a 95       	dec	r24
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <LCD_write_cmd_4bit+0x7dc>
    2dc0:	cf 01       	movw	r24, r30
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	91 70       	andi	r25, 0x01	; 1
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	ef 59       	subi	r30, 0x9F	; 159
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	60 81       	ld	r22, Z
    2dd0:	49 2f       	mov	r20, r25
    2dd2:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2dd6:	de 01       	movw	r26, r28
    2dd8:	af 59       	subi	r26, 0x9F	; 159
    2dda:	bf 4f       	sbci	r27, 0xFF	; 255
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ef 59       	subi	r30, 0x9F	; 159
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	8f 5f       	subi	r24, 0xFF	; 255
    2de6:	8c 93       	st	X, r24
    2de8:	fe 01       	movw	r30, r28
    2dea:	ef 59       	subi	r30, 0x9F	; 159
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	88 30       	cpi	r24, 0x08	; 8
    2df2:	98 f2       	brcs	.-90     	; 0x2d9a <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
}
    2dfc:	cd 59       	subi	r28, 0x9D	; 157
    2dfe:	df 4f       	sbci	r29, 0xFF	; 255
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	08 95       	ret

00002e14 <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	cb 5a       	subi	r28, 0xAB	; 171
    2e22:	d0 40       	sbci	r29, 0x00	; 0
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	62 e0       	ldi	r22, 0x02	; 2
    2e32:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	61 e0       	ldi	r22, 0x01	; 1
    2e3a:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    2e3e:	fe 01       	movw	r30, r28
    2e40:	eb 55       	subi	r30, 0x5B	; 91
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e8       	ldi	r26, 0x80	; 128
    2e4a:	bf e3       	ldi	r27, 0x3F	; 63
    2e4c:	80 83       	st	Z, r24
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	a2 83       	std	Z+2, r26	; 0x02
    2e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e54:	8e 01       	movw	r16, r28
    2e56:	0f 55       	subi	r16, 0x5F	; 95
    2e58:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	eb 55       	subi	r30, 0x5B	; 91
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	2b ea       	ldi	r18, 0xAB	; 171
    2e6a:	3a ea       	ldi	r19, 0xAA	; 170
    2e6c:	4a e2       	ldi	r20, 0x2A	; 42
    2e6e:	50 e4       	ldi	r21, 0x40	; 64
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	80 83       	st	Z, r24
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	a2 83       	std	Z+2, r26	; 0x02
    2e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e82:	fe 01       	movw	r30, r28
    2e84:	ef 55       	subi	r30, 0x5F	; 95
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	34 f4       	brge	.+12     	; 0x2eac <LCD_function_set_4bit+0x98>
		__ticks = 1;
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e0 56       	subi	r30, 0x60	; 96
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	80 83       	st	Z, r24
    2eaa:	e0 c0       	rjmp	.+448    	; 0x306c <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    2eac:	fe 01       	movw	r30, r28
    2eae:	ef 55       	subi	r30, 0x5F	; 95
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	53 e4       	ldi	r21, 0x43	; 67
    2ec2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ec6:	18 16       	cp	r1, r24
    2ec8:	0c f0       	brlt	.+2      	; 0x2ecc <LCD_function_set_4bit+0xb8>
    2eca:	c0 c0       	rjmp	.+384    	; 0x304c <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2ecc:	fe 01       	movw	r30, r28
    2ece:	eb 55       	subi	r30, 0x5B	; 91
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	60 81       	ld	r22, Z
    2ed4:	71 81       	ldd	r23, Z+1	; 0x01
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	4a e7       	ldi	r20, 0x7A	; 122
    2ee0:	54 e4       	ldi	r21, 0x44	; 68
    2ee2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	fe 01       	movw	r30, r28
    2eec:	e4 56       	subi	r30, 0x64	; 100
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 83       	st	Z, r24
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	a2 83       	std	Z+2, r26	; 0x02
    2ef6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef8:	8e 01       	movw	r16, r28
    2efa:	08 56       	subi	r16, 0x68	; 104
    2efc:	1f 4f       	sbci	r17, 0xFF	; 255
    2efe:	fe 01       	movw	r30, r28
    2f00:	e4 56       	subi	r30, 0x64	; 100
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	60 81       	ld	r22, Z
    2f06:	71 81       	ldd	r23, Z+1	; 0x01
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4a ef       	ldi	r20, 0xFA	; 250
    2f12:	54 e4       	ldi	r21, 0x44	; 68
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f26:	fe 01       	movw	r30, r28
    2f28:	e8 56       	subi	r30, 0x68	; 104
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	60 81       	ld	r22, Z
    2f2e:	71 81       	ldd	r23, Z+1	; 0x01
    2f30:	82 81       	ldd	r24, Z+2	; 0x02
    2f32:	93 81       	ldd	r25, Z+3	; 0x03
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e8       	ldi	r20, 0x80	; 128
    2f3a:	5f e3       	ldi	r21, 0x3F	; 63
    2f3c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f40:	88 23       	and	r24, r24
    2f42:	44 f4       	brge	.+16     	; 0x2f54 <LCD_function_set_4bit+0x140>
		__ticks = 1;
    2f44:	fe 01       	movw	r30, r28
    2f46:	ea 56       	subi	r30, 0x6A	; 106
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	64 c0       	rjmp	.+200    	; 0x301c <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e8 56       	subi	r30, 0x68	; 104
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	0c f0       	brlt	.+2      	; 0x2f74 <LCD_function_set_4bit+0x160>
    2f72:	43 c0       	rjmp	.+134    	; 0x2ffa <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	fe 01       	movw	r30, r28
    2f76:	e4 56       	subi	r30, 0x64	; 100
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	8e 01       	movw	r16, r28
    2f94:	0a 56       	subi	r16, 0x6A	; 106
    2f96:	1f 4f       	sbci	r17, 0xFF	; 255
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
    2faa:	1f c0       	rjmp	.+62     	; 0x2fea <LCD_function_set_4bit+0x1d6>
    2fac:	fe 01       	movw	r30, r28
    2fae:	ec 56       	subi	r30, 0x6C	; 108
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	88 ec       	ldi	r24, 0xC8	; 200
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ec 56       	subi	r30, 0x6C	; 108
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	91 81       	ldd	r25, Z+1	; 0x01
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <LCD_function_set_4bit+0x1b0>
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ec 56       	subi	r30, 0x6C	; 108
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	de 01       	movw	r26, r28
    2fd4:	aa 56       	subi	r26, 0x6A	; 106
    2fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ea 56       	subi	r30, 0x6A	; 106
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	11 96       	adiw	r26, 0x01	; 1
    2fe6:	9c 93       	st	X, r25
    2fe8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	fe 01       	movw	r30, r28
    2fec:	ea 56       	subi	r30, 0x6A	; 106
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	91 81       	ldd	r25, Z+1	; 0x01
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	d1 f6       	brne	.-76     	; 0x2fac <LCD_function_set_4bit+0x198>
    2ff8:	4b c0       	rjmp	.+150    	; 0x3090 <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffa:	8e 01       	movw	r16, r28
    2ffc:	0a 56       	subi	r16, 0x6A	; 106
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	e8 56       	subi	r30, 0x68	; 104
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	f8 01       	movw	r30, r16
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	de 01       	movw	r26, r28
    301e:	ae 56       	subi	r26, 0x6E	; 110
    3020:	bf 4f       	sbci	r27, 0xFF	; 255
    3022:	fe 01       	movw	r30, r28
    3024:	ea 56       	subi	r30, 0x6A	; 106
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	11 96       	adiw	r26, 0x01	; 1
    302e:	9c 93       	st	X, r25
    3030:	8e 93       	st	-X, r24
    3032:	fe 01       	movw	r30, r28
    3034:	ee 56       	subi	r30, 0x6E	; 110
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <LCD_function_set_4bit+0x228>
    3040:	fe 01       	movw	r30, r28
    3042:	ee 56       	subi	r30, 0x6E	; 110
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	80 83       	st	Z, r24
    304a:	22 c0       	rjmp	.+68     	; 0x3090 <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    304c:	8e 01       	movw	r16, r28
    304e:	00 56       	subi	r16, 0x60	; 96
    3050:	1f 4f       	sbci	r17, 0xFF	; 255
    3052:	fe 01       	movw	r30, r28
    3054:	ef 55       	subi	r30, 0x5F	; 95
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	f8 01       	movw	r30, r16
    306a:	80 83       	st	Z, r24
    306c:	de 01       	movw	r26, r28
    306e:	af 56       	subi	r26, 0x6F	; 111
    3070:	bf 4f       	sbci	r27, 0xFF	; 255
    3072:	fe 01       	movw	r30, r28
    3074:	e0 56       	subi	r30, 0x60	; 96
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    307c:	fe 01       	movw	r30, r28
    307e:	ef 56       	subi	r30, 0x6F	; 111
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	8a 95       	dec	r24
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCD_function_set_4bit+0x270>
    3088:	fe 01       	movw	r30, r28
    308a:	ef 56       	subi	r30, 0x6F	; 111
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3090:	82 e0       	ldi	r24, 0x02	; 2
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    3098:	fe 01       	movw	r30, r28
    309a:	e3 57       	subi	r30, 0x73	; 115
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e8       	ldi	r26, 0x80	; 128
    30a4:	bf e3       	ldi	r27, 0x3F	; 63
    30a6:	80 83       	st	Z, r24
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	a2 83       	std	Z+2, r26	; 0x02
    30ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30ae:	8e 01       	movw	r16, r28
    30b0:	07 57       	subi	r16, 0x77	; 119
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	fe 01       	movw	r30, r28
    30b6:	e3 57       	subi	r30, 0x73	; 115
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	2b ea       	ldi	r18, 0xAB	; 171
    30c4:	3a ea       	ldi	r19, 0xAA	; 170
    30c6:	4a e2       	ldi	r20, 0x2A	; 42
    30c8:	50 e4       	ldi	r21, 0x40	; 64
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	f8 01       	movw	r30, r16
    30d4:	80 83       	st	Z, r24
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	a2 83       	std	Z+2, r26	; 0x02
    30da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30dc:	fe 01       	movw	r30, r28
    30de:	e7 57       	subi	r30, 0x77	; 119
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e8       	ldi	r20, 0x80	; 128
    30f0:	5f e3       	ldi	r21, 0x3F	; 63
    30f2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30f6:	88 23       	and	r24, r24
    30f8:	34 f4       	brge	.+12     	; 0x3106 <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    30fa:	fe 01       	movw	r30, r28
    30fc:	e8 57       	subi	r30, 0x78	; 120
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	80 83       	st	Z, r24
    3104:	e0 c0       	rjmp	.+448    	; 0x32c6 <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    3106:	fe 01       	movw	r30, r28
    3108:	e7 57       	subi	r30, 0x77	; 119
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 81       	ld	r22, Z
    310e:	71 81       	ldd	r23, Z+1	; 0x01
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	4f e7       	ldi	r20, 0x7F	; 127
    311a:	53 e4       	ldi	r21, 0x43	; 67
    311c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3120:	18 16       	cp	r1, r24
    3122:	0c f0       	brlt	.+2      	; 0x3126 <LCD_function_set_4bit+0x312>
    3124:	c0 c0       	rjmp	.+384    	; 0x32a6 <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    3126:	fe 01       	movw	r30, r28
    3128:	e3 57       	subi	r30, 0x73	; 115
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	60 81       	ld	r22, Z
    312e:	71 81       	ldd	r23, Z+1	; 0x01
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a e7       	ldi	r20, 0x7A	; 122
    313a:	54 e4       	ldi	r21, 0x44	; 68
    313c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	fe 01       	movw	r30, r28
    3146:	ec 57       	subi	r30, 0x7C	; 124
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	80 83       	st	Z, r24
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	a2 83       	std	Z+2, r26	; 0x02
    3150:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	8e 01       	movw	r16, r28
    3154:	00 58       	subi	r16, 0x80	; 128
    3156:	1f 4f       	sbci	r17, 0xFF	; 255
    3158:	fe 01       	movw	r30, r28
    315a:	ec 57       	subi	r30, 0x7C	; 124
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	60 81       	ld	r22, Z
    3160:	71 81       	ldd	r23, Z+1	; 0x01
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	93 81       	ldd	r25, Z+3	; 0x03
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	4a ef       	ldi	r20, 0xFA	; 250
    316c:	54 e4       	ldi	r21, 0x44	; 68
    316e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	f8 01       	movw	r30, r16
    3178:	80 83       	st	Z, r24
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	a2 83       	std	Z+2, r26	; 0x02
    317e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3180:	fe 01       	movw	r30, r28
    3182:	e0 58       	subi	r30, 0x80	; 128
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    319a:	88 23       	and	r24, r24
    319c:	44 f4       	brge	.+16     	; 0x31ae <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    319e:	fe 01       	movw	r30, r28
    31a0:	e2 58       	subi	r30, 0x82	; 130
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
    31ac:	64 c0       	rjmp	.+200    	; 0x3276 <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    31ae:	fe 01       	movw	r30, r28
    31b0:	e0 58       	subi	r30, 0x80	; 128
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	0c f0       	brlt	.+2      	; 0x31ce <LCD_function_set_4bit+0x3ba>
    31cc:	43 c0       	rjmp	.+134    	; 0x3254 <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ce:	fe 01       	movw	r30, r28
    31d0:	ec 57       	subi	r30, 0x7C	; 124
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e2       	ldi	r20, 0x20	; 32
    31e2:	51 e4       	ldi	r21, 0x41	; 65
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8e 01       	movw	r16, r28
    31ee:	02 58       	subi	r16, 0x82	; 130
    31f0:	1f 4f       	sbci	r17, 0xFF	; 255
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	f8 01       	movw	r30, r16
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
    3204:	1f c0       	rjmp	.+62     	; 0x3244 <LCD_function_set_4bit+0x430>
    3206:	fe 01       	movw	r30, r28
    3208:	e4 58       	subi	r30, 0x84	; 132
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	88 ec       	ldi	r24, 0xC8	; 200
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3214:	fe 01       	movw	r30, r28
    3216:	e4 58       	subi	r30, 0x84	; 132
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <LCD_function_set_4bit+0x40a>
    3222:	fe 01       	movw	r30, r28
    3224:	e4 58       	subi	r30, 0x84	; 132
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	de 01       	movw	r26, r28
    322e:	a2 58       	subi	r26, 0x82	; 130
    3230:	bf 4f       	sbci	r27, 0xFF	; 255
    3232:	fe 01       	movw	r30, r28
    3234:	e2 58       	subi	r30, 0x82	; 130
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 81       	ld	r24, Z
    323a:	91 81       	ldd	r25, Z+1	; 0x01
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	11 96       	adiw	r26, 0x01	; 1
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	fe 01       	movw	r30, r28
    3246:	e2 58       	subi	r30, 0x82	; 130
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	d1 f6       	brne	.-76     	; 0x3206 <LCD_function_set_4bit+0x3f2>
    3252:	4b c0       	rjmp	.+150    	; 0x32ea <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3254:	8e 01       	movw	r16, r28
    3256:	02 58       	subi	r16, 0x82	; 130
    3258:	1f 4f       	sbci	r17, 0xFF	; 255
    325a:	fe 01       	movw	r30, r28
    325c:	e0 58       	subi	r30, 0x80	; 128
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	60 81       	ld	r22, Z
    3262:	71 81       	ldd	r23, Z+1	; 0x01
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	f8 01       	movw	r30, r16
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	80 83       	st	Z, r24
    3276:	de 01       	movw	r26, r28
    3278:	a6 58       	subi	r26, 0x86	; 134
    327a:	bf 4f       	sbci	r27, 0xFF	; 255
    327c:	fe 01       	movw	r30, r28
    327e:	e2 58       	subi	r30, 0x82	; 130
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	11 96       	adiw	r26, 0x01	; 1
    3288:	9c 93       	st	X, r25
    328a:	8e 93       	st	-X, r24
    328c:	fe 01       	movw	r30, r28
    328e:	e6 58       	subi	r30, 0x86	; 134
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	80 81       	ld	r24, Z
    3294:	91 81       	ldd	r25, Z+1	; 0x01
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <LCD_function_set_4bit+0x482>
    329a:	fe 01       	movw	r30, r28
    329c:	e6 58       	subi	r30, 0x86	; 134
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	22 c0       	rjmp	.+68     	; 0x32ea <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32a6:	8e 01       	movw	r16, r28
    32a8:	08 57       	subi	r16, 0x78	; 120
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	e7 57       	subi	r30, 0x77	; 119
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	f8 01       	movw	r30, r16
    32c4:	80 83       	st	Z, r24
    32c6:	de 01       	movw	r26, r28
    32c8:	a7 58       	subi	r26, 0x87	; 135
    32ca:	bf 4f       	sbci	r27, 0xFF	; 255
    32cc:	fe 01       	movw	r30, r28
    32ce:	e8 57       	subi	r30, 0x78	; 120
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	80 81       	ld	r24, Z
    32d4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32d6:	fe 01       	movw	r30, r28
    32d8:	e7 58       	subi	r30, 0x87	; 135
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 81       	ld	r24, Z
    32de:	8a 95       	dec	r24
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_function_set_4bit+0x4ca>
    32e2:	fe 01       	movw	r30, r28
    32e4:	e7 58       	subi	r30, 0x87	; 135
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    32ea:	fe 01       	movw	r30, r28
    32ec:	e5 55       	subi	r30, 0x55	; 85
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	10 82       	st	Z, r1
    32f2:	23 c0       	rjmp	.+70     	; 0x333a <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    32f4:	fe 01       	movw	r30, r28
    32f6:	e5 55       	subi	r30, 0x55	; 85
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 81       	ld	r24, Z
    32fc:	48 2f       	mov	r20, r24
    32fe:	4c 5f       	subi	r20, 0xFC	; 252
    3300:	fe 01       	movw	r30, r28
    3302:	e5 55       	subi	r30, 0x55	; 85
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 81       	ld	r24, Z
    3308:	28 2f       	mov	r18, r24
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <LCD_function_set_4bit+0x502>
    3312:	95 95       	asr	r25
    3314:	87 95       	ror	r24
    3316:	2a 95       	dec	r18
    3318:	e2 f7       	brpl	.-8      	; 0x3312 <LCD_function_set_4bit+0x4fe>
    331a:	98 2f       	mov	r25, r24
    331c:	91 70       	andi	r25, 0x01	; 1
    331e:	82 e0       	ldi	r24, 0x02	; 2
    3320:	64 2f       	mov	r22, r20
    3322:	49 2f       	mov	r20, r25
    3324:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    3328:	de 01       	movw	r26, r28
    332a:	a5 55       	subi	r26, 0x55	; 85
    332c:	bf 4f       	sbci	r27, 0xFF	; 255
    332e:	fe 01       	movw	r30, r28
    3330:	e5 55       	subi	r30, 0x55	; 85
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	80 81       	ld	r24, Z
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	8c 93       	st	X, r24
    333a:	fe 01       	movw	r30, r28
    333c:	e5 55       	subi	r30, 0x55	; 85
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	80 81       	ld	r24, Z
    3342:	84 30       	cpi	r24, 0x04	; 4
    3344:	b8 f2       	brcs	.-82     	; 0x32f4 <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3346:	82 e0       	ldi	r24, 0x02	; 2
    3348:	60 e0       	ldi	r22, 0x00	; 0
    334a:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    334e:	fe 01       	movw	r30, r28
    3350:	eb 58       	subi	r30, 0x8B	; 139
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	a0 e2       	ldi	r26, 0x20	; 32
    335a:	b1 e4       	ldi	r27, 0x41	; 65
    335c:	80 83       	st	Z, r24
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	a2 83       	std	Z+2, r26	; 0x02
    3362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3364:	8e 01       	movw	r16, r28
    3366:	0f 58       	subi	r16, 0x8F	; 143
    3368:	1f 4f       	sbci	r17, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	eb 58       	subi	r30, 0x8B	; 139
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	2b ea       	ldi	r18, 0xAB	; 171
    337a:	3a ea       	ldi	r19, 0xAA	; 170
    337c:	4a e2       	ldi	r20, 0x2A	; 42
    337e:	50 e4       	ldi	r21, 0x40	; 64
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	f8 01       	movw	r30, r16
    338a:	80 83       	st	Z, r24
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	a2 83       	std	Z+2, r26	; 0x02
    3390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3392:	fe 01       	movw	r30, r28
    3394:	ef 58       	subi	r30, 0x8F	; 143
    3396:	ff 4f       	sbci	r31, 0xFF	; 255
    3398:	60 81       	ld	r22, Z
    339a:	71 81       	ldd	r23, Z+1	; 0x01
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	93 81       	ldd	r25, Z+3	; 0x03
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	34 f4       	brge	.+12     	; 0x33bc <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    33b0:	fe 01       	movw	r30, r28
    33b2:	e0 59       	subi	r30, 0x90	; 144
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	80 83       	st	Z, r24
    33ba:	e0 c0       	rjmp	.+448    	; 0x357c <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    33bc:	fe 01       	movw	r30, r28
    33be:	ef 58       	subi	r30, 0x8F	; 143
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	93 81       	ldd	r25, Z+3	; 0x03
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	4f e7       	ldi	r20, 0x7F	; 127
    33d0:	53 e4       	ldi	r21, 0x43	; 67
    33d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33d6:	18 16       	cp	r1, r24
    33d8:	0c f0       	brlt	.+2      	; 0x33dc <LCD_function_set_4bit+0x5c8>
    33da:	c0 c0       	rjmp	.+384    	; 0x355c <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    33dc:	fe 01       	movw	r30, r28
    33de:	eb 58       	subi	r30, 0x8B	; 139
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	60 81       	ld	r22, Z
    33e4:	71 81       	ldd	r23, Z+1	; 0x01
    33e6:	82 81       	ldd	r24, Z+2	; 0x02
    33e8:	93 81       	ldd	r25, Z+3	; 0x03
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	4a e7       	ldi	r20, 0x7A	; 122
    33f0:	54 e4       	ldi	r21, 0x44	; 68
    33f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	fe 01       	movw	r30, r28
    33fc:	e4 59       	subi	r30, 0x94	; 148
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 83       	st	Z, r24
    3402:	91 83       	std	Z+1, r25	; 0x01
    3404:	a2 83       	std	Z+2, r26	; 0x02
    3406:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3408:	8e 01       	movw	r16, r28
    340a:	08 59       	subi	r16, 0x98	; 152
    340c:	1f 4f       	sbci	r17, 0xFF	; 255
    340e:	fe 01       	movw	r30, r28
    3410:	e4 59       	subi	r30, 0x94	; 148
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	60 81       	ld	r22, Z
    3416:	71 81       	ldd	r23, Z+1	; 0x01
    3418:	82 81       	ldd	r24, Z+2	; 0x02
    341a:	93 81       	ldd	r25, Z+3	; 0x03
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a ef       	ldi	r20, 0xFA	; 250
    3422:	54 e4       	ldi	r21, 0x44	; 68
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	f8 01       	movw	r30, r16
    342e:	80 83       	st	Z, r24
    3430:	91 83       	std	Z+1, r25	; 0x01
    3432:	a2 83       	std	Z+2, r26	; 0x02
    3434:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3436:	fe 01       	movw	r30, r28
    3438:	e8 59       	subi	r30, 0x98	; 152
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	60 81       	ld	r22, Z
    343e:	71 81       	ldd	r23, Z+1	; 0x01
    3440:	82 81       	ldd	r24, Z+2	; 0x02
    3442:	93 81       	ldd	r25, Z+3	; 0x03
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e8       	ldi	r20, 0x80	; 128
    344a:	5f e3       	ldi	r21, 0x3F	; 63
    344c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3450:	88 23       	and	r24, r24
    3452:	44 f4       	brge	.+16     	; 0x3464 <LCD_function_set_4bit+0x650>
		__ticks = 1;
    3454:	fe 01       	movw	r30, r28
    3456:	ea 59       	subi	r30, 0x9A	; 154
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	91 83       	std	Z+1, r25	; 0x01
    3460:	80 83       	st	Z, r24
    3462:	64 c0       	rjmp	.+200    	; 0x352c <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    3464:	fe 01       	movw	r30, r28
    3466:	e8 59       	subi	r30, 0x98	; 152
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	3f ef       	ldi	r19, 0xFF	; 255
    3476:	4f e7       	ldi	r20, 0x7F	; 127
    3478:	57 e4       	ldi	r21, 0x47	; 71
    347a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    347e:	18 16       	cp	r1, r24
    3480:	0c f0       	brlt	.+2      	; 0x3484 <LCD_function_set_4bit+0x670>
    3482:	43 c0       	rjmp	.+134    	; 0x350a <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3484:	fe 01       	movw	r30, r28
    3486:	e4 59       	subi	r30, 0x94	; 148
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	40 e2       	ldi	r20, 0x20	; 32
    3498:	51 e4       	ldi	r21, 0x41	; 65
    349a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	8e 01       	movw	r16, r28
    34a4:	0a 59       	subi	r16, 0x9A	; 154
    34a6:	1f 4f       	sbci	r17, 0xFF	; 255
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	f8 01       	movw	r30, r16
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	80 83       	st	Z, r24
    34ba:	1f c0       	rjmp	.+62     	; 0x34fa <LCD_function_set_4bit+0x6e6>
    34bc:	fe 01       	movw	r30, r28
    34be:	ec 59       	subi	r30, 0x9C	; 156
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	88 ec       	ldi	r24, 0xC8	; 200
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34ca:	fe 01       	movw	r30, r28
    34cc:	ec 59       	subi	r30, 0x9C	; 156
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 81       	ld	r24, Z
    34d2:	91 81       	ldd	r25, Z+1	; 0x01
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <LCD_function_set_4bit+0x6c0>
    34d8:	fe 01       	movw	r30, r28
    34da:	ec 59       	subi	r30, 0x9C	; 156
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e2:	de 01       	movw	r26, r28
    34e4:	aa 59       	subi	r26, 0x9A	; 154
    34e6:	bf 4f       	sbci	r27, 0xFF	; 255
    34e8:	fe 01       	movw	r30, r28
    34ea:	ea 59       	subi	r30, 0x9A	; 154
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	11 96       	adiw	r26, 0x01	; 1
    34f6:	9c 93       	st	X, r25
    34f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fa:	fe 01       	movw	r30, r28
    34fc:	ea 59       	subi	r30, 0x9A	; 154
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	d1 f6       	brne	.-76     	; 0x34bc <LCD_function_set_4bit+0x6a8>
    3508:	4b c0       	rjmp	.+150    	; 0x35a0 <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350a:	8e 01       	movw	r16, r28
    350c:	0a 59       	subi	r16, 0x9A	; 154
    350e:	1f 4f       	sbci	r17, 0xFF	; 255
    3510:	fe 01       	movw	r30, r28
    3512:	e8 59       	subi	r30, 0x98	; 152
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	60 81       	ld	r22, Z
    3518:	71 81       	ldd	r23, Z+1	; 0x01
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	93 81       	ldd	r25, Z+3	; 0x03
    351e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	f8 01       	movw	r30, r16
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
    352c:	de 01       	movw	r26, r28
    352e:	ae 59       	subi	r26, 0x9E	; 158
    3530:	bf 4f       	sbci	r27, 0xFF	; 255
    3532:	fe 01       	movw	r30, r28
    3534:	ea 59       	subi	r30, 0x9A	; 154
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	80 81       	ld	r24, Z
    353a:	91 81       	ldd	r25, Z+1	; 0x01
    353c:	11 96       	adiw	r26, 0x01	; 1
    353e:	9c 93       	st	X, r25
    3540:	8e 93       	st	-X, r24
    3542:	fe 01       	movw	r30, r28
    3544:	ee 59       	subi	r30, 0x9E	; 158
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	f1 f7       	brne	.-4      	; 0x354c <LCD_function_set_4bit+0x738>
    3550:	fe 01       	movw	r30, r28
    3552:	ee 59       	subi	r30, 0x9E	; 158
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	91 83       	std	Z+1, r25	; 0x01
    3558:	80 83       	st	Z, r24
    355a:	22 c0       	rjmp	.+68     	; 0x35a0 <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    355c:	8e 01       	movw	r16, r28
    355e:	00 59       	subi	r16, 0x90	; 144
    3560:	1f 4f       	sbci	r17, 0xFF	; 255
    3562:	fe 01       	movw	r30, r28
    3564:	ef 58       	subi	r30, 0x8F	; 143
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	f8 01       	movw	r30, r16
    357a:	80 83       	st	Z, r24
    357c:	de 01       	movw	r26, r28
    357e:	af 59       	subi	r26, 0x9F	; 159
    3580:	bf 4f       	sbci	r27, 0xFF	; 255
    3582:	fe 01       	movw	r30, r28
    3584:	e0 59       	subi	r30, 0x90	; 144
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 81       	ld	r24, Z
    358a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    358c:	fe 01       	movw	r30, r28
    358e:	ef 59       	subi	r30, 0x9F	; 159
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	8a 95       	dec	r24
    3596:	f1 f7       	brne	.-4      	; 0x3594 <LCD_function_set_4bit+0x780>
    3598:	fe 01       	movw	r30, r28
    359a:	ef 59       	subi	r30, 0x9F	; 159
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    35a8:	fe 01       	movw	r30, r28
    35aa:	e3 5a       	subi	r30, 0xA3	; 163
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	a0 e8       	ldi	r26, 0x80	; 128
    35b4:	bf e3       	ldi	r27, 0x3F	; 63
    35b6:	80 83       	st	Z, r24
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	a2 83       	std	Z+2, r26	; 0x02
    35bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35be:	8e 01       	movw	r16, r28
    35c0:	07 5a       	subi	r16, 0xA7	; 167
    35c2:	1f 4f       	sbci	r17, 0xFF	; 255
    35c4:	fe 01       	movw	r30, r28
    35c6:	e3 5a       	subi	r30, 0xA3	; 163
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	60 81       	ld	r22, Z
    35cc:	71 81       	ldd	r23, Z+1	; 0x01
    35ce:	82 81       	ldd	r24, Z+2	; 0x02
    35d0:	93 81       	ldd	r25, Z+3	; 0x03
    35d2:	2b ea       	ldi	r18, 0xAB	; 171
    35d4:	3a ea       	ldi	r19, 0xAA	; 170
    35d6:	4a e2       	ldi	r20, 0x2A	; 42
    35d8:	50 e4       	ldi	r21, 0x40	; 64
    35da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	f8 01       	movw	r30, r16
    35e4:	80 83       	st	Z, r24
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	a2 83       	std	Z+2, r26	; 0x02
    35ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ec:	fe 01       	movw	r30, r28
    35ee:	e7 5a       	subi	r30, 0xA7	; 167
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	93 81       	ldd	r25, Z+3	; 0x03
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e8       	ldi	r20, 0x80	; 128
    3600:	5f e3       	ldi	r21, 0x3F	; 63
    3602:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3606:	88 23       	and	r24, r24
    3608:	34 f4       	brge	.+12     	; 0x3616 <LCD_function_set_4bit+0x802>
		__ticks = 1;
    360a:	fe 01       	movw	r30, r28
    360c:	e8 5a       	subi	r30, 0xA8	; 168
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	80 83       	st	Z, r24
    3614:	e0 c0       	rjmp	.+448    	; 0x37d6 <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    3616:	fe 01       	movw	r30, r28
    3618:	e7 5a       	subi	r30, 0xA7	; 167
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	60 81       	ld	r22, Z
    361e:	71 81       	ldd	r23, Z+1	; 0x01
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	4f e7       	ldi	r20, 0x7F	; 127
    362a:	53 e4       	ldi	r21, 0x43	; 67
    362c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3630:	18 16       	cp	r1, r24
    3632:	0c f0       	brlt	.+2      	; 0x3636 <LCD_function_set_4bit+0x822>
    3634:	c0 c0       	rjmp	.+384    	; 0x37b6 <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    3636:	fe 01       	movw	r30, r28
    3638:	e3 5a       	subi	r30, 0xA3	; 163
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	60 81       	ld	r22, Z
    363e:	71 81       	ldd	r23, Z+1	; 0x01
    3640:	82 81       	ldd	r24, Z+2	; 0x02
    3642:	93 81       	ldd	r25, Z+3	; 0x03
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	4a e7       	ldi	r20, 0x7A	; 122
    364a:	54 e4       	ldi	r21, 0x44	; 68
    364c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	fe 01       	movw	r30, r28
    3656:	ec 5a       	subi	r30, 0xAC	; 172
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	80 83       	st	Z, r24
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	a2 83       	std	Z+2, r26	; 0x02
    3660:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3662:	8e 01       	movw	r16, r28
    3664:	00 5b       	subi	r16, 0xB0	; 176
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	fe 01       	movw	r30, r28
    366a:	ec 5a       	subi	r30, 0xAC	; 172
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	60 81       	ld	r22, Z
    3670:	71 81       	ldd	r23, Z+1	; 0x01
    3672:	82 81       	ldd	r24, Z+2	; 0x02
    3674:	93 81       	ldd	r25, Z+3	; 0x03
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	4a ef       	ldi	r20, 0xFA	; 250
    367c:	54 e4       	ldi	r21, 0x44	; 68
    367e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	f8 01       	movw	r30, r16
    3688:	80 83       	st	Z, r24
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	a2 83       	std	Z+2, r26	; 0x02
    368e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3690:	fe 01       	movw	r30, r28
    3692:	e0 5b       	subi	r30, 0xB0	; 176
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e8       	ldi	r20, 0x80	; 128
    36a4:	5f e3       	ldi	r21, 0x3F	; 63
    36a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36aa:	88 23       	and	r24, r24
    36ac:	44 f4       	brge	.+16     	; 0x36be <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    36ae:	fe 01       	movw	r30, r28
    36b0:	e2 5b       	subi	r30, 0xB2	; 178
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	91 83       	std	Z+1, r25	; 0x01
    36ba:	80 83       	st	Z, r24
    36bc:	64 c0       	rjmp	.+200    	; 0x3786 <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    36be:	fe 01       	movw	r30, r28
    36c0:	e0 5b       	subi	r30, 0xB0	; 176
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	60 81       	ld	r22, Z
    36c6:	71 81       	ldd	r23, Z+1	; 0x01
    36c8:	82 81       	ldd	r24, Z+2	; 0x02
    36ca:	93 81       	ldd	r25, Z+3	; 0x03
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36d8:	18 16       	cp	r1, r24
    36da:	0c f0       	brlt	.+2      	; 0x36de <LCD_function_set_4bit+0x8ca>
    36dc:	43 c0       	rjmp	.+134    	; 0x3764 <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36de:	fe 01       	movw	r30, r28
    36e0:	ec 5a       	subi	r30, 0xAC	; 172
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	60 81       	ld	r22, Z
    36e6:	71 81       	ldd	r23, Z+1	; 0x01
    36e8:	82 81       	ldd	r24, Z+2	; 0x02
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e2       	ldi	r20, 0x20	; 32
    36f2:	51 e4       	ldi	r21, 0x41	; 65
    36f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	8e 01       	movw	r16, r28
    36fe:	02 5b       	subi	r16, 0xB2	; 178
    3700:	1f 4f       	sbci	r17, 0xFF	; 255
    3702:	bc 01       	movw	r22, r24
    3704:	cd 01       	movw	r24, r26
    3706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	f8 01       	movw	r30, r16
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	80 83       	st	Z, r24
    3714:	1f c0       	rjmp	.+62     	; 0x3754 <LCD_function_set_4bit+0x940>
    3716:	fe 01       	movw	r30, r28
    3718:	e4 5b       	subi	r30, 0xB4	; 180
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	88 ec       	ldi	r24, 0xC8	; 200
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3724:	fe 01       	movw	r30, r28
    3726:	e4 5b       	subi	r30, 0xB4	; 180
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	80 81       	ld	r24, Z
    372c:	91 81       	ldd	r25, Z+1	; 0x01
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <LCD_function_set_4bit+0x91a>
    3732:	fe 01       	movw	r30, r28
    3734:	e4 5b       	subi	r30, 0xB4	; 180
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	91 83       	std	Z+1, r25	; 0x01
    373a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373c:	de 01       	movw	r26, r28
    373e:	a2 5b       	subi	r26, 0xB2	; 178
    3740:	bf 4f       	sbci	r27, 0xFF	; 255
    3742:	fe 01       	movw	r30, r28
    3744:	e2 5b       	subi	r30, 0xB2	; 178
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	80 81       	ld	r24, Z
    374a:	91 81       	ldd	r25, Z+1	; 0x01
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	11 96       	adiw	r26, 0x01	; 1
    3750:	9c 93       	st	X, r25
    3752:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3754:	fe 01       	movw	r30, r28
    3756:	e2 5b       	subi	r30, 0xB2	; 178
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	d1 f6       	brne	.-76     	; 0x3716 <LCD_function_set_4bit+0x902>
    3762:	4b c0       	rjmp	.+150    	; 0x37fa <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3764:	8e 01       	movw	r16, r28
    3766:	02 5b       	subi	r16, 0xB2	; 178
    3768:	1f 4f       	sbci	r17, 0xFF	; 255
    376a:	fe 01       	movw	r30, r28
    376c:	e0 5b       	subi	r30, 0xB0	; 176
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	60 81       	ld	r22, Z
    3772:	71 81       	ldd	r23, Z+1	; 0x01
    3774:	82 81       	ldd	r24, Z+2	; 0x02
    3776:	93 81       	ldd	r25, Z+3	; 0x03
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	f8 01       	movw	r30, r16
    3782:	91 83       	std	Z+1, r25	; 0x01
    3784:	80 83       	st	Z, r24
    3786:	de 01       	movw	r26, r28
    3788:	a6 5b       	subi	r26, 0xB6	; 182
    378a:	bf 4f       	sbci	r27, 0xFF	; 255
    378c:	fe 01       	movw	r30, r28
    378e:	e2 5b       	subi	r30, 0xB2	; 178
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	80 81       	ld	r24, Z
    3794:	91 81       	ldd	r25, Z+1	; 0x01
    3796:	11 96       	adiw	r26, 0x01	; 1
    3798:	9c 93       	st	X, r25
    379a:	8e 93       	st	-X, r24
    379c:	fe 01       	movw	r30, r28
    379e:	e6 5b       	subi	r30, 0xB6	; 182
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	80 81       	ld	r24, Z
    37a4:	91 81       	ldd	r25, Z+1	; 0x01
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <LCD_function_set_4bit+0x992>
    37aa:	fe 01       	movw	r30, r28
    37ac:	e6 5b       	subi	r30, 0xB6	; 182
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	80 83       	st	Z, r24
    37b4:	22 c0       	rjmp	.+68     	; 0x37fa <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37b6:	8e 01       	movw	r16, r28
    37b8:	08 5a       	subi	r16, 0xA8	; 168
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	fe 01       	movw	r30, r28
    37be:	e7 5a       	subi	r30, 0xA7	; 167
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	60 81       	ld	r22, Z
    37c4:	71 81       	ldd	r23, Z+1	; 0x01
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	93 81       	ldd	r25, Z+3	; 0x03
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	f8 01       	movw	r30, r16
    37d4:	80 83       	st	Z, r24
    37d6:	de 01       	movw	r26, r28
    37d8:	a7 5b       	subi	r26, 0xB7	; 183
    37da:	bf 4f       	sbci	r27, 0xFF	; 255
    37dc:	fe 01       	movw	r30, r28
    37de:	e8 5a       	subi	r30, 0xA8	; 168
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	80 81       	ld	r24, Z
    37e4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37e6:	fe 01       	movw	r30, r28
    37e8:	e7 5b       	subi	r30, 0xB7	; 183
    37ea:	ff 4f       	sbci	r31, 0xFF	; 255
    37ec:	80 81       	ld	r24, Z
    37ee:	8a 95       	dec	r24
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <LCD_function_set_4bit+0x9da>
    37f2:	fe 01       	movw	r30, r28
    37f4:	e7 5b       	subi	r30, 0xB7	; 183
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    37fa:	fe 01       	movw	r30, r28
    37fc:	e6 55       	subi	r30, 0x56	; 86
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	10 82       	st	Z, r1
    3802:	23 c0       	rjmp	.+70     	; 0x384a <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    3804:	fe 01       	movw	r30, r28
    3806:	e6 55       	subi	r30, 0x56	; 86
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 81       	ld	r24, Z
    380c:	48 2f       	mov	r20, r24
    380e:	4c 5f       	subi	r20, 0xFC	; 252
    3810:	fe 01       	movw	r30, r28
    3812:	e6 55       	subi	r30, 0x56	; 86
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	80 81       	ld	r24, Z
    3818:	28 2f       	mov	r18, r24
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	82 e0       	ldi	r24, 0x02	; 2
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <LCD_function_set_4bit+0xa12>
    3822:	95 95       	asr	r25
    3824:	87 95       	ror	r24
    3826:	2a 95       	dec	r18
    3828:	e2 f7       	brpl	.-8      	; 0x3822 <LCD_function_set_4bit+0xa0e>
    382a:	98 2f       	mov	r25, r24
    382c:	91 70       	andi	r25, 0x01	; 1
    382e:	82 e0       	ldi	r24, 0x02	; 2
    3830:	64 2f       	mov	r22, r20
    3832:	49 2f       	mov	r20, r25
    3834:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    3838:	de 01       	movw	r26, r28
    383a:	a6 55       	subi	r26, 0x56	; 86
    383c:	bf 4f       	sbci	r27, 0xFF	; 255
    383e:	fe 01       	movw	r30, r28
    3840:	e6 55       	subi	r30, 0x56	; 86
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 81       	ld	r24, Z
    3846:	8f 5f       	subi	r24, 0xFF	; 255
    3848:	8c 93       	st	X, r24
    384a:	fe 01       	movw	r30, r28
    384c:	e6 55       	subi	r30, 0x56	; 86
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	84 30       	cpi	r24, 0x04	; 4
    3854:	b8 f2       	brcs	.-82     	; 0x3804 <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3856:	82 e0       	ldi	r24, 0x02	; 2
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    385e:	fe 01       	movw	r30, r28
    3860:	eb 5b       	subi	r30, 0xBB	; 187
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	a0 e2       	ldi	r26, 0x20	; 32
    386a:	b1 e4       	ldi	r27, 0x41	; 65
    386c:	80 83       	st	Z, r24
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	a2 83       	std	Z+2, r26	; 0x02
    3872:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3874:	8e 01       	movw	r16, r28
    3876:	0f 5b       	subi	r16, 0xBF	; 191
    3878:	1f 4f       	sbci	r17, 0xFF	; 255
    387a:	fe 01       	movw	r30, r28
    387c:	eb 5b       	subi	r30, 0xBB	; 187
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	60 81       	ld	r22, Z
    3882:	71 81       	ldd	r23, Z+1	; 0x01
    3884:	82 81       	ldd	r24, Z+2	; 0x02
    3886:	93 81       	ldd	r25, Z+3	; 0x03
    3888:	2b ea       	ldi	r18, 0xAB	; 171
    388a:	3a ea       	ldi	r19, 0xAA	; 170
    388c:	4a e2       	ldi	r20, 0x2A	; 42
    388e:	50 e4       	ldi	r21, 0x40	; 64
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	f8 01       	movw	r30, r16
    389a:	80 83       	st	Z, r24
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	a2 83       	std	Z+2, r26	; 0x02
    38a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a2:	fe 01       	movw	r30, r28
    38a4:	ef 5b       	subi	r30, 0xBF	; 191
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	60 81       	ld	r22, Z
    38aa:	71 81       	ldd	r23, Z+1	; 0x01
    38ac:	82 81       	ldd	r24, Z+2	; 0x02
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e8       	ldi	r20, 0x80	; 128
    38b6:	5f e3       	ldi	r21, 0x3F	; 63
    38b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    38bc:	88 23       	and	r24, r24
    38be:	34 f4       	brge	.+12     	; 0x38cc <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	fe 01       	movw	r30, r28
    38c4:	e0 5c       	subi	r30, 0xC0	; 192
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	80 83       	st	Z, r24
    38ca:	9d c0       	rjmp	.+314    	; 0x3a06 <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    38cc:	fe 01       	movw	r30, r28
    38ce:	ef 5b       	subi	r30, 0xBF	; 191
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	60 81       	ld	r22, Z
    38d4:	71 81       	ldd	r23, Z+1	; 0x01
    38d6:	82 81       	ldd	r24, Z+2	; 0x02
    38d8:	93 81       	ldd	r25, Z+3	; 0x03
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	4f e7       	ldi	r20, 0x7F	; 127
    38e0:	53 e4       	ldi	r21, 0x43	; 67
    38e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	0c f0       	brlt	.+2      	; 0x38ec <LCD_function_set_4bit+0xad8>
    38ea:	7e c0       	rjmp	.+252    	; 0x39e8 <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    38ec:	fe 01       	movw	r30, r28
    38ee:	eb 5b       	subi	r30, 0xBB	; 187
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	60 81       	ld	r22, Z
    38f4:	71 81       	ldd	r23, Z+1	; 0x01
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	4a e7       	ldi	r20, 0x7A	; 122
    3900:	54 e4       	ldi	r21, 0x44	; 68
    3902:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	8c af       	std	Y+60, r24	; 0x3c
    390c:	9d af       	std	Y+61, r25	; 0x3d
    390e:	ae af       	std	Y+62, r26	; 0x3e
    3910:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3912:	6c ad       	ldd	r22, Y+60	; 0x3c
    3914:	7d ad       	ldd	r23, Y+61	; 0x3d
    3916:	8e ad       	ldd	r24, Y+62	; 0x3e
    3918:	9f ad       	ldd	r25, Y+63	; 0x3f
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	4a ef       	ldi	r20, 0xFA	; 250
    3920:	54 e4       	ldi	r21, 0x44	; 68
    3922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	88 af       	std	Y+56, r24	; 0x38
    392c:	99 af       	std	Y+57, r25	; 0x39
    392e:	aa af       	std	Y+58, r26	; 0x3a
    3930:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3932:	68 ad       	ldd	r22, Y+56	; 0x38
    3934:	79 ad       	ldd	r23, Y+57	; 0x39
    3936:	8a ad       	ldd	r24, Y+58	; 0x3a
    3938:	9b ad       	ldd	r25, Y+59	; 0x3b
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e8       	ldi	r20, 0x80	; 128
    3940:	5f e3       	ldi	r21, 0x3F	; 63
    3942:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3946:	88 23       	and	r24, r24
    3948:	2c f4       	brge	.+10     	; 0x3954 <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	9f ab       	std	Y+55, r25	; 0x37
    3950:	8e ab       	std	Y+54, r24	; 0x36
    3952:	3f c0       	rjmp	.+126    	; 0x39d2 <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    3954:	68 ad       	ldd	r22, Y+56	; 0x38
    3956:	79 ad       	ldd	r23, Y+57	; 0x39
    3958:	8a ad       	ldd	r24, Y+58	; 0x3a
    395a:	9b ad       	ldd	r25, Y+59	; 0x3b
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	3f ef       	ldi	r19, 0xFF	; 255
    3960:	4f e7       	ldi	r20, 0x7F	; 127
    3962:	57 e4       	ldi	r21, 0x47	; 71
    3964:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3968:	18 16       	cp	r1, r24
    396a:	4c f5       	brge	.+82     	; 0x39be <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396c:	6c ad       	ldd	r22, Y+60	; 0x3c
    396e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3970:	8e ad       	ldd	r24, Y+62	; 0x3e
    3972:	9f ad       	ldd	r25, Y+63	; 0x3f
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e2       	ldi	r20, 0x20	; 32
    397a:	51 e4       	ldi	r21, 0x41	; 65
    397c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	bc 01       	movw	r22, r24
    3986:	cd 01       	movw	r24, r26
    3988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	9f ab       	std	Y+55, r25	; 0x37
    3992:	8e ab       	std	Y+54, r24	; 0x36
    3994:	0f c0       	rjmp	.+30     	; 0x39b4 <LCD_function_set_4bit+0xba0>
    3996:	88 ec       	ldi	r24, 0xC8	; 200
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	9d ab       	std	Y+53, r25	; 0x35
    399c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    399e:	8c a9       	ldd	r24, Y+52	; 0x34
    39a0:	9d a9       	ldd	r25, Y+53	; 0x35
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <LCD_function_set_4bit+0xb8e>
    39a6:	9d ab       	std	Y+53, r25	; 0x35
    39a8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39aa:	8e a9       	ldd	r24, Y+54	; 0x36
    39ac:	9f a9       	ldd	r25, Y+55	; 0x37
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	9f ab       	std	Y+55, r25	; 0x37
    39b2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b4:	8e a9       	ldd	r24, Y+54	; 0x36
    39b6:	9f a9       	ldd	r25, Y+55	; 0x37
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	69 f7       	brne	.-38     	; 0x3996 <LCD_function_set_4bit+0xb82>
    39bc:	2d c0       	rjmp	.+90     	; 0x3a18 <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39be:	68 ad       	ldd	r22, Y+56	; 0x38
    39c0:	79 ad       	ldd	r23, Y+57	; 0x39
    39c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    39c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    39c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	9f ab       	std	Y+55, r25	; 0x37
    39d0:	8e ab       	std	Y+54, r24	; 0x36
    39d2:	8e a9       	ldd	r24, Y+54	; 0x36
    39d4:	9f a9       	ldd	r25, Y+55	; 0x37
    39d6:	9b ab       	std	Y+51, r25	; 0x33
    39d8:	8a ab       	std	Y+50, r24	; 0x32
    39da:	8a a9       	ldd	r24, Y+50	; 0x32
    39dc:	9b a9       	ldd	r25, Y+51	; 0x33
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	f1 f7       	brne	.-4      	; 0x39de <LCD_function_set_4bit+0xbca>
    39e2:	9b ab       	std	Y+51, r25	; 0x33
    39e4:	8a ab       	std	Y+50, r24	; 0x32
    39e6:	18 c0       	rjmp	.+48     	; 0x3a18 <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39e8:	fe 01       	movw	r30, r28
    39ea:	ef 5b       	subi	r30, 0xBF	; 191
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	60 81       	ld	r22, Z
    39f0:	71 81       	ldd	r23, Z+1	; 0x01
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	fe 01       	movw	r30, r28
    3a00:	e0 5c       	subi	r30, 0xC0	; 192
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	80 83       	st	Z, r24
    3a06:	fe 01       	movw	r30, r28
    3a08:	e0 5c       	subi	r30, 0xC0	; 192
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	80 81       	ld	r24, Z
    3a0e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a10:	89 a9       	ldd	r24, Y+49	; 0x31
    3a12:	8a 95       	dec	r24
    3a14:	f1 f7       	brne	.-4      	; 0x3a12 <LCD_function_set_4bit+0xbfe>
    3a16:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3a18:	82 e0       	ldi	r24, 0x02	; 2
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	a0 e8       	ldi	r26, 0x80	; 128
    3a26:	bf e3       	ldi	r27, 0x3F	; 63
    3a28:	8d a7       	std	Y+45, r24	; 0x2d
    3a2a:	9e a7       	std	Y+46, r25	; 0x2e
    3a2c:	af a7       	std	Y+47, r26	; 0x2f
    3a2e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a30:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a32:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a36:	98 a9       	ldd	r25, Y+48	; 0x30
    3a38:	2b ea       	ldi	r18, 0xAB	; 171
    3a3a:	3a ea       	ldi	r19, 0xAA	; 170
    3a3c:	4a e2       	ldi	r20, 0x2A	; 42
    3a3e:	50 e4       	ldi	r21, 0x40	; 64
    3a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	89 a7       	std	Y+41, r24	; 0x29
    3a4a:	9a a7       	std	Y+42, r25	; 0x2a
    3a4c:	ab a7       	std	Y+43, r26	; 0x2b
    3a4e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3a50:	69 a5       	ldd	r22, Y+41	; 0x29
    3a52:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e8       	ldi	r20, 0x80	; 128
    3a5e:	5f e3       	ldi	r21, 0x3F	; 63
    3a60:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a64:	88 23       	and	r24, r24
    3a66:	1c f4       	brge	.+6      	; 0x3a6e <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	88 a7       	std	Y+40, r24	; 0x28
    3a6c:	91 c0       	rjmp	.+290    	; 0x3b90 <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    3a6e:	69 a5       	ldd	r22, Y+41	; 0x29
    3a70:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a72:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a74:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	4f e7       	ldi	r20, 0x7F	; 127
    3a7c:	53 e4       	ldi	r21, 0x43	; 67
    3a7e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a82:	18 16       	cp	r1, r24
    3a84:	0c f0       	brlt	.+2      	; 0x3a88 <LCD_function_set_4bit+0xc74>
    3a86:	7b c0       	rjmp	.+246    	; 0x3b7e <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    3a88:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	4a e7       	ldi	r20, 0x7A	; 122
    3a96:	54 e4       	ldi	r21, 0x44	; 68
    3a98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	8c a3       	std	Y+36, r24	; 0x24
    3aa2:	9d a3       	std	Y+37, r25	; 0x25
    3aa4:	ae a3       	std	Y+38, r26	; 0x26
    3aa6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa8:	6c a1       	ldd	r22, Y+36	; 0x24
    3aaa:	7d a1       	ldd	r23, Y+37	; 0x25
    3aac:	8e a1       	ldd	r24, Y+38	; 0x26
    3aae:	9f a1       	ldd	r25, Y+39	; 0x27
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	4a ef       	ldi	r20, 0xFA	; 250
    3ab6:	54 e4       	ldi	r21, 0x44	; 68
    3ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	88 a3       	std	Y+32, r24	; 0x20
    3ac2:	99 a3       	std	Y+33, r25	; 0x21
    3ac4:	aa a3       	std	Y+34, r26	; 0x22
    3ac6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3ac8:	68 a1       	ldd	r22, Y+32	; 0x20
    3aca:	79 a1       	ldd	r23, Y+33	; 0x21
    3acc:	8a a1       	ldd	r24, Y+34	; 0x22
    3ace:	9b a1       	ldd	r25, Y+35	; 0x23
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e8       	ldi	r20, 0x80	; 128
    3ad6:	5f e3       	ldi	r21, 0x3F	; 63
    3ad8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3adc:	88 23       	and	r24, r24
    3ade:	2c f4       	brge	.+10     	; 0x3aea <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	9f 8f       	std	Y+31, r25	; 0x1f
    3ae6:	8e 8f       	std	Y+30, r24	; 0x1e
    3ae8:	3f c0       	rjmp	.+126    	; 0x3b68 <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    3aea:	68 a1       	ldd	r22, Y+32	; 0x20
    3aec:	79 a1       	ldd	r23, Y+33	; 0x21
    3aee:	8a a1       	ldd	r24, Y+34	; 0x22
    3af0:	9b a1       	ldd	r25, Y+35	; 0x23
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	3f ef       	ldi	r19, 0xFF	; 255
    3af6:	4f e7       	ldi	r20, 0x7F	; 127
    3af8:	57 e4       	ldi	r21, 0x47	; 71
    3afa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3afe:	18 16       	cp	r1, r24
    3b00:	4c f5       	brge	.+82     	; 0x3b54 <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b02:	6c a1       	ldd	r22, Y+36	; 0x24
    3b04:	7d a1       	ldd	r23, Y+37	; 0x25
    3b06:	8e a1       	ldd	r24, Y+38	; 0x26
    3b08:	9f a1       	ldd	r25, Y+39	; 0x27
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e2       	ldi	r20, 0x20	; 32
    3b10:	51 e4       	ldi	r21, 0x41	; 65
    3b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	9f 8f       	std	Y+31, r25	; 0x1f
    3b28:	8e 8f       	std	Y+30, r24	; 0x1e
    3b2a:	0f c0       	rjmp	.+30     	; 0x3b4a <LCD_function_set_4bit+0xd36>
    3b2c:	88 ec       	ldi	r24, 0xC8	; 200
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	9d 8f       	std	Y+29, r25	; 0x1d
    3b32:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	f1 f7       	brne	.-4      	; 0x3b38 <LCD_function_set_4bit+0xd24>
    3b3c:	9d 8f       	std	Y+29, r25	; 0x1d
    3b3e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	9f 8f       	std	Y+31, r25	; 0x1f
    3b48:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	69 f7       	brne	.-38     	; 0x3b2c <LCD_function_set_4bit+0xd18>
    3b52:	24 c0       	rjmp	.+72     	; 0x3b9c <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b54:	68 a1       	ldd	r22, Y+32	; 0x20
    3b56:	79 a1       	ldd	r23, Y+33	; 0x21
    3b58:	8a a1       	ldd	r24, Y+34	; 0x22
    3b5a:	9b a1       	ldd	r25, Y+35	; 0x23
    3b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b60:	dc 01       	movw	r26, r24
    3b62:	cb 01       	movw	r24, r22
    3b64:	9f 8f       	std	Y+31, r25	; 0x1f
    3b66:	8e 8f       	std	Y+30, r24	; 0x1e
    3b68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b6c:	9b 8f       	std	Y+27, r25	; 0x1b
    3b6e:	8a 8f       	std	Y+26, r24	; 0x1a
    3b70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	f1 f7       	brne	.-4      	; 0x3b74 <LCD_function_set_4bit+0xd60>
    3b78:	9b 8f       	std	Y+27, r25	; 0x1b
    3b7a:	8a 8f       	std	Y+26, r24	; 0x1a
    3b7c:	0f c0       	rjmp	.+30     	; 0x3b9c <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b7e:	69 a5       	ldd	r22, Y+41	; 0x29
    3b80:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b82:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b84:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	88 a7       	std	Y+40, r24	; 0x28
    3b90:	88 a5       	ldd	r24, Y+40	; 0x28
    3b92:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b94:	89 8d       	ldd	r24, Y+25	; 0x19
    3b96:	8a 95       	dec	r24
    3b98:	f1 f7       	brne	.-4      	; 0x3b96 <LCD_function_set_4bit+0xd82>
    3b9a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e7 55       	subi	r30, 0x57	; 87
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	10 82       	st	Z, r1
    3ba4:	23 c0       	rjmp	.+70     	; 0x3bec <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	e7 55       	subi	r30, 0x57	; 87
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	48 2f       	mov	r20, r24
    3bb0:	4c 5f       	subi	r20, 0xFC	; 252
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e7 55       	subi	r30, 0x57	; 87
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	80 81       	ld	r24, Z
    3bba:	28 2f       	mov	r18, r24
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	88 e0       	ldi	r24, 0x08	; 8
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	02 c0       	rjmp	.+4      	; 0x3bc8 <LCD_function_set_4bit+0xdb4>
    3bc4:	95 95       	asr	r25
    3bc6:	87 95       	ror	r24
    3bc8:	2a 95       	dec	r18
    3bca:	e2 f7       	brpl	.-8      	; 0x3bc4 <LCD_function_set_4bit+0xdb0>
    3bcc:	98 2f       	mov	r25, r24
    3bce:	91 70       	andi	r25, 0x01	; 1
    3bd0:	82 e0       	ldi	r24, 0x02	; 2
    3bd2:	64 2f       	mov	r22, r20
    3bd4:	49 2f       	mov	r20, r25
    3bd6:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3bda:	de 01       	movw	r26, r28
    3bdc:	a7 55       	subi	r26, 0x57	; 87
    3bde:	bf 4f       	sbci	r27, 0xFF	; 255
    3be0:	fe 01       	movw	r30, r28
    3be2:	e7 55       	subi	r30, 0x57	; 87
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	80 81       	ld	r24, Z
    3be8:	8f 5f       	subi	r24, 0xFF	; 255
    3bea:	8c 93       	st	X, r24
    3bec:	fe 01       	movw	r30, r28
    3bee:	e7 55       	subi	r30, 0x57	; 87
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 81       	ld	r24, Z
    3bf4:	84 30       	cpi	r24, 0x04	; 4
    3bf6:	b8 f2       	brcs	.-82     	; 0x3ba6 <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3bf8:	82 e0       	ldi	r24, 0x02	; 2
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	a0 e2       	ldi	r26, 0x20	; 32
    3c06:	b1 e4       	ldi	r27, 0x41	; 65
    3c08:	8d 8b       	std	Y+21, r24	; 0x15
    3c0a:	9e 8b       	std	Y+22, r25	; 0x16
    3c0c:	af 8b       	std	Y+23, r26	; 0x17
    3c0e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c10:	6d 89       	ldd	r22, Y+21	; 0x15
    3c12:	7e 89       	ldd	r23, Y+22	; 0x16
    3c14:	8f 89       	ldd	r24, Y+23	; 0x17
    3c16:	98 8d       	ldd	r25, Y+24	; 0x18
    3c18:	2b ea       	ldi	r18, 0xAB	; 171
    3c1a:	3a ea       	ldi	r19, 0xAA	; 170
    3c1c:	4a e2       	ldi	r20, 0x2A	; 42
    3c1e:	50 e4       	ldi	r21, 0x40	; 64
    3c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	89 8b       	std	Y+17, r24	; 0x11
    3c2a:	9a 8b       	std	Y+18, r25	; 0x12
    3c2c:	ab 8b       	std	Y+19, r26	; 0x13
    3c2e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3c30:	69 89       	ldd	r22, Y+17	; 0x11
    3c32:	7a 89       	ldd	r23, Y+18	; 0x12
    3c34:	8b 89       	ldd	r24, Y+19	; 0x13
    3c36:	9c 89       	ldd	r25, Y+20	; 0x14
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e8       	ldi	r20, 0x80	; 128
    3c3e:	5f e3       	ldi	r21, 0x3F	; 63
    3c40:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c44:	88 23       	and	r24, r24
    3c46:	1c f4       	brge	.+6      	; 0x3c4e <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	88 8b       	std	Y+16, r24	; 0x10
    3c4c:	91 c0       	rjmp	.+290    	; 0x3d70 <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    3c4e:	69 89       	ldd	r22, Y+17	; 0x11
    3c50:	7a 89       	ldd	r23, Y+18	; 0x12
    3c52:	8b 89       	ldd	r24, Y+19	; 0x13
    3c54:	9c 89       	ldd	r25, Y+20	; 0x14
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	4f e7       	ldi	r20, 0x7F	; 127
    3c5c:	53 e4       	ldi	r21, 0x43	; 67
    3c5e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c62:	18 16       	cp	r1, r24
    3c64:	0c f0       	brlt	.+2      	; 0x3c68 <LCD_function_set_4bit+0xe54>
    3c66:	7b c0       	rjmp	.+246    	; 0x3d5e <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    3c68:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	4a e7       	ldi	r20, 0x7A	; 122
    3c76:	54 e4       	ldi	r21, 0x44	; 68
    3c78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	8c 87       	std	Y+12, r24	; 0x0c
    3c82:	9d 87       	std	Y+13, r25	; 0x0d
    3c84:	ae 87       	std	Y+14, r26	; 0x0e
    3c86:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c88:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	4a ef       	ldi	r20, 0xFA	; 250
    3c96:	54 e4       	ldi	r21, 0x44	; 68
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	88 87       	std	Y+8, r24	; 0x08
    3ca2:	99 87       	std	Y+9, r25	; 0x09
    3ca4:	aa 87       	std	Y+10, r26	; 0x0a
    3ca6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3ca8:	68 85       	ldd	r22, Y+8	; 0x08
    3caa:	79 85       	ldd	r23, Y+9	; 0x09
    3cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cae:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e8       	ldi	r20, 0x80	; 128
    3cb6:	5f e3       	ldi	r21, 0x3F	; 63
    3cb8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cbc:	88 23       	and	r24, r24
    3cbe:	2c f4       	brge	.+10     	; 0x3cca <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9f 83       	std	Y+7, r25	; 0x07
    3cc6:	8e 83       	std	Y+6, r24	; 0x06
    3cc8:	3f c0       	rjmp	.+126    	; 0x3d48 <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    3cca:	68 85       	ldd	r22, Y+8	; 0x08
    3ccc:	79 85       	ldd	r23, Y+9	; 0x09
    3cce:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	3f ef       	ldi	r19, 0xFF	; 255
    3cd6:	4f e7       	ldi	r20, 0x7F	; 127
    3cd8:	57 e4       	ldi	r21, 0x47	; 71
    3cda:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3cde:	18 16       	cp	r1, r24
    3ce0:	4c f5       	brge	.+82     	; 0x3d34 <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce2:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ce4:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ce6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ce8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e2       	ldi	r20, 0x20	; 32
    3cf0:	51 e4       	ldi	r21, 0x41	; 65
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	9f 83       	std	Y+7, r25	; 0x07
    3d08:	8e 83       	std	Y+6, r24	; 0x06
    3d0a:	0f c0       	rjmp	.+30     	; 0x3d2a <LCD_function_set_4bit+0xf16>
    3d0c:	88 ec       	ldi	r24, 0xC8	; 200
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	9d 83       	std	Y+5, r25	; 0x05
    3d12:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d14:	8c 81       	ldd	r24, Y+4	; 0x04
    3d16:	9d 81       	ldd	r25, Y+5	; 0x05
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	f1 f7       	brne	.-4      	; 0x3d18 <LCD_function_set_4bit+0xf04>
    3d1c:	9d 83       	std	Y+5, r25	; 0x05
    3d1e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d20:	8e 81       	ldd	r24, Y+6	; 0x06
    3d22:	9f 81       	ldd	r25, Y+7	; 0x07
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	9f 83       	std	Y+7, r25	; 0x07
    3d28:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d2c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	69 f7       	brne	.-38     	; 0x3d0c <LCD_function_set_4bit+0xef8>
    3d32:	24 c0       	rjmp	.+72     	; 0x3d7c <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d34:	68 85       	ldd	r22, Y+8	; 0x08
    3d36:	79 85       	ldd	r23, Y+9	; 0x09
    3d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9f 83       	std	Y+7, r25	; 0x07
    3d46:	8e 83       	std	Y+6, r24	; 0x06
    3d48:	8e 81       	ldd	r24, Y+6	; 0x06
    3d4a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d4c:	9b 83       	std	Y+3, r25	; 0x03
    3d4e:	8a 83       	std	Y+2, r24	; 0x02
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	9b 81       	ldd	r25, Y+3	; 0x03
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <LCD_function_set_4bit+0xf40>
    3d58:	9b 83       	std	Y+3, r25	; 0x03
    3d5a:	8a 83       	std	Y+2, r24	; 0x02
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d5e:	69 89       	ldd	r22, Y+17	; 0x11
    3d60:	7a 89       	ldd	r23, Y+18	; 0x12
    3d62:	8b 89       	ldd	r24, Y+19	; 0x13
    3d64:	9c 89       	ldd	r25, Y+20	; 0x14
    3d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	88 8b       	std	Y+16, r24	; 0x10
    3d70:	88 89       	ldd	r24, Y+16	; 0x10
    3d72:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	8a 95       	dec	r24
    3d78:	f1 f7       	brne	.-4      	; 0x3d76 <LCD_function_set_4bit+0xf62>
    3d7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    3d7c:	c5 55       	subi	r28, 0x55	; 85
    3d7e:	df 4f       	sbci	r29, 0xFF	; 255
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	de bf       	out	0x3e, r29	; 62
    3d86:	0f be       	out	0x3f, r0	; 63
    3d88:	cd bf       	out	0x3d, r28	; 61
    3d8a:	cf 91       	pop	r28
    3d8c:	df 91       	pop	r29
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	08 95       	ret

00003d94 <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    3d94:	0f 93       	push	r16
    3d96:	1f 93       	push	r17
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	c1 56       	subi	r28, 0x61	; 97
    3da2:	d0 40       	sbci	r29, 0x00	; 0
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	67 e0       	ldi	r22, 0x07	; 7
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    3db8:	82 e0       	ldi	r24, 0x02	; 2
    3dba:	66 e0       	ldi	r22, 0x06	; 6
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	65 e0       	ldi	r22, 0x05	; 5
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	64 e0       	ldi	r22, 0x04	; 4
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	62 e0       	ldi	r22, 0x02	; 2
    3dda:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    3dde:	82 e0       	ldi	r24, 0x02	; 2
    3de0:	61 e0       	ldi	r22, 0x01	; 1
    3de2:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    3de6:	fe 01       	movw	r30, r28
    3de8:	e3 5a       	subi	r30, 0xA3	; 163
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	a0 e8       	ldi	r26, 0x80	; 128
    3df2:	bf e3       	ldi	r27, 0x3F	; 63
    3df4:	80 83       	st	Z, r24
    3df6:	91 83       	std	Z+1, r25	; 0x01
    3df8:	a2 83       	std	Z+2, r26	; 0x02
    3dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3dfc:	8e 01       	movw	r16, r28
    3dfe:	07 5a       	subi	r16, 0xA7	; 167
    3e00:	1f 4f       	sbci	r17, 0xFF	; 255
    3e02:	fe 01       	movw	r30, r28
    3e04:	e3 5a       	subi	r30, 0xA3	; 163
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	60 81       	ld	r22, Z
    3e0a:	71 81       	ldd	r23, Z+1	; 0x01
    3e0c:	82 81       	ldd	r24, Z+2	; 0x02
    3e0e:	93 81       	ldd	r25, Z+3	; 0x03
    3e10:	2b ea       	ldi	r18, 0xAB	; 171
    3e12:	3a ea       	ldi	r19, 0xAA	; 170
    3e14:	4a e2       	ldi	r20, 0x2A	; 42
    3e16:	50 e4       	ldi	r21, 0x40	; 64
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	f8 01       	movw	r30, r16
    3e22:	80 83       	st	Z, r24
    3e24:	91 83       	std	Z+1, r25	; 0x01
    3e26:	a2 83       	std	Z+2, r26	; 0x02
    3e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e7 5a       	subi	r30, 0xA7	; 167
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	60 81       	ld	r22, Z
    3e32:	71 81       	ldd	r23, Z+1	; 0x01
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e8       	ldi	r20, 0x80	; 128
    3e3e:	5f e3       	ldi	r21, 0x3F	; 63
    3e40:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e44:	88 23       	and	r24, r24
    3e46:	34 f4       	brge	.+12     	; 0x3e54 <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e8 5a       	subi	r30, 0xA8	; 168
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	80 83       	st	Z, r24
    3e52:	e0 c0       	rjmp	.+448    	; 0x4014 <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    3e54:	fe 01       	movw	r30, r28
    3e56:	e7 5a       	subi	r30, 0xA7	; 167
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	4f e7       	ldi	r20, 0x7F	; 127
    3e68:	53 e4       	ldi	r21, 0x43	; 67
    3e6a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e6e:	18 16       	cp	r1, r24
    3e70:	0c f0       	brlt	.+2      	; 0x3e74 <LCD_read_data_4bit+0xe0>
    3e72:	c0 c0       	rjmp	.+384    	; 0x3ff4 <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    3e74:	fe 01       	movw	r30, r28
    3e76:	e3 5a       	subi	r30, 0xA3	; 163
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	60 81       	ld	r22, Z
    3e7c:	71 81       	ldd	r23, Z+1	; 0x01
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	93 81       	ldd	r25, Z+3	; 0x03
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	4a e7       	ldi	r20, 0x7A	; 122
    3e88:	54 e4       	ldi	r21, 0x44	; 68
    3e8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	fe 01       	movw	r30, r28
    3e94:	ec 5a       	subi	r30, 0xAC	; 172
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	80 83       	st	Z, r24
    3e9a:	91 83       	std	Z+1, r25	; 0x01
    3e9c:	a2 83       	std	Z+2, r26	; 0x02
    3e9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea0:	8e 01       	movw	r16, r28
    3ea2:	00 5b       	subi	r16, 0xB0	; 176
    3ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	ec 5a       	subi	r30, 0xAC	; 172
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	4a ef       	ldi	r20, 0xFA	; 250
    3eba:	54 e4       	ldi	r21, 0x44	; 68
    3ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	80 83       	st	Z, r24
    3ec8:	91 83       	std	Z+1, r25	; 0x01
    3eca:	a2 83       	std	Z+2, r26	; 0x02
    3ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e0 5b       	subi	r30, 0xB0	; 176
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	60 81       	ld	r22, Z
    3ed6:	71 81       	ldd	r23, Z+1	; 0x01
    3ed8:	82 81       	ldd	r24, Z+2	; 0x02
    3eda:	93 81       	ldd	r25, Z+3	; 0x03
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e8       	ldi	r20, 0x80	; 128
    3ee2:	5f e3       	ldi	r21, 0x3F	; 63
    3ee4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ee8:	88 23       	and	r24, r24
    3eea:	44 f4       	brge	.+16     	; 0x3efc <LCD_read_data_4bit+0x168>
		__ticks = 1;
    3eec:	fe 01       	movw	r30, r28
    3eee:	e2 5b       	subi	r30, 0xB2	; 178
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
    3efa:	64 c0       	rjmp	.+200    	; 0x3fc4 <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    3efc:	fe 01       	movw	r30, r28
    3efe:	e0 5b       	subi	r30, 0xB0	; 176
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	82 81       	ldd	r24, Z+2	; 0x02
    3f08:	93 81       	ldd	r25, Z+3	; 0x03
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	3f ef       	ldi	r19, 0xFF	; 255
    3f0e:	4f e7       	ldi	r20, 0x7F	; 127
    3f10:	57 e4       	ldi	r21, 0x47	; 71
    3f12:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f16:	18 16       	cp	r1, r24
    3f18:	0c f0       	brlt	.+2      	; 0x3f1c <LCD_read_data_4bit+0x188>
    3f1a:	43 c0       	rjmp	.+134    	; 0x3fa2 <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	ec 5a       	subi	r30, 0xAC	; 172
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	60 81       	ld	r22, Z
    3f24:	71 81       	ldd	r23, Z+1	; 0x01
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e2       	ldi	r20, 0x20	; 32
    3f30:	51 e4       	ldi	r21, 0x41	; 65
    3f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	02 5b       	subi	r16, 0xB2	; 178
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f40:	bc 01       	movw	r22, r24
    3f42:	cd 01       	movw	r24, r26
    3f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	f8 01       	movw	r30, r16
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	80 83       	st	Z, r24
    3f52:	1f c0       	rjmp	.+62     	; 0x3f92 <LCD_read_data_4bit+0x1fe>
    3f54:	fe 01       	movw	r30, r28
    3f56:	e4 5b       	subi	r30, 0xB4	; 180
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	88 ec       	ldi	r24, 0xC8	; 200
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f62:	fe 01       	movw	r30, r28
    3f64:	e4 5b       	subi	r30, 0xB4	; 180
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 81       	ld	r24, Z
    3f6a:	91 81       	ldd	r25, Z+1	; 0x01
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	f1 f7       	brne	.-4      	; 0x3f6c <LCD_read_data_4bit+0x1d8>
    3f70:	fe 01       	movw	r30, r28
    3f72:	e4 5b       	subi	r30, 0xB4	; 180
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	91 83       	std	Z+1, r25	; 0x01
    3f78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7a:	de 01       	movw	r26, r28
    3f7c:	a2 5b       	subi	r26, 0xB2	; 178
    3f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f80:	fe 01       	movw	r30, r28
    3f82:	e2 5b       	subi	r30, 0xB2	; 178
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	80 81       	ld	r24, Z
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	11 96       	adiw	r26, 0x01	; 1
    3f8e:	9c 93       	st	X, r25
    3f90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f92:	fe 01       	movw	r30, r28
    3f94:	e2 5b       	subi	r30, 0xB2	; 178
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	80 81       	ld	r24, Z
    3f9a:	91 81       	ldd	r25, Z+1	; 0x01
    3f9c:	00 97       	sbiw	r24, 0x00	; 0
    3f9e:	d1 f6       	brne	.-76     	; 0x3f54 <LCD_read_data_4bit+0x1c0>
    3fa0:	4b c0       	rjmp	.+150    	; 0x4038 <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa2:	8e 01       	movw	r16, r28
    3fa4:	02 5b       	subi	r16, 0xB2	; 178
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e0 5b       	subi	r30, 0xB0	; 176
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	60 81       	ld	r22, Z
    3fb0:	71 81       	ldd	r23, Z+1	; 0x01
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	93 81       	ldd	r25, Z+3	; 0x03
    3fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	f8 01       	movw	r30, r16
    3fc0:	91 83       	std	Z+1, r25	; 0x01
    3fc2:	80 83       	st	Z, r24
    3fc4:	de 01       	movw	r26, r28
    3fc6:	a6 5b       	subi	r26, 0xB6	; 182
    3fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e2 5b       	subi	r30, 0xB2	; 178
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	80 81       	ld	r24, Z
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	11 96       	adiw	r26, 0x01	; 1
    3fd6:	9c 93       	st	X, r25
    3fd8:	8e 93       	st	-X, r24
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e6 5b       	subi	r30, 0xB6	; 182
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	80 81       	ld	r24, Z
    3fe2:	91 81       	ldd	r25, Z+1	; 0x01
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <LCD_read_data_4bit+0x250>
    3fe8:	fe 01       	movw	r30, r28
    3fea:	e6 5b       	subi	r30, 0xB6	; 182
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	91 83       	std	Z+1, r25	; 0x01
    3ff0:	80 83       	st	Z, r24
    3ff2:	22 c0       	rjmp	.+68     	; 0x4038 <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ff4:	8e 01       	movw	r16, r28
    3ff6:	08 5a       	subi	r16, 0xA8	; 168
    3ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e7 5a       	subi	r30, 0xA7	; 167
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	60 81       	ld	r22, Z
    4002:	71 81       	ldd	r23, Z+1	; 0x01
    4004:	82 81       	ldd	r24, Z+2	; 0x02
    4006:	93 81       	ldd	r25, Z+3	; 0x03
    4008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	f8 01       	movw	r30, r16
    4012:	80 83       	st	Z, r24
    4014:	de 01       	movw	r26, r28
    4016:	a7 5b       	subi	r26, 0xB7	; 183
    4018:	bf 4f       	sbci	r27, 0xFF	; 255
    401a:	fe 01       	movw	r30, r28
    401c:	e8 5a       	subi	r30, 0xA8	; 168
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 81       	ld	r24, Z
    4022:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4024:	fe 01       	movw	r30, r28
    4026:	e7 5b       	subi	r30, 0xB7	; 183
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	80 81       	ld	r24, Z
    402c:	8a 95       	dec	r24
    402e:	f1 f7       	brne	.-4      	; 0x402c <LCD_read_data_4bit+0x298>
    4030:	fe 01       	movw	r30, r28
    4032:	e7 5b       	subi	r30, 0xB7	; 183
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    4038:	82 e0       	ldi	r24, 0x02	; 2
    403a:	60 e0       	ldi	r22, 0x00	; 0
    403c:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    4040:	fe 01       	movw	r30, r28
    4042:	eb 5b       	subi	r30, 0xBB	; 187
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	a0 e8       	ldi	r26, 0x80	; 128
    404c:	bf e3       	ldi	r27, 0x3F	; 63
    404e:	80 83       	st	Z, r24
    4050:	91 83       	std	Z+1, r25	; 0x01
    4052:	a2 83       	std	Z+2, r26	; 0x02
    4054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4056:	8e 01       	movw	r16, r28
    4058:	0f 5b       	subi	r16, 0xBF	; 191
    405a:	1f 4f       	sbci	r17, 0xFF	; 255
    405c:	fe 01       	movw	r30, r28
    405e:	eb 5b       	subi	r30, 0xBB	; 187
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	60 81       	ld	r22, Z
    4064:	71 81       	ldd	r23, Z+1	; 0x01
    4066:	82 81       	ldd	r24, Z+2	; 0x02
    4068:	93 81       	ldd	r25, Z+3	; 0x03
    406a:	2b ea       	ldi	r18, 0xAB	; 171
    406c:	3a ea       	ldi	r19, 0xAA	; 170
    406e:	4a e2       	ldi	r20, 0x2A	; 42
    4070:	50 e4       	ldi	r21, 0x40	; 64
    4072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	f8 01       	movw	r30, r16
    407c:	80 83       	st	Z, r24
    407e:	91 83       	std	Z+1, r25	; 0x01
    4080:	a2 83       	std	Z+2, r26	; 0x02
    4082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4084:	fe 01       	movw	r30, r28
    4086:	ef 5b       	subi	r30, 0xBF	; 191
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	60 81       	ld	r22, Z
    408c:	71 81       	ldd	r23, Z+1	; 0x01
    408e:	82 81       	ldd	r24, Z+2	; 0x02
    4090:	93 81       	ldd	r25, Z+3	; 0x03
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	40 e8       	ldi	r20, 0x80	; 128
    4098:	5f e3       	ldi	r21, 0x3F	; 63
    409a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    409e:	88 23       	and	r24, r24
    40a0:	34 f4       	brge	.+12     	; 0x40ae <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	fe 01       	movw	r30, r28
    40a6:	e0 5c       	subi	r30, 0xC0	; 192
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	80 83       	st	Z, r24
    40ac:	9d c0       	rjmp	.+314    	; 0x41e8 <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    40ae:	fe 01       	movw	r30, r28
    40b0:	ef 5b       	subi	r30, 0xBF	; 191
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	60 81       	ld	r22, Z
    40b6:	71 81       	ldd	r23, Z+1	; 0x01
    40b8:	82 81       	ldd	r24, Z+2	; 0x02
    40ba:	93 81       	ldd	r25, Z+3	; 0x03
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	4f e7       	ldi	r20, 0x7F	; 127
    40c2:	53 e4       	ldi	r21, 0x43	; 67
    40c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    40c8:	18 16       	cp	r1, r24
    40ca:	0c f0       	brlt	.+2      	; 0x40ce <LCD_read_data_4bit+0x33a>
    40cc:	7e c0       	rjmp	.+252    	; 0x41ca <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    40ce:	fe 01       	movw	r30, r28
    40d0:	eb 5b       	subi	r30, 0xBB	; 187
    40d2:	ff 4f       	sbci	r31, 0xFF	; 255
    40d4:	60 81       	ld	r22, Z
    40d6:	71 81       	ldd	r23, Z+1	; 0x01
    40d8:	82 81       	ldd	r24, Z+2	; 0x02
    40da:	93 81       	ldd	r25, Z+3	; 0x03
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	4a e7       	ldi	r20, 0x7A	; 122
    40e2:	54 e4       	ldi	r21, 0x44	; 68
    40e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	8c af       	std	Y+60, r24	; 0x3c
    40ee:	9d af       	std	Y+61, r25	; 0x3d
    40f0:	ae af       	std	Y+62, r26	; 0x3e
    40f2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    40f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    40f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    40fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	4a ef       	ldi	r20, 0xFA	; 250
    4102:	54 e4       	ldi	r21, 0x44	; 68
    4104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
    410c:	88 af       	std	Y+56, r24	; 0x38
    410e:	99 af       	std	Y+57, r25	; 0x39
    4110:	aa af       	std	Y+58, r26	; 0x3a
    4112:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4114:	68 ad       	ldd	r22, Y+56	; 0x38
    4116:	79 ad       	ldd	r23, Y+57	; 0x39
    4118:	8a ad       	ldd	r24, Y+58	; 0x3a
    411a:	9b ad       	ldd	r25, Y+59	; 0x3b
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 e8       	ldi	r20, 0x80	; 128
    4122:	5f e3       	ldi	r21, 0x3F	; 63
    4124:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4128:	88 23       	and	r24, r24
    412a:	2c f4       	brge	.+10     	; 0x4136 <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9f ab       	std	Y+55, r25	; 0x37
    4132:	8e ab       	std	Y+54, r24	; 0x36
    4134:	3f c0       	rjmp	.+126    	; 0x41b4 <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    4136:	68 ad       	ldd	r22, Y+56	; 0x38
    4138:	79 ad       	ldd	r23, Y+57	; 0x39
    413a:	8a ad       	ldd	r24, Y+58	; 0x3a
    413c:	9b ad       	ldd	r25, Y+59	; 0x3b
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	3f ef       	ldi	r19, 0xFF	; 255
    4142:	4f e7       	ldi	r20, 0x7F	; 127
    4144:	57 e4       	ldi	r21, 0x47	; 71
    4146:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    414a:	18 16       	cp	r1, r24
    414c:	4c f5       	brge	.+82     	; 0x41a0 <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4150:	7d ad       	ldd	r23, Y+61	; 0x3d
    4152:	8e ad       	ldd	r24, Y+62	; 0x3e
    4154:	9f ad       	ldd	r25, Y+63	; 0x3f
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	30 e0       	ldi	r19, 0x00	; 0
    415a:	40 e2       	ldi	r20, 0x20	; 32
    415c:	51 e4       	ldi	r21, 0x41	; 65
    415e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4162:	dc 01       	movw	r26, r24
    4164:	cb 01       	movw	r24, r22
    4166:	bc 01       	movw	r22, r24
    4168:	cd 01       	movw	r24, r26
    416a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	9f ab       	std	Y+55, r25	; 0x37
    4174:	8e ab       	std	Y+54, r24	; 0x36
    4176:	0f c0       	rjmp	.+30     	; 0x4196 <LCD_read_data_4bit+0x402>
    4178:	88 ec       	ldi	r24, 0xC8	; 200
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	9d ab       	std	Y+53, r25	; 0x35
    417e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4180:	8c a9       	ldd	r24, Y+52	; 0x34
    4182:	9d a9       	ldd	r25, Y+53	; 0x35
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <LCD_read_data_4bit+0x3f0>
    4188:	9d ab       	std	Y+53, r25	; 0x35
    418a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    418c:	8e a9       	ldd	r24, Y+54	; 0x36
    418e:	9f a9       	ldd	r25, Y+55	; 0x37
    4190:	01 97       	sbiw	r24, 0x01	; 1
    4192:	9f ab       	std	Y+55, r25	; 0x37
    4194:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4196:	8e a9       	ldd	r24, Y+54	; 0x36
    4198:	9f a9       	ldd	r25, Y+55	; 0x37
    419a:	00 97       	sbiw	r24, 0x00	; 0
    419c:	69 f7       	brne	.-38     	; 0x4178 <LCD_read_data_4bit+0x3e4>
    419e:	2d c0       	rjmp	.+90     	; 0x41fa <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a0:	68 ad       	ldd	r22, Y+56	; 0x38
    41a2:	79 ad       	ldd	r23, Y+57	; 0x39
    41a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    41a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    41a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	9f ab       	std	Y+55, r25	; 0x37
    41b2:	8e ab       	std	Y+54, r24	; 0x36
    41b4:	8e a9       	ldd	r24, Y+54	; 0x36
    41b6:	9f a9       	ldd	r25, Y+55	; 0x37
    41b8:	9b ab       	std	Y+51, r25	; 0x33
    41ba:	8a ab       	std	Y+50, r24	; 0x32
    41bc:	8a a9       	ldd	r24, Y+50	; 0x32
    41be:	9b a9       	ldd	r25, Y+51	; 0x33
    41c0:	01 97       	sbiw	r24, 0x01	; 1
    41c2:	f1 f7       	brne	.-4      	; 0x41c0 <LCD_read_data_4bit+0x42c>
    41c4:	9b ab       	std	Y+51, r25	; 0x33
    41c6:	8a ab       	std	Y+50, r24	; 0x32
    41c8:	18 c0       	rjmp	.+48     	; 0x41fa <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    41ca:	fe 01       	movw	r30, r28
    41cc:	ef 5b       	subi	r30, 0xBF	; 191
    41ce:	ff 4f       	sbci	r31, 0xFF	; 255
    41d0:	60 81       	ld	r22, Z
    41d2:	71 81       	ldd	r23, Z+1	; 0x01
    41d4:	82 81       	ldd	r24, Z+2	; 0x02
    41d6:	93 81       	ldd	r25, Z+3	; 0x03
    41d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	fe 01       	movw	r30, r28
    41e2:	e0 5c       	subi	r30, 0xC0	; 192
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 83       	st	Z, r24
    41e8:	fe 01       	movw	r30, r28
    41ea:	e0 5c       	subi	r30, 0xC0	; 192
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	80 81       	ld	r24, Z
    41f0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41f2:	89 a9       	ldd	r24, Y+49	; 0x31
    41f4:	8a 95       	dec	r24
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <LCD_read_data_4bit+0x460>
    41f8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    41fa:	82 e0       	ldi	r24, 0x02	; 2
    41fc:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <DIO_u8_get_port>
    4200:	fe 01       	movw	r30, r28
    4202:	ef 59       	subi	r30, 0x9F	; 159
    4204:	ff 4f       	sbci	r31, 0xFF	; 255
    4206:	82 95       	swap	r24
    4208:	80 7f       	andi	r24, 0xF0	; 240
    420a:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    420c:	82 e0       	ldi	r24, 0x02	; 2
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
    4214:	80 e0       	ldi	r24, 0x00	; 0
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	a0 e2       	ldi	r26, 0x20	; 32
    421a:	b1 e4       	ldi	r27, 0x41	; 65
    421c:	8d a7       	std	Y+45, r24	; 0x2d
    421e:	9e a7       	std	Y+46, r25	; 0x2e
    4220:	af a7       	std	Y+47, r26	; 0x2f
    4222:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4224:	6d a5       	ldd	r22, Y+45	; 0x2d
    4226:	7e a5       	ldd	r23, Y+46	; 0x2e
    4228:	8f a5       	ldd	r24, Y+47	; 0x2f
    422a:	98 a9       	ldd	r25, Y+48	; 0x30
    422c:	2b ea       	ldi	r18, 0xAB	; 171
    422e:	3a ea       	ldi	r19, 0xAA	; 170
    4230:	4a e2       	ldi	r20, 0x2A	; 42
    4232:	50 e4       	ldi	r21, 0x40	; 64
    4234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	89 a7       	std	Y+41, r24	; 0x29
    423e:	9a a7       	std	Y+42, r25	; 0x2a
    4240:	ab a7       	std	Y+43, r26	; 0x2b
    4242:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4244:	69 a5       	ldd	r22, Y+41	; 0x29
    4246:	7a a5       	ldd	r23, Y+42	; 0x2a
    4248:	8b a5       	ldd	r24, Y+43	; 0x2b
    424a:	9c a5       	ldd	r25, Y+44	; 0x2c
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	40 e8       	ldi	r20, 0x80	; 128
    4252:	5f e3       	ldi	r21, 0x3F	; 63
    4254:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4258:	88 23       	and	r24, r24
    425a:	1c f4       	brge	.+6      	; 0x4262 <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	88 a7       	std	Y+40, r24	; 0x28
    4260:	91 c0       	rjmp	.+290    	; 0x4384 <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    4262:	69 a5       	ldd	r22, Y+41	; 0x29
    4264:	7a a5       	ldd	r23, Y+42	; 0x2a
    4266:	8b a5       	ldd	r24, Y+43	; 0x2b
    4268:	9c a5       	ldd	r25, Y+44	; 0x2c
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	4f e7       	ldi	r20, 0x7F	; 127
    4270:	53 e4       	ldi	r21, 0x43	; 67
    4272:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4276:	18 16       	cp	r1, r24
    4278:	0c f0       	brlt	.+2      	; 0x427c <LCD_read_data_4bit+0x4e8>
    427a:	7b c0       	rjmp	.+246    	; 0x4372 <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    427c:	6d a5       	ldd	r22, Y+45	; 0x2d
    427e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4280:	8f a5       	ldd	r24, Y+47	; 0x2f
    4282:	98 a9       	ldd	r25, Y+48	; 0x30
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	4a e7       	ldi	r20, 0x7A	; 122
    428a:	54 e4       	ldi	r21, 0x44	; 68
    428c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	8c a3       	std	Y+36, r24	; 0x24
    4296:	9d a3       	std	Y+37, r25	; 0x25
    4298:	ae a3       	std	Y+38, r26	; 0x26
    429a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429c:	6c a1       	ldd	r22, Y+36	; 0x24
    429e:	7d a1       	ldd	r23, Y+37	; 0x25
    42a0:	8e a1       	ldd	r24, Y+38	; 0x26
    42a2:	9f a1       	ldd	r25, Y+39	; 0x27
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	4a ef       	ldi	r20, 0xFA	; 250
    42aa:	54 e4       	ldi	r21, 0x44	; 68
    42ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	88 a3       	std	Y+32, r24	; 0x20
    42b6:	99 a3       	std	Y+33, r25	; 0x21
    42b8:	aa a3       	std	Y+34, r26	; 0x22
    42ba:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    42bc:	68 a1       	ldd	r22, Y+32	; 0x20
    42be:	79 a1       	ldd	r23, Y+33	; 0x21
    42c0:	8a a1       	ldd	r24, Y+34	; 0x22
    42c2:	9b a1       	ldd	r25, Y+35	; 0x23
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	40 e8       	ldi	r20, 0x80	; 128
    42ca:	5f e3       	ldi	r21, 0x3F	; 63
    42cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    42d0:	88 23       	and	r24, r24
    42d2:	2c f4       	brge	.+10     	; 0x42de <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	9f 8f       	std	Y+31, r25	; 0x1f
    42da:	8e 8f       	std	Y+30, r24	; 0x1e
    42dc:	3f c0       	rjmp	.+126    	; 0x435c <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    42de:	68 a1       	ldd	r22, Y+32	; 0x20
    42e0:	79 a1       	ldd	r23, Y+33	; 0x21
    42e2:	8a a1       	ldd	r24, Y+34	; 0x22
    42e4:	9b a1       	ldd	r25, Y+35	; 0x23
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	3f ef       	ldi	r19, 0xFF	; 255
    42ea:	4f e7       	ldi	r20, 0x7F	; 127
    42ec:	57 e4       	ldi	r21, 0x47	; 71
    42ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42f2:	18 16       	cp	r1, r24
    42f4:	4c f5       	brge	.+82     	; 0x4348 <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f6:	6c a1       	ldd	r22, Y+36	; 0x24
    42f8:	7d a1       	ldd	r23, Y+37	; 0x25
    42fa:	8e a1       	ldd	r24, Y+38	; 0x26
    42fc:	9f a1       	ldd	r25, Y+39	; 0x27
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e2       	ldi	r20, 0x20	; 32
    4304:	51 e4       	ldi	r21, 0x41	; 65
    4306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	bc 01       	movw	r22, r24
    4310:	cd 01       	movw	r24, r26
    4312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4316:	dc 01       	movw	r26, r24
    4318:	cb 01       	movw	r24, r22
    431a:	9f 8f       	std	Y+31, r25	; 0x1f
    431c:	8e 8f       	std	Y+30, r24	; 0x1e
    431e:	0f c0       	rjmp	.+30     	; 0x433e <LCD_read_data_4bit+0x5aa>
    4320:	88 ec       	ldi	r24, 0xC8	; 200
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	9d 8f       	std	Y+29, r25	; 0x1d
    4326:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4328:	8c 8d       	ldd	r24, Y+28	; 0x1c
    432a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <LCD_read_data_4bit+0x598>
    4330:	9d 8f       	std	Y+29, r25	; 0x1d
    4332:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4334:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4336:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	9f 8f       	std	Y+31, r25	; 0x1f
    433c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4340:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	69 f7       	brne	.-38     	; 0x4320 <LCD_read_data_4bit+0x58c>
    4346:	24 c0       	rjmp	.+72     	; 0x4390 <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4348:	68 a1       	ldd	r22, Y+32	; 0x20
    434a:	79 a1       	ldd	r23, Y+33	; 0x21
    434c:	8a a1       	ldd	r24, Y+34	; 0x22
    434e:	9b a1       	ldd	r25, Y+35	; 0x23
    4350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	9f 8f       	std	Y+31, r25	; 0x1f
    435a:	8e 8f       	std	Y+30, r24	; 0x1e
    435c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    435e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4360:	9b 8f       	std	Y+27, r25	; 0x1b
    4362:	8a 8f       	std	Y+26, r24	; 0x1a
    4364:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4366:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4368:	01 97       	sbiw	r24, 0x01	; 1
    436a:	f1 f7       	brne	.-4      	; 0x4368 <LCD_read_data_4bit+0x5d4>
    436c:	9b 8f       	std	Y+27, r25	; 0x1b
    436e:	8a 8f       	std	Y+26, r24	; 0x1a
    4370:	0f c0       	rjmp	.+30     	; 0x4390 <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4372:	69 a5       	ldd	r22, Y+41	; 0x29
    4374:	7a a5       	ldd	r23, Y+42	; 0x2a
    4376:	8b a5       	ldd	r24, Y+43	; 0x2b
    4378:	9c a5       	ldd	r25, Y+44	; 0x2c
    437a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	88 a7       	std	Y+40, r24	; 0x28
    4384:	88 a5       	ldd	r24, Y+40	; 0x28
    4386:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4388:	89 8d       	ldd	r24, Y+25	; 0x19
    438a:	8a 95       	dec	r24
    438c:	f1 f7       	brne	.-4      	; 0x438a <LCD_read_data_4bit+0x5f6>
    438e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    4390:	82 e0       	ldi	r24, 0x02	; 2
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <DIO_void_set_pin>
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	a0 e8       	ldi	r26, 0x80	; 128
    439e:	bf e3       	ldi	r27, 0x3F	; 63
    43a0:	8d 8b       	std	Y+21, r24	; 0x15
    43a2:	9e 8b       	std	Y+22, r25	; 0x16
    43a4:	af 8b       	std	Y+23, r26	; 0x17
    43a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    43a8:	6d 89       	ldd	r22, Y+21	; 0x15
    43aa:	7e 89       	ldd	r23, Y+22	; 0x16
    43ac:	8f 89       	ldd	r24, Y+23	; 0x17
    43ae:	98 8d       	ldd	r25, Y+24	; 0x18
    43b0:	2b ea       	ldi	r18, 0xAB	; 171
    43b2:	3a ea       	ldi	r19, 0xAA	; 170
    43b4:	4a e2       	ldi	r20, 0x2A	; 42
    43b6:	50 e4       	ldi	r21, 0x40	; 64
    43b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	89 8b       	std	Y+17, r24	; 0x11
    43c2:	9a 8b       	std	Y+18, r25	; 0x12
    43c4:	ab 8b       	std	Y+19, r26	; 0x13
    43c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    43c8:	69 89       	ldd	r22, Y+17	; 0x11
    43ca:	7a 89       	ldd	r23, Y+18	; 0x12
    43cc:	8b 89       	ldd	r24, Y+19	; 0x13
    43ce:	9c 89       	ldd	r25, Y+20	; 0x14
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	40 e8       	ldi	r20, 0x80	; 128
    43d6:	5f e3       	ldi	r21, 0x3F	; 63
    43d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    43dc:	88 23       	and	r24, r24
    43de:	1c f4       	brge	.+6      	; 0x43e6 <LCD_read_data_4bit+0x652>
		__ticks = 1;
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	88 8b       	std	Y+16, r24	; 0x10
    43e4:	91 c0       	rjmp	.+290    	; 0x4508 <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    43e6:	69 89       	ldd	r22, Y+17	; 0x11
    43e8:	7a 89       	ldd	r23, Y+18	; 0x12
    43ea:	8b 89       	ldd	r24, Y+19	; 0x13
    43ec:	9c 89       	ldd	r25, Y+20	; 0x14
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	4f e7       	ldi	r20, 0x7F	; 127
    43f4:	53 e4       	ldi	r21, 0x43	; 67
    43f6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43fa:	18 16       	cp	r1, r24
    43fc:	0c f0       	brlt	.+2      	; 0x4400 <LCD_read_data_4bit+0x66c>
    43fe:	7b c0       	rjmp	.+246    	; 0x44f6 <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    4400:	6d 89       	ldd	r22, Y+21	; 0x15
    4402:	7e 89       	ldd	r23, Y+22	; 0x16
    4404:	8f 89       	ldd	r24, Y+23	; 0x17
    4406:	98 8d       	ldd	r25, Y+24	; 0x18
    4408:	20 e0       	ldi	r18, 0x00	; 0
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	4a e7       	ldi	r20, 0x7A	; 122
    440e:	54 e4       	ldi	r21, 0x44	; 68
    4410:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22
    4418:	8c 87       	std	Y+12, r24	; 0x0c
    441a:	9d 87       	std	Y+13, r25	; 0x0d
    441c:	ae 87       	std	Y+14, r26	; 0x0e
    441e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4420:	6c 85       	ldd	r22, Y+12	; 0x0c
    4422:	7d 85       	ldd	r23, Y+13	; 0x0d
    4424:	8e 85       	ldd	r24, Y+14	; 0x0e
    4426:	9f 85       	ldd	r25, Y+15	; 0x0f
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	4a ef       	ldi	r20, 0xFA	; 250
    442e:	54 e4       	ldi	r21, 0x44	; 68
    4430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4434:	dc 01       	movw	r26, r24
    4436:	cb 01       	movw	r24, r22
    4438:	88 87       	std	Y+8, r24	; 0x08
    443a:	99 87       	std	Y+9, r25	; 0x09
    443c:	aa 87       	std	Y+10, r26	; 0x0a
    443e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4440:	68 85       	ldd	r22, Y+8	; 0x08
    4442:	79 85       	ldd	r23, Y+9	; 0x09
    4444:	8a 85       	ldd	r24, Y+10	; 0x0a
    4446:	9b 85       	ldd	r25, Y+11	; 0x0b
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e8       	ldi	r20, 0x80	; 128
    444e:	5f e3       	ldi	r21, 0x3F	; 63
    4450:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4454:	88 23       	and	r24, r24
    4456:	2c f4       	brge	.+10     	; 0x4462 <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	9f 83       	std	Y+7, r25	; 0x07
    445e:	8e 83       	std	Y+6, r24	; 0x06
    4460:	3f c0       	rjmp	.+126    	; 0x44e0 <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    4462:	68 85       	ldd	r22, Y+8	; 0x08
    4464:	79 85       	ldd	r23, Y+9	; 0x09
    4466:	8a 85       	ldd	r24, Y+10	; 0x0a
    4468:	9b 85       	ldd	r25, Y+11	; 0x0b
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	3f ef       	ldi	r19, 0xFF	; 255
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	57 e4       	ldi	r21, 0x47	; 71
    4472:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4476:	18 16       	cp	r1, r24
    4478:	4c f5       	brge	.+82     	; 0x44cc <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447a:	6c 85       	ldd	r22, Y+12	; 0x0c
    447c:	7d 85       	ldd	r23, Y+13	; 0x0d
    447e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4480:	9f 85       	ldd	r25, Y+15	; 0x0f
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e2       	ldi	r20, 0x20	; 32
    4488:	51 e4       	ldi	r21, 0x41	; 65
    448a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	bc 01       	movw	r22, r24
    4494:	cd 01       	movw	r24, r26
    4496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	9f 83       	std	Y+7, r25	; 0x07
    44a0:	8e 83       	std	Y+6, r24	; 0x06
    44a2:	0f c0       	rjmp	.+30     	; 0x44c2 <LCD_read_data_4bit+0x72e>
    44a4:	88 ec       	ldi	r24, 0xC8	; 200
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	9d 83       	std	Y+5, r25	; 0x05
    44aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44ac:	8c 81       	ldd	r24, Y+4	; 0x04
    44ae:	9d 81       	ldd	r25, Y+5	; 0x05
    44b0:	01 97       	sbiw	r24, 0x01	; 1
    44b2:	f1 f7       	brne	.-4      	; 0x44b0 <LCD_read_data_4bit+0x71c>
    44b4:	9d 83       	std	Y+5, r25	; 0x05
    44b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b8:	8e 81       	ldd	r24, Y+6	; 0x06
    44ba:	9f 81       	ldd	r25, Y+7	; 0x07
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	9f 83       	std	Y+7, r25	; 0x07
    44c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c2:	8e 81       	ldd	r24, Y+6	; 0x06
    44c4:	9f 81       	ldd	r25, Y+7	; 0x07
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	69 f7       	brne	.-38     	; 0x44a4 <LCD_read_data_4bit+0x710>
    44ca:	24 c0       	rjmp	.+72     	; 0x4514 <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44cc:	68 85       	ldd	r22, Y+8	; 0x08
    44ce:	79 85       	ldd	r23, Y+9	; 0x09
    44d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    44d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	9f 83       	std	Y+7, r25	; 0x07
    44de:	8e 83       	std	Y+6, r24	; 0x06
    44e0:	8e 81       	ldd	r24, Y+6	; 0x06
    44e2:	9f 81       	ldd	r25, Y+7	; 0x07
    44e4:	9b 83       	std	Y+3, r25	; 0x03
    44e6:	8a 83       	std	Y+2, r24	; 0x02
    44e8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ea:	9b 81       	ldd	r25, Y+3	; 0x03
    44ec:	01 97       	sbiw	r24, 0x01	; 1
    44ee:	f1 f7       	brne	.-4      	; 0x44ec <LCD_read_data_4bit+0x758>
    44f0:	9b 83       	std	Y+3, r25	; 0x03
    44f2:	8a 83       	std	Y+2, r24	; 0x02
    44f4:	0f c0       	rjmp	.+30     	; 0x4514 <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44f6:	69 89       	ldd	r22, Y+17	; 0x11
    44f8:	7a 89       	ldd	r23, Y+18	; 0x12
    44fa:	8b 89       	ldd	r24, Y+19	; 0x13
    44fc:	9c 89       	ldd	r25, Y+20	; 0x14
    44fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	88 8b       	std	Y+16, r24	; 0x10
    4508:	88 89       	ldd	r24, Y+16	; 0x10
    450a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	8a 95       	dec	r24
    4510:	f1 f7       	brne	.-4      	; 0x450e <LCD_read_data_4bit+0x77a>
    4512:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    4514:	82 e0       	ldi	r24, 0x02	; 2
    4516:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <DIO_u8_get_port>
    451a:	98 2f       	mov	r25, r24
    451c:	de 01       	movw	r26, r28
    451e:	af 59       	subi	r26, 0x9F	; 159
    4520:	bf 4f       	sbci	r27, 0xFF	; 255
    4522:	fe 01       	movw	r30, r28
    4524:	ef 59       	subi	r30, 0x9F	; 159
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	80 81       	ld	r24, Z
    452a:	89 2b       	or	r24, r25
    452c:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    452e:	82 e0       	ldi	r24, 0x02	; 2
    4530:	60 e0       	ldi	r22, 0x00	; 0
    4532:	0e 94 83 2c 	call	0x5906	; 0x5906 <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    4536:	de 01       	movw	r26, r28
    4538:	af 59       	subi	r26, 0x9F	; 159
    453a:	bf 4f       	sbci	r27, 0xFF	; 255
    453c:	fe 01       	movw	r30, r28
    453e:	ef 59       	subi	r30, 0x9F	; 159
    4540:	ff 4f       	sbci	r31, 0xFF	; 255
    4542:	80 81       	ld	r24, Z
    4544:	8f 77       	andi	r24, 0x7F	; 127
    4546:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    4548:	82 e0       	ldi	r24, 0x02	; 2
    454a:	67 e0       	ldi	r22, 0x07	; 7
    454c:	4f ef       	ldi	r20, 0xFF	; 255
    454e:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4552:	82 e0       	ldi	r24, 0x02	; 2
    4554:	66 e0       	ldi	r22, 0x06	; 6
    4556:	4f ef       	ldi	r20, 0xFF	; 255
    4558:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    455c:	82 e0       	ldi	r24, 0x02	; 2
    455e:	65 e0       	ldi	r22, 0x05	; 5
    4560:	4f ef       	ldi	r20, 0xFF	; 255
    4562:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    4566:	82 e0       	ldi	r24, 0x02	; 2
    4568:	64 e0       	ldi	r22, 0x04	; 4
    456a:	4f ef       	ldi	r20, 0xFF	; 255
    456c:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    4570:	fe 01       	movw	r30, r28
    4572:	ef 59       	subi	r30, 0x9F	; 159
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	80 81       	ld	r24, Z
}
    4578:	cf 59       	subi	r28, 0x9F	; 159
    457a:	df 4f       	sbci	r29, 0xFF	; 255
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	08 95       	ret

00004590 <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    4590:	0f 93       	push	r16
    4592:	1f 93       	push	r17
    4594:	df 93       	push	r29
    4596:	cf 93       	push	r28
    4598:	cd b7       	in	r28, 0x3d	; 61
    459a:	de b7       	in	r29, 0x3e	; 62
    459c:	cc 54       	subi	r28, 0x4C	; 76
    459e:	d0 40       	sbci	r29, 0x00	; 0
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	f8 94       	cli
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    45aa:	82 e0       	ldi	r24, 0x02	; 2
    45ac:	67 e0       	ldi	r22, 0x07	; 7
    45ae:	4f ef       	ldi	r20, 0xFF	; 255
    45b0:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    45b4:	82 e0       	ldi	r24, 0x02	; 2
    45b6:	66 e0       	ldi	r22, 0x06	; 6
    45b8:	4f ef       	ldi	r20, 0xFF	; 255
    45ba:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    45be:	82 e0       	ldi	r24, 0x02	; 2
    45c0:	65 e0       	ldi	r22, 0x05	; 5
    45c2:	4f ef       	ldi	r20, 0xFF	; 255
    45c4:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    45c8:	82 e0       	ldi	r24, 0x02	; 2
    45ca:	64 e0       	ldi	r22, 0x04	; 4
    45cc:	4f ef       	ldi	r20, 0xFF	; 255
    45ce:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    45d2:	82 e0       	ldi	r24, 0x02	; 2
    45d4:	60 e0       	ldi	r22, 0x00	; 0
    45d6:	4f ef       	ldi	r20, 0xFF	; 255
    45d8:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    45dc:	82 e0       	ldi	r24, 0x02	; 2
    45de:	61 e0       	ldi	r22, 0x01	; 1
    45e0:	4f ef       	ldi	r20, 0xFF	; 255
    45e2:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    45e6:	82 e0       	ldi	r24, 0x02	; 2
    45e8:	62 e0       	ldi	r22, 0x02	; 2
    45ea:	4f ef       	ldi	r20, 0xFF	; 255
    45ec:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DIO_void_set_pin_dir>
    45f0:	fe 01       	movw	r30, r28
    45f2:	e7 5b       	subi	r30, 0xB7	; 183
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	a8 e4       	ldi	r26, 0x48	; 72
    45fc:	b2 e4       	ldi	r27, 0x42	; 66
    45fe:	80 83       	st	Z, r24
    4600:	91 83       	std	Z+1, r25	; 0x01
    4602:	a2 83       	std	Z+2, r26	; 0x02
    4604:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4606:	8e 01       	movw	r16, r28
    4608:	0b 5b       	subi	r16, 0xBB	; 187
    460a:	1f 4f       	sbci	r17, 0xFF	; 255
    460c:	fe 01       	movw	r30, r28
    460e:	e7 5b       	subi	r30, 0xB7	; 183
    4610:	ff 4f       	sbci	r31, 0xFF	; 255
    4612:	60 81       	ld	r22, Z
    4614:	71 81       	ldd	r23, Z+1	; 0x01
    4616:	82 81       	ldd	r24, Z+2	; 0x02
    4618:	93 81       	ldd	r25, Z+3	; 0x03
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	4a ef       	ldi	r20, 0xFA	; 250
    4620:	54 e4       	ldi	r21, 0x44	; 68
    4622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	f8 01       	movw	r30, r16
    462c:	80 83       	st	Z, r24
    462e:	91 83       	std	Z+1, r25	; 0x01
    4630:	a2 83       	std	Z+2, r26	; 0x02
    4632:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4634:	fe 01       	movw	r30, r28
    4636:	eb 5b       	subi	r30, 0xBB	; 187
    4638:	ff 4f       	sbci	r31, 0xFF	; 255
    463a:	60 81       	ld	r22, Z
    463c:	71 81       	ldd	r23, Z+1	; 0x01
    463e:	82 81       	ldd	r24, Z+2	; 0x02
    4640:	93 81       	ldd	r25, Z+3	; 0x03
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	40 e8       	ldi	r20, 0x80	; 128
    4648:	5f e3       	ldi	r21, 0x3F	; 63
    464a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    464e:	88 23       	and	r24, r24
    4650:	44 f4       	brge	.+16     	; 0x4662 <LCD_init+0xd2>
		__ticks = 1;
    4652:	fe 01       	movw	r30, r28
    4654:	ed 5b       	subi	r30, 0xBD	; 189
    4656:	ff 4f       	sbci	r31, 0xFF	; 255
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	91 83       	std	Z+1, r25	; 0x01
    465e:	80 83       	st	Z, r24
    4660:	64 c0       	rjmp	.+200    	; 0x472a <LCD_init+0x19a>
	else if (__tmp > 65535)
    4662:	fe 01       	movw	r30, r28
    4664:	eb 5b       	subi	r30, 0xBB	; 187
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	60 81       	ld	r22, Z
    466a:	71 81       	ldd	r23, Z+1	; 0x01
    466c:	82 81       	ldd	r24, Z+2	; 0x02
    466e:	93 81       	ldd	r25, Z+3	; 0x03
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	3f ef       	ldi	r19, 0xFF	; 255
    4674:	4f e7       	ldi	r20, 0x7F	; 127
    4676:	57 e4       	ldi	r21, 0x47	; 71
    4678:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    467c:	18 16       	cp	r1, r24
    467e:	0c f0       	brlt	.+2      	; 0x4682 <LCD_init+0xf2>
    4680:	43 c0       	rjmp	.+134    	; 0x4708 <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4682:	fe 01       	movw	r30, r28
    4684:	e7 5b       	subi	r30, 0xB7	; 183
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	60 81       	ld	r22, Z
    468a:	71 81       	ldd	r23, Z+1	; 0x01
    468c:	82 81       	ldd	r24, Z+2	; 0x02
    468e:	93 81       	ldd	r25, Z+3	; 0x03
    4690:	20 e0       	ldi	r18, 0x00	; 0
    4692:	30 e0       	ldi	r19, 0x00	; 0
    4694:	40 e2       	ldi	r20, 0x20	; 32
    4696:	51 e4       	ldi	r21, 0x41	; 65
    4698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    469c:	dc 01       	movw	r26, r24
    469e:	cb 01       	movw	r24, r22
    46a0:	8e 01       	movw	r16, r28
    46a2:	0d 5b       	subi	r16, 0xBD	; 189
    46a4:	1f 4f       	sbci	r17, 0xFF	; 255
    46a6:	bc 01       	movw	r22, r24
    46a8:	cd 01       	movw	r24, r26
    46aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	f8 01       	movw	r30, r16
    46b4:	91 83       	std	Z+1, r25	; 0x01
    46b6:	80 83       	st	Z, r24
    46b8:	1f c0       	rjmp	.+62     	; 0x46f8 <LCD_init+0x168>
    46ba:	fe 01       	movw	r30, r28
    46bc:	ef 5b       	subi	r30, 0xBF	; 191
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	88 ec       	ldi	r24, 0xC8	; 200
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	91 83       	std	Z+1, r25	; 0x01
    46c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46c8:	fe 01       	movw	r30, r28
    46ca:	ef 5b       	subi	r30, 0xBF	; 191
    46cc:	ff 4f       	sbci	r31, 0xFF	; 255
    46ce:	80 81       	ld	r24, Z
    46d0:	91 81       	ldd	r25, Z+1	; 0x01
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	f1 f7       	brne	.-4      	; 0x46d2 <LCD_init+0x142>
    46d6:	fe 01       	movw	r30, r28
    46d8:	ef 5b       	subi	r30, 0xBF	; 191
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	91 83       	std	Z+1, r25	; 0x01
    46de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e0:	de 01       	movw	r26, r28
    46e2:	ad 5b       	subi	r26, 0xBD	; 189
    46e4:	bf 4f       	sbci	r27, 0xFF	; 255
    46e6:	fe 01       	movw	r30, r28
    46e8:	ed 5b       	subi	r30, 0xBD	; 189
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	80 81       	ld	r24, Z
    46ee:	91 81       	ldd	r25, Z+1	; 0x01
    46f0:	01 97       	sbiw	r24, 0x01	; 1
    46f2:	11 96       	adiw	r26, 0x01	; 1
    46f4:	9c 93       	st	X, r25
    46f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46f8:	fe 01       	movw	r30, r28
    46fa:	ed 5b       	subi	r30, 0xBD	; 189
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	80 81       	ld	r24, Z
    4700:	91 81       	ldd	r25, Z+1	; 0x01
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	d1 f6       	brne	.-76     	; 0x46ba <LCD_init+0x12a>
    4706:	24 c0       	rjmp	.+72     	; 0x4750 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	8e 01       	movw	r16, r28
    470a:	0d 5b       	subi	r16, 0xBD	; 189
    470c:	1f 4f       	sbci	r17, 0xFF	; 255
    470e:	fe 01       	movw	r30, r28
    4710:	eb 5b       	subi	r30, 0xBB	; 187
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	60 81       	ld	r22, Z
    4716:	71 81       	ldd	r23, Z+1	; 0x01
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	93 81       	ldd	r25, Z+3	; 0x03
    471c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	f8 01       	movw	r30, r16
    4726:	91 83       	std	Z+1, r25	; 0x01
    4728:	80 83       	st	Z, r24
    472a:	fe 01       	movw	r30, r28
    472c:	ed 5b       	subi	r30, 0xBD	; 189
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	80 81       	ld	r24, Z
    4732:	91 81       	ldd	r25, Z+1	; 0x01
    4734:	fe 01       	movw	r30, r28
    4736:	ff 96       	adiw	r30, 0x3f	; 63
    4738:	91 83       	std	Z+1, r25	; 0x01
    473a:	80 83       	st	Z, r24
    473c:	fe 01       	movw	r30, r28
    473e:	ff 96       	adiw	r30, 0x3f	; 63
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	01 97       	sbiw	r24, 0x01	; 1
    4746:	f1 f7       	brne	.-4      	; 0x4744 <LCD_init+0x1b4>
    4748:	fe 01       	movw	r30, r28
    474a:	ff 96       	adiw	r30, 0x3f	; 63
    474c:	91 83       	std	Z+1, r25	; 0x01
    474e:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    4750:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <LCD_function_set_4bit>
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	a8 e4       	ldi	r26, 0x48	; 72
    475a:	b2 e4       	ldi	r27, 0x42	; 66
    475c:	8b af       	std	Y+59, r24	; 0x3b
    475e:	9c af       	std	Y+60, r25	; 0x3c
    4760:	ad af       	std	Y+61, r26	; 0x3d
    4762:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4764:	6b ad       	ldd	r22, Y+59	; 0x3b
    4766:	7c ad       	ldd	r23, Y+60	; 0x3c
    4768:	8d ad       	ldd	r24, Y+61	; 0x3d
    476a:	9e ad       	ldd	r25, Y+62	; 0x3e
    476c:	2b ea       	ldi	r18, 0xAB	; 171
    476e:	3a ea       	ldi	r19, 0xAA	; 170
    4770:	4a e2       	ldi	r20, 0x2A	; 42
    4772:	50 e4       	ldi	r21, 0x40	; 64
    4774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4778:	dc 01       	movw	r26, r24
    477a:	cb 01       	movw	r24, r22
    477c:	8f ab       	std	Y+55, r24	; 0x37
    477e:	98 af       	std	Y+56, r25	; 0x38
    4780:	a9 af       	std	Y+57, r26	; 0x39
    4782:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4784:	6f a9       	ldd	r22, Y+55	; 0x37
    4786:	78 ad       	ldd	r23, Y+56	; 0x38
    4788:	89 ad       	ldd	r24, Y+57	; 0x39
    478a:	9a ad       	ldd	r25, Y+58	; 0x3a
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	40 e8       	ldi	r20, 0x80	; 128
    4792:	5f e3       	ldi	r21, 0x3F	; 63
    4794:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4798:	88 23       	and	r24, r24
    479a:	1c f4       	brge	.+6      	; 0x47a2 <LCD_init+0x212>
		__ticks = 1;
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	8e ab       	std	Y+54, r24	; 0x36
    47a0:	91 c0       	rjmp	.+290    	; 0x48c4 <LCD_init+0x334>
	else if (__tmp > 255)
    47a2:	6f a9       	ldd	r22, Y+55	; 0x37
    47a4:	78 ad       	ldd	r23, Y+56	; 0x38
    47a6:	89 ad       	ldd	r24, Y+57	; 0x39
    47a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	4f e7       	ldi	r20, 0x7F	; 127
    47b0:	53 e4       	ldi	r21, 0x43	; 67
    47b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    47b6:	18 16       	cp	r1, r24
    47b8:	0c f0       	brlt	.+2      	; 0x47bc <LCD_init+0x22c>
    47ba:	7b c0       	rjmp	.+246    	; 0x48b2 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    47bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    47be:	7c ad       	ldd	r23, Y+60	; 0x3c
    47c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    47c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    47c4:	20 e0       	ldi	r18, 0x00	; 0
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	4a e7       	ldi	r20, 0x7A	; 122
    47ca:	54 e4       	ldi	r21, 0x44	; 68
    47cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    47d0:	dc 01       	movw	r26, r24
    47d2:	cb 01       	movw	r24, r22
    47d4:	8a ab       	std	Y+50, r24	; 0x32
    47d6:	9b ab       	std	Y+51, r25	; 0x33
    47d8:	ac ab       	std	Y+52, r26	; 0x34
    47da:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47dc:	6a a9       	ldd	r22, Y+50	; 0x32
    47de:	7b a9       	ldd	r23, Y+51	; 0x33
    47e0:	8c a9       	ldd	r24, Y+52	; 0x34
    47e2:	9d a9       	ldd	r25, Y+53	; 0x35
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	4a ef       	ldi	r20, 0xFA	; 250
    47ea:	54 e4       	ldi	r21, 0x44	; 68
    47ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f0:	dc 01       	movw	r26, r24
    47f2:	cb 01       	movw	r24, r22
    47f4:	8e a7       	std	Y+46, r24	; 0x2e
    47f6:	9f a7       	std	Y+47, r25	; 0x2f
    47f8:	a8 ab       	std	Y+48, r26	; 0x30
    47fa:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    47fc:	6e a5       	ldd	r22, Y+46	; 0x2e
    47fe:	7f a5       	ldd	r23, Y+47	; 0x2f
    4800:	88 a9       	ldd	r24, Y+48	; 0x30
    4802:	99 a9       	ldd	r25, Y+49	; 0x31
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	40 e8       	ldi	r20, 0x80	; 128
    480a:	5f e3       	ldi	r21, 0x3F	; 63
    480c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4810:	88 23       	and	r24, r24
    4812:	2c f4       	brge	.+10     	; 0x481e <LCD_init+0x28e>
		__ticks = 1;
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	9d a7       	std	Y+45, r25	; 0x2d
    481a:	8c a7       	std	Y+44, r24	; 0x2c
    481c:	3f c0       	rjmp	.+126    	; 0x489c <LCD_init+0x30c>
	else if (__tmp > 65535)
    481e:	6e a5       	ldd	r22, Y+46	; 0x2e
    4820:	7f a5       	ldd	r23, Y+47	; 0x2f
    4822:	88 a9       	ldd	r24, Y+48	; 0x30
    4824:	99 a9       	ldd	r25, Y+49	; 0x31
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	3f ef       	ldi	r19, 0xFF	; 255
    482a:	4f e7       	ldi	r20, 0x7F	; 127
    482c:	57 e4       	ldi	r21, 0x47	; 71
    482e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4832:	18 16       	cp	r1, r24
    4834:	4c f5       	brge	.+82     	; 0x4888 <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4836:	6a a9       	ldd	r22, Y+50	; 0x32
    4838:	7b a9       	ldd	r23, Y+51	; 0x33
    483a:	8c a9       	ldd	r24, Y+52	; 0x34
    483c:	9d a9       	ldd	r25, Y+53	; 0x35
    483e:	20 e0       	ldi	r18, 0x00	; 0
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	40 e2       	ldi	r20, 0x20	; 32
    4844:	51 e4       	ldi	r21, 0x41	; 65
    4846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    484a:	dc 01       	movw	r26, r24
    484c:	cb 01       	movw	r24, r22
    484e:	bc 01       	movw	r22, r24
    4850:	cd 01       	movw	r24, r26
    4852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4856:	dc 01       	movw	r26, r24
    4858:	cb 01       	movw	r24, r22
    485a:	9d a7       	std	Y+45, r25	; 0x2d
    485c:	8c a7       	std	Y+44, r24	; 0x2c
    485e:	0f c0       	rjmp	.+30     	; 0x487e <LCD_init+0x2ee>
    4860:	88 ec       	ldi	r24, 0xC8	; 200
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	9b a7       	std	Y+43, r25	; 0x2b
    4866:	8a a7       	std	Y+42, r24	; 0x2a
    4868:	8a a5       	ldd	r24, Y+42	; 0x2a
    486a:	9b a5       	ldd	r25, Y+43	; 0x2b
    486c:	01 97       	sbiw	r24, 0x01	; 1
    486e:	f1 f7       	brne	.-4      	; 0x486c <LCD_init+0x2dc>
    4870:	9b a7       	std	Y+43, r25	; 0x2b
    4872:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4874:	8c a5       	ldd	r24, Y+44	; 0x2c
    4876:	9d a5       	ldd	r25, Y+45	; 0x2d
    4878:	01 97       	sbiw	r24, 0x01	; 1
    487a:	9d a7       	std	Y+45, r25	; 0x2d
    487c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    487e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4880:	9d a5       	ldd	r25, Y+45	; 0x2d
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	69 f7       	brne	.-38     	; 0x4860 <LCD_init+0x2d0>
    4886:	24 c0       	rjmp	.+72     	; 0x48d0 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4888:	6e a5       	ldd	r22, Y+46	; 0x2e
    488a:	7f a5       	ldd	r23, Y+47	; 0x2f
    488c:	88 a9       	ldd	r24, Y+48	; 0x30
    488e:	99 a9       	ldd	r25, Y+49	; 0x31
    4890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	9d a7       	std	Y+45, r25	; 0x2d
    489a:	8c a7       	std	Y+44, r24	; 0x2c
    489c:	8c a5       	ldd	r24, Y+44	; 0x2c
    489e:	9d a5       	ldd	r25, Y+45	; 0x2d
    48a0:	99 a7       	std	Y+41, r25	; 0x29
    48a2:	88 a7       	std	Y+40, r24	; 0x28
    48a4:	88 a5       	ldd	r24, Y+40	; 0x28
    48a6:	99 a5       	ldd	r25, Y+41	; 0x29
    48a8:	01 97       	sbiw	r24, 0x01	; 1
    48aa:	f1 f7       	brne	.-4      	; 0x48a8 <LCD_init+0x318>
    48ac:	99 a7       	std	Y+41, r25	; 0x29
    48ae:	88 a7       	std	Y+40, r24	; 0x28
    48b0:	0f c0       	rjmp	.+30     	; 0x48d0 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48b2:	6f a9       	ldd	r22, Y+55	; 0x37
    48b4:	78 ad       	ldd	r23, Y+56	; 0x38
    48b6:	89 ad       	ldd	r24, Y+57	; 0x39
    48b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    48ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48be:	dc 01       	movw	r26, r24
    48c0:	cb 01       	movw	r24, r22
    48c2:	8e ab       	std	Y+54, r24	; 0x36
    48c4:	8e a9       	ldd	r24, Y+54	; 0x36
    48c6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48c8:	8f a1       	ldd	r24, Y+39	; 0x27
    48ca:	8a 95       	dec	r24
    48cc:	f1 f7       	brne	.-4      	; 0x48ca <LCD_init+0x33a>
    48ce:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    48d0:	8c e0       	ldi	r24, 0x0C	; 12
    48d2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_write_cmd_4bit>
    48d6:	80 e0       	ldi	r24, 0x00	; 0
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	a8 e4       	ldi	r26, 0x48	; 72
    48dc:	b2 e4       	ldi	r27, 0x42	; 66
    48de:	8b a3       	std	Y+35, r24	; 0x23
    48e0:	9c a3       	std	Y+36, r25	; 0x24
    48e2:	ad a3       	std	Y+37, r26	; 0x25
    48e4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    48e6:	6b a1       	ldd	r22, Y+35	; 0x23
    48e8:	7c a1       	ldd	r23, Y+36	; 0x24
    48ea:	8d a1       	ldd	r24, Y+37	; 0x25
    48ec:	9e a1       	ldd	r25, Y+38	; 0x26
    48ee:	2b ea       	ldi	r18, 0xAB	; 171
    48f0:	3a ea       	ldi	r19, 0xAA	; 170
    48f2:	4a e2       	ldi	r20, 0x2A	; 42
    48f4:	50 e4       	ldi	r21, 0x40	; 64
    48f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	8f 8f       	std	Y+31, r24	; 0x1f
    4900:	98 a3       	std	Y+32, r25	; 0x20
    4902:	a9 a3       	std	Y+33, r26	; 0x21
    4904:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    4906:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4908:	78 a1       	ldd	r23, Y+32	; 0x20
    490a:	89 a1       	ldd	r24, Y+33	; 0x21
    490c:	9a a1       	ldd	r25, Y+34	; 0x22
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	40 e8       	ldi	r20, 0x80	; 128
    4914:	5f e3       	ldi	r21, 0x3F	; 63
    4916:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    491a:	88 23       	and	r24, r24
    491c:	1c f4       	brge	.+6      	; 0x4924 <LCD_init+0x394>
		__ticks = 1;
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	8e 8f       	std	Y+30, r24	; 0x1e
    4922:	91 c0       	rjmp	.+290    	; 0x4a46 <LCD_init+0x4b6>
	else if (__tmp > 255)
    4924:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4926:	78 a1       	ldd	r23, Y+32	; 0x20
    4928:	89 a1       	ldd	r24, Y+33	; 0x21
    492a:	9a a1       	ldd	r25, Y+34	; 0x22
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	4f e7       	ldi	r20, 0x7F	; 127
    4932:	53 e4       	ldi	r21, 0x43	; 67
    4934:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4938:	18 16       	cp	r1, r24
    493a:	0c f0       	brlt	.+2      	; 0x493e <LCD_init+0x3ae>
    493c:	7b c0       	rjmp	.+246    	; 0x4a34 <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    493e:	6b a1       	ldd	r22, Y+35	; 0x23
    4940:	7c a1       	ldd	r23, Y+36	; 0x24
    4942:	8d a1       	ldd	r24, Y+37	; 0x25
    4944:	9e a1       	ldd	r25, Y+38	; 0x26
    4946:	20 e0       	ldi	r18, 0x00	; 0
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	4a e7       	ldi	r20, 0x7A	; 122
    494c:	54 e4       	ldi	r21, 0x44	; 68
    494e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	8a 8f       	std	Y+26, r24	; 0x1a
    4958:	9b 8f       	std	Y+27, r25	; 0x1b
    495a:	ac 8f       	std	Y+28, r26	; 0x1c
    495c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    495e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4960:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4962:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4964:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	4a ef       	ldi	r20, 0xFA	; 250
    496c:	54 e4       	ldi	r21, 0x44	; 68
    496e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	8e 8b       	std	Y+22, r24	; 0x16
    4978:	9f 8b       	std	Y+23, r25	; 0x17
    497a:	a8 8f       	std	Y+24, r26	; 0x18
    497c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    497e:	6e 89       	ldd	r22, Y+22	; 0x16
    4980:	7f 89       	ldd	r23, Y+23	; 0x17
    4982:	88 8d       	ldd	r24, Y+24	; 0x18
    4984:	99 8d       	ldd	r25, Y+25	; 0x19
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	40 e8       	ldi	r20, 0x80	; 128
    498c:	5f e3       	ldi	r21, 0x3F	; 63
    498e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4992:	88 23       	and	r24, r24
    4994:	2c f4       	brge	.+10     	; 0x49a0 <LCD_init+0x410>
		__ticks = 1;
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	9d 8b       	std	Y+21, r25	; 0x15
    499c:	8c 8b       	std	Y+20, r24	; 0x14
    499e:	3f c0       	rjmp	.+126    	; 0x4a1e <LCD_init+0x48e>
	else if (__tmp > 65535)
    49a0:	6e 89       	ldd	r22, Y+22	; 0x16
    49a2:	7f 89       	ldd	r23, Y+23	; 0x17
    49a4:	88 8d       	ldd	r24, Y+24	; 0x18
    49a6:	99 8d       	ldd	r25, Y+25	; 0x19
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	3f ef       	ldi	r19, 0xFF	; 255
    49ac:	4f e7       	ldi	r20, 0x7F	; 127
    49ae:	57 e4       	ldi	r21, 0x47	; 71
    49b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    49b4:	18 16       	cp	r1, r24
    49b6:	4c f5       	brge	.+82     	; 0x4a0a <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    49ba:	7b 8d       	ldd	r23, Y+27	; 0x1b
    49bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    49be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    49c0:	20 e0       	ldi	r18, 0x00	; 0
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	40 e2       	ldi	r20, 0x20	; 32
    49c6:	51 e4       	ldi	r21, 0x41	; 65
    49c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49cc:	dc 01       	movw	r26, r24
    49ce:	cb 01       	movw	r24, r22
    49d0:	bc 01       	movw	r22, r24
    49d2:	cd 01       	movw	r24, r26
    49d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d8:	dc 01       	movw	r26, r24
    49da:	cb 01       	movw	r24, r22
    49dc:	9d 8b       	std	Y+21, r25	; 0x15
    49de:	8c 8b       	std	Y+20, r24	; 0x14
    49e0:	0f c0       	rjmp	.+30     	; 0x4a00 <LCD_init+0x470>
    49e2:	88 ec       	ldi	r24, 0xC8	; 200
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	9b 8b       	std	Y+19, r25	; 0x13
    49e8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49ea:	8a 89       	ldd	r24, Y+18	; 0x12
    49ec:	9b 89       	ldd	r25, Y+19	; 0x13
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	f1 f7       	brne	.-4      	; 0x49ee <LCD_init+0x45e>
    49f2:	9b 8b       	std	Y+19, r25	; 0x13
    49f4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49f6:	8c 89       	ldd	r24, Y+20	; 0x14
    49f8:	9d 89       	ldd	r25, Y+21	; 0x15
    49fa:	01 97       	sbiw	r24, 0x01	; 1
    49fc:	9d 8b       	std	Y+21, r25	; 0x15
    49fe:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a00:	8c 89       	ldd	r24, Y+20	; 0x14
    4a02:	9d 89       	ldd	r25, Y+21	; 0x15
    4a04:	00 97       	sbiw	r24, 0x00	; 0
    4a06:	69 f7       	brne	.-38     	; 0x49e2 <LCD_init+0x452>
    4a08:	24 c0       	rjmp	.+72     	; 0x4a52 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a0a:	6e 89       	ldd	r22, Y+22	; 0x16
    4a0c:	7f 89       	ldd	r23, Y+23	; 0x17
    4a0e:	88 8d       	ldd	r24, Y+24	; 0x18
    4a10:	99 8d       	ldd	r25, Y+25	; 0x19
    4a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a16:	dc 01       	movw	r26, r24
    4a18:	cb 01       	movw	r24, r22
    4a1a:	9d 8b       	std	Y+21, r25	; 0x15
    4a1c:	8c 8b       	std	Y+20, r24	; 0x14
    4a1e:	8c 89       	ldd	r24, Y+20	; 0x14
    4a20:	9d 89       	ldd	r25, Y+21	; 0x15
    4a22:	99 8b       	std	Y+17, r25	; 0x11
    4a24:	88 8b       	std	Y+16, r24	; 0x10
    4a26:	88 89       	ldd	r24, Y+16	; 0x10
    4a28:	99 89       	ldd	r25, Y+17	; 0x11
    4a2a:	01 97       	sbiw	r24, 0x01	; 1
    4a2c:	f1 f7       	brne	.-4      	; 0x4a2a <LCD_init+0x49a>
    4a2e:	99 8b       	std	Y+17, r25	; 0x11
    4a30:	88 8b       	std	Y+16, r24	; 0x10
    4a32:	0f c0       	rjmp	.+30     	; 0x4a52 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a34:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4a36:	78 a1       	ldd	r23, Y+32	; 0x20
    4a38:	89 a1       	ldd	r24, Y+33	; 0x21
    4a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    4a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	8e 8f       	std	Y+30, r24	; 0x1e
    4a46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a48:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a4c:	8a 95       	dec	r24
    4a4e:	f1 f7       	brne	.-4      	; 0x4a4c <LCD_init+0x4bc>
    4a50:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_write_cmd_4bit>
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	a0 e0       	ldi	r26, 0x00	; 0
    4a5e:	b0 e4       	ldi	r27, 0x40	; 64
    4a60:	8b 87       	std	Y+11, r24	; 0x0b
    4a62:	9c 87       	std	Y+12, r25	; 0x0c
    4a64:	ad 87       	std	Y+13, r26	; 0x0d
    4a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	4a ef       	ldi	r20, 0xFA	; 250
    4a76:	54 e4       	ldi	r21, 0x44	; 68
    4a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	8f 83       	std	Y+7, r24	; 0x07
    4a82:	98 87       	std	Y+8, r25	; 0x08
    4a84:	a9 87       	std	Y+9, r26	; 0x09
    4a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a88:	6f 81       	ldd	r22, Y+7	; 0x07
    4a8a:	78 85       	ldd	r23, Y+8	; 0x08
    4a8c:	89 85       	ldd	r24, Y+9	; 0x09
    4a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a90:	20 e0       	ldi	r18, 0x00	; 0
    4a92:	30 e0       	ldi	r19, 0x00	; 0
    4a94:	40 e8       	ldi	r20, 0x80	; 128
    4a96:	5f e3       	ldi	r21, 0x3F	; 63
    4a98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4a9c:	88 23       	and	r24, r24
    4a9e:	2c f4       	brge	.+10     	; 0x4aaa <LCD_init+0x51a>
		__ticks = 1;
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	9e 83       	std	Y+6, r25	; 0x06
    4aa6:	8d 83       	std	Y+5, r24	; 0x05
    4aa8:	3f c0       	rjmp	.+126    	; 0x4b28 <LCD_init+0x598>
	else if (__tmp > 65535)
    4aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    4aac:	78 85       	ldd	r23, Y+8	; 0x08
    4aae:	89 85       	ldd	r24, Y+9	; 0x09
    4ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	3f ef       	ldi	r19, 0xFF	; 255
    4ab6:	4f e7       	ldi	r20, 0x7F	; 127
    4ab8:	57 e4       	ldi	r21, 0x47	; 71
    4aba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4abe:	18 16       	cp	r1, r24
    4ac0:	4c f5       	brge	.+82     	; 0x4b14 <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	40 e2       	ldi	r20, 0x20	; 32
    4ad0:	51 e4       	ldi	r21, 0x41	; 65
    4ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	bc 01       	movw	r22, r24
    4adc:	cd 01       	movw	r24, r26
    4ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	9e 83       	std	Y+6, r25	; 0x06
    4ae8:	8d 83       	std	Y+5, r24	; 0x05
    4aea:	0f c0       	rjmp	.+30     	; 0x4b0a <LCD_init+0x57a>
    4aec:	88 ec       	ldi	r24, 0xC8	; 200
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	9c 83       	std	Y+4, r25	; 0x04
    4af2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4af4:	8b 81       	ldd	r24, Y+3	; 0x03
    4af6:	9c 81       	ldd	r25, Y+4	; 0x04
    4af8:	01 97       	sbiw	r24, 0x01	; 1
    4afa:	f1 f7       	brne	.-4      	; 0x4af8 <LCD_init+0x568>
    4afc:	9c 83       	std	Y+4, r25	; 0x04
    4afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b00:	8d 81       	ldd	r24, Y+5	; 0x05
    4b02:	9e 81       	ldd	r25, Y+6	; 0x06
    4b04:	01 97       	sbiw	r24, 0x01	; 1
    4b06:	9e 83       	std	Y+6, r25	; 0x06
    4b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b0e:	00 97       	sbiw	r24, 0x00	; 0
    4b10:	69 f7       	brne	.-38     	; 0x4aec <LCD_init+0x55c>
    4b12:	14 c0       	rjmp	.+40     	; 0x4b3c <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b14:	6f 81       	ldd	r22, Y+7	; 0x07
    4b16:	78 85       	ldd	r23, Y+8	; 0x08
    4b18:	89 85       	ldd	r24, Y+9	; 0x09
    4b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b20:	dc 01       	movw	r26, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	9e 83       	std	Y+6, r25	; 0x06
    4b26:	8d 83       	std	Y+5, r24	; 0x05
    4b28:	8d 81       	ldd	r24, Y+5	; 0x05
    4b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b2c:	9a 83       	std	Y+2, r25	; 0x02
    4b2e:	89 83       	std	Y+1, r24	; 0x01
    4b30:	89 81       	ldd	r24, Y+1	; 0x01
    4b32:	9a 81       	ldd	r25, Y+2	; 0x02
    4b34:	01 97       	sbiw	r24, 0x01	; 1
    4b36:	f1 f7       	brne	.-4      	; 0x4b34 <LCD_init+0x5a4>
    4b38:	9a 83       	std	Y+2, r25	; 0x02
    4b3a:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    4b3c:	c4 5b       	subi	r28, 0xB4	; 180
    4b3e:	df 4f       	sbci	r29, 0xFF	; 255
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	de bf       	out	0x3e, r29	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	cf 91       	pop	r28
    4b4c:	df 91       	pop	r29
    4b4e:	1f 91       	pop	r17
    4b50:	0f 91       	pop	r16
    4b52:	08 95       	ret

00004b54 <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    4b54:	df 93       	push	r29
    4b56:	cf 93       	push	r28
    4b58:	cd b7       	in	r28, 0x3d	; 61
    4b5a:	de b7       	in	r29, 0x3e	; 62
    4b5c:	6b 97       	sbiw	r28, 0x1b	; 27
    4b5e:	0f b6       	in	r0, 0x3f	; 63
    4b60:	f8 94       	cli
    4b62:	de bf       	out	0x3e, r29	; 62
    4b64:	0f be       	out	0x3f, r0	; 63
    4b66:	cd bf       	out	0x3d, r28	; 61
    4b68:	8a 8f       	std	Y+26, r24	; 0x1a
    4b6a:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    4b6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b6e:	88 2f       	mov	r24, r24
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	02 96       	adiw	r24, 0x02	; 2
    4b74:	00 24       	eor	r0, r0
    4b76:	96 95       	lsr	r25
    4b78:	87 95       	ror	r24
    4b7a:	07 94       	ror	r0
    4b7c:	96 95       	lsr	r25
    4b7e:	87 95       	ror	r24
    4b80:	07 94       	ror	r0
    4b82:	98 2f       	mov	r25, r24
    4b84:	80 2d       	mov	r24, r0
    4b86:	98 2f       	mov	r25, r24
    4b88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b8a:	89 0f       	add	r24, r25
    4b8c:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    4b8e:	89 8d       	ldd	r24, Y+25	; 0x19
    4b90:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_write_cmd_4bit>
    4b94:	80 e0       	ldi	r24, 0x00	; 0
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	a8 e4       	ldi	r26, 0x48	; 72
    4b9a:	b2 e4       	ldi	r27, 0x42	; 66
    4b9c:	8d 8b       	std	Y+21, r24	; 0x15
    4b9e:	9e 8b       	std	Y+22, r25	; 0x16
    4ba0:	af 8b       	std	Y+23, r26	; 0x17
    4ba2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    4baa:	98 8d       	ldd	r25, Y+24	; 0x18
    4bac:	2b ea       	ldi	r18, 0xAB	; 171
    4bae:	3a ea       	ldi	r19, 0xAA	; 170
    4bb0:	4a e2       	ldi	r20, 0x2A	; 42
    4bb2:	50 e4       	ldi	r21, 0x40	; 64
    4bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	89 8b       	std	Y+17, r24	; 0x11
    4bbe:	9a 8b       	std	Y+18, r25	; 0x12
    4bc0:	ab 8b       	std	Y+19, r26	; 0x13
    4bc2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4bc4:	69 89       	ldd	r22, Y+17	; 0x11
    4bc6:	7a 89       	ldd	r23, Y+18	; 0x12
    4bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    4bca:	9c 89       	ldd	r25, Y+20	; 0x14
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	40 e8       	ldi	r20, 0x80	; 128
    4bd2:	5f e3       	ldi	r21, 0x3F	; 63
    4bd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4bd8:	88 23       	and	r24, r24
    4bda:	1c f4       	brge	.+6      	; 0x4be2 <LCD_set_cursor+0x8e>
		__ticks = 1;
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	88 8b       	std	Y+16, r24	; 0x10
    4be0:	91 c0       	rjmp	.+290    	; 0x4d04 <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    4be2:	69 89       	ldd	r22, Y+17	; 0x11
    4be4:	7a 89       	ldd	r23, Y+18	; 0x12
    4be6:	8b 89       	ldd	r24, Y+19	; 0x13
    4be8:	9c 89       	ldd	r25, Y+20	; 0x14
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	4f e7       	ldi	r20, 0x7F	; 127
    4bf0:	53 e4       	ldi	r21, 0x43	; 67
    4bf2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4bf6:	18 16       	cp	r1, r24
    4bf8:	0c f0       	brlt	.+2      	; 0x4bfc <LCD_set_cursor+0xa8>
    4bfa:	7b c0       	rjmp	.+246    	; 0x4cf2 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    4bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    4bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    4c00:	8f 89       	ldd	r24, Y+23	; 0x17
    4c02:	98 8d       	ldd	r25, Y+24	; 0x18
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	4a e7       	ldi	r20, 0x7A	; 122
    4c0a:	54 e4       	ldi	r21, 0x44	; 68
    4c0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c10:	dc 01       	movw	r26, r24
    4c12:	cb 01       	movw	r24, r22
    4c14:	8c 87       	std	Y+12, r24	; 0x0c
    4c16:	9d 87       	std	Y+13, r25	; 0x0d
    4c18:	ae 87       	std	Y+14, r26	; 0x0e
    4c1a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c20:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c22:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	4a ef       	ldi	r20, 0xFA	; 250
    4c2a:	54 e4       	ldi	r21, 0x44	; 68
    4c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	88 87       	std	Y+8, r24	; 0x08
    4c36:	99 87       	std	Y+9, r25	; 0x09
    4c38:	aa 87       	std	Y+10, r26	; 0x0a
    4c3a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c3c:	68 85       	ldd	r22, Y+8	; 0x08
    4c3e:	79 85       	ldd	r23, Y+9	; 0x09
    4c40:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c42:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	40 e8       	ldi	r20, 0x80	; 128
    4c4a:	5f e3       	ldi	r21, 0x3F	; 63
    4c4c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c50:	88 23       	and	r24, r24
    4c52:	2c f4       	brge	.+10     	; 0x4c5e <LCD_set_cursor+0x10a>
		__ticks = 1;
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	9f 83       	std	Y+7, r25	; 0x07
    4c5a:	8e 83       	std	Y+6, r24	; 0x06
    4c5c:	3f c0       	rjmp	.+126    	; 0x4cdc <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4c5e:	68 85       	ldd	r22, Y+8	; 0x08
    4c60:	79 85       	ldd	r23, Y+9	; 0x09
    4c62:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c64:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	3f ef       	ldi	r19, 0xFF	; 255
    4c6a:	4f e7       	ldi	r20, 0x7F	; 127
    4c6c:	57 e4       	ldi	r21, 0x47	; 71
    4c6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c72:	18 16       	cp	r1, r24
    4c74:	4c f5       	brge	.+82     	; 0x4cc8 <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c76:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c78:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	40 e2       	ldi	r20, 0x20	; 32
    4c84:	51 e4       	ldi	r21, 0x41	; 65
    4c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	bc 01       	movw	r22, r24
    4c90:	cd 01       	movw	r24, r26
    4c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	9f 83       	std	Y+7, r25	; 0x07
    4c9c:	8e 83       	std	Y+6, r24	; 0x06
    4c9e:	0f c0       	rjmp	.+30     	; 0x4cbe <LCD_set_cursor+0x16a>
    4ca0:	88 ec       	ldi	r24, 0xC8	; 200
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	9d 83       	std	Y+5, r25	; 0x05
    4ca6:	8c 83       	std	Y+4, r24	; 0x04
    4ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    4caa:	9d 81       	ldd	r25, Y+5	; 0x05
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	f1 f7       	brne	.-4      	; 0x4cac <LCD_set_cursor+0x158>
    4cb0:	9d 83       	std	Y+5, r25	; 0x05
    4cb2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    4cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    4cb8:	01 97       	sbiw	r24, 0x01	; 1
    4cba:	9f 83       	std	Y+7, r25	; 0x07
    4cbc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    4cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    4cc2:	00 97       	sbiw	r24, 0x00	; 0
    4cc4:	69 f7       	brne	.-38     	; 0x4ca0 <LCD_set_cursor+0x14c>
    4cc6:	24 c0       	rjmp	.+72     	; 0x4d10 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cc8:	68 85       	ldd	r22, Y+8	; 0x08
    4cca:	79 85       	ldd	r23, Y+9	; 0x09
    4ccc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cce:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	9f 83       	std	Y+7, r25	; 0x07
    4cda:	8e 83       	std	Y+6, r24	; 0x06
    4cdc:	8e 81       	ldd	r24, Y+6	; 0x06
    4cde:	9f 81       	ldd	r25, Y+7	; 0x07
    4ce0:	9b 83       	std	Y+3, r25	; 0x03
    4ce2:	8a 83       	std	Y+2, r24	; 0x02
    4ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ce8:	01 97       	sbiw	r24, 0x01	; 1
    4cea:	f1 f7       	brne	.-4      	; 0x4ce8 <LCD_set_cursor+0x194>
    4cec:	9b 83       	std	Y+3, r25	; 0x03
    4cee:	8a 83       	std	Y+2, r24	; 0x02
    4cf0:	0f c0       	rjmp	.+30     	; 0x4d10 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4cf2:	69 89       	ldd	r22, Y+17	; 0x11
    4cf4:	7a 89       	ldd	r23, Y+18	; 0x12
    4cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    4cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    4cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	88 8b       	std	Y+16, r24	; 0x10
    4d04:	88 89       	ldd	r24, Y+16	; 0x10
    4d06:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d08:	89 81       	ldd	r24, Y+1	; 0x01
    4d0a:	8a 95       	dec	r24
    4d0c:	f1 f7       	brne	.-4      	; 0x4d0a <LCD_set_cursor+0x1b6>
    4d0e:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    4d10:	6b 96       	adiw	r28, 0x1b	; 27
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	f8 94       	cli
    4d16:	de bf       	out	0x3e, r29	; 62
    4d18:	0f be       	out	0x3f, r0	; 63
    4d1a:	cd bf       	out	0x3d, r28	; 61
    4d1c:	cf 91       	pop	r28
    4d1e:	df 91       	pop	r29
    4d20:	08 95       	ret

00004d22 <LCD_clear>:

void LCD_clear(void){
    4d22:	df 93       	push	r29
    4d24:	cf 93       	push	r28
    4d26:	cd b7       	in	r28, 0x3d	; 61
    4d28:	de b7       	in	r29, 0x3e	; 62
    4d2a:	6c 97       	sbiw	r28, 0x1c	; 28
    4d2c:	0f b6       	in	r0, 0x3f	; 63
    4d2e:	f8 94       	cli
    4d30:	de bf       	out	0x3e, r29	; 62
    4d32:	0f be       	out	0x3f, r0	; 63
    4d34:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_write_cmd_4bit>
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	a0 e0       	ldi	r26, 0x00	; 0
    4d42:	b0 e4       	ldi	r27, 0x40	; 64
    4d44:	89 8f       	std	Y+25, r24	; 0x19
    4d46:	9a 8f       	std	Y+26, r25	; 0x1a
    4d48:	ab 8f       	std	Y+27, r26	; 0x1b
    4d4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d4c:	69 8d       	ldd	r22, Y+25	; 0x19
    4d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	4a ef       	ldi	r20, 0xFA	; 250
    4d5a:	54 e4       	ldi	r21, 0x44	; 68
    4d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d60:	dc 01       	movw	r26, r24
    4d62:	cb 01       	movw	r24, r22
    4d64:	8d 8b       	std	Y+21, r24	; 0x15
    4d66:	9e 8b       	std	Y+22, r25	; 0x16
    4d68:	af 8b       	std	Y+23, r26	; 0x17
    4d6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    4d70:	8f 89       	ldd	r24, Y+23	; 0x17
    4d72:	98 8d       	ldd	r25, Y+24	; 0x18
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	40 e8       	ldi	r20, 0x80	; 128
    4d7a:	5f e3       	ldi	r21, 0x3F	; 63
    4d7c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d80:	88 23       	and	r24, r24
    4d82:	2c f4       	brge	.+10     	; 0x4d8e <LCD_clear+0x6c>
		__ticks = 1;
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	9c 8b       	std	Y+20, r25	; 0x14
    4d8a:	8b 8b       	std	Y+19, r24	; 0x13
    4d8c:	3f c0       	rjmp	.+126    	; 0x4e0c <LCD_clear+0xea>
	else if (__tmp > 65535)
    4d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d90:	7e 89       	ldd	r23, Y+22	; 0x16
    4d92:	8f 89       	ldd	r24, Y+23	; 0x17
    4d94:	98 8d       	ldd	r25, Y+24	; 0x18
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	3f ef       	ldi	r19, 0xFF	; 255
    4d9a:	4f e7       	ldi	r20, 0x7F	; 127
    4d9c:	57 e4       	ldi	r21, 0x47	; 71
    4d9e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4da2:	18 16       	cp	r1, r24
    4da4:	4c f5       	brge	.+82     	; 0x4df8 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da6:	69 8d       	ldd	r22, Y+25	; 0x19
    4da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dae:	20 e0       	ldi	r18, 0x00	; 0
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	40 e2       	ldi	r20, 0x20	; 32
    4db4:	51 e4       	ldi	r21, 0x41	; 65
    4db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dba:	dc 01       	movw	r26, r24
    4dbc:	cb 01       	movw	r24, r22
    4dbe:	bc 01       	movw	r22, r24
    4dc0:	cd 01       	movw	r24, r26
    4dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc6:	dc 01       	movw	r26, r24
    4dc8:	cb 01       	movw	r24, r22
    4dca:	9c 8b       	std	Y+20, r25	; 0x14
    4dcc:	8b 8b       	std	Y+19, r24	; 0x13
    4dce:	0f c0       	rjmp	.+30     	; 0x4dee <LCD_clear+0xcc>
    4dd0:	88 ec       	ldi	r24, 0xC8	; 200
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	9a 8b       	std	Y+18, r25	; 0x12
    4dd6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4dd8:	89 89       	ldd	r24, Y+17	; 0x11
    4dda:	9a 89       	ldd	r25, Y+18	; 0x12
    4ddc:	01 97       	sbiw	r24, 0x01	; 1
    4dde:	f1 f7       	brne	.-4      	; 0x4ddc <LCD_clear+0xba>
    4de0:	9a 8b       	std	Y+18, r25	; 0x12
    4de2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4de4:	8b 89       	ldd	r24, Y+19	; 0x13
    4de6:	9c 89       	ldd	r25, Y+20	; 0x14
    4de8:	01 97       	sbiw	r24, 0x01	; 1
    4dea:	9c 8b       	std	Y+20, r25	; 0x14
    4dec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dee:	8b 89       	ldd	r24, Y+19	; 0x13
    4df0:	9c 89       	ldd	r25, Y+20	; 0x14
    4df2:	00 97       	sbiw	r24, 0x00	; 0
    4df4:	69 f7       	brne	.-38     	; 0x4dd0 <LCD_clear+0xae>
    4df6:	14 c0       	rjmp	.+40     	; 0x4e20 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df8:	6d 89       	ldd	r22, Y+21	; 0x15
    4dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    4dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    4dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    4e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e04:	dc 01       	movw	r26, r24
    4e06:	cb 01       	movw	r24, r22
    4e08:	9c 8b       	std	Y+20, r25	; 0x14
    4e0a:	8b 8b       	std	Y+19, r24	; 0x13
    4e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e10:	98 8b       	std	Y+16, r25	; 0x10
    4e12:	8f 87       	std	Y+15, r24	; 0x0f
    4e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e16:	98 89       	ldd	r25, Y+16	; 0x10
    4e18:	01 97       	sbiw	r24, 0x01	; 1
    4e1a:	f1 f7       	brne	.-4      	; 0x4e18 <LCD_clear+0xf6>
    4e1c:	98 8b       	std	Y+16, r25	; 0x10
    4e1e:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    4e20:	82 e0       	ldi	r24, 0x02	; 2
    4e22:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_write_cmd_4bit>
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	a0 e0       	ldi	r26, 0x00	; 0
    4e2c:	b0 e4       	ldi	r27, 0x40	; 64
    4e2e:	8b 87       	std	Y+11, r24	; 0x0b
    4e30:	9c 87       	std	Y+12, r25	; 0x0c
    4e32:	ad 87       	std	Y+13, r26	; 0x0d
    4e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	4a ef       	ldi	r20, 0xFA	; 250
    4e44:	54 e4       	ldi	r21, 0x44	; 68
    4e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	cb 01       	movw	r24, r22
    4e4e:	8f 83       	std	Y+7, r24	; 0x07
    4e50:	98 87       	std	Y+8, r25	; 0x08
    4e52:	a9 87       	std	Y+9, r26	; 0x09
    4e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e56:	6f 81       	ldd	r22, Y+7	; 0x07
    4e58:	78 85       	ldd	r23, Y+8	; 0x08
    4e5a:	89 85       	ldd	r24, Y+9	; 0x09
    4e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	40 e8       	ldi	r20, 0x80	; 128
    4e64:	5f e3       	ldi	r21, 0x3F	; 63
    4e66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e6a:	88 23       	and	r24, r24
    4e6c:	2c f4       	brge	.+10     	; 0x4e78 <LCD_clear+0x156>
		__ticks = 1;
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	9e 83       	std	Y+6, r25	; 0x06
    4e74:	8d 83       	std	Y+5, r24	; 0x05
    4e76:	3f c0       	rjmp	.+126    	; 0x4ef6 <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    4e78:	6f 81       	ldd	r22, Y+7	; 0x07
    4e7a:	78 85       	ldd	r23, Y+8	; 0x08
    4e7c:	89 85       	ldd	r24, Y+9	; 0x09
    4e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	3f ef       	ldi	r19, 0xFF	; 255
    4e84:	4f e7       	ldi	r20, 0x7F	; 127
    4e86:	57 e4       	ldi	r21, 0x47	; 71
    4e88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e8c:	18 16       	cp	r1, r24
    4e8e:	4c f5       	brge	.+82     	; 0x4ee2 <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	40 e2       	ldi	r20, 0x20	; 32
    4e9e:	51 e4       	ldi	r21, 0x41	; 65
    4ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	bc 01       	movw	r22, r24
    4eaa:	cd 01       	movw	r24, r26
    4eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	9e 83       	std	Y+6, r25	; 0x06
    4eb6:	8d 83       	std	Y+5, r24	; 0x05
    4eb8:	0f c0       	rjmp	.+30     	; 0x4ed8 <LCD_clear+0x1b6>
    4eba:	88 ec       	ldi	r24, 0xC8	; 200
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	9c 83       	std	Y+4, r25	; 0x04
    4ec0:	8b 83       	std	Y+3, r24	; 0x03
    4ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	f1 f7       	brne	.-4      	; 0x4ec6 <LCD_clear+0x1a4>
    4eca:	9c 83       	std	Y+4, r25	; 0x04
    4ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ece:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	9e 83       	std	Y+6, r25	; 0x06
    4ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eda:	9e 81       	ldd	r25, Y+6	; 0x06
    4edc:	00 97       	sbiw	r24, 0x00	; 0
    4ede:	69 f7       	brne	.-38     	; 0x4eba <LCD_clear+0x198>
    4ee0:	14 c0       	rjmp	.+40     	; 0x4f0a <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ee4:	78 85       	ldd	r23, Y+8	; 0x08
    4ee6:	89 85       	ldd	r24, Y+9	; 0x09
    4ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	9e 83       	std	Y+6, r25	; 0x06
    4ef4:	8d 83       	std	Y+5, r24	; 0x05
    4ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    4efa:	9a 83       	std	Y+2, r25	; 0x02
    4efc:	89 83       	std	Y+1, r24	; 0x01
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	9a 81       	ldd	r25, Y+2	; 0x02
    4f02:	01 97       	sbiw	r24, 0x01	; 1
    4f04:	f1 f7       	brne	.-4      	; 0x4f02 <LCD_clear+0x1e0>
    4f06:	9a 83       	std	Y+2, r25	; 0x02
    4f08:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    4f0a:	6c 96       	adiw	r28, 0x1c	; 28
    4f0c:	0f b6       	in	r0, 0x3f	; 63
    4f0e:	f8 94       	cli
    4f10:	de bf       	out	0x3e, r29	; 62
    4f12:	0f be       	out	0x3f, r0	; 63
    4f14:	cd bf       	out	0x3d, r28	; 61
    4f16:	cf 91       	pop	r28
    4f18:	df 91       	pop	r29
    4f1a:	08 95       	ret

00004f1c <LCD_off>:

void LCD_off(void ){
    4f1c:	df 93       	push	r29
    4f1e:	cf 93       	push	r28
    4f20:	cd b7       	in	r28, 0x3d	; 61
    4f22:	de b7       	in	r29, 0x3e	; 62
    4f24:	2e 97       	sbiw	r28, 0x0e	; 14
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	f8 94       	cli
    4f2a:	de bf       	out	0x3e, r29	; 62
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    4f30:	88 e0       	ldi	r24, 0x08	; 8
    4f32:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_write_cmd_4bit>
    4f36:	80 e0       	ldi	r24, 0x00	; 0
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	a8 e4       	ldi	r26, 0x48	; 72
    4f3c:	b2 e4       	ldi	r27, 0x42	; 66
    4f3e:	8b 87       	std	Y+11, r24	; 0x0b
    4f40:	9c 87       	std	Y+12, r25	; 0x0c
    4f42:	ad 87       	std	Y+13, r26	; 0x0d
    4f44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f4e:	20 e0       	ldi	r18, 0x00	; 0
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	4a ef       	ldi	r20, 0xFA	; 250
    4f54:	54 e4       	ldi	r21, 0x44	; 68
    4f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	cb 01       	movw	r24, r22
    4f5e:	8f 83       	std	Y+7, r24	; 0x07
    4f60:	98 87       	std	Y+8, r25	; 0x08
    4f62:	a9 87       	std	Y+9, r26	; 0x09
    4f64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f66:	6f 81       	ldd	r22, Y+7	; 0x07
    4f68:	78 85       	ldd	r23, Y+8	; 0x08
    4f6a:	89 85       	ldd	r24, Y+9	; 0x09
    4f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f6e:	20 e0       	ldi	r18, 0x00	; 0
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	40 e8       	ldi	r20, 0x80	; 128
    4f74:	5f e3       	ldi	r21, 0x3F	; 63
    4f76:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f7a:	88 23       	and	r24, r24
    4f7c:	2c f4       	brge	.+10     	; 0x4f88 <LCD_off+0x6c>
		__ticks = 1;
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	9e 83       	std	Y+6, r25	; 0x06
    4f84:	8d 83       	std	Y+5, r24	; 0x05
    4f86:	3f c0       	rjmp	.+126    	; 0x5006 <LCD_off+0xea>
	else if (__tmp > 65535)
    4f88:	6f 81       	ldd	r22, Y+7	; 0x07
    4f8a:	78 85       	ldd	r23, Y+8	; 0x08
    4f8c:	89 85       	ldd	r24, Y+9	; 0x09
    4f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	3f ef       	ldi	r19, 0xFF	; 255
    4f94:	4f e7       	ldi	r20, 0x7F	; 127
    4f96:	57 e4       	ldi	r21, 0x47	; 71
    4f98:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4f9c:	18 16       	cp	r1, r24
    4f9e:	4c f5       	brge	.+82     	; 0x4ff2 <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fa8:	20 e0       	ldi	r18, 0x00	; 0
    4faa:	30 e0       	ldi	r19, 0x00	; 0
    4fac:	40 e2       	ldi	r20, 0x20	; 32
    4fae:	51 e4       	ldi	r21, 0x41	; 65
    4fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb4:	dc 01       	movw	r26, r24
    4fb6:	cb 01       	movw	r24, r22
    4fb8:	bc 01       	movw	r22, r24
    4fba:	cd 01       	movw	r24, r26
    4fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	9e 83       	std	Y+6, r25	; 0x06
    4fc6:	8d 83       	std	Y+5, r24	; 0x05
    4fc8:	0f c0       	rjmp	.+30     	; 0x4fe8 <LCD_off+0xcc>
    4fca:	88 ec       	ldi	r24, 0xC8	; 200
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	9c 83       	std	Y+4, r25	; 0x04
    4fd0:	8b 83       	std	Y+3, r24	; 0x03
    4fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd6:	01 97       	sbiw	r24, 0x01	; 1
    4fd8:	f1 f7       	brne	.-4      	; 0x4fd6 <LCD_off+0xba>
    4fda:	9c 83       	std	Y+4, r25	; 0x04
    4fdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fde:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe2:	01 97       	sbiw	r24, 0x01	; 1
    4fe4:	9e 83       	std	Y+6, r25	; 0x06
    4fe6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    4fea:	9e 81       	ldd	r25, Y+6	; 0x06
    4fec:	00 97       	sbiw	r24, 0x00	; 0
    4fee:	69 f7       	brne	.-38     	; 0x4fca <LCD_off+0xae>
    4ff0:	14 c0       	rjmp	.+40     	; 0x501a <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ff4:	78 85       	ldd	r23, Y+8	; 0x08
    4ff6:	89 85       	ldd	r24, Y+9	; 0x09
    4ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ffe:	dc 01       	movw	r26, r24
    5000:	cb 01       	movw	r24, r22
    5002:	9e 83       	std	Y+6, r25	; 0x06
    5004:	8d 83       	std	Y+5, r24	; 0x05
    5006:	8d 81       	ldd	r24, Y+5	; 0x05
    5008:	9e 81       	ldd	r25, Y+6	; 0x06
    500a:	9a 83       	std	Y+2, r25	; 0x02
    500c:	89 83       	std	Y+1, r24	; 0x01
    500e:	89 81       	ldd	r24, Y+1	; 0x01
    5010:	9a 81       	ldd	r25, Y+2	; 0x02
    5012:	01 97       	sbiw	r24, 0x01	; 1
    5014:	f1 f7       	brne	.-4      	; 0x5012 <LCD_off+0xf6>
    5016:	9a 83       	std	Y+2, r25	; 0x02
    5018:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    501a:	2e 96       	adiw	r28, 0x0e	; 14
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	cf 91       	pop	r28
    5028:	df 91       	pop	r29
    502a:	08 95       	ret

0000502c <LCD_on>:

void LCD_on(void ){
    502c:	df 93       	push	r29
    502e:	cf 93       	push	r28
    5030:	cd b7       	in	r28, 0x3d	; 61
    5032:	de b7       	in	r29, 0x3e	; 62
    5034:	68 97       	sbiw	r28, 0x18	; 24
    5036:	0f b6       	in	r0, 0x3f	; 63
    5038:	f8 94       	cli
    503a:	de bf       	out	0x3e, r29	; 62
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    5040:	8c e0       	ldi	r24, 0x0C	; 12
    5042:	0e 94 ee 12 	call	0x25dc	; 0x25dc <LCD_write_cmd_4bit>
    5046:	80 e0       	ldi	r24, 0x00	; 0
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	a8 e4       	ldi	r26, 0x48	; 72
    504c:	b2 e4       	ldi	r27, 0x42	; 66
    504e:	8d 8b       	std	Y+21, r24	; 0x15
    5050:	9e 8b       	std	Y+22, r25	; 0x16
    5052:	af 8b       	std	Y+23, r26	; 0x17
    5054:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5056:	6d 89       	ldd	r22, Y+21	; 0x15
    5058:	7e 89       	ldd	r23, Y+22	; 0x16
    505a:	8f 89       	ldd	r24, Y+23	; 0x17
    505c:	98 8d       	ldd	r25, Y+24	; 0x18
    505e:	2b ea       	ldi	r18, 0xAB	; 171
    5060:	3a ea       	ldi	r19, 0xAA	; 170
    5062:	4a e2       	ldi	r20, 0x2A	; 42
    5064:	50 e4       	ldi	r21, 0x40	; 64
    5066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    506a:	dc 01       	movw	r26, r24
    506c:	cb 01       	movw	r24, r22
    506e:	89 8b       	std	Y+17, r24	; 0x11
    5070:	9a 8b       	std	Y+18, r25	; 0x12
    5072:	ab 8b       	std	Y+19, r26	; 0x13
    5074:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5076:	69 89       	ldd	r22, Y+17	; 0x11
    5078:	7a 89       	ldd	r23, Y+18	; 0x12
    507a:	8b 89       	ldd	r24, Y+19	; 0x13
    507c:	9c 89       	ldd	r25, Y+20	; 0x14
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	40 e8       	ldi	r20, 0x80	; 128
    5084:	5f e3       	ldi	r21, 0x3F	; 63
    5086:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    508a:	88 23       	and	r24, r24
    508c:	1c f4       	brge	.+6      	; 0x5094 <LCD_on+0x68>
		__ticks = 1;
    508e:	81 e0       	ldi	r24, 0x01	; 1
    5090:	88 8b       	std	Y+16, r24	; 0x10
    5092:	91 c0       	rjmp	.+290    	; 0x51b6 <LCD_on+0x18a>
	else if (__tmp > 255)
    5094:	69 89       	ldd	r22, Y+17	; 0x11
    5096:	7a 89       	ldd	r23, Y+18	; 0x12
    5098:	8b 89       	ldd	r24, Y+19	; 0x13
    509a:	9c 89       	ldd	r25, Y+20	; 0x14
    509c:	20 e0       	ldi	r18, 0x00	; 0
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	4f e7       	ldi	r20, 0x7F	; 127
    50a2:	53 e4       	ldi	r21, 0x43	; 67
    50a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    50a8:	18 16       	cp	r1, r24
    50aa:	0c f0       	brlt	.+2      	; 0x50ae <LCD_on+0x82>
    50ac:	7b c0       	rjmp	.+246    	; 0x51a4 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    50ae:	6d 89       	ldd	r22, Y+21	; 0x15
    50b0:	7e 89       	ldd	r23, Y+22	; 0x16
    50b2:	8f 89       	ldd	r24, Y+23	; 0x17
    50b4:	98 8d       	ldd	r25, Y+24	; 0x18
    50b6:	20 e0       	ldi	r18, 0x00	; 0
    50b8:	30 e0       	ldi	r19, 0x00	; 0
    50ba:	4a e7       	ldi	r20, 0x7A	; 122
    50bc:	54 e4       	ldi	r21, 0x44	; 68
    50be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	8c 87       	std	Y+12, r24	; 0x0c
    50c8:	9d 87       	std	Y+13, r25	; 0x0d
    50ca:	ae 87       	std	Y+14, r26	; 0x0e
    50cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    50d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    50d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    50d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	4a ef       	ldi	r20, 0xFA	; 250
    50dc:	54 e4       	ldi	r21, 0x44	; 68
    50de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	88 87       	std	Y+8, r24	; 0x08
    50e8:	99 87       	std	Y+9, r25	; 0x09
    50ea:	aa 87       	std	Y+10, r26	; 0x0a
    50ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    50ee:	68 85       	ldd	r22, Y+8	; 0x08
    50f0:	79 85       	ldd	r23, Y+9	; 0x09
    50f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    50f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	40 e8       	ldi	r20, 0x80	; 128
    50fc:	5f e3       	ldi	r21, 0x3F	; 63
    50fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5102:	88 23       	and	r24, r24
    5104:	2c f4       	brge	.+10     	; 0x5110 <LCD_on+0xe4>
		__ticks = 1;
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	9f 83       	std	Y+7, r25	; 0x07
    510c:	8e 83       	std	Y+6, r24	; 0x06
    510e:	3f c0       	rjmp	.+126    	; 0x518e <LCD_on+0x162>
	else if (__tmp > 65535)
    5110:	68 85       	ldd	r22, Y+8	; 0x08
    5112:	79 85       	ldd	r23, Y+9	; 0x09
    5114:	8a 85       	ldd	r24, Y+10	; 0x0a
    5116:	9b 85       	ldd	r25, Y+11	; 0x0b
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	3f ef       	ldi	r19, 0xFF	; 255
    511c:	4f e7       	ldi	r20, 0x7F	; 127
    511e:	57 e4       	ldi	r21, 0x47	; 71
    5120:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5124:	18 16       	cp	r1, r24
    5126:	4c f5       	brge	.+82     	; 0x517a <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5128:	6c 85       	ldd	r22, Y+12	; 0x0c
    512a:	7d 85       	ldd	r23, Y+13	; 0x0d
    512c:	8e 85       	ldd	r24, Y+14	; 0x0e
    512e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5130:	20 e0       	ldi	r18, 0x00	; 0
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	40 e2       	ldi	r20, 0x20	; 32
    5136:	51 e4       	ldi	r21, 0x41	; 65
    5138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513c:	dc 01       	movw	r26, r24
    513e:	cb 01       	movw	r24, r22
    5140:	bc 01       	movw	r22, r24
    5142:	cd 01       	movw	r24, r26
    5144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5148:	dc 01       	movw	r26, r24
    514a:	cb 01       	movw	r24, r22
    514c:	9f 83       	std	Y+7, r25	; 0x07
    514e:	8e 83       	std	Y+6, r24	; 0x06
    5150:	0f c0       	rjmp	.+30     	; 0x5170 <LCD_on+0x144>
    5152:	88 ec       	ldi	r24, 0xC8	; 200
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	9d 83       	std	Y+5, r25	; 0x05
    5158:	8c 83       	std	Y+4, r24	; 0x04
    515a:	8c 81       	ldd	r24, Y+4	; 0x04
    515c:	9d 81       	ldd	r25, Y+5	; 0x05
    515e:	01 97       	sbiw	r24, 0x01	; 1
    5160:	f1 f7       	brne	.-4      	; 0x515e <LCD_on+0x132>
    5162:	9d 83       	std	Y+5, r25	; 0x05
    5164:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5166:	8e 81       	ldd	r24, Y+6	; 0x06
    5168:	9f 81       	ldd	r25, Y+7	; 0x07
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	9f 83       	std	Y+7, r25	; 0x07
    516e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5170:	8e 81       	ldd	r24, Y+6	; 0x06
    5172:	9f 81       	ldd	r25, Y+7	; 0x07
    5174:	00 97       	sbiw	r24, 0x00	; 0
    5176:	69 f7       	brne	.-38     	; 0x5152 <LCD_on+0x126>
    5178:	24 c0       	rjmp	.+72     	; 0x51c2 <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    517a:	68 85       	ldd	r22, Y+8	; 0x08
    517c:	79 85       	ldd	r23, Y+9	; 0x09
    517e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5180:	9b 85       	ldd	r25, Y+11	; 0x0b
    5182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5186:	dc 01       	movw	r26, r24
    5188:	cb 01       	movw	r24, r22
    518a:	9f 83       	std	Y+7, r25	; 0x07
    518c:	8e 83       	std	Y+6, r24	; 0x06
    518e:	8e 81       	ldd	r24, Y+6	; 0x06
    5190:	9f 81       	ldd	r25, Y+7	; 0x07
    5192:	9b 83       	std	Y+3, r25	; 0x03
    5194:	8a 83       	std	Y+2, r24	; 0x02
    5196:	8a 81       	ldd	r24, Y+2	; 0x02
    5198:	9b 81       	ldd	r25, Y+3	; 0x03
    519a:	01 97       	sbiw	r24, 0x01	; 1
    519c:	f1 f7       	brne	.-4      	; 0x519a <LCD_on+0x16e>
    519e:	9b 83       	std	Y+3, r25	; 0x03
    51a0:	8a 83       	std	Y+2, r24	; 0x02
    51a2:	0f c0       	rjmp	.+30     	; 0x51c2 <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    51a4:	69 89       	ldd	r22, Y+17	; 0x11
    51a6:	7a 89       	ldd	r23, Y+18	; 0x12
    51a8:	8b 89       	ldd	r24, Y+19	; 0x13
    51aa:	9c 89       	ldd	r25, Y+20	; 0x14
    51ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b0:	dc 01       	movw	r26, r24
    51b2:	cb 01       	movw	r24, r22
    51b4:	88 8b       	std	Y+16, r24	; 0x10
    51b6:	88 89       	ldd	r24, Y+16	; 0x10
    51b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	8a 95       	dec	r24
    51be:	f1 f7       	brne	.-4      	; 0x51bc <LCD_on+0x190>
    51c0:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    51c2:	68 96       	adiw	r28, 0x18	; 24
    51c4:	0f b6       	in	r0, 0x3f	; 63
    51c6:	f8 94       	cli
    51c8:	de bf       	out	0x3e, r29	; 62
    51ca:	0f be       	out	0x3f, r0	; 63
    51cc:	cd bf       	out	0x3d, r28	; 61
    51ce:	cf 91       	pop	r28
    51d0:	df 91       	pop	r29
    51d2:	08 95       	ret

000051d4 <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    51d4:	df 93       	push	r29
    51d6:	cf 93       	push	r28
    51d8:	00 d0       	rcall	.+0      	; 0x51da <LCD_create_char+0x6>
    51da:	0f 92       	push	r0
    51dc:	cd b7       	in	r28, 0x3d	; 61
    51de:	de b7       	in	r29, 0x3e	; 62
    51e0:	9a 83       	std	Y+2, r25	; 0x02
    51e2:	89 83       	std	Y+1, r24	; 0x01
    51e4:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    51e6:	0f 90       	pop	r0
    51e8:	0f 90       	pop	r0
    51ea:	0f 90       	pop	r0
    51ec:	cf 91       	pop	r28
    51ee:	df 91       	pop	r29
    51f0:	08 95       	ret

000051f2 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    51f2:	df 93       	push	r29
    51f4:	cf 93       	push	r28
    51f6:	cd b7       	in	r28, 0x3d	; 61
    51f8:	de b7       	in	r29, 0x3e	; 62
    51fa:	69 97       	sbiw	r28, 0x19	; 25
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	de bf       	out	0x3e, r29	; 62
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	cd bf       	out	0x3d, r28	; 61
    5206:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    5208:	89 8d       	ldd	r24, Y+25	; 0x19
    520a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <LCD_write_data_4bit>
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	a8 e4       	ldi	r26, 0x48	; 72
    5214:	b2 e4       	ldi	r27, 0x42	; 66
    5216:	8d 8b       	std	Y+21, r24	; 0x15
    5218:	9e 8b       	std	Y+22, r25	; 0x16
    521a:	af 8b       	std	Y+23, r26	; 0x17
    521c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    521e:	6d 89       	ldd	r22, Y+21	; 0x15
    5220:	7e 89       	ldd	r23, Y+22	; 0x16
    5222:	8f 89       	ldd	r24, Y+23	; 0x17
    5224:	98 8d       	ldd	r25, Y+24	; 0x18
    5226:	2b ea       	ldi	r18, 0xAB	; 171
    5228:	3a ea       	ldi	r19, 0xAA	; 170
    522a:	4a e2       	ldi	r20, 0x2A	; 42
    522c:	50 e4       	ldi	r21, 0x40	; 64
    522e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	89 8b       	std	Y+17, r24	; 0x11
    5238:	9a 8b       	std	Y+18, r25	; 0x12
    523a:	ab 8b       	std	Y+19, r26	; 0x13
    523c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    523e:	69 89       	ldd	r22, Y+17	; 0x11
    5240:	7a 89       	ldd	r23, Y+18	; 0x12
    5242:	8b 89       	ldd	r24, Y+19	; 0x13
    5244:	9c 89       	ldd	r25, Y+20	; 0x14
    5246:	20 e0       	ldi	r18, 0x00	; 0
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	40 e8       	ldi	r20, 0x80	; 128
    524c:	5f e3       	ldi	r21, 0x3F	; 63
    524e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5252:	88 23       	and	r24, r24
    5254:	1c f4       	brge	.+6      	; 0x525c <LCD_write_char+0x6a>
		__ticks = 1;
    5256:	81 e0       	ldi	r24, 0x01	; 1
    5258:	88 8b       	std	Y+16, r24	; 0x10
    525a:	91 c0       	rjmp	.+290    	; 0x537e <LCD_write_char+0x18c>
	else if (__tmp > 255)
    525c:	69 89       	ldd	r22, Y+17	; 0x11
    525e:	7a 89       	ldd	r23, Y+18	; 0x12
    5260:	8b 89       	ldd	r24, Y+19	; 0x13
    5262:	9c 89       	ldd	r25, Y+20	; 0x14
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	4f e7       	ldi	r20, 0x7F	; 127
    526a:	53 e4       	ldi	r21, 0x43	; 67
    526c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5270:	18 16       	cp	r1, r24
    5272:	0c f0       	brlt	.+2      	; 0x5276 <LCD_write_char+0x84>
    5274:	7b c0       	rjmp	.+246    	; 0x536c <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    5276:	6d 89       	ldd	r22, Y+21	; 0x15
    5278:	7e 89       	ldd	r23, Y+22	; 0x16
    527a:	8f 89       	ldd	r24, Y+23	; 0x17
    527c:	98 8d       	ldd	r25, Y+24	; 0x18
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	4a e7       	ldi	r20, 0x7A	; 122
    5284:	54 e4       	ldi	r21, 0x44	; 68
    5286:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    528a:	dc 01       	movw	r26, r24
    528c:	cb 01       	movw	r24, r22
    528e:	8c 87       	std	Y+12, r24	; 0x0c
    5290:	9d 87       	std	Y+13, r25	; 0x0d
    5292:	ae 87       	std	Y+14, r26	; 0x0e
    5294:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5296:	6c 85       	ldd	r22, Y+12	; 0x0c
    5298:	7d 85       	ldd	r23, Y+13	; 0x0d
    529a:	8e 85       	ldd	r24, Y+14	; 0x0e
    529c:	9f 85       	ldd	r25, Y+15	; 0x0f
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	4a ef       	ldi	r20, 0xFA	; 250
    52a4:	54 e4       	ldi	r21, 0x44	; 68
    52a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	88 87       	std	Y+8, r24	; 0x08
    52b0:	99 87       	std	Y+9, r25	; 0x09
    52b2:	aa 87       	std	Y+10, r26	; 0x0a
    52b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    52b6:	68 85       	ldd	r22, Y+8	; 0x08
    52b8:	79 85       	ldd	r23, Y+9	; 0x09
    52ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    52bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	40 e8       	ldi	r20, 0x80	; 128
    52c4:	5f e3       	ldi	r21, 0x3F	; 63
    52c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    52ca:	88 23       	and	r24, r24
    52cc:	2c f4       	brge	.+10     	; 0x52d8 <LCD_write_char+0xe6>
		__ticks = 1;
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	9f 83       	std	Y+7, r25	; 0x07
    52d4:	8e 83       	std	Y+6, r24	; 0x06
    52d6:	3f c0       	rjmp	.+126    	; 0x5356 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    52d8:	68 85       	ldd	r22, Y+8	; 0x08
    52da:	79 85       	ldd	r23, Y+9	; 0x09
    52dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    52de:	9b 85       	ldd	r25, Y+11	; 0x0b
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	3f ef       	ldi	r19, 0xFF	; 255
    52e4:	4f e7       	ldi	r20, 0x7F	; 127
    52e6:	57 e4       	ldi	r21, 0x47	; 71
    52e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    52ec:	18 16       	cp	r1, r24
    52ee:	4c f5       	brge	.+82     	; 0x5342 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    52f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    52f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    52f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	40 e2       	ldi	r20, 0x20	; 32
    52fe:	51 e4       	ldi	r21, 0x41	; 65
    5300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	bc 01       	movw	r22, r24
    530a:	cd 01       	movw	r24, r26
    530c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5310:	dc 01       	movw	r26, r24
    5312:	cb 01       	movw	r24, r22
    5314:	9f 83       	std	Y+7, r25	; 0x07
    5316:	8e 83       	std	Y+6, r24	; 0x06
    5318:	0f c0       	rjmp	.+30     	; 0x5338 <LCD_write_char+0x146>
    531a:	88 ec       	ldi	r24, 0xC8	; 200
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	9d 83       	std	Y+5, r25	; 0x05
    5320:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5322:	8c 81       	ldd	r24, Y+4	; 0x04
    5324:	9d 81       	ldd	r25, Y+5	; 0x05
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	f1 f7       	brne	.-4      	; 0x5326 <LCD_write_char+0x134>
    532a:	9d 83       	std	Y+5, r25	; 0x05
    532c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532e:	8e 81       	ldd	r24, Y+6	; 0x06
    5330:	9f 81       	ldd	r25, Y+7	; 0x07
    5332:	01 97       	sbiw	r24, 0x01	; 1
    5334:	9f 83       	std	Y+7, r25	; 0x07
    5336:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5338:	8e 81       	ldd	r24, Y+6	; 0x06
    533a:	9f 81       	ldd	r25, Y+7	; 0x07
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	69 f7       	brne	.-38     	; 0x531a <LCD_write_char+0x128>
    5340:	24 c0       	rjmp	.+72     	; 0x538a <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5342:	68 85       	ldd	r22, Y+8	; 0x08
    5344:	79 85       	ldd	r23, Y+9	; 0x09
    5346:	8a 85       	ldd	r24, Y+10	; 0x0a
    5348:	9b 85       	ldd	r25, Y+11	; 0x0b
    534a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534e:	dc 01       	movw	r26, r24
    5350:	cb 01       	movw	r24, r22
    5352:	9f 83       	std	Y+7, r25	; 0x07
    5354:	8e 83       	std	Y+6, r24	; 0x06
    5356:	8e 81       	ldd	r24, Y+6	; 0x06
    5358:	9f 81       	ldd	r25, Y+7	; 0x07
    535a:	9b 83       	std	Y+3, r25	; 0x03
    535c:	8a 83       	std	Y+2, r24	; 0x02
    535e:	8a 81       	ldd	r24, Y+2	; 0x02
    5360:	9b 81       	ldd	r25, Y+3	; 0x03
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	f1 f7       	brne	.-4      	; 0x5362 <LCD_write_char+0x170>
    5366:	9b 83       	std	Y+3, r25	; 0x03
    5368:	8a 83       	std	Y+2, r24	; 0x02
    536a:	0f c0       	rjmp	.+30     	; 0x538a <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    536c:	69 89       	ldd	r22, Y+17	; 0x11
    536e:	7a 89       	ldd	r23, Y+18	; 0x12
    5370:	8b 89       	ldd	r24, Y+19	; 0x13
    5372:	9c 89       	ldd	r25, Y+20	; 0x14
    5374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	88 8b       	std	Y+16, r24	; 0x10
    537e:	88 89       	ldd	r24, Y+16	; 0x10
    5380:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5382:	89 81       	ldd	r24, Y+1	; 0x01
    5384:	8a 95       	dec	r24
    5386:	f1 f7       	brne	.-4      	; 0x5384 <LCD_write_char+0x192>
    5388:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    538a:	69 96       	adiw	r28, 0x19	; 25
    538c:	0f b6       	in	r0, 0x3f	; 63
    538e:	f8 94       	cli
    5390:	de bf       	out	0x3e, r29	; 62
    5392:	0f be       	out	0x3f, r0	; 63
    5394:	cd bf       	out	0x3d, r28	; 61
    5396:	cf 91       	pop	r28
    5398:	df 91       	pop	r29
    539a:	08 95       	ret

0000539c <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    539c:	df 93       	push	r29
    539e:	cf 93       	push	r28
    53a0:	00 d0       	rcall	.+0      	; 0x53a2 <LCD_write_str+0x6>
    53a2:	0f 92       	push	r0
    53a4:	cd b7       	in	r28, 0x3d	; 61
    53a6:	de b7       	in	r29, 0x3e	; 62
    53a8:	9b 83       	std	Y+3, r25	; 0x03
    53aa:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    53ac:	19 82       	std	Y+1, r1	; 0x01
    53ae:	0e c0       	rjmp	.+28     	; 0x53cc <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    53b0:	89 81       	ldd	r24, Y+1	; 0x01
    53b2:	28 2f       	mov	r18, r24
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	8a 81       	ldd	r24, Y+2	; 0x02
    53b8:	9b 81       	ldd	r25, Y+3	; 0x03
    53ba:	fc 01       	movw	r30, r24
    53bc:	e2 0f       	add	r30, r18
    53be:	f3 1f       	adc	r31, r19
    53c0:	80 81       	ld	r24, Z
    53c2:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <LCD_write_char>
		// Increment the string index
		i++;
    53c6:	89 81       	ldd	r24, Y+1	; 0x01
    53c8:	8f 5f       	subi	r24, 0xFF	; 255
    53ca:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    53cc:	89 81       	ldd	r24, Y+1	; 0x01
    53ce:	28 2f       	mov	r18, r24
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	8a 81       	ldd	r24, Y+2	; 0x02
    53d4:	9b 81       	ldd	r25, Y+3	; 0x03
    53d6:	fc 01       	movw	r30, r24
    53d8:	e2 0f       	add	r30, r18
    53da:	f3 1f       	adc	r31, r19
    53dc:	80 81       	ld	r24, Z
    53de:	88 23       	and	r24, r24
    53e0:	39 f7       	brne	.-50     	; 0x53b0 <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    53e2:	0f 90       	pop	r0
    53e4:	0f 90       	pop	r0
    53e6:	0f 90       	pop	r0
    53e8:	cf 91       	pop	r28
    53ea:	df 91       	pop	r29
    53ec:	08 95       	ret

000053ee <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    53ee:	0f 93       	push	r16
    53f0:	1f 93       	push	r17
    53f2:	df 93       	push	r29
    53f4:	cf 93       	push	r28
    53f6:	cd b7       	in	r28, 0x3d	; 61
    53f8:	de b7       	in	r29, 0x3e	; 62
    53fa:	60 97       	sbiw	r28, 0x10	; 16
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	de bf       	out	0x3e, r29	; 62
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	6d 87       	std	Y+13, r22	; 0x0d
    5408:	7e 87       	std	Y+14, r23	; 0x0e
    540a:	8f 87       	std	Y+15, r24	; 0x0f
    540c:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    540e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5410:	9e 85       	ldd	r25, Y+14	; 0x0e
    5412:	af 85       	ldd	r26, Y+15	; 0x0f
    5414:	b8 89       	ldd	r27, Y+16	; 0x10
    5416:	00 97       	sbiw	r24, 0x00	; 0
    5418:	a1 05       	cpc	r26, r1
    541a:	b1 05       	cpc	r27, r1
    541c:	21 f4       	brne	.+8      	; 0x5426 <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    541e:	80 e3       	ldi	r24, 0x30	; 48
    5420:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <LCD_write_char>
    5424:	18 c0       	rjmp	.+48     	; 0x5456 <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    5426:	8d 85       	ldd	r24, Y+13	; 0x0d
    5428:	9e 85       	ldd	r25, Y+14	; 0x0e
    542a:	af 85       	ldd	r26, Y+15	; 0x0f
    542c:	b8 89       	ldd	r27, Y+16	; 0x10
    542e:	bb 23       	and	r27, r27
    5430:	94 f4       	brge	.+36     	; 0x5456 <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    5432:	8d e2       	ldi	r24, 0x2D	; 45
    5434:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    5438:	8d 85       	ldd	r24, Y+13	; 0x0d
    543a:	9e 85       	ldd	r25, Y+14	; 0x0e
    543c:	af 85       	ldd	r26, Y+15	; 0x0f
    543e:	b8 89       	ldd	r27, Y+16	; 0x10
    5440:	b0 95       	com	r27
    5442:	a0 95       	com	r26
    5444:	90 95       	com	r25
    5446:	81 95       	neg	r24
    5448:	9f 4f       	sbci	r25, 0xFF	; 255
    544a:	af 4f       	sbci	r26, 0xFF	; 255
    544c:	bf 4f       	sbci	r27, 0xFF	; 255
    544e:	8d 87       	std	Y+13, r24	; 0x0d
    5450:	9e 87       	std	Y+14, r25	; 0x0e
    5452:	af 87       	std	Y+15, r26	; 0x0f
    5454:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    5456:	1a 82       	std	Y+2, r1	; 0x02
    5458:	2d c0       	rjmp	.+90     	; 0x54b4 <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    545a:	8a 81       	ldd	r24, Y+2	; 0x02
    545c:	08 2f       	mov	r16, r24
    545e:	10 e0       	ldi	r17, 0x00	; 0
    5460:	8d 85       	ldd	r24, Y+13	; 0x0d
    5462:	9e 85       	ldd	r25, Y+14	; 0x0e
    5464:	af 85       	ldd	r26, Y+15	; 0x0f
    5466:	b8 89       	ldd	r27, Y+16	; 0x10
    5468:	2a e0       	ldi	r18, 0x0A	; 10
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	40 e0       	ldi	r20, 0x00	; 0
    546e:	50 e0       	ldi	r21, 0x00	; 0
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__divmodsi4>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	28 2f       	mov	r18, r24
    547e:	ce 01       	movw	r24, r28
    5480:	03 96       	adiw	r24, 0x03	; 3
    5482:	fc 01       	movw	r30, r24
    5484:	e0 0f       	add	r30, r16
    5486:	f1 1f       	adc	r31, r17
    5488:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    548a:	8d 85       	ldd	r24, Y+13	; 0x0d
    548c:	9e 85       	ldd	r25, Y+14	; 0x0e
    548e:	af 85       	ldd	r26, Y+15	; 0x0f
    5490:	b8 89       	ldd	r27, Y+16	; 0x10
    5492:	2a e0       	ldi	r18, 0x0A	; 10
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	40 e0       	ldi	r20, 0x00	; 0
    5498:	50 e0       	ldi	r21, 0x00	; 0
    549a:	bc 01       	movw	r22, r24
    549c:	cd 01       	movw	r24, r26
    549e:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__divmodsi4>
    54a2:	da 01       	movw	r26, r20
    54a4:	c9 01       	movw	r24, r18
    54a6:	8d 87       	std	Y+13, r24	; 0x0d
    54a8:	9e 87       	std	Y+14, r25	; 0x0e
    54aa:	af 87       	std	Y+15, r26	; 0x0f
    54ac:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    54ae:	8a 81       	ldd	r24, Y+2	; 0x02
    54b0:	8f 5f       	subi	r24, 0xFF	; 255
    54b2:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    54b4:	8a 81       	ldd	r24, Y+2	; 0x02
    54b6:	8b 30       	cpi	r24, 0x0B	; 11
    54b8:	40 f4       	brcc	.+16     	; 0x54ca <LCD_write_s32_number+0xdc>
    54ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    54bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    54be:	af 85       	ldd	r26, Y+15	; 0x0f
    54c0:	b8 89       	ldd	r27, Y+16	; 0x10
    54c2:	00 97       	sbiw	r24, 0x00	; 0
    54c4:	a1 05       	cpc	r26, r1
    54c6:	b1 05       	cpc	r27, r1
    54c8:	41 f6       	brne	.-112    	; 0x545a <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	89 83       	std	Y+1, r24	; 0x01
    54ce:	14 c0       	rjmp	.+40     	; 0x54f8 <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    54d0:	8a 81       	ldd	r24, Y+2	; 0x02
    54d2:	28 2f       	mov	r18, r24
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	89 81       	ldd	r24, Y+1	; 0x01
    54d8:	88 2f       	mov	r24, r24
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	28 1b       	sub	r18, r24
    54de:	39 0b       	sbc	r19, r25
    54e0:	ce 01       	movw	r24, r28
    54e2:	03 96       	adiw	r24, 0x03	; 3
    54e4:	fc 01       	movw	r30, r24
    54e6:	e2 0f       	add	r30, r18
    54e8:	f3 1f       	adc	r31, r19
    54ea:	80 81       	ld	r24, Z
    54ec:	80 5d       	subi	r24, 0xD0	; 208
    54ee:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    54f2:	89 81       	ldd	r24, Y+1	; 0x01
    54f4:	8f 5f       	subi	r24, 0xFF	; 255
    54f6:	89 83       	std	Y+1, r24	; 0x01
    54f8:	89 81       	ldd	r24, Y+1	; 0x01
    54fa:	28 2f       	mov	r18, r24
    54fc:	30 e0       	ldi	r19, 0x00	; 0
    54fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5500:	88 2f       	mov	r24, r24
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	01 96       	adiw	r24, 0x01	; 1
    5506:	28 17       	cp	r18, r24
    5508:	39 07       	cpc	r19, r25
    550a:	14 f3       	brlt	.-60     	; 0x54d0 <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    550c:	60 96       	adiw	r28, 0x10	; 16
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	de bf       	out	0x3e, r29	; 62
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	cd bf       	out	0x3d, r28	; 61
    5518:	cf 91       	pop	r28
    551a:	df 91       	pop	r29
    551c:	1f 91       	pop	r17
    551e:	0f 91       	pop	r16
    5520:	08 95       	ret

00005522 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    5522:	ef 92       	push	r14
    5524:	ff 92       	push	r15
    5526:	0f 93       	push	r16
    5528:	1f 93       	push	r17
    552a:	df 93       	push	r29
    552c:	cf 93       	push	r28
    552e:	cd b7       	in	r28, 0x3d	; 61
    5530:	de b7       	in	r29, 0x3e	; 62
    5532:	2d 97       	sbiw	r28, 0x0d	; 13
    5534:	0f b6       	in	r0, 0x3f	; 63
    5536:	f8 94       	cli
    5538:	de bf       	out	0x3e, r29	; 62
    553a:	0f be       	out	0x3f, r0	; 63
    553c:	cd bf       	out	0x3d, r28	; 61
    553e:	69 87       	std	Y+9, r22	; 0x09
    5540:	7a 87       	std	Y+10, r23	; 0x0a
    5542:	8b 87       	std	Y+11, r24	; 0x0b
    5544:	9c 87       	std	Y+12, r25	; 0x0c
    5546:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    5548:	69 85       	ldd	r22, Y+9	; 0x09
    554a:	7a 85       	ldd	r23, Y+10	; 0x0a
    554c:	8b 85       	ldd	r24, Y+11	; 0x0b
    554e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5550:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    5554:	dc 01       	movw	r26, r24
    5556:	cb 01       	movw	r24, r22
    5558:	8d 83       	std	Y+5, r24	; 0x05
    555a:	9e 83       	std	Y+6, r25	; 0x06
    555c:	af 83       	std	Y+7, r26	; 0x07
    555e:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    5560:	6d 81       	ldd	r22, Y+5	; 0x05
    5562:	7e 81       	ldd	r23, Y+6	; 0x06
    5564:	8f 81       	ldd	r24, Y+7	; 0x07
    5566:	98 85       	ldd	r25, Y+8	; 0x08
    5568:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    556c:	9b 01       	movw	r18, r22
    556e:	ac 01       	movw	r20, r24
    5570:	69 85       	ldd	r22, Y+9	; 0x09
    5572:	7a 85       	ldd	r23, Y+10	; 0x0a
    5574:	8b 85       	ldd	r24, Y+11	; 0x0b
    5576:	9c 85       	ldd	r25, Y+12	; 0x0c
    5578:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    557c:	dc 01       	movw	r26, r24
    557e:	cb 01       	movw	r24, r22
    5580:	7c 01       	movw	r14, r24
    5582:	8d 01       	movw	r16, r26
    5584:	8a e0       	ldi	r24, 0x0A	; 10
    5586:	6d 85       	ldd	r22, Y+13	; 0x0d
    5588:	0e 94 23 09 	call	0x1246	; 0x1246 <LCD_pow>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	bc 01       	movw	r22, r24
    5592:	cd 01       	movw	r24, r26
    5594:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    5598:	9b 01       	movw	r18, r22
    559a:	ac 01       	movw	r20, r24
    559c:	c8 01       	movw	r24, r16
    559e:	b7 01       	movw	r22, r14
    55a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	bc 01       	movw	r22, r24
    55aa:	cd 01       	movw	r24, r26
    55ac:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    55b0:	dc 01       	movw	r26, r24
    55b2:	cb 01       	movw	r24, r22
    55b4:	89 83       	std	Y+1, r24	; 0x01
    55b6:	9a 83       	std	Y+2, r25	; 0x02
    55b8:	ab 83       	std	Y+3, r26	; 0x03
    55ba:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    55bc:	8d 81       	ldd	r24, Y+5	; 0x05
    55be:	9e 81       	ldd	r25, Y+6	; 0x06
    55c0:	af 81       	ldd	r26, Y+7	; 0x07
    55c2:	b8 85       	ldd	r27, Y+8	; 0x08
    55c4:	bc 01       	movw	r22, r24
    55c6:	cd 01       	movw	r24, r26
    55c8:	0e 94 f7 29 	call	0x53ee	; 0x53ee <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    55cc:	8e e2       	ldi	r24, 0x2E	; 46
    55ce:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    55d2:	89 81       	ldd	r24, Y+1	; 0x01
    55d4:	9a 81       	ldd	r25, Y+2	; 0x02
    55d6:	ab 81       	ldd	r26, Y+3	; 0x03
    55d8:	bc 81       	ldd	r27, Y+4	; 0x04
    55da:	8f 77       	andi	r24, 0x7F	; 127
    55dc:	bc 01       	movw	r22, r24
    55de:	cd 01       	movw	r24, r26
    55e0:	0e 94 f7 29 	call	0x53ee	; 0x53ee <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    55e4:	2d 96       	adiw	r28, 0x0d	; 13
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	f8 94       	cli
    55ea:	de bf       	out	0x3e, r29	; 62
    55ec:	0f be       	out	0x3f, r0	; 63
    55ee:	cd bf       	out	0x3d, r28	; 61
    55f0:	cf 91       	pop	r28
    55f2:	df 91       	pop	r29
    55f4:	1f 91       	pop	r17
    55f6:	0f 91       	pop	r16
    55f8:	ff 90       	pop	r15
    55fa:	ef 90       	pop	r14
    55fc:	08 95       	ret

000055fe <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    55fe:	df 93       	push	r29
    5600:	cf 93       	push	r28
    5602:	00 d0       	rcall	.+0      	; 0x5604 <DIO_void_set_port_dir+0x6>
    5604:	cd b7       	in	r28, 0x3d	; 61
    5606:	de b7       	in	r29, 0x3e	; 62
    5608:	89 83       	std	Y+1, r24	; 0x01
    560a:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	88 2f       	mov	r24, r24
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	88 0f       	add	r24, r24
    5614:	99 1f       	adc	r25, r25
    5616:	fc 01       	movw	r30, r24
    5618:	e5 57       	subi	r30, 0x75	; 117
    561a:	fe 4f       	sbci	r31, 0xFE	; 254
    561c:	01 90       	ld	r0, Z+
    561e:	f0 81       	ld	r31, Z
    5620:	e0 2d       	mov	r30, r0
    5622:	8a 81       	ldd	r24, Y+2	; 0x02
    5624:	80 83       	st	Z, r24
}
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	cf 91       	pop	r28
    562c:	df 91       	pop	r29
    562e:	08 95       	ret

00005630 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    5630:	df 93       	push	r29
    5632:	cf 93       	push	r28
    5634:	0f 92       	push	r0
    5636:	cd b7       	in	r28, 0x3d	; 61
    5638:	de b7       	in	r29, 0x3e	; 62
    563a:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	88 2f       	mov	r24, r24
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	88 0f       	add	r24, r24
    5644:	99 1f       	adc	r25, r25
    5646:	fc 01       	movw	r30, r24
    5648:	e5 57       	subi	r30, 0x75	; 117
    564a:	fe 4f       	sbci	r31, 0xFE	; 254
    564c:	01 90       	ld	r0, Z+
    564e:	f0 81       	ld	r31, Z
    5650:	e0 2d       	mov	r30, r0
    5652:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    5654:	89 81       	ldd	r24, Y+1	; 0x01
    5656:	88 2f       	mov	r24, r24
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	88 0f       	add	r24, r24
    565c:	99 1f       	adc	r25, r25
    565e:	fc 01       	movw	r30, r24
    5660:	ed 56       	subi	r30, 0x6D	; 109
    5662:	fe 4f       	sbci	r31, 0xFE	; 254
    5664:	01 90       	ld	r0, Z+
    5666:	f0 81       	ld	r31, Z
    5668:	e0 2d       	mov	r30, r0
    566a:	8f ef       	ldi	r24, 0xFF	; 255
    566c:	80 83       	st	Z, r24
}
    566e:	0f 90       	pop	r0
    5670:	cf 91       	pop	r28
    5672:	df 91       	pop	r29
    5674:	08 95       	ret

00005676 <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    5676:	df 93       	push	r29
    5678:	cf 93       	push	r28
    567a:	00 d0       	rcall	.+0      	; 0x567c <DIO_void_set_pin_dir+0x6>
    567c:	0f 92       	push	r0
    567e:	cd b7       	in	r28, 0x3d	; 61
    5680:	de b7       	in	r29, 0x3e	; 62
    5682:	89 83       	std	Y+1, r24	; 0x01
    5684:	6a 83       	std	Y+2, r22	; 0x02
    5686:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    5688:	8b 81       	ldd	r24, Y+3	; 0x03
    568a:	88 23       	and	r24, r24
    568c:	29 f1       	breq	.+74     	; 0x56d8 <DIO_void_set_pin_dir+0x62>
    568e:	89 81       	ldd	r24, Y+1	; 0x01
    5690:	88 2f       	mov	r24, r24
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	88 0f       	add	r24, r24
    5696:	99 1f       	adc	r25, r25
    5698:	fc 01       	movw	r30, r24
    569a:	e5 57       	subi	r30, 0x75	; 117
    569c:	fe 4f       	sbci	r31, 0xFE	; 254
    569e:	a0 81       	ld	r26, Z
    56a0:	b1 81       	ldd	r27, Z+1	; 0x01
    56a2:	89 81       	ldd	r24, Y+1	; 0x01
    56a4:	88 2f       	mov	r24, r24
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	88 0f       	add	r24, r24
    56aa:	99 1f       	adc	r25, r25
    56ac:	fc 01       	movw	r30, r24
    56ae:	e5 57       	subi	r30, 0x75	; 117
    56b0:	fe 4f       	sbci	r31, 0xFE	; 254
    56b2:	01 90       	ld	r0, Z+
    56b4:	f0 81       	ld	r31, Z
    56b6:	e0 2d       	mov	r30, r0
    56b8:	80 81       	ld	r24, Z
    56ba:	48 2f       	mov	r20, r24
    56bc:	8a 81       	ldd	r24, Y+2	; 0x02
    56be:	28 2f       	mov	r18, r24
    56c0:	30 e0       	ldi	r19, 0x00	; 0
    56c2:	81 e0       	ldi	r24, 0x01	; 1
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	02 2e       	mov	r0, r18
    56c8:	02 c0       	rjmp	.+4      	; 0x56ce <DIO_void_set_pin_dir+0x58>
    56ca:	88 0f       	add	r24, r24
    56cc:	99 1f       	adc	r25, r25
    56ce:	0a 94       	dec	r0
    56d0:	e2 f7       	brpl	.-8      	; 0x56ca <DIO_void_set_pin_dir+0x54>
    56d2:	84 2b       	or	r24, r20
    56d4:	8c 93       	st	X, r24
    56d6:	25 c0       	rjmp	.+74     	; 0x5722 <DIO_void_set_pin_dir+0xac>
    56d8:	89 81       	ldd	r24, Y+1	; 0x01
    56da:	88 2f       	mov	r24, r24
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	88 0f       	add	r24, r24
    56e0:	99 1f       	adc	r25, r25
    56e2:	fc 01       	movw	r30, r24
    56e4:	e5 57       	subi	r30, 0x75	; 117
    56e6:	fe 4f       	sbci	r31, 0xFE	; 254
    56e8:	a0 81       	ld	r26, Z
    56ea:	b1 81       	ldd	r27, Z+1	; 0x01
    56ec:	89 81       	ldd	r24, Y+1	; 0x01
    56ee:	88 2f       	mov	r24, r24
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	88 0f       	add	r24, r24
    56f4:	99 1f       	adc	r25, r25
    56f6:	fc 01       	movw	r30, r24
    56f8:	e5 57       	subi	r30, 0x75	; 117
    56fa:	fe 4f       	sbci	r31, 0xFE	; 254
    56fc:	01 90       	ld	r0, Z+
    56fe:	f0 81       	ld	r31, Z
    5700:	e0 2d       	mov	r30, r0
    5702:	80 81       	ld	r24, Z
    5704:	48 2f       	mov	r20, r24
    5706:	8a 81       	ldd	r24, Y+2	; 0x02
    5708:	28 2f       	mov	r18, r24
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	81 e0       	ldi	r24, 0x01	; 1
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	02 2e       	mov	r0, r18
    5712:	02 c0       	rjmp	.+4      	; 0x5718 <DIO_void_set_pin_dir+0xa2>
    5714:	88 0f       	add	r24, r24
    5716:	99 1f       	adc	r25, r25
    5718:	0a 94       	dec	r0
    571a:	e2 f7       	brpl	.-8      	; 0x5714 <DIO_void_set_pin_dir+0x9e>
    571c:	80 95       	com	r24
    571e:	84 23       	and	r24, r20
    5720:	8c 93       	st	X, r24
}
    5722:	0f 90       	pop	r0
    5724:	0f 90       	pop	r0
    5726:	0f 90       	pop	r0
    5728:	cf 91       	pop	r28
    572a:	df 91       	pop	r29
    572c:	08 95       	ret

0000572e <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    572e:	df 93       	push	r29
    5730:	cf 93       	push	r28
    5732:	00 d0       	rcall	.+0      	; 0x5734 <DIO_void_set_pin_in_pullUP+0x6>
    5734:	cd b7       	in	r28, 0x3d	; 61
    5736:	de b7       	in	r29, 0x3e	; 62
    5738:	89 83       	std	Y+1, r24	; 0x01
    573a:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    573c:	89 81       	ldd	r24, Y+1	; 0x01
    573e:	88 2f       	mov	r24, r24
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	88 0f       	add	r24, r24
    5744:	99 1f       	adc	r25, r25
    5746:	fc 01       	movw	r30, r24
    5748:	e5 57       	subi	r30, 0x75	; 117
    574a:	fe 4f       	sbci	r31, 0xFE	; 254
    574c:	a0 81       	ld	r26, Z
    574e:	b1 81       	ldd	r27, Z+1	; 0x01
    5750:	89 81       	ldd	r24, Y+1	; 0x01
    5752:	88 2f       	mov	r24, r24
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	88 0f       	add	r24, r24
    5758:	99 1f       	adc	r25, r25
    575a:	fc 01       	movw	r30, r24
    575c:	e5 57       	subi	r30, 0x75	; 117
    575e:	fe 4f       	sbci	r31, 0xFE	; 254
    5760:	01 90       	ld	r0, Z+
    5762:	f0 81       	ld	r31, Z
    5764:	e0 2d       	mov	r30, r0
    5766:	80 81       	ld	r24, Z
    5768:	48 2f       	mov	r20, r24
    576a:	8a 81       	ldd	r24, Y+2	; 0x02
    576c:	28 2f       	mov	r18, r24
    576e:	30 e0       	ldi	r19, 0x00	; 0
    5770:	81 e0       	ldi	r24, 0x01	; 1
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	02 c0       	rjmp	.+4      	; 0x577a <DIO_void_set_pin_in_pullUP+0x4c>
    5776:	88 0f       	add	r24, r24
    5778:	99 1f       	adc	r25, r25
    577a:	2a 95       	dec	r18
    577c:	e2 f7       	brpl	.-8      	; 0x5776 <DIO_void_set_pin_in_pullUP+0x48>
    577e:	80 95       	com	r24
    5780:	84 23       	and	r24, r20
    5782:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5784:	89 81       	ldd	r24, Y+1	; 0x01
    5786:	88 2f       	mov	r24, r24
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	88 0f       	add	r24, r24
    578c:	99 1f       	adc	r25, r25
    578e:	fc 01       	movw	r30, r24
    5790:	ed 56       	subi	r30, 0x6D	; 109
    5792:	fe 4f       	sbci	r31, 0xFE	; 254
    5794:	a0 81       	ld	r26, Z
    5796:	b1 81       	ldd	r27, Z+1	; 0x01
    5798:	89 81       	ldd	r24, Y+1	; 0x01
    579a:	88 2f       	mov	r24, r24
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	88 0f       	add	r24, r24
    57a0:	99 1f       	adc	r25, r25
    57a2:	fc 01       	movw	r30, r24
    57a4:	ed 56       	subi	r30, 0x6D	; 109
    57a6:	fe 4f       	sbci	r31, 0xFE	; 254
    57a8:	01 90       	ld	r0, Z+
    57aa:	f0 81       	ld	r31, Z
    57ac:	e0 2d       	mov	r30, r0
    57ae:	80 81       	ld	r24, Z
    57b0:	48 2f       	mov	r20, r24
    57b2:	8a 81       	ldd	r24, Y+2	; 0x02
    57b4:	28 2f       	mov	r18, r24
    57b6:	30 e0       	ldi	r19, 0x00	; 0
    57b8:	81 e0       	ldi	r24, 0x01	; 1
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	02 2e       	mov	r0, r18
    57be:	02 c0       	rjmp	.+4      	; 0x57c4 <DIO_void_set_pin_in_pullUP+0x96>
    57c0:	88 0f       	add	r24, r24
    57c2:	99 1f       	adc	r25, r25
    57c4:	0a 94       	dec	r0
    57c6:	e2 f7       	brpl	.-8      	; 0x57c0 <DIO_void_set_pin_in_pullUP+0x92>
    57c8:	84 2b       	or	r24, r20
    57ca:	8c 93       	st	X, r24
}
    57cc:	0f 90       	pop	r0
    57ce:	0f 90       	pop	r0
    57d0:	cf 91       	pop	r28
    57d2:	df 91       	pop	r29
    57d4:	08 95       	ret

000057d6 <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    57d6:	df 93       	push	r29
    57d8:	cf 93       	push	r28
    57da:	0f 92       	push	r0
    57dc:	cd b7       	in	r28, 0x3d	; 61
    57de:	de b7       	in	r29, 0x3e	; 62
    57e0:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	88 2f       	mov	r24, r24
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	88 0f       	add	r24, r24
    57ea:	99 1f       	adc	r25, r25
    57ec:	fc 01       	movw	r30, r24
    57ee:	ed 56       	subi	r30, 0x6D	; 109
    57f0:	fe 4f       	sbci	r31, 0xFE	; 254
    57f2:	01 90       	ld	r0, Z+
    57f4:	f0 81       	ld	r31, Z
    57f6:	e0 2d       	mov	r30, r0
    57f8:	8f ef       	ldi	r24, 0xFF	; 255
    57fa:	80 83       	st	Z, r24
}
    57fc:	0f 90       	pop	r0
    57fe:	cf 91       	pop	r28
    5800:	df 91       	pop	r29
    5802:	08 95       	ret

00005804 <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    5804:	df 93       	push	r29
    5806:	cf 93       	push	r28
    5808:	0f 92       	push	r0
    580a:	cd b7       	in	r28, 0x3d	; 61
    580c:	de b7       	in	r29, 0x3e	; 62
    580e:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    5810:	89 81       	ldd	r24, Y+1	; 0x01
    5812:	88 2f       	mov	r24, r24
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	88 0f       	add	r24, r24
    5818:	99 1f       	adc	r25, r25
    581a:	fc 01       	movw	r30, r24
    581c:	ed 56       	subi	r30, 0x6D	; 109
    581e:	fe 4f       	sbci	r31, 0xFE	; 254
    5820:	01 90       	ld	r0, Z+
    5822:	f0 81       	ld	r31, Z
    5824:	e0 2d       	mov	r30, r0
    5826:	10 82       	st	Z, r1
}
    5828:	0f 90       	pop	r0
    582a:	cf 91       	pop	r28
    582c:	df 91       	pop	r29
    582e:	08 95       	ret

00005830 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    5830:	df 93       	push	r29
    5832:	cf 93       	push	r28
    5834:	0f 92       	push	r0
    5836:	cd b7       	in	r28, 0x3d	; 61
    5838:	de b7       	in	r29, 0x3e	; 62
    583a:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    583c:	89 81       	ldd	r24, Y+1	; 0x01
    583e:	88 2f       	mov	r24, r24
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	88 0f       	add	r24, r24
    5844:	99 1f       	adc	r25, r25
    5846:	fc 01       	movw	r30, r24
    5848:	ed 56       	subi	r30, 0x6D	; 109
    584a:	fe 4f       	sbci	r31, 0xFE	; 254
    584c:	a0 81       	ld	r26, Z
    584e:	b1 81       	ldd	r27, Z+1	; 0x01
    5850:	89 81       	ldd	r24, Y+1	; 0x01
    5852:	88 2f       	mov	r24, r24
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	88 0f       	add	r24, r24
    5858:	99 1f       	adc	r25, r25
    585a:	fc 01       	movw	r30, r24
    585c:	ed 56       	subi	r30, 0x6D	; 109
    585e:	fe 4f       	sbci	r31, 0xFE	; 254
    5860:	01 90       	ld	r0, Z+
    5862:	f0 81       	ld	r31, Z
    5864:	e0 2d       	mov	r30, r0
    5866:	80 81       	ld	r24, Z
    5868:	80 95       	com	r24
    586a:	8c 93       	st	X, r24
}
    586c:	0f 90       	pop	r0
    586e:	cf 91       	pop	r28
    5870:	df 91       	pop	r29
    5872:	08 95       	ret

00005874 <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    5874:	df 93       	push	r29
    5876:	cf 93       	push	r28
    5878:	00 d0       	rcall	.+0      	; 0x587a <DIO_void_assign_port+0x6>
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
    587e:	89 83       	std	Y+1, r24	; 0x01
    5880:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    5882:	89 81       	ldd	r24, Y+1	; 0x01
    5884:	88 2f       	mov	r24, r24
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	88 0f       	add	r24, r24
    588a:	99 1f       	adc	r25, r25
    588c:	fc 01       	movw	r30, r24
    588e:	ed 56       	subi	r30, 0x6D	; 109
    5890:	fe 4f       	sbci	r31, 0xFE	; 254
    5892:	01 90       	ld	r0, Z+
    5894:	f0 81       	ld	r31, Z
    5896:	e0 2d       	mov	r30, r0
    5898:	8a 81       	ldd	r24, Y+2	; 0x02
    589a:	80 83       	st	Z, r24
}
    589c:	0f 90       	pop	r0
    589e:	0f 90       	pop	r0
    58a0:	cf 91       	pop	r28
    58a2:	df 91       	pop	r29
    58a4:	08 95       	ret

000058a6 <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    58a6:	df 93       	push	r29
    58a8:	cf 93       	push	r28
    58aa:	00 d0       	rcall	.+0      	; 0x58ac <DIO_void_set_pin+0x6>
    58ac:	cd b7       	in	r28, 0x3d	; 61
    58ae:	de b7       	in	r29, 0x3e	; 62
    58b0:	89 83       	std	Y+1, r24	; 0x01
    58b2:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    58b4:	89 81       	ldd	r24, Y+1	; 0x01
    58b6:	88 2f       	mov	r24, r24
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	88 0f       	add	r24, r24
    58bc:	99 1f       	adc	r25, r25
    58be:	fc 01       	movw	r30, r24
    58c0:	ed 56       	subi	r30, 0x6D	; 109
    58c2:	fe 4f       	sbci	r31, 0xFE	; 254
    58c4:	a0 81       	ld	r26, Z
    58c6:	b1 81       	ldd	r27, Z+1	; 0x01
    58c8:	89 81       	ldd	r24, Y+1	; 0x01
    58ca:	88 2f       	mov	r24, r24
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	88 0f       	add	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	fc 01       	movw	r30, r24
    58d4:	ed 56       	subi	r30, 0x6D	; 109
    58d6:	fe 4f       	sbci	r31, 0xFE	; 254
    58d8:	01 90       	ld	r0, Z+
    58da:	f0 81       	ld	r31, Z
    58dc:	e0 2d       	mov	r30, r0
    58de:	80 81       	ld	r24, Z
    58e0:	48 2f       	mov	r20, r24
    58e2:	8a 81       	ldd	r24, Y+2	; 0x02
    58e4:	28 2f       	mov	r18, r24
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	81 e0       	ldi	r24, 0x01	; 1
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	02 2e       	mov	r0, r18
    58ee:	02 c0       	rjmp	.+4      	; 0x58f4 <DIO_void_set_pin+0x4e>
    58f0:	88 0f       	add	r24, r24
    58f2:	99 1f       	adc	r25, r25
    58f4:	0a 94       	dec	r0
    58f6:	e2 f7       	brpl	.-8      	; 0x58f0 <DIO_void_set_pin+0x4a>
    58f8:	84 2b       	or	r24, r20
    58fa:	8c 93       	st	X, r24
}
    58fc:	0f 90       	pop	r0
    58fe:	0f 90       	pop	r0
    5900:	cf 91       	pop	r28
    5902:	df 91       	pop	r29
    5904:	08 95       	ret

00005906 <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5906:	df 93       	push	r29
    5908:	cf 93       	push	r28
    590a:	00 d0       	rcall	.+0      	; 0x590c <DIO_void_clear_pin+0x6>
    590c:	cd b7       	in	r28, 0x3d	; 61
    590e:	de b7       	in	r29, 0x3e	; 62
    5910:	89 83       	std	Y+1, r24	; 0x01
    5912:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5914:	89 81       	ldd	r24, Y+1	; 0x01
    5916:	88 2f       	mov	r24, r24
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	88 0f       	add	r24, r24
    591c:	99 1f       	adc	r25, r25
    591e:	fc 01       	movw	r30, r24
    5920:	ed 56       	subi	r30, 0x6D	; 109
    5922:	fe 4f       	sbci	r31, 0xFE	; 254
    5924:	a0 81       	ld	r26, Z
    5926:	b1 81       	ldd	r27, Z+1	; 0x01
    5928:	89 81       	ldd	r24, Y+1	; 0x01
    592a:	88 2f       	mov	r24, r24
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	88 0f       	add	r24, r24
    5930:	99 1f       	adc	r25, r25
    5932:	fc 01       	movw	r30, r24
    5934:	ed 56       	subi	r30, 0x6D	; 109
    5936:	fe 4f       	sbci	r31, 0xFE	; 254
    5938:	01 90       	ld	r0, Z+
    593a:	f0 81       	ld	r31, Z
    593c:	e0 2d       	mov	r30, r0
    593e:	80 81       	ld	r24, Z
    5940:	48 2f       	mov	r20, r24
    5942:	8a 81       	ldd	r24, Y+2	; 0x02
    5944:	28 2f       	mov	r18, r24
    5946:	30 e0       	ldi	r19, 0x00	; 0
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	02 2e       	mov	r0, r18
    594e:	02 c0       	rjmp	.+4      	; 0x5954 <DIO_void_clear_pin+0x4e>
    5950:	88 0f       	add	r24, r24
    5952:	99 1f       	adc	r25, r25
    5954:	0a 94       	dec	r0
    5956:	e2 f7       	brpl	.-8      	; 0x5950 <DIO_void_clear_pin+0x4a>
    5958:	80 95       	com	r24
    595a:	84 23       	and	r24, r20
    595c:	8c 93       	st	X, r24
}
    595e:	0f 90       	pop	r0
    5960:	0f 90       	pop	r0
    5962:	cf 91       	pop	r28
    5964:	df 91       	pop	r29
    5966:	08 95       	ret

00005968 <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5968:	df 93       	push	r29
    596a:	cf 93       	push	r28
    596c:	00 d0       	rcall	.+0      	; 0x596e <DIO_void_toggle_pin+0x6>
    596e:	cd b7       	in	r28, 0x3d	; 61
    5970:	de b7       	in	r29, 0x3e	; 62
    5972:	89 83       	std	Y+1, r24	; 0x01
    5974:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5976:	89 81       	ldd	r24, Y+1	; 0x01
    5978:	88 2f       	mov	r24, r24
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	88 0f       	add	r24, r24
    597e:	99 1f       	adc	r25, r25
    5980:	fc 01       	movw	r30, r24
    5982:	ed 56       	subi	r30, 0x6D	; 109
    5984:	fe 4f       	sbci	r31, 0xFE	; 254
    5986:	a0 81       	ld	r26, Z
    5988:	b1 81       	ldd	r27, Z+1	; 0x01
    598a:	89 81       	ldd	r24, Y+1	; 0x01
    598c:	88 2f       	mov	r24, r24
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	88 0f       	add	r24, r24
    5992:	99 1f       	adc	r25, r25
    5994:	fc 01       	movw	r30, r24
    5996:	ed 56       	subi	r30, 0x6D	; 109
    5998:	fe 4f       	sbci	r31, 0xFE	; 254
    599a:	01 90       	ld	r0, Z+
    599c:	f0 81       	ld	r31, Z
    599e:	e0 2d       	mov	r30, r0
    59a0:	80 81       	ld	r24, Z
    59a2:	48 2f       	mov	r20, r24
    59a4:	8a 81       	ldd	r24, Y+2	; 0x02
    59a6:	28 2f       	mov	r18, r24
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	02 2e       	mov	r0, r18
    59b0:	02 c0       	rjmp	.+4      	; 0x59b6 <DIO_void_toggle_pin+0x4e>
    59b2:	88 0f       	add	r24, r24
    59b4:	99 1f       	adc	r25, r25
    59b6:	0a 94       	dec	r0
    59b8:	e2 f7       	brpl	.-8      	; 0x59b2 <DIO_void_toggle_pin+0x4a>
    59ba:	84 27       	eor	r24, r20
    59bc:	8c 93       	st	X, r24
}
    59be:	0f 90       	pop	r0
    59c0:	0f 90       	pop	r0
    59c2:	cf 91       	pop	r28
    59c4:	df 91       	pop	r29
    59c6:	08 95       	ret

000059c8 <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    59c8:	df 93       	push	r29
    59ca:	cf 93       	push	r28
    59cc:	00 d0       	rcall	.+0      	; 0x59ce <DIO_void_assign_pin+0x6>
    59ce:	0f 92       	push	r0
    59d0:	cd b7       	in	r28, 0x3d	; 61
    59d2:	de b7       	in	r29, 0x3e	; 62
    59d4:	89 83       	std	Y+1, r24	; 0x01
    59d6:	6a 83       	std	Y+2, r22	; 0x02
    59d8:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    59da:	8b 81       	ldd	r24, Y+3	; 0x03
    59dc:	88 23       	and	r24, r24
    59de:	29 f1       	breq	.+74     	; 0x5a2a <DIO_void_assign_pin+0x62>
    59e0:	89 81       	ldd	r24, Y+1	; 0x01
    59e2:	88 2f       	mov	r24, r24
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	88 0f       	add	r24, r24
    59e8:	99 1f       	adc	r25, r25
    59ea:	fc 01       	movw	r30, r24
    59ec:	ed 56       	subi	r30, 0x6D	; 109
    59ee:	fe 4f       	sbci	r31, 0xFE	; 254
    59f0:	a0 81       	ld	r26, Z
    59f2:	b1 81       	ldd	r27, Z+1	; 0x01
    59f4:	89 81       	ldd	r24, Y+1	; 0x01
    59f6:	88 2f       	mov	r24, r24
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	88 0f       	add	r24, r24
    59fc:	99 1f       	adc	r25, r25
    59fe:	fc 01       	movw	r30, r24
    5a00:	ed 56       	subi	r30, 0x6D	; 109
    5a02:	fe 4f       	sbci	r31, 0xFE	; 254
    5a04:	01 90       	ld	r0, Z+
    5a06:	f0 81       	ld	r31, Z
    5a08:	e0 2d       	mov	r30, r0
    5a0a:	80 81       	ld	r24, Z
    5a0c:	48 2f       	mov	r20, r24
    5a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a10:	28 2f       	mov	r18, r24
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	81 e0       	ldi	r24, 0x01	; 1
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	02 2e       	mov	r0, r18
    5a1a:	02 c0       	rjmp	.+4      	; 0x5a20 <DIO_void_assign_pin+0x58>
    5a1c:	88 0f       	add	r24, r24
    5a1e:	99 1f       	adc	r25, r25
    5a20:	0a 94       	dec	r0
    5a22:	e2 f7       	brpl	.-8      	; 0x5a1c <DIO_void_assign_pin+0x54>
    5a24:	84 2b       	or	r24, r20
    5a26:	8c 93       	st	X, r24
    5a28:	25 c0       	rjmp	.+74     	; 0x5a74 <DIO_void_assign_pin+0xac>
    5a2a:	89 81       	ldd	r24, Y+1	; 0x01
    5a2c:	88 2f       	mov	r24, r24
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	88 0f       	add	r24, r24
    5a32:	99 1f       	adc	r25, r25
    5a34:	fc 01       	movw	r30, r24
    5a36:	ed 56       	subi	r30, 0x6D	; 109
    5a38:	fe 4f       	sbci	r31, 0xFE	; 254
    5a3a:	a0 81       	ld	r26, Z
    5a3c:	b1 81       	ldd	r27, Z+1	; 0x01
    5a3e:	89 81       	ldd	r24, Y+1	; 0x01
    5a40:	88 2f       	mov	r24, r24
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	88 0f       	add	r24, r24
    5a46:	99 1f       	adc	r25, r25
    5a48:	fc 01       	movw	r30, r24
    5a4a:	ed 56       	subi	r30, 0x6D	; 109
    5a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a4e:	01 90       	ld	r0, Z+
    5a50:	f0 81       	ld	r31, Z
    5a52:	e0 2d       	mov	r30, r0
    5a54:	80 81       	ld	r24, Z
    5a56:	48 2f       	mov	r20, r24
    5a58:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5a:	28 2f       	mov	r18, r24
    5a5c:	30 e0       	ldi	r19, 0x00	; 0
    5a5e:	81 e0       	ldi	r24, 0x01	; 1
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	02 2e       	mov	r0, r18
    5a64:	02 c0       	rjmp	.+4      	; 0x5a6a <DIO_void_assign_pin+0xa2>
    5a66:	88 0f       	add	r24, r24
    5a68:	99 1f       	adc	r25, r25
    5a6a:	0a 94       	dec	r0
    5a6c:	e2 f7       	brpl	.-8      	; 0x5a66 <DIO_void_assign_pin+0x9e>
    5a6e:	80 95       	com	r24
    5a70:	84 23       	and	r24, r20
    5a72:	8c 93       	st	X, r24
}
    5a74:	0f 90       	pop	r0
    5a76:	0f 90       	pop	r0
    5a78:	0f 90       	pop	r0
    5a7a:	cf 91       	pop	r28
    5a7c:	df 91       	pop	r29
    5a7e:	08 95       	ret

00005a80 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    5a80:	df 93       	push	r29
    5a82:	cf 93       	push	r28
    5a84:	0f 92       	push	r0
    5a86:	cd b7       	in	r28, 0x3d	; 61
    5a88:	de b7       	in	r29, 0x3e	; 62
    5a8a:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    5a8c:	89 81       	ldd	r24, Y+1	; 0x01
    5a8e:	88 2f       	mov	r24, r24
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	88 0f       	add	r24, r24
    5a94:	99 1f       	adc	r25, r25
    5a96:	fc 01       	movw	r30, r24
    5a98:	ed 57       	subi	r30, 0x7D	; 125
    5a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a9c:	01 90       	ld	r0, Z+
    5a9e:	f0 81       	ld	r31, Z
    5aa0:	e0 2d       	mov	r30, r0
    5aa2:	80 81       	ld	r24, Z
}
    5aa4:	0f 90       	pop	r0
    5aa6:	cf 91       	pop	r28
    5aa8:	df 91       	pop	r29
    5aaa:	08 95       	ret

00005aac <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5aac:	df 93       	push	r29
    5aae:	cf 93       	push	r28
    5ab0:	00 d0       	rcall	.+0      	; 0x5ab2 <DIO_u8_get_pin+0x6>
    5ab2:	cd b7       	in	r28, 0x3d	; 61
    5ab4:	de b7       	in	r29, 0x3e	; 62
    5ab6:	89 83       	std	Y+1, r24	; 0x01
    5ab8:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	88 2f       	mov	r24, r24
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	88 0f       	add	r24, r24
    5ac2:	99 1f       	adc	r25, r25
    5ac4:	fc 01       	movw	r30, r24
    5ac6:	ed 57       	subi	r30, 0x7D	; 125
    5ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    5aca:	01 90       	ld	r0, Z+
    5acc:	f0 81       	ld	r31, Z
    5ace:	e0 2d       	mov	r30, r0
    5ad0:	80 81       	ld	r24, Z
    5ad2:	28 2f       	mov	r18, r24
    5ad4:	30 e0       	ldi	r19, 0x00	; 0
    5ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad8:	88 2f       	mov	r24, r24
    5ada:	90 e0       	ldi	r25, 0x00	; 0
    5adc:	a9 01       	movw	r20, r18
    5ade:	02 c0       	rjmp	.+4      	; 0x5ae4 <DIO_u8_get_pin+0x38>
    5ae0:	55 95       	asr	r21
    5ae2:	47 95       	ror	r20
    5ae4:	8a 95       	dec	r24
    5ae6:	e2 f7       	brpl	.-8      	; 0x5ae0 <DIO_u8_get_pin+0x34>
    5ae8:	ca 01       	movw	r24, r20
    5aea:	81 70       	andi	r24, 0x01	; 1
}
    5aec:	0f 90       	pop	r0
    5aee:	0f 90       	pop	r0
    5af0:	cf 91       	pop	r28
    5af2:	df 91       	pop	r29
    5af4:	08 95       	ret

00005af6 <ADC_void_init>:

//Global variables
static void (*callback_functions_address)(u16 )= NULL;

/* Implementing of the driver functions */
void ADC_void_init(void ){
    5af6:	df 93       	push	r29
    5af8:	cf 93       	push	r28
    5afa:	cd b7       	in	r28, 0x3d	; 61
    5afc:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Assign the value of the left adjust bit
	agn_bit(ADC_ADMUX, ADC_ADLAR_pin, ADC_ADLAR);
    5afe:	a7 e2       	ldi	r26, 0x27	; 39
    5b00:	b0 e0       	ldi	r27, 0x00	; 0
    5b02:	e7 e2       	ldi	r30, 0x27	; 39
    5b04:	f0 e0       	ldi	r31, 0x00	; 0
    5b06:	80 81       	ld	r24, Z
    5b08:	8f 7d       	andi	r24, 0xDF	; 223
    5b0a:	8c 93       	st	X, r24

	// Assign the values of the reference selection regesters
	agn_bit(ADC_ADMUX, ADC_REFS0_pin, ADC_REFS0);
    5b0c:	a7 e2       	ldi	r26, 0x27	; 39
    5b0e:	b0 e0       	ldi	r27, 0x00	; 0
    5b10:	e7 e2       	ldi	r30, 0x27	; 39
    5b12:	f0 e0       	ldi	r31, 0x00	; 0
    5b14:	80 81       	ld	r24, Z
    5b16:	80 64       	ori	r24, 0x40	; 64
    5b18:	8c 93       	st	X, r24
	agn_bit(ADC_ADMUX, ADC_REFS1_pin, ADC_REFS1);
    5b1a:	a7 e2       	ldi	r26, 0x27	; 39
    5b1c:	b0 e0       	ldi	r27, 0x00	; 0
    5b1e:	e7 e2       	ldi	r30, 0x27	; 39
    5b20:	f0 e0       	ldi	r31, 0x00	; 0
    5b22:	80 81       	ld	r24, Z
    5b24:	8f 77       	andi	r24, 0x7F	; 127
    5b26:	8c 93       	st	X, r24

	// Assign the value of the enable bit
	agn_bit(ADC_ADCSRA, ADC_ADEN_pin, ADC_ADEN);
    5b28:	a6 e2       	ldi	r26, 0x26	; 38
    5b2a:	b0 e0       	ldi	r27, 0x00	; 0
    5b2c:	e6 e2       	ldi	r30, 0x26	; 38
    5b2e:	f0 e0       	ldi	r31, 0x00	; 0
    5b30:	80 81       	ld	r24, Z
    5b32:	80 68       	ori	r24, 0x80	; 128
    5b34:	8c 93       	st	X, r24
}
    5b36:	cf 91       	pop	r28
    5b38:	df 91       	pop	r29
    5b3a:	08 95       	ret

00005b3c <ADC_void_config>:


void ADC_void_config(ADC_config_struct* ptr_config){
    5b3c:	df 93       	push	r29
    5b3e:	cf 93       	push	r28
    5b40:	00 d0       	rcall	.+0      	; 0x5b42 <ADC_void_config+0x6>
    5b42:	cd b7       	in	r28, 0x3d	; 61
    5b44:	de b7       	in	r29, 0x3e	; 62
    5b46:	9a 83       	std	Y+2, r25	; 0x02
    5b48:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_config>> Pointer to ADC configurations Struct.
	 *	
	 *	Function does not return any values, Hence it needs to be called every time you need to reconfigure the ADC.
	 */
	// Configure the analog channel and gain selection bits
	ADC_ADMUX &= ADC_MUX_clear;
    5b4a:	a7 e2       	ldi	r26, 0x27	; 39
    5b4c:	b0 e0       	ldi	r27, 0x00	; 0
    5b4e:	e7 e2       	ldi	r30, 0x27	; 39
    5b50:	f0 e0       	ldi	r31, 0x00	; 0
    5b52:	80 81       	ld	r24, Z
    5b54:	80 7e       	andi	r24, 0xE0	; 224
    5b56:	8c 93       	st	X, r24
	ADC_ADMUX |= ptr_config -> MUX;
    5b58:	a7 e2       	ldi	r26, 0x27	; 39
    5b5a:	b0 e0       	ldi	r27, 0x00	; 0
    5b5c:	e7 e2       	ldi	r30, 0x27	; 39
    5b5e:	f0 e0       	ldi	r31, 0x00	; 0
    5b60:	90 81       	ld	r25, Z
    5b62:	e9 81       	ldd	r30, Y+1	; 0x01
    5b64:	fa 81       	ldd	r31, Y+2	; 0x02
    5b66:	80 81       	ld	r24, Z
    5b68:	8f 71       	andi	r24, 0x1F	; 31
    5b6a:	89 2b       	or	r24, r25
    5b6c:	8c 93       	st	X, r24

	// Configure the ADC prescaler select bits
	ADC_ADCSRA &= ADC_ADPS_clear;
    5b6e:	a6 e2       	ldi	r26, 0x26	; 38
    5b70:	b0 e0       	ldi	r27, 0x00	; 0
    5b72:	e6 e2       	ldi	r30, 0x26	; 38
    5b74:	f0 e0       	ldi	r31, 0x00	; 0
    5b76:	80 81       	ld	r24, Z
    5b78:	88 7f       	andi	r24, 0xF8	; 248
    5b7a:	8c 93       	st	X, r24
	ADC_ADCSRA |= ptr_config -> ADPS;
    5b7c:	a6 e2       	ldi	r26, 0x26	; 38
    5b7e:	b0 e0       	ldi	r27, 0x00	; 0
    5b80:	e6 e2       	ldi	r30, 0x26	; 38
    5b82:	f0 e0       	ldi	r31, 0x00	; 0
    5b84:	90 81       	ld	r25, Z
    5b86:	e9 81       	ldd	r30, Y+1	; 0x01
    5b88:	fa 81       	ldd	r31, Y+2	; 0x02
    5b8a:	80 81       	ld	r24, Z
    5b8c:	82 95       	swap	r24
    5b8e:	86 95       	lsr	r24
    5b90:	87 70       	andi	r24, 0x07	; 7
    5b92:	89 2b       	or	r24, r25
    5b94:	8c 93       	st	X, r24

	// Configure the ADC auto trigger source bits
	ADC_SFIOR &= ADC_ADTS_clear;
    5b96:	a0 e5       	ldi	r26, 0x50	; 80
    5b98:	b0 e0       	ldi	r27, 0x00	; 0
    5b9a:	e0 e5       	ldi	r30, 0x50	; 80
    5b9c:	f0 e0       	ldi	r31, 0x00	; 0
    5b9e:	80 81       	ld	r24, Z
    5ba0:	8f 71       	andi	r24, 0x1F	; 31
    5ba2:	8c 93       	st	X, r24
	ADC_SFIOR |= ptr_config -> ADTS;
    5ba4:	a0 e5       	ldi	r26, 0x50	; 80
    5ba6:	b0 e0       	ldi	r27, 0x00	; 0
    5ba8:	e0 e5       	ldi	r30, 0x50	; 80
    5baa:	f0 e0       	ldi	r31, 0x00	; 0
    5bac:	90 81       	ld	r25, Z
    5bae:	e9 81       	ldd	r30, Y+1	; 0x01
    5bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    5bb2:	81 81       	ldd	r24, Z+1	; 0x01
    5bb4:	86 95       	lsr	r24
    5bb6:	87 70       	andi	r24, 0x07	; 7
    5bb8:	89 2b       	or	r24, r25
    5bba:	8c 93       	st	X, r24

	// Configure the ADC auto trigger enable bit
	agn_bit(ADC_ADCSRA, ADC_ADATE_pin, ptr_config -> ADATE);
    5bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    5bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    5bc0:	81 81       	ldd	r24, Z+1	; 0x01
    5bc2:	81 70       	andi	r24, 0x01	; 1
    5bc4:	88 23       	and	r24, r24
    5bc6:	41 f0       	breq	.+16     	; 0x5bd8 <ADC_void_config+0x9c>
    5bc8:	a6 e2       	ldi	r26, 0x26	; 38
    5bca:	b0 e0       	ldi	r27, 0x00	; 0
    5bcc:	e6 e2       	ldi	r30, 0x26	; 38
    5bce:	f0 e0       	ldi	r31, 0x00	; 0
    5bd0:	80 81       	ld	r24, Z
    5bd2:	80 62       	ori	r24, 0x20	; 32
    5bd4:	8c 93       	st	X, r24
    5bd6:	07 c0       	rjmp	.+14     	; 0x5be6 <ADC_void_config+0xaa>
    5bd8:	a6 e2       	ldi	r26, 0x26	; 38
    5bda:	b0 e0       	ldi	r27, 0x00	; 0
    5bdc:	e6 e2       	ldi	r30, 0x26	; 38
    5bde:	f0 e0       	ldi	r31, 0x00	; 0
    5be0:	80 81       	ld	r24, Z
    5be2:	8f 7d       	andi	r24, 0xDF	; 223
    5be4:	8c 93       	st	X, r24

	// Configure the ADC interrupt enable bit
	agn_bit(ADC_ADCSRA, ADC_ADIE_pin, ptr_config -> ADIE);
    5be6:	e9 81       	ldd	r30, Y+1	; 0x01
    5be8:	fa 81       	ldd	r31, Y+2	; 0x02
    5bea:	81 81       	ldd	r24, Z+1	; 0x01
    5bec:	80 71       	andi	r24, 0x10	; 16
    5bee:	88 23       	and	r24, r24
    5bf0:	41 f0       	breq	.+16     	; 0x5c02 <ADC_void_config+0xc6>
    5bf2:	a6 e2       	ldi	r26, 0x26	; 38
    5bf4:	b0 e0       	ldi	r27, 0x00	; 0
    5bf6:	e6 e2       	ldi	r30, 0x26	; 38
    5bf8:	f0 e0       	ldi	r31, 0x00	; 0
    5bfa:	80 81       	ld	r24, Z
    5bfc:	88 60       	ori	r24, 0x08	; 8
    5bfe:	8c 93       	st	X, r24
    5c00:	07 c0       	rjmp	.+14     	; 0x5c10 <ADC_void_config+0xd4>
    5c02:	a6 e2       	ldi	r26, 0x26	; 38
    5c04:	b0 e0       	ldi	r27, 0x00	; 0
    5c06:	e6 e2       	ldi	r30, 0x26	; 38
    5c08:	f0 e0       	ldi	r31, 0x00	; 0
    5c0a:	80 81       	ld	r24, Z
    5c0c:	87 7f       	andi	r24, 0xF7	; 247
    5c0e:	8c 93       	st	X, r24

	// Configure the Global interupt bit
	agn_bit(ADC_SREG, ADC_Global_INT, ptr_config -> ADIE);
    5c10:	e9 81       	ldd	r30, Y+1	; 0x01
    5c12:	fa 81       	ldd	r31, Y+2	; 0x02
    5c14:	81 81       	ldd	r24, Z+1	; 0x01
    5c16:	80 71       	andi	r24, 0x10	; 16
    5c18:	88 23       	and	r24, r24
    5c1a:	41 f0       	breq	.+16     	; 0x5c2c <ADC_void_config+0xf0>
    5c1c:	af e5       	ldi	r26, 0x5F	; 95
    5c1e:	b0 e0       	ldi	r27, 0x00	; 0
    5c20:	ef e5       	ldi	r30, 0x5F	; 95
    5c22:	f0 e0       	ldi	r31, 0x00	; 0
    5c24:	80 81       	ld	r24, Z
    5c26:	80 68       	ori	r24, 0x80	; 128
    5c28:	8c 93       	st	X, r24
    5c2a:	07 c0       	rjmp	.+14     	; 0x5c3a <ADC_void_config+0xfe>
    5c2c:	af e5       	ldi	r26, 0x5F	; 95
    5c2e:	b0 e0       	ldi	r27, 0x00	; 0
    5c30:	ef e5       	ldi	r30, 0x5F	; 95
    5c32:	f0 e0       	ldi	r31, 0x00	; 0
    5c34:	80 81       	ld	r24, Z
    5c36:	8f 77       	andi	r24, 0x7F	; 127
    5c38:	8c 93       	st	X, r24
}
    5c3a:	0f 90       	pop	r0
    5c3c:	0f 90       	pop	r0
    5c3e:	cf 91       	pop	r28
    5c40:	df 91       	pop	r29
    5c42:	08 95       	ret

00005c44 <ADC_void_start_conv>:

void ADC_void_start_conv(void){
    5c44:	df 93       	push	r29
    5c46:	cf 93       	push	r28
    5c48:	cd b7       	in	r28, 0x3d	; 61
    5c4a:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    5c4c:	a6 e2       	ldi	r26, 0x26	; 38
    5c4e:	b0 e0       	ldi	r27, 0x00	; 0
    5c50:	e6 e2       	ldi	r30, 0x26	; 38
    5c52:	f0 e0       	ldi	r31, 0x00	; 0
    5c54:	80 81       	ld	r24, Z
    5c56:	80 64       	ori	r24, 0x40	; 64
    5c58:	8c 93       	st	X, r24
}
    5c5a:	cf 91       	pop	r28
    5c5c:	df 91       	pop	r29
    5c5e:	08 95       	ret

00005c60 <ADC_void_read_data>:

void ADC_void_read_data(u16* ptr_result){
    5c60:	df 93       	push	r29
    5c62:	cf 93       	push	r28
    5c64:	00 d0       	rcall	.+0      	; 0x5c66 <ADC_void_read_data+0x6>
    5c66:	cd b7       	in	r28, 0x3d	; 61
    5c68:	de b7       	in	r29, 0x3e	; 62
    5c6a:	9a 83       	std	Y+2, r25	; 0x02
    5c6c:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_result>> pointer to the ADC value container variable.
	 *	
	 *	Function does not retuen any data, Hence it needs to be called when a value update is needed.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    5c6e:	a6 e2       	ldi	r26, 0x26	; 38
    5c70:	b0 e0       	ldi	r27, 0x00	; 0
    5c72:	e6 e2       	ldi	r30, 0x26	; 38
    5c74:	f0 e0       	ldi	r31, 0x00	; 0
    5c76:	80 81       	ld	r24, Z
    5c78:	80 64       	ori	r24, 0x40	; 64
    5c7a:	8c 93       	st	X, r24

	// Polling on the ADC interrupt flag bit
	while(get_bit(ADC_ADCSRA, ADC_ADIF_pin) == 0);
    5c7c:	e6 e2       	ldi	r30, 0x26	; 38
    5c7e:	f0 e0       	ldi	r31, 0x00	; 0
    5c80:	80 81       	ld	r24, Z
    5c82:	82 95       	swap	r24
    5c84:	8f 70       	andi	r24, 0x0F	; 15
    5c86:	88 2f       	mov	r24, r24
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	81 70       	andi	r24, 0x01	; 1
    5c8c:	90 70       	andi	r25, 0x00	; 0
    5c8e:	00 97       	sbiw	r24, 0x00	; 0
    5c90:	a9 f3       	breq	.-22     	; 0x5c7c <ADC_void_read_data+0x1c>

	// Resit the ADC interrupt flag bit
	set_bit(ADC_ADCSRA, ADC_ADIF_pin);
    5c92:	a6 e2       	ldi	r26, 0x26	; 38
    5c94:	b0 e0       	ldi	r27, 0x00	; 0
    5c96:	e6 e2       	ldi	r30, 0x26	; 38
    5c98:	f0 e0       	ldi	r31, 0x00	; 0
    5c9a:	80 81       	ld	r24, Z
    5c9c:	80 61       	ori	r24, 0x10	; 16
    5c9e:	8c 93       	st	X, r24

	// Return the digital value
	*(ptr_result)= ADC_ADCD_16bit;
    5ca0:	e4 e2       	ldi	r30, 0x24	; 36
    5ca2:	f0 e0       	ldi	r31, 0x00	; 0
    5ca4:	80 81       	ld	r24, Z
    5ca6:	91 81       	ldd	r25, Z+1	; 0x01
    5ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    5caa:	fa 81       	ldd	r31, Y+2	; 0x02
    5cac:	91 83       	std	Z+1, r25	; 0x01
    5cae:	80 83       	st	Z, r24
}
    5cb0:	0f 90       	pop	r0
    5cb2:	0f 90       	pop	r0
    5cb4:	cf 91       	pop	r28
    5cb6:	df 91       	pop	r29
    5cb8:	08 95       	ret

00005cba <ADC_void_INIT_callback>:


void ADC_void_INIT_callback(void (*ptr_callback_function)(u16 ) ){
    5cba:	df 93       	push	r29
    5cbc:	cf 93       	push	r28
    5cbe:	00 d0       	rcall	.+0      	; 0x5cc0 <ADC_void_INIT_callback+0x6>
    5cc0:	cd b7       	in	r28, 0x3d	; 61
    5cc2:	de b7       	in	r29, 0x3e	; 62
    5cc4:	9a 83       	std	Y+2, r25	; 0x02
    5cc6:	89 83       	std	Y+1, r24	; 0x01
	 *	Inputs::
	 *		ptr_callback_function>> pointer to the callback function.
	 *
	 *	Function does not return any value and anly called when addressing the callback function.
	 */
	callback_functions_address= ptr_callback_function;
    5cc8:	89 81       	ldd	r24, Y+1	; 0x01
    5cca:	9a 81       	ldd	r25, Y+2	; 0x02
    5ccc:	90 93 a1 01 	sts	0x01A1, r25
    5cd0:	80 93 a0 01 	sts	0x01A0, r24
}
    5cd4:	0f 90       	pop	r0
    5cd6:	0f 90       	pop	r0
    5cd8:	cf 91       	pop	r28
    5cda:	df 91       	pop	r29
    5cdc:	08 95       	ret

00005cde <__vector_16>:

void __vector_16(void){
    5cde:	1f 92       	push	r1
    5ce0:	0f 92       	push	r0
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	0f 92       	push	r0
    5ce6:	11 24       	eor	r1, r1
    5ce8:	2f 93       	push	r18
    5cea:	3f 93       	push	r19
    5cec:	4f 93       	push	r20
    5cee:	5f 93       	push	r21
    5cf0:	6f 93       	push	r22
    5cf2:	7f 93       	push	r23
    5cf4:	8f 93       	push	r24
    5cf6:	9f 93       	push	r25
    5cf8:	af 93       	push	r26
    5cfa:	bf 93       	push	r27
    5cfc:	ef 93       	push	r30
    5cfe:	ff 93       	push	r31
    5d00:	df 93       	push	r29
    5d02:	cf 93       	push	r28
    5d04:	cd b7       	in	r28, 0x3d	; 61
    5d06:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	ADC flag ISR
	 */
	if(callback_functions_address != NULL){
    5d08:	80 91 a0 01 	lds	r24, 0x01A0
    5d0c:	90 91 a1 01 	lds	r25, 0x01A1
    5d10:	00 97       	sbiw	r24, 0x00	; 0
    5d12:	49 f0       	breq	.+18     	; 0x5d26 <__vector_16+0x48>
		callback_functions_address(ADC_ADCD_16bit);
    5d14:	e0 91 a0 01 	lds	r30, 0x01A0
    5d18:	f0 91 a1 01 	lds	r31, 0x01A1
    5d1c:	a4 e2       	ldi	r26, 0x24	; 36
    5d1e:	b0 e0       	ldi	r27, 0x00	; 0
    5d20:	8d 91       	ld	r24, X+
    5d22:	9c 91       	ld	r25, X
    5d24:	09 95       	icall
	}
}
    5d26:	cf 91       	pop	r28
    5d28:	df 91       	pop	r29
    5d2a:	ff 91       	pop	r31
    5d2c:	ef 91       	pop	r30
    5d2e:	bf 91       	pop	r27
    5d30:	af 91       	pop	r26
    5d32:	9f 91       	pop	r25
    5d34:	8f 91       	pop	r24
    5d36:	7f 91       	pop	r23
    5d38:	6f 91       	pop	r22
    5d3a:	5f 91       	pop	r21
    5d3c:	4f 91       	pop	r20
    5d3e:	3f 91       	pop	r19
    5d40:	2f 91       	pop	r18
    5d42:	0f 90       	pop	r0
    5d44:	0f be       	out	0x3f, r0	; 63
    5d46:	0f 90       	pop	r0
    5d48:	1f 90       	pop	r1
    5d4a:	18 95       	reti

00005d4c <__mulsi3>:
    5d4c:	62 9f       	mul	r22, r18
    5d4e:	d0 01       	movw	r26, r0
    5d50:	73 9f       	mul	r23, r19
    5d52:	f0 01       	movw	r30, r0
    5d54:	82 9f       	mul	r24, r18
    5d56:	e0 0d       	add	r30, r0
    5d58:	f1 1d       	adc	r31, r1
    5d5a:	64 9f       	mul	r22, r20
    5d5c:	e0 0d       	add	r30, r0
    5d5e:	f1 1d       	adc	r31, r1
    5d60:	92 9f       	mul	r25, r18
    5d62:	f0 0d       	add	r31, r0
    5d64:	83 9f       	mul	r24, r19
    5d66:	f0 0d       	add	r31, r0
    5d68:	74 9f       	mul	r23, r20
    5d6a:	f0 0d       	add	r31, r0
    5d6c:	65 9f       	mul	r22, r21
    5d6e:	f0 0d       	add	r31, r0
    5d70:	99 27       	eor	r25, r25
    5d72:	72 9f       	mul	r23, r18
    5d74:	b0 0d       	add	r27, r0
    5d76:	e1 1d       	adc	r30, r1
    5d78:	f9 1f       	adc	r31, r25
    5d7a:	63 9f       	mul	r22, r19
    5d7c:	b0 0d       	add	r27, r0
    5d7e:	e1 1d       	adc	r30, r1
    5d80:	f9 1f       	adc	r31, r25
    5d82:	bd 01       	movw	r22, r26
    5d84:	cf 01       	movw	r24, r30
    5d86:	11 24       	eor	r1, r1
    5d88:	08 95       	ret

00005d8a <__udivmodhi4>:
    5d8a:	aa 1b       	sub	r26, r26
    5d8c:	bb 1b       	sub	r27, r27
    5d8e:	51 e1       	ldi	r21, 0x11	; 17
    5d90:	07 c0       	rjmp	.+14     	; 0x5da0 <__udivmodhi4_ep>

00005d92 <__udivmodhi4_loop>:
    5d92:	aa 1f       	adc	r26, r26
    5d94:	bb 1f       	adc	r27, r27
    5d96:	a6 17       	cp	r26, r22
    5d98:	b7 07       	cpc	r27, r23
    5d9a:	10 f0       	brcs	.+4      	; 0x5da0 <__udivmodhi4_ep>
    5d9c:	a6 1b       	sub	r26, r22
    5d9e:	b7 0b       	sbc	r27, r23

00005da0 <__udivmodhi4_ep>:
    5da0:	88 1f       	adc	r24, r24
    5da2:	99 1f       	adc	r25, r25
    5da4:	5a 95       	dec	r21
    5da6:	a9 f7       	brne	.-22     	; 0x5d92 <__udivmodhi4_loop>
    5da8:	80 95       	com	r24
    5daa:	90 95       	com	r25
    5dac:	bc 01       	movw	r22, r24
    5dae:	cd 01       	movw	r24, r26
    5db0:	08 95       	ret

00005db2 <__divmodsi4>:
    5db2:	97 fb       	bst	r25, 7
    5db4:	09 2e       	mov	r0, r25
    5db6:	05 26       	eor	r0, r21
    5db8:	0e d0       	rcall	.+28     	; 0x5dd6 <__divmodsi4_neg1>
    5dba:	57 fd       	sbrc	r21, 7
    5dbc:	04 d0       	rcall	.+8      	; 0x5dc6 <__divmodsi4_neg2>
    5dbe:	14 d0       	rcall	.+40     	; 0x5de8 <__udivmodsi4>
    5dc0:	0a d0       	rcall	.+20     	; 0x5dd6 <__divmodsi4_neg1>
    5dc2:	00 1c       	adc	r0, r0
    5dc4:	38 f4       	brcc	.+14     	; 0x5dd4 <__divmodsi4_exit>

00005dc6 <__divmodsi4_neg2>:
    5dc6:	50 95       	com	r21
    5dc8:	40 95       	com	r20
    5dca:	30 95       	com	r19
    5dcc:	21 95       	neg	r18
    5dce:	3f 4f       	sbci	r19, 0xFF	; 255
    5dd0:	4f 4f       	sbci	r20, 0xFF	; 255
    5dd2:	5f 4f       	sbci	r21, 0xFF	; 255

00005dd4 <__divmodsi4_exit>:
    5dd4:	08 95       	ret

00005dd6 <__divmodsi4_neg1>:
    5dd6:	f6 f7       	brtc	.-4      	; 0x5dd4 <__divmodsi4_exit>
    5dd8:	90 95       	com	r25
    5dda:	80 95       	com	r24
    5ddc:	70 95       	com	r23
    5dde:	61 95       	neg	r22
    5de0:	7f 4f       	sbci	r23, 0xFF	; 255
    5de2:	8f 4f       	sbci	r24, 0xFF	; 255
    5de4:	9f 4f       	sbci	r25, 0xFF	; 255
    5de6:	08 95       	ret

00005de8 <__udivmodsi4>:
    5de8:	a1 e2       	ldi	r26, 0x21	; 33
    5dea:	1a 2e       	mov	r1, r26
    5dec:	aa 1b       	sub	r26, r26
    5dee:	bb 1b       	sub	r27, r27
    5df0:	fd 01       	movw	r30, r26
    5df2:	0d c0       	rjmp	.+26     	; 0x5e0e <__udivmodsi4_ep>

00005df4 <__udivmodsi4_loop>:
    5df4:	aa 1f       	adc	r26, r26
    5df6:	bb 1f       	adc	r27, r27
    5df8:	ee 1f       	adc	r30, r30
    5dfa:	ff 1f       	adc	r31, r31
    5dfc:	a2 17       	cp	r26, r18
    5dfe:	b3 07       	cpc	r27, r19
    5e00:	e4 07       	cpc	r30, r20
    5e02:	f5 07       	cpc	r31, r21
    5e04:	20 f0       	brcs	.+8      	; 0x5e0e <__udivmodsi4_ep>
    5e06:	a2 1b       	sub	r26, r18
    5e08:	b3 0b       	sbc	r27, r19
    5e0a:	e4 0b       	sbc	r30, r20
    5e0c:	f5 0b       	sbc	r31, r21

00005e0e <__udivmodsi4_ep>:
    5e0e:	66 1f       	adc	r22, r22
    5e10:	77 1f       	adc	r23, r23
    5e12:	88 1f       	adc	r24, r24
    5e14:	99 1f       	adc	r25, r25
    5e16:	1a 94       	dec	r1
    5e18:	69 f7       	brne	.-38     	; 0x5df4 <__udivmodsi4_loop>
    5e1a:	60 95       	com	r22
    5e1c:	70 95       	com	r23
    5e1e:	80 95       	com	r24
    5e20:	90 95       	com	r25
    5e22:	9b 01       	movw	r18, r22
    5e24:	ac 01       	movw	r20, r24
    5e26:	bd 01       	movw	r22, r26
    5e28:	cf 01       	movw	r24, r30
    5e2a:	08 95       	ret

00005e2c <__prologue_saves__>:
    5e2c:	2f 92       	push	r2
    5e2e:	3f 92       	push	r3
    5e30:	4f 92       	push	r4
    5e32:	5f 92       	push	r5
    5e34:	6f 92       	push	r6
    5e36:	7f 92       	push	r7
    5e38:	8f 92       	push	r8
    5e3a:	9f 92       	push	r9
    5e3c:	af 92       	push	r10
    5e3e:	bf 92       	push	r11
    5e40:	cf 92       	push	r12
    5e42:	df 92       	push	r13
    5e44:	ef 92       	push	r14
    5e46:	ff 92       	push	r15
    5e48:	0f 93       	push	r16
    5e4a:	1f 93       	push	r17
    5e4c:	cf 93       	push	r28
    5e4e:	df 93       	push	r29
    5e50:	cd b7       	in	r28, 0x3d	; 61
    5e52:	de b7       	in	r29, 0x3e	; 62
    5e54:	ca 1b       	sub	r28, r26
    5e56:	db 0b       	sbc	r29, r27
    5e58:	0f b6       	in	r0, 0x3f	; 63
    5e5a:	f8 94       	cli
    5e5c:	de bf       	out	0x3e, r29	; 62
    5e5e:	0f be       	out	0x3f, r0	; 63
    5e60:	cd bf       	out	0x3d, r28	; 61
    5e62:	09 94       	ijmp

00005e64 <__epilogue_restores__>:
    5e64:	2a 88       	ldd	r2, Y+18	; 0x12
    5e66:	39 88       	ldd	r3, Y+17	; 0x11
    5e68:	48 88       	ldd	r4, Y+16	; 0x10
    5e6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e70:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e72:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e74:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e76:	b9 84       	ldd	r11, Y+9	; 0x09
    5e78:	c8 84       	ldd	r12, Y+8	; 0x08
    5e7a:	df 80       	ldd	r13, Y+7	; 0x07
    5e7c:	ee 80       	ldd	r14, Y+6	; 0x06
    5e7e:	fd 80       	ldd	r15, Y+5	; 0x05
    5e80:	0c 81       	ldd	r16, Y+4	; 0x04
    5e82:	1b 81       	ldd	r17, Y+3	; 0x03
    5e84:	aa 81       	ldd	r26, Y+2	; 0x02
    5e86:	b9 81       	ldd	r27, Y+1	; 0x01
    5e88:	ce 0f       	add	r28, r30
    5e8a:	d1 1d       	adc	r29, r1
    5e8c:	0f b6       	in	r0, 0x3f	; 63
    5e8e:	f8 94       	cli
    5e90:	de bf       	out	0x3e, r29	; 62
    5e92:	0f be       	out	0x3f, r0	; 63
    5e94:	cd bf       	out	0x3d, r28	; 61
    5e96:	ed 01       	movw	r28, r26
    5e98:	08 95       	ret

00005e9a <_exit>:
    5e9a:	f8 94       	cli

00005e9c <__stop_program>:
    5e9c:	ff cf       	rjmp	.-2      	; 0x5e9c <__stop_program>
