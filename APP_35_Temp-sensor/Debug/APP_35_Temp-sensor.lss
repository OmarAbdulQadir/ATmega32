
APP_35_Temp-sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00005d52  00005de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080018c  0080018c  00005f12  2**0
                  ALLOC
  3 .stab         000042e4  00000000  00000000  00005f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015f4  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000b9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000e48f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000fab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00010e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  000113a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011dfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c9 2d 	jmp	0x5b92	; 0x5b92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 08 	call	0x104e	; 0x104e <main>
      8a:	0c 94 a7 2e 	jmp	0x5d4e	; 0x5d4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 2e 	jmp	0x5ce0	; 0x5ce0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 2e 	jmp	0x5d18	; 0x5d18 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 94 2e 	jmp	0x5d28	; 0x5d28 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 95 2e 	jmp	0x5d2a	; 0x5d2a <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 80 2e 	jmp	0x5d00	; 0x5d00 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 9c 2e 	jmp	0x5d38	; 0x5d38 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 78 2e 	jmp	0x5cf0	; 0x5cf0 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 94 2e 	jmp	0x5d28	; 0x5d28 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ef 58       	subi	r30, 0x8F	; 143
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <Temp_sensor_voidInit>:
ADC_config_struct A_DC_sensor_config = {Temp_ADC_def_ch, Temp_sensor_Prescaler, Temp_sensor_ADATE, Temp_sensor_ADTS, Temp_sensor_ADIE};


/* Implementing of the driver functions */
// Initiate the sensor through a given ADC channel
void Temp_sensor_voidInit(u8 copy_u8_ADC_ch){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if((copy_u8_ADC_ch <= Temp_ADC_max_ch)){
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	50 f4       	brcc	.+20     	; 0xf70 <Temp_sensor_voidInit+0x26>
		A_DC_sensor_config.MUX = copy_u8_ADC_ch;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 71       	andi	r24, 0x1F	; 31
     f60:	98 2f       	mov	r25, r24
     f62:	9f 71       	andi	r25, 0x1F	; 31
     f64:	80 91 71 01 	lds	r24, 0x0171
     f68:	80 7e       	andi	r24, 0xE0	; 224
     f6a:	89 2b       	or	r24, r25
     f6c:	80 93 71 01 	sts	0x0171, r24
	}
	else{

	}
	ADC_void_init();
     f70:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <ADC_void_init>
}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <Temp_sensor_voidClcTemp>:

// Calculate the current data and return it
f64 Temp_sensor_voidClcTemp(void ){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	29 97       	sbiw	r28, 0x09	; 9
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	/*
	 *
	 */
	u16 currentAccumulator = Temp_sensor_Val_flour;
     f90:	1f 82       	std	Y+7, r1	; 0x07
     f92:	1e 82       	std	Y+6, r1	; 0x06
	u16 current_ADC_data = Temp_sensor_Val_flour;
     f94:	19 86       	std	Y+9, r1	; 0x09
     f96:	18 86       	std	Y+8, r1	; 0x08
	ADC_void_config(&A_DC_sensor_config);
     f98:	81 e7       	ldi	r24, 0x71	; 113
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <ADC_void_config>
	for(u8 acc_counter= Temp_sensor_Val_flour; acc_counter < Temp_sensor_Acc; acc_counter++){
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <Temp_sensor_voidClcTemp+0x46>
		ADC_void_read_data(&current_ADC_data);
     fa4:	ce 01       	movw	r24, r28
     fa6:	08 96       	adiw	r24, 0x08	; 8
     fa8:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <ADC_void_read_data>
		currentAccumulator+= current_ADC_data;
     fac:	28 85       	ldd	r18, Y+8	; 0x08
     fae:	39 85       	ldd	r19, Y+9	; 0x09
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	9f 81       	ldd	r25, Y+7	; 0x07
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	9f 83       	std	Y+7, r25	; 0x07
     fba:	8e 83       	std	Y+6, r24	; 0x06
	 *
	 */
	u16 currentAccumulator = Temp_sensor_Val_flour;
	u16 current_ADC_data = Temp_sensor_Val_flour;
	ADC_void_config(&A_DC_sensor_config);
	for(u8 acc_counter= Temp_sensor_Val_flour; acc_counter < Temp_sensor_Acc; acc_counter++){
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	8a 30       	cpi	r24, 0x0A	; 10
     fc6:	70 f3       	brcs	.-36     	; 0xfa4 <Temp_sensor_voidClcTemp+0x28>
		ADC_void_read_data(&current_ADC_data);
		currentAccumulator+= current_ADC_data;
	}
	current_ADC_data = currentAccumulator/Temp_sensor_Acc;
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__udivmodhi4>
     fd6:	cb 01       	movw	r24, r22
     fd8:	99 87       	std	Y+9, r25	; 0x09
     fda:	88 87       	std	Y+8, r24	; 0x08
	f64 current_data = ((current_ADC_data*Temp_V_ref)/Temp_sensor_ADC_max)/Volt_temp_ref;
     fdc:	28 85       	ldd	r18, Y+8	; 0x08
     fde:	39 85       	ldd	r19, Y+9	; 0x09
     fe0:	c9 01       	movw	r24, r18
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	cc 01       	movw	r24, r24
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	9b 83       	std	Y+3, r25	; 0x03
    102c:	ac 83       	std	Y+4, r26	; 0x04
    102e:	bd 83       	std	Y+5, r27	; 0x05
	return current_data;
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	ac 81       	ldd	r26, Y+4	; 0x04
    1036:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	29 96       	adiw	r28, 0x09	; 9
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <main>:
// Macros section

// Global Variables section

// main function section
int main(void){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	28 97       	sbiw	r28, 0x08	; 8
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
	// Setup section

	LCD_init();
    1062:	0e 94 22 22 	call	0x4444	; 0x4444 <LCD_init>
	LCD_write_str((u8*)"Value = ");
    1066:	80 e6       	ldi	r24, 0x60	; 96
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 28 29 	call	0x5250	; 0x5250 <LCD_write_str>

	Temp_sensor_voidInit(0);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Temp_sensor_voidInit>
	f64 Temp = Temp_sensor_voidClcTemp();
    1074:	0e 94 be 07 	call	0xf7c	; 0xf7c <Temp_sensor_voidClcTemp>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	af 83       	std	Y+7, r26	; 0x07
    1082:	b8 87       	std	Y+8, r27	; 0x08
	LCD_write_float(Temp, 2);
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	af 81       	ldd	r26, Y+7	; 0x07
    108a:	b8 85       	ldd	r27, Y+8	; 0x08
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	42 e0       	ldi	r20, 0x02	; 2
    1092:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <LCD_write_float>
	f64 Temp_prev = 0;
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	ab 83       	std	Y+3, r26	; 0x03
    10a4:	bc 83       	std	Y+4, r27	; 0x04

	while(1){
		// Loop section

		if(Temp != Temp_prev){
    10a6:	6d 81       	ldd	r22, Y+5	; 0x05
    10a8:	7e 81       	ldd	r23, Y+6	; 0x06
    10aa:	8f 81       	ldd	r24, Y+7	; 0x07
    10ac:	98 85       	ldd	r25, Y+8	; 0x08
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	3a 81       	ldd	r19, Y+2	; 0x02
    10b2:	4b 81       	ldd	r20, Y+3	; 0x03
    10b4:	5c 81       	ldd	r21, Y+4	; 0x04
    10b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    10ba:	88 23       	and	r24, r24
    10bc:	a9 f0       	breq	.+42     	; 0x10e8 <main+0x9a>
			Temp_prev = Temp;
    10be:	8d 81       	ldd	r24, Y+5	; 0x05
    10c0:	9e 81       	ldd	r25, Y+6	; 0x06
    10c2:	af 81       	ldd	r26, Y+7	; 0x07
    10c4:	b8 85       	ldd	r27, Y+8	; 0x08
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	ab 83       	std	Y+3, r26	; 0x03
    10cc:	bc 83       	std	Y+4, r27	; 0x04
			LCD_set_cursor(0, 7);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	0e 94 04 25 	call	0x4a08	; 0x4a08 <LCD_set_cursor>
			LCD_write_float(Temp_prev, 2);
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	ab 81       	ldd	r26, Y+3	; 0x03
    10dc:	bc 81       	ldd	r27, Y+4	; 0x04
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	42 e0       	ldi	r20, 0x02	; 2
    10e4:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <LCD_write_float>
		}

		Temp = Temp_sensor_voidClcTemp();
    10e8:	0e 94 be 07 	call	0xf7c	; 0xf7c <Temp_sensor_voidClcTemp>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	8d 83       	std	Y+5, r24	; 0x05
    10f2:	9e 83       	std	Y+6, r25	; 0x06
    10f4:	af 83       	std	Y+7, r26	; 0x07
    10f6:	b8 87       	std	Y+8, r27	; 0x08
    10f8:	d6 cf       	rjmp	.-84     	; 0x10a6 <main+0x58>

000010fa <LCD_pow>:
#include "../../MCAL/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	27 97       	sbiw	r28, 0x07	; 7
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	8e 83       	std	Y+6, r24	; 0x06
    1110:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	8a 83       	std	Y+2, r24	; 0x02
    111e:	9b 83       	std	Y+3, r25	; 0x03
    1120:	ac 83       	std	Y+4, r26	; 0x04
    1122:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    1124:	19 82       	std	Y+1, r1	; 0x01
    1126:	16 c0       	rjmp	.+44     	; 0x1154 <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
    1128:	8e 81       	ldd	r24, Y+6	; 0x06
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	ac 81       	ldd	r26, Y+4	; 0x04
    1138:	bd 81       	ldd	r27, Y+5	; 0x05
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__mulsi3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	9b 83       	std	Y+3, r25	; 0x03
    114a:	ac 83       	std	Y+4, r26	; 0x04
    114c:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8f 81       	ldd	r24, Y+7	; 0x07
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	28 17       	cp	r18, r24
    1164:	39 07       	cpc	r19, r25
    1166:	04 f3       	brlt	.-64     	; 0x1128 <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	ac 81       	ldd	r26, Y+4	; 0x04
    116e:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	27 96       	adiw	r28, 0x07	; 7
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	e1 97       	sbiw	r28, 0x31	; 49
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	62 e0       	ldi	r22, 0x02	; 2
    11a0:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	61 e0       	ldi	r22, 0x01	; 1
    11a8:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a0 e8       	ldi	r26, 0x80	; 128
    11b2:	bf e3       	ldi	r27, 0x3F	; 63
    11b4:	8d a7       	std	Y+45, r24	; 0x2d
    11b6:	9e a7       	std	Y+46, r25	; 0x2e
    11b8:	af a7       	std	Y+47, r26	; 0x2f
    11ba:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    11be:	7e a5       	ldd	r23, Y+46	; 0x2e
    11c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c2:	98 a9       	ldd	r25, Y+48	; 0x30
    11c4:	2b ea       	ldi	r18, 0xAB	; 171
    11c6:	3a ea       	ldi	r19, 0xAA	; 170
    11c8:	4a e2       	ldi	r20, 0x2A	; 42
    11ca:	50 e4       	ldi	r21, 0x40	; 64
    11cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	89 a7       	std	Y+41, r24	; 0x29
    11d6:	9a a7       	std	Y+42, r25	; 0x2a
    11d8:	ab a7       	std	Y+43, r26	; 0x2b
    11da:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    11dc:	69 a5       	ldd	r22, Y+41	; 0x29
    11de:	7a a5       	ldd	r23, Y+42	; 0x2a
    11e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	1c f4       	brge	.+6      	; 0x11fa <LCD_write_data_8bit+0x74>
		__ticks = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	88 a7       	std	Y+40, r24	; 0x28
    11f8:	91 c0       	rjmp	.+290    	; 0x131c <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    11fa:	69 a5       	ldd	r22, Y+41	; 0x29
    11fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    11fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1200:	9c a5       	ldd	r25, Y+44	; 0x2c
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	53 e4       	ldi	r21, 0x43	; 67
    120a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	0c f0       	brlt	.+2      	; 0x1214 <LCD_write_data_8bit+0x8e>
    1212:	7b c0       	rjmp	.+246    	; 0x130a <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1214:	6d a5       	ldd	r22, Y+45	; 0x2d
    1216:	7e a5       	ldd	r23, Y+46	; 0x2e
    1218:	8f a5       	ldd	r24, Y+47	; 0x2f
    121a:	98 a9       	ldd	r25, Y+48	; 0x30
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	4a e7       	ldi	r20, 0x7A	; 122
    1222:	54 e4       	ldi	r21, 0x44	; 68
    1224:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	8c a3       	std	Y+36, r24	; 0x24
    122e:	9d a3       	std	Y+37, r25	; 0x25
    1230:	ae a3       	std	Y+38, r26	; 0x26
    1232:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	6c a1       	ldd	r22, Y+36	; 0x24
    1236:	7d a1       	ldd	r23, Y+37	; 0x25
    1238:	8e a1       	ldd	r24, Y+38	; 0x26
    123a:	9f a1       	ldd	r25, Y+39	; 0x27
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a ef       	ldi	r20, 0xFA	; 250
    1242:	54 e4       	ldi	r21, 0x44	; 68
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	88 a3       	std	Y+32, r24	; 0x20
    124e:	99 a3       	std	Y+33, r25	; 0x21
    1250:	aa a3       	std	Y+34, r26	; 0x22
    1252:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1254:	68 a1       	ldd	r22, Y+32	; 0x20
    1256:	79 a1       	ldd	r23, Y+33	; 0x21
    1258:	8a a1       	ldd	r24, Y+34	; 0x22
    125a:	9b a1       	ldd	r25, Y+35	; 0x23
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	2c f4       	brge	.+10     	; 0x1276 <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9f 8f       	std	Y+31, r25	; 0x1f
    1272:	8e 8f       	std	Y+30, r24	; 0x1e
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    1276:	68 a1       	ldd	r22, Y+32	; 0x20
    1278:	79 a1       	ldd	r23, Y+33	; 0x21
    127a:	8a a1       	ldd	r24, Y+34	; 0x22
    127c:	9b a1       	ldd	r25, Y+35	; 0x23
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	3f ef       	ldi	r19, 0xFF	; 255
    1282:	4f e7       	ldi	r20, 0x7F	; 127
    1284:	57 e4       	ldi	r21, 0x47	; 71
    1286:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	4c f5       	brge	.+82     	; 0x12e0 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	6c a1       	ldd	r22, Y+36	; 0x24
    1290:	7d a1       	ldd	r23, Y+37	; 0x25
    1292:	8e a1       	ldd	r24, Y+38	; 0x26
    1294:	9f a1       	ldd	r25, Y+39	; 0x27
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e2       	ldi	r20, 0x20	; 32
    129c:	51 e4       	ldi	r21, 0x41	; 65
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9f 8f       	std	Y+31, r25	; 0x1f
    12b4:	8e 8f       	std	Y+30, r24	; 0x1e
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <LCD_write_data_8bit+0x150>
    12b8:	88 ec       	ldi	r24, 0xC8	; 200
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9d 8f       	std	Y+29, r25	; 0x1d
    12be:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <LCD_write_data_8bit+0x13e>
    12c8:	9d 8f       	std	Y+29, r25	; 0x1d
    12ca:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9f 8f       	std	Y+31, r25	; 0x1f
    12d4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <LCD_write_data_8bit+0x132>
    12de:	24 c0       	rjmp	.+72     	; 0x1328 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e0:	68 a1       	ldd	r22, Y+32	; 0x20
    12e2:	79 a1       	ldd	r23, Y+33	; 0x21
    12e4:	8a a1       	ldd	r24, Y+34	; 0x22
    12e6:	9b a1       	ldd	r25, Y+35	; 0x23
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9f 8f       	std	Y+31, r25	; 0x1f
    12f2:	8e 8f       	std	Y+30, r24	; 0x1e
    12f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12f8:	9b 8f       	std	Y+27, r25	; 0x1b
    12fa:	8a 8f       	std	Y+26, r24	; 0x1a
    12fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <LCD_write_data_8bit+0x17a>
    1304:	9b 8f       	std	Y+27, r25	; 0x1b
    1306:	8a 8f       	std	Y+26, r24	; 0x1a
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    130a:	69 a5       	ldd	r22, Y+41	; 0x29
    130c:	7a a5       	ldd	r23, Y+42	; 0x2a
    130e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1310:	9c a5       	ldd	r25, Y+44	; 0x2c
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	88 a7       	std	Y+40, r24	; 0x28
    131c:	88 a5       	ldd	r24, Y+40	; 0x28
    131e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1320:	89 8d       	ldd	r24, Y+25	; 0x19
    1322:	8a 95       	dec	r24
    1324:	f1 f7       	brne	.-4      	; 0x1322 <LCD_write_data_8bit+0x19c>
    1326:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e8       	ldi	r26, 0x80	; 128
    1336:	bf e3       	ldi	r27, 0x3F	; 63
    1338:	8d 8b       	std	Y+21, r24	; 0x15
    133a:	9e 8b       	std	Y+22, r25	; 0x16
    133c:	af 8b       	std	Y+23, r26	; 0x17
    133e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1340:	6d 89       	ldd	r22, Y+21	; 0x15
    1342:	7e 89       	ldd	r23, Y+22	; 0x16
    1344:	8f 89       	ldd	r24, Y+23	; 0x17
    1346:	98 8d       	ldd	r25, Y+24	; 0x18
    1348:	2b ea       	ldi	r18, 0xAB	; 171
    134a:	3a ea       	ldi	r19, 0xAA	; 170
    134c:	4a e2       	ldi	r20, 0x2A	; 42
    134e:	50 e4       	ldi	r21, 0x40	; 64
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	89 8b       	std	Y+17, r24	; 0x11
    135a:	9a 8b       	std	Y+18, r25	; 0x12
    135c:	ab 8b       	std	Y+19, r26	; 0x13
    135e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1360:	69 89       	ldd	r22, Y+17	; 0x11
    1362:	7a 89       	ldd	r23, Y+18	; 0x12
    1364:	8b 89       	ldd	r24, Y+19	; 0x13
    1366:	9c 89       	ldd	r25, Y+20	; 0x14
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	1c f4       	brge	.+6      	; 0x137e <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	88 8b       	std	Y+16, r24	; 0x10
    137c:	91 c0       	rjmp	.+290    	; 0x14a0 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    137e:	69 89       	ldd	r22, Y+17	; 0x11
    1380:	7a 89       	ldd	r23, Y+18	; 0x12
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	9c 89       	ldd	r25, Y+20	; 0x14
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	53 e4       	ldi	r21, 0x43	; 67
    138e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	0c f0       	brlt	.+2      	; 0x1398 <LCD_write_data_8bit+0x212>
    1396:	7b c0       	rjmp	.+246    	; 0x148e <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1398:	6d 89       	ldd	r22, Y+21	; 0x15
    139a:	7e 89       	ldd	r23, Y+22	; 0x16
    139c:	8f 89       	ldd	r24, Y+23	; 0x17
    139e:	98 8d       	ldd	r25, Y+24	; 0x18
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	4a e7       	ldi	r20, 0x7A	; 122
    13a6:	54 e4       	ldi	r21, 0x44	; 68
    13a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	8c 87       	std	Y+12, r24	; 0x0c
    13b2:	9d 87       	std	Y+13, r25	; 0x0d
    13b4:	ae 87       	std	Y+14, r26	; 0x0e
    13b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    13ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    13bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13be:	9f 85       	ldd	r25, Y+15	; 0x0f
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a ef       	ldi	r20, 0xFA	; 250
    13c6:	54 e4       	ldi	r21, 0x44	; 68
    13c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	88 87       	std	Y+8, r24	; 0x08
    13d2:	99 87       	std	Y+9, r25	; 0x09
    13d4:	aa 87       	std	Y+10, r26	; 0x0a
    13d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    13d8:	68 85       	ldd	r22, Y+8	; 0x08
    13da:	79 85       	ldd	r23, Y+9	; 0x09
    13dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13de:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <LCD_write_data_8bit+0x274>
		__ticks = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9f 83       	std	Y+7, r25	; 0x07
    13f6:	8e 83       	std	Y+6, r24	; 0x06
    13f8:	3f c0       	rjmp	.+126    	; 0x1478 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    13fa:	68 85       	ldd	r22, Y+8	; 0x08
    13fc:	79 85       	ldd	r23, Y+9	; 0x09
    13fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1400:	9b 85       	ldd	r25, Y+11	; 0x0b
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	57 e4       	ldi	r21, 0x47	; 71
    140a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	4c f5       	brge	.+82     	; 0x1464 <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	6c 85       	ldd	r22, Y+12	; 0x0c
    1414:	7d 85       	ldd	r23, Y+13	; 0x0d
    1416:	8e 85       	ldd	r24, Y+14	; 0x0e
    1418:	9f 85       	ldd	r25, Y+15	; 0x0f
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e2       	ldi	r20, 0x20	; 32
    1420:	51 e4       	ldi	r21, 0x41	; 65
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9f 83       	std	Y+7, r25	; 0x07
    1438:	8e 83       	std	Y+6, r24	; 0x06
    143a:	0f c0       	rjmp	.+30     	; 0x145a <LCD_write_data_8bit+0x2d4>
    143c:	88 ec       	ldi	r24, 0xC8	; 200
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9d 83       	std	Y+5, r25	; 0x05
    1442:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	9d 81       	ldd	r25, Y+5	; 0x05
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <LCD_write_data_8bit+0x2c2>
    144c:	9d 83       	std	Y+5, r25	; 0x05
    144e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	8e 81       	ldd	r24, Y+6	; 0x06
    1452:	9f 81       	ldd	r25, Y+7	; 0x07
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9f 83       	std	Y+7, r25	; 0x07
    1458:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f7       	brne	.-38     	; 0x143c <LCD_write_data_8bit+0x2b6>
    1462:	24 c0       	rjmp	.+72     	; 0x14ac <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1464:	68 85       	ldd	r22, Y+8	; 0x08
    1466:	79 85       	ldd	r23, Y+9	; 0x09
    1468:	8a 85       	ldd	r24, Y+10	; 0x0a
    146a:	9b 85       	ldd	r25, Y+11	; 0x0b
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9f 83       	std	Y+7, r25	; 0x07
    1476:	8e 83       	std	Y+6, r24	; 0x06
    1478:	8e 81       	ldd	r24, Y+6	; 0x06
    147a:	9f 81       	ldd	r25, Y+7	; 0x07
    147c:	9b 83       	std	Y+3, r25	; 0x03
    147e:	8a 83       	std	Y+2, r24	; 0x02
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	9b 81       	ldd	r25, Y+3	; 0x03
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_write_data_8bit+0x2fe>
    1488:	9b 83       	std	Y+3, r25	; 0x03
    148a:	8a 83       	std	Y+2, r24	; 0x02
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    148e:	69 89       	ldd	r22, Y+17	; 0x11
    1490:	7a 89       	ldd	r23, Y+18	; 0x12
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	88 8b       	std	Y+16, r24	; 0x10
    14a0:	88 89       	ldd	r24, Y+16	; 0x10
    14a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	8a 95       	dec	r24
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <LCD_write_data_8bit+0x320>
    14aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	69 a9       	ldd	r22, Y+49	; 0x31
    14b0:	0e 94 94 2b 	call	0x5728	; 0x5728 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
}
    14bc:	e1 96       	adiw	r28, 0x31	; 49
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	e1 97       	sbiw	r28, 0x31	; 49
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	62 e0       	ldi	r22, 0x02	; 2
    14e8:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 e8       	ldi	r26, 0x80	; 128
    14fa:	bf e3       	ldi	r27, 0x3F	; 63
    14fc:	8d a7       	std	Y+45, r24	; 0x2d
    14fe:	9e a7       	std	Y+46, r25	; 0x2e
    1500:	af a7       	std	Y+47, r26	; 0x2f
    1502:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1504:	6d a5       	ldd	r22, Y+45	; 0x2d
    1506:	7e a5       	ldd	r23, Y+46	; 0x2e
    1508:	8f a5       	ldd	r24, Y+47	; 0x2f
    150a:	98 a9       	ldd	r25, Y+48	; 0x30
    150c:	2b ea       	ldi	r18, 0xAB	; 171
    150e:	3a ea       	ldi	r19, 0xAA	; 170
    1510:	4a e2       	ldi	r20, 0x2A	; 42
    1512:	50 e4       	ldi	r21, 0x40	; 64
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	89 a7       	std	Y+41, r24	; 0x29
    151e:	9a a7       	std	Y+42, r25	; 0x2a
    1520:	ab a7       	std	Y+43, r26	; 0x2b
    1522:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1524:	69 a5       	ldd	r22, Y+41	; 0x29
    1526:	7a a5       	ldd	r23, Y+42	; 0x2a
    1528:	8b a5       	ldd	r24, Y+43	; 0x2b
    152a:	9c a5       	ldd	r25, Y+44	; 0x2c
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	1c f4       	brge	.+6      	; 0x1542 <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	88 a7       	std	Y+40, r24	; 0x28
    1540:	91 c0       	rjmp	.+290    	; 0x1664 <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    1542:	69 a5       	ldd	r22, Y+41	; 0x29
    1544:	7a a5       	ldd	r23, Y+42	; 0x2a
    1546:	8b a5       	ldd	r24, Y+43	; 0x2b
    1548:	9c a5       	ldd	r25, Y+44	; 0x2c
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	53 e4       	ldi	r21, 0x43	; 67
    1552:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	0c f0       	brlt	.+2      	; 0x155c <LCD_write_cmd_8bit+0x8e>
    155a:	7b c0       	rjmp	.+246    	; 0x1652 <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    155c:	6d a5       	ldd	r22, Y+45	; 0x2d
    155e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1560:	8f a5       	ldd	r24, Y+47	; 0x2f
    1562:	98 a9       	ldd	r25, Y+48	; 0x30
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4a e7       	ldi	r20, 0x7A	; 122
    156a:	54 e4       	ldi	r21, 0x44	; 68
    156c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	8c a3       	std	Y+36, r24	; 0x24
    1576:	9d a3       	std	Y+37, r25	; 0x25
    1578:	ae a3       	std	Y+38, r26	; 0x26
    157a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157c:	6c a1       	ldd	r22, Y+36	; 0x24
    157e:	7d a1       	ldd	r23, Y+37	; 0x25
    1580:	8e a1       	ldd	r24, Y+38	; 0x26
    1582:	9f a1       	ldd	r25, Y+39	; 0x27
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4a ef       	ldi	r20, 0xFA	; 250
    158a:	54 e4       	ldi	r21, 0x44	; 68
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	88 a3       	std	Y+32, r24	; 0x20
    1596:	99 a3       	std	Y+33, r25	; 0x21
    1598:	aa a3       	std	Y+34, r26	; 0x22
    159a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    159c:	68 a1       	ldd	r22, Y+32	; 0x20
    159e:	79 a1       	ldd	r23, Y+33	; 0x21
    15a0:	8a a1       	ldd	r24, Y+34	; 0x22
    15a2:	9b a1       	ldd	r25, Y+35	; 0x23
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	5f e3       	ldi	r21, 0x3F	; 63
    15ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    15b0:	88 23       	and	r24, r24
    15b2:	2c f4       	brge	.+10     	; 0x15be <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	9f 8f       	std	Y+31, r25	; 0x1f
    15ba:	8e 8f       	std	Y+30, r24	; 0x1e
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    15be:	68 a1       	ldd	r22, Y+32	; 0x20
    15c0:	79 a1       	ldd	r23, Y+33	; 0x21
    15c2:	8a a1       	ldd	r24, Y+34	; 0x22
    15c4:	9b a1       	ldd	r25, Y+35	; 0x23
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	3f ef       	ldi	r19, 0xFF	; 255
    15ca:	4f e7       	ldi	r20, 0x7F	; 127
    15cc:	57 e4       	ldi	r21, 0x47	; 71
    15ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    15d2:	18 16       	cp	r1, r24
    15d4:	4c f5       	brge	.+82     	; 0x1628 <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d6:	6c a1       	ldd	r22, Y+36	; 0x24
    15d8:	7d a1       	ldd	r23, Y+37	; 0x25
    15da:	8e a1       	ldd	r24, Y+38	; 0x26
    15dc:	9f a1       	ldd	r25, Y+39	; 0x27
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9f 8f       	std	Y+31, r25	; 0x1f
    15fc:	8e 8f       	std	Y+30, r24	; 0x1e
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <LCD_write_cmd_8bit+0x150>
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9d 8f       	std	Y+29, r25	; 0x1d
    1606:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1608:	8c 8d       	ldd	r24, Y+28	; 0x1c
    160a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_write_cmd_8bit+0x13e>
    1610:	9d 8f       	std	Y+29, r25	; 0x1d
    1612:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1614:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1616:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	9f 8f       	std	Y+31, r25	; 0x1f
    161c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1620:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	69 f7       	brne	.-38     	; 0x1600 <LCD_write_cmd_8bit+0x132>
    1626:	24 c0       	rjmp	.+72     	; 0x1670 <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1628:	68 a1       	ldd	r22, Y+32	; 0x20
    162a:	79 a1       	ldd	r23, Y+33	; 0x21
    162c:	8a a1       	ldd	r24, Y+34	; 0x22
    162e:	9b a1       	ldd	r25, Y+35	; 0x23
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9f 8f       	std	Y+31, r25	; 0x1f
    163a:	8e 8f       	std	Y+30, r24	; 0x1e
    163c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    163e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1640:	9b 8f       	std	Y+27, r25	; 0x1b
    1642:	8a 8f       	std	Y+26, r24	; 0x1a
    1644:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1646:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <LCD_write_cmd_8bit+0x17a>
    164c:	9b 8f       	std	Y+27, r25	; 0x1b
    164e:	8a 8f       	std	Y+26, r24	; 0x1a
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1652:	69 a5       	ldd	r22, Y+41	; 0x29
    1654:	7a a5       	ldd	r23, Y+42	; 0x2a
    1656:	8b a5       	ldd	r24, Y+43	; 0x2b
    1658:	9c a5       	ldd	r25, Y+44	; 0x2c
    165a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	88 a7       	std	Y+40, r24	; 0x28
    1664:	88 a5       	ldd	r24, Y+40	; 0x28
    1666:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1668:	89 8d       	ldd	r24, Y+25	; 0x19
    166a:	8a 95       	dec	r24
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_write_cmd_8bit+0x19c>
    166e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e8       	ldi	r26, 0x80	; 128
    167e:	bf e3       	ldi	r27, 0x3F	; 63
    1680:	8d 8b       	std	Y+21, r24	; 0x15
    1682:	9e 8b       	std	Y+22, r25	; 0x16
    1684:	af 8b       	std	Y+23, r26	; 0x17
    1686:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1688:	6d 89       	ldd	r22, Y+21	; 0x15
    168a:	7e 89       	ldd	r23, Y+22	; 0x16
    168c:	8f 89       	ldd	r24, Y+23	; 0x17
    168e:	98 8d       	ldd	r25, Y+24	; 0x18
    1690:	2b ea       	ldi	r18, 0xAB	; 171
    1692:	3a ea       	ldi	r19, 0xAA	; 170
    1694:	4a e2       	ldi	r20, 0x2A	; 42
    1696:	50 e4       	ldi	r21, 0x40	; 64
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	89 8b       	std	Y+17, r24	; 0x11
    16a2:	9a 8b       	std	Y+18, r25	; 0x12
    16a4:	ab 8b       	std	Y+19, r26	; 0x13
    16a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16a8:	69 89       	ldd	r22, Y+17	; 0x11
    16aa:	7a 89       	ldd	r23, Y+18	; 0x12
    16ac:	8b 89       	ldd	r24, Y+19	; 0x13
    16ae:	9c 89       	ldd	r25, Y+20	; 0x14
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	1c f4       	brge	.+6      	; 0x16c6 <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	88 8b       	std	Y+16, r24	; 0x10
    16c4:	91 c0       	rjmp	.+290    	; 0x17e8 <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    16c6:	69 89       	ldd	r22, Y+17	; 0x11
    16c8:	7a 89       	ldd	r23, Y+18	; 0x12
    16ca:	8b 89       	ldd	r24, Y+19	; 0x13
    16cc:	9c 89       	ldd	r25, Y+20	; 0x14
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	53 e4       	ldi	r21, 0x43	; 67
    16d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <LCD_write_cmd_8bit+0x212>
    16de:	7b c0       	rjmp	.+246    	; 0x17d6 <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    16e0:	6d 89       	ldd	r22, Y+21	; 0x15
    16e2:	7e 89       	ldd	r23, Y+22	; 0x16
    16e4:	8f 89       	ldd	r24, Y+23	; 0x17
    16e6:	98 8d       	ldd	r25, Y+24	; 0x18
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a e7       	ldi	r20, 0x7A	; 122
    16ee:	54 e4       	ldi	r21, 0x44	; 68
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8c 87       	std	Y+12, r24	; 0x0c
    16fa:	9d 87       	std	Y+13, r25	; 0x0d
    16fc:	ae 87       	std	Y+14, r26	; 0x0e
    16fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	6c 85       	ldd	r22, Y+12	; 0x0c
    1702:	7d 85       	ldd	r23, Y+13	; 0x0d
    1704:	8e 85       	ldd	r24, Y+14	; 0x0e
    1706:	9f 85       	ldd	r25, Y+15	; 0x0f
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a ef       	ldi	r20, 0xFA	; 250
    170e:	54 e4       	ldi	r21, 0x44	; 68
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	88 87       	std	Y+8, r24	; 0x08
    171a:	99 87       	std	Y+9, r25	; 0x09
    171c:	aa 87       	std	Y+10, r26	; 0x0a
    171e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1720:	68 85       	ldd	r22, Y+8	; 0x08
    1722:	79 85       	ldd	r23, Y+9	; 0x09
    1724:	8a 85       	ldd	r24, Y+10	; 0x0a
    1726:	9b 85       	ldd	r25, Y+11	; 0x0b
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9f 83       	std	Y+7, r25	; 0x07
    173e:	8e 83       	std	Y+6, r24	; 0x06
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    1742:	68 85       	ldd	r22, Y+8	; 0x08
    1744:	79 85       	ldd	r23, Y+9	; 0x09
    1746:	8a 85       	ldd	r24, Y+10	; 0x0a
    1748:	9b 85       	ldd	r25, Y+11	; 0x0b
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	6c 85       	ldd	r22, Y+12	; 0x0c
    175c:	7d 85       	ldd	r23, Y+13	; 0x0d
    175e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1760:	9f 85       	ldd	r25, Y+15	; 0x0f
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9f 83       	std	Y+7, r25	; 0x07
    1780:	8e 83       	std	Y+6, r24	; 0x06
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <LCD_write_cmd_8bit+0x2d4>
    1784:	88 ec       	ldi	r24, 0xC8	; 200
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9d 83       	std	Y+5, r25	; 0x05
    178a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCD_write_cmd_8bit+0x2c2>
    1794:	9d 83       	std	Y+5, r25	; 0x05
    1796:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	9f 81       	ldd	r25, Y+7	; 0x07
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9f 83       	std	Y+7, r25	; 0x07
    17a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8e 81       	ldd	r24, Y+6	; 0x06
    17a4:	9f 81       	ldd	r25, Y+7	; 0x07
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <LCD_write_cmd_8bit+0x2b6>
    17aa:	24 c0       	rjmp	.+72     	; 0x17f4 <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	68 85       	ldd	r22, Y+8	; 0x08
    17ae:	79 85       	ldd	r23, Y+9	; 0x09
    17b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9f 83       	std	Y+7, r25	; 0x07
    17be:	8e 83       	std	Y+6, r24	; 0x06
    17c0:	8e 81       	ldd	r24, Y+6	; 0x06
    17c2:	9f 81       	ldd	r25, Y+7	; 0x07
    17c4:	9b 83       	std	Y+3, r25	; 0x03
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	9b 81       	ldd	r25, Y+3	; 0x03
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_write_cmd_8bit+0x2fe>
    17d0:	9b 83       	std	Y+3, r25	; 0x03
    17d2:	8a 83       	std	Y+2, r24	; 0x02
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17d6:	69 89       	ldd	r22, Y+17	; 0x11
    17d8:	7a 89       	ldd	r23, Y+18	; 0x12
    17da:	8b 89       	ldd	r24, Y+19	; 0x13
    17dc:	9c 89       	ldd	r25, Y+20	; 0x14
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	88 8b       	std	Y+16, r24	; 0x10
    17e8:	88 89       	ldd	r24, Y+16	; 0x10
    17ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	8a 95       	dec	r24
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_write_cmd_8bit+0x320>
    17f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	69 a9       	ldd	r22, Y+49	; 0x31
    17f8:	0e 94 94 2b 	call	0x5728	; 0x5728 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
}
    1804:	e1 96       	adiw	r28, 0x31	; 49
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	ef 97       	sbiw	r28, 0x3f	; 63
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <DIO_void_set_port_dir>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a8 e4       	ldi	r26, 0x48	; 72
    1838:	b2 e4       	ldi	r27, 0x42	; 66
    183a:	8b af       	std	Y+59, r24	; 0x3b
    183c:	9c af       	std	Y+60, r25	; 0x3c
    183e:	ad af       	std	Y+61, r26	; 0x3d
    1840:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b ad       	ldd	r22, Y+59	; 0x3b
    1844:	7c ad       	ldd	r23, Y+60	; 0x3c
    1846:	8d ad       	ldd	r24, Y+61	; 0x3d
    1848:	9e ad       	ldd	r25, Y+62	; 0x3e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a ef       	ldi	r20, 0xFA	; 250
    1850:	54 e4       	ldi	r21, 0x44	; 68
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f ab       	std	Y+55, r24	; 0x37
    185c:	98 af       	std	Y+56, r25	; 0x38
    185e:	a9 af       	std	Y+57, r26	; 0x39
    1860:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1862:	6f a9       	ldd	r22, Y+55	; 0x37
    1864:	78 ad       	ldd	r23, Y+56	; 0x38
    1866:	89 ad       	ldd	r24, Y+57	; 0x39
    1868:	9a ad       	ldd	r25, Y+58	; 0x3a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e ab       	std	Y+54, r25	; 0x36
    1880:	8d ab       	std	Y+53, r24	; 0x35
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    1884:	6f a9       	ldd	r22, Y+55	; 0x37
    1886:	78 ad       	ldd	r23, Y+56	; 0x38
    1888:	89 ad       	ldd	r24, Y+57	; 0x39
    188a:	9a ad       	ldd	r25, Y+58	; 0x3a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b ad       	ldd	r22, Y+59	; 0x3b
    189e:	7c ad       	ldd	r23, Y+60	; 0x3c
    18a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e ab       	std	Y+54, r25	; 0x36
    18c2:	8d ab       	std	Y+53, r24	; 0x35
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <LCD_read_address_8bit+0xce>
    18c6:	88 ec       	ldi	r24, 0xC8	; 200
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c ab       	std	Y+52, r25	; 0x34
    18cc:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ce:	8b a9       	ldd	r24, Y+51	; 0x33
    18d0:	9c a9       	ldd	r25, Y+52	; 0x34
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_read_address_8bit+0xbc>
    18d6:	9c ab       	std	Y+52, r25	; 0x34
    18d8:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d a9       	ldd	r24, Y+53	; 0x35
    18dc:	9e a9       	ldd	r25, Y+54	; 0x36
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e ab       	std	Y+54, r25	; 0x36
    18e2:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d a9       	ldd	r24, Y+53	; 0x35
    18e6:	9e a9       	ldd	r25, Y+54	; 0x36
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <LCD_read_address_8bit+0xb0>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f a9       	ldd	r22, Y+55	; 0x37
    18f0:	78 ad       	ldd	r23, Y+56	; 0x38
    18f2:	89 ad       	ldd	r24, Y+57	; 0x39
    18f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e ab       	std	Y+54, r25	; 0x36
    1900:	8d ab       	std	Y+53, r24	; 0x35
    1902:	8d a9       	ldd	r24, Y+53	; 0x35
    1904:	9e a9       	ldd	r25, Y+54	; 0x36
    1906:	9a ab       	std	Y+50, r25	; 0x32
    1908:	89 ab       	std	Y+49, r24	; 0x31
    190a:	89 a9       	ldd	r24, Y+49	; 0x31
    190c:	9a a9       	ldd	r25, Y+50	; 0x32
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_read_address_8bit+0xf8>
    1912:	9a ab       	std	Y+50, r25	; 0x32
    1914:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	62 e0       	ldi	r22, 0x02	; 2
    191a:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 e8       	ldi	r26, 0x80	; 128
    192c:	bf e3       	ldi	r27, 0x3F	; 63
    192e:	8d a7       	std	Y+45, r24	; 0x2d
    1930:	9e a7       	std	Y+46, r25	; 0x2e
    1932:	af a7       	std	Y+47, r26	; 0x2f
    1934:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1936:	6d a5       	ldd	r22, Y+45	; 0x2d
    1938:	7e a5       	ldd	r23, Y+46	; 0x2e
    193a:	8f a5       	ldd	r24, Y+47	; 0x2f
    193c:	98 a9       	ldd	r25, Y+48	; 0x30
    193e:	2b ea       	ldi	r18, 0xAB	; 171
    1940:	3a ea       	ldi	r19, 0xAA	; 170
    1942:	4a e2       	ldi	r20, 0x2A	; 42
    1944:	50 e4       	ldi	r21, 0x40	; 64
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	89 a7       	std	Y+41, r24	; 0x29
    1950:	9a a7       	std	Y+42, r25	; 0x2a
    1952:	ab a7       	std	Y+43, r26	; 0x2b
    1954:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1956:	69 a5       	ldd	r22, Y+41	; 0x29
    1958:	7a a5       	ldd	r23, Y+42	; 0x2a
    195a:	8b a5       	ldd	r24, Y+43	; 0x2b
    195c:	9c a5       	ldd	r25, Y+44	; 0x2c
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	1c f4       	brge	.+6      	; 0x1974 <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	88 a7       	std	Y+40, r24	; 0x28
    1972:	91 c0       	rjmp	.+290    	; 0x1a96 <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    1974:	69 a5       	ldd	r22, Y+41	; 0x29
    1976:	7a a5       	ldd	r23, Y+42	; 0x2a
    1978:	8b a5       	ldd	r24, Y+43	; 0x2b
    197a:	9c a5       	ldd	r25, Y+44	; 0x2c
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	53 e4       	ldi	r21, 0x43	; 67
    1984:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	0c f0       	brlt	.+2      	; 0x198e <LCD_read_address_8bit+0x178>
    198c:	7b c0       	rjmp	.+246    	; 0x1a84 <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    198e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1990:	7e a5       	ldd	r23, Y+46	; 0x2e
    1992:	8f a5       	ldd	r24, Y+47	; 0x2f
    1994:	98 a9       	ldd	r25, Y+48	; 0x30
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8c a3       	std	Y+36, r24	; 0x24
    19a8:	9d a3       	std	Y+37, r25	; 0x25
    19aa:	ae a3       	std	Y+38, r26	; 0x26
    19ac:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6c a1       	ldd	r22, Y+36	; 0x24
    19b0:	7d a1       	ldd	r23, Y+37	; 0x25
    19b2:	8e a1       	ldd	r24, Y+38	; 0x26
    19b4:	9f a1       	ldd	r25, Y+39	; 0x27
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	88 a3       	std	Y+32, r24	; 0x20
    19c8:	99 a3       	std	Y+33, r25	; 0x21
    19ca:	aa a3       	std	Y+34, r26	; 0x22
    19cc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    19ce:	68 a1       	ldd	r22, Y+32	; 0x20
    19d0:	79 a1       	ldd	r23, Y+33	; 0x21
    19d2:	8a a1       	ldd	r24, Y+34	; 0x22
    19d4:	9b a1       	ldd	r25, Y+35	; 0x23
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9f 8f       	std	Y+31, r25	; 0x1f
    19ec:	8e 8f       	std	Y+30, r24	; 0x1e
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    19f0:	68 a1       	ldd	r22, Y+32	; 0x20
    19f2:	79 a1       	ldd	r23, Y+33	; 0x21
    19f4:	8a a1       	ldd	r24, Y+34	; 0x22
    19f6:	9b a1       	ldd	r25, Y+35	; 0x23
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6c a1       	ldd	r22, Y+36	; 0x24
    1a0a:	7d a1       	ldd	r23, Y+37	; 0x25
    1a0c:	8e a1       	ldd	r24, Y+38	; 0x26
    1a0e:	9f a1       	ldd	r25, Y+39	; 0x27
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <LCD_read_address_8bit+0x23a>
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9d 8f       	std	Y+29, r25	; 0x1d
    1a38:	8c 8f       	std	Y+28, r24	; 0x1c
    1a3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <LCD_read_address_8bit+0x228>
    1a42:	9d 8f       	std	Y+29, r25	; 0x1d
    1a44:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a4e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a52:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <LCD_read_address_8bit+0x21c>
    1a58:	24 c0       	rjmp	.+72     	; 0x1aa2 <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	68 a1       	ldd	r22, Y+32	; 0x20
    1a5c:	79 a1       	ldd	r23, Y+33	; 0x21
    1a5e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a60:	9b a1       	ldd	r25, Y+35	; 0x23
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9f 8f       	std	Y+31, r25	; 0x1f
    1a6c:	8e 8f       	std	Y+30, r24	; 0x1e
    1a6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a70:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a72:	9b 8f       	std	Y+27, r25	; 0x1b
    1a74:	8a 8f       	std	Y+26, r24	; 0x1a
    1a76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_read_address_8bit+0x264>
    1a7e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a80:	8a 8f       	std	Y+26, r24	; 0x1a
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a84:	69 a5       	ldd	r22, Y+41	; 0x29
    1a86:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	88 a7       	std	Y+40, r24	; 0x28
    1a96:	88 a5       	ldd	r24, Y+40	; 0x28
    1a98:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a9a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a9c:	8a 95       	dec	r24
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_read_address_8bit+0x286>
    1aa0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e8       	ldi	r26, 0x80	; 128
    1ab0:	bf e3       	ldi	r27, 0x3F	; 63
    1ab2:	8d 8b       	std	Y+21, r24	; 0x15
    1ab4:	9e 8b       	std	Y+22, r25	; 0x16
    1ab6:	af 8b       	std	Y+23, r26	; 0x17
    1ab8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aba:	6d 89       	ldd	r22, Y+21	; 0x15
    1abc:	7e 89       	ldd	r23, Y+22	; 0x16
    1abe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac2:	2b ea       	ldi	r18, 0xAB	; 171
    1ac4:	3a ea       	ldi	r19, 0xAA	; 170
    1ac6:	4a e2       	ldi	r20, 0x2A	; 42
    1ac8:	50 e4       	ldi	r21, 0x40	; 64
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	89 8b       	std	Y+17, r24	; 0x11
    1ad4:	9a 8b       	std	Y+18, r25	; 0x12
    1ad6:	ab 8b       	std	Y+19, r26	; 0x13
    1ad8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ada:	69 89       	ldd	r22, Y+17	; 0x11
    1adc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	1c f4       	brge	.+6      	; 0x1af8 <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	88 8b       	std	Y+16, r24	; 0x10
    1af6:	91 c0       	rjmp	.+290    	; 0x1c1a <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    1af8:	69 89       	ldd	r22, Y+17	; 0x11
    1afa:	7a 89       	ldd	r23, Y+18	; 0x12
    1afc:	8b 89       	ldd	r24, Y+19	; 0x13
    1afe:	9c 89       	ldd	r25, Y+20	; 0x14
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	0c f0       	brlt	.+2      	; 0x1b12 <LCD_read_address_8bit+0x2fc>
    1b10:	7b c0       	rjmp	.+246    	; 0x1c08 <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a e7       	ldi	r20, 0x7A	; 122
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8c 87       	std	Y+12, r24	; 0x0c
    1b2c:	9d 87       	std	Y+13, r25	; 0x0d
    1b2e:	ae 87       	std	Y+14, r26	; 0x0e
    1b30:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b34:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b38:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	88 87       	std	Y+8, r24	; 0x08
    1b4c:	99 87       	std	Y+9, r25	; 0x09
    1b4e:	aa 87       	std	Y+10, r26	; 0x0a
    1b50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b52:	68 85       	ldd	r22, Y+8	; 0x08
    1b54:	79 85       	ldd	r23, Y+9	; 0x09
    1b56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9f 83       	std	Y+7, r25	; 0x07
    1b70:	8e 83       	std	Y+6, r24	; 0x06
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    1b74:	68 85       	ldd	r22, Y+8	; 0x08
    1b76:	79 85       	ldd	r23, Y+9	; 0x09
    1b78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b90:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b92:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9f 83       	std	Y+7, r25	; 0x07
    1bb2:	8e 83       	std	Y+6, r24	; 0x06
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <LCD_read_address_8bit+0x3be>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9d 83       	std	Y+5, r25	; 0x05
    1bbc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_read_address_8bit+0x3ac>
    1bc6:	9d 83       	std	Y+5, r25	; 0x05
    1bc8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8e 81       	ldd	r24, Y+6	; 0x06
    1bcc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9f 83       	std	Y+7, r25	; 0x07
    1bd2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <LCD_read_address_8bit+0x3a0>
    1bdc:	24 c0       	rjmp	.+72     	; 0x1c26 <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	68 85       	ldd	r22, Y+8	; 0x08
    1be0:	79 85       	ldd	r23, Y+9	; 0x09
    1be2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1be4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9f 83       	std	Y+7, r25	; 0x07
    1bf0:	8e 83       	std	Y+6, r24	; 0x06
    1bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf6:	9b 83       	std	Y+3, r25	; 0x03
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_read_address_8bit+0x3e8>
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c08:	69 89       	ldd	r22, Y+17	; 0x11
    1c0a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	88 8b       	std	Y+16, r24	; 0x10
    1c1a:	88 89       	ldd	r24, Y+16	; 0x10
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	8a 95       	dec	r24
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_read_address_8bit+0x40a>
    1c24:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	0e 94 9a 2c 	call	0x5934	; 0x5934 <DIO_u8_get_port>
    1c2c:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	60 e0       	ldi	r22, 0x00	; 0
    1c32:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    1c36:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c38:	8f 77       	andi	r24, 0x7F	; 127
    1c3a:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	6f ef       	ldi	r22, 0xFF	; 255
    1c40:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <DIO_void_set_port_dir>
	return address;
    1c44:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    1c46:	ef 96       	adiw	r28, 0x3f	; 63
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	c3 56       	subi	r28, 0x63	; 99
    1c66:	d0 40       	sbci	r29, 0x00	; 0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	fe 01       	movw	r30, r28
    1c74:	ed 59       	subi	r30, 0x9D	; 157
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	62 e0       	ldi	r22, 0x02	; 2
    1c7e:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e3 5a       	subi	r30, 0xA3	; 163
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e8       	ldi	r26, 0x80	; 128
    1c96:	bf e3       	ldi	r27, 0x3F	; 63
    1c98:	80 83       	st	Z, r24
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	a2 83       	std	Z+2, r26	; 0x02
    1c9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ca0:	8e 01       	movw	r16, r28
    1ca2:	07 5a       	subi	r16, 0xA7	; 167
    1ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e3 5a       	subi	r30, 0xA3	; 163
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	2b ea       	ldi	r18, 0xAB	; 171
    1cb6:	3a ea       	ldi	r19, 0xAA	; 170
    1cb8:	4a e2       	ldi	r20, 0x2A	; 42
    1cba:	50 e4       	ldi	r21, 0x40	; 64
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	80 83       	st	Z, r24
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	a2 83       	std	Z+2, r26	; 0x02
    1ccc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e7 5a       	subi	r30, 0xA7	; 167
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	34 f4       	brge	.+12     	; 0x1cf8 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1cec:	fe 01       	movw	r30, r28
    1cee:	e8 5a       	subi	r30, 0xA8	; 168
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	80 83       	st	Z, r24
    1cf6:	e0 c0       	rjmp	.+448    	; 0x1eb8 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e7 5a       	subi	r30, 0xA7	; 167
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	53 e4       	ldi	r21, 0x43	; 67
    1d0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	0c f0       	brlt	.+2      	; 0x1d18 <LCD_write_data_4bit+0xc0>
    1d16:	c0 c0       	rjmp	.+384    	; 0x1e98 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e3 5a       	subi	r30, 0xA3	; 163
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	54 e4       	ldi	r21, 0x44	; 68
    1d2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	fe 01       	movw	r30, r28
    1d38:	ec 5a       	subi	r30, 0xAC	; 172
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 83       	st	Z, r24
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	a2 83       	std	Z+2, r26	; 0x02
    1d42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	8e 01       	movw	r16, r28
    1d46:	00 5b       	subi	r16, 0xB0	; 176
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ec 5a       	subi	r30, 0xAC	; 172
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a ef       	ldi	r20, 0xFA	; 250
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	f8 01       	movw	r30, r16
    1d6a:	80 83       	st	Z, r24
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	a2 83       	std	Z+2, r26	; 0x02
    1d70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d72:	fe 01       	movw	r30, r28
    1d74:	e0 5b       	subi	r30, 0xB0	; 176
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	60 81       	ld	r22, Z
    1d7a:	71 81       	ldd	r23, Z+1	; 0x01
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	44 f4       	brge	.+16     	; 0x1da0 <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1d90:	fe 01       	movw	r30, r28
    1d92:	e2 5b       	subi	r30, 0xB2	; 178
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	64 c0       	rjmp	.+200    	; 0x1e68 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1da0:	fe 01       	movw	r30, r28
    1da2:	e0 5b       	subi	r30, 0xB0	; 176
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	0c f0       	brlt	.+2      	; 0x1dc0 <LCD_write_data_4bit+0x168>
    1dbe:	43 c0       	rjmp	.+134    	; 0x1e46 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ec 5a       	subi	r30, 0xAC	; 172
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	82 81       	ldd	r24, Z+2	; 0x02
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	8e 01       	movw	r16, r28
    1de0:	02 5b       	subi	r16, 0xB2	; 178
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	f8 01       	movw	r30, r16
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	1f c0       	rjmp	.+62     	; 0x1e36 <LCD_write_data_4bit+0x1de>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e4 5b       	subi	r30, 0xB4	; 180
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e06:	fe 01       	movw	r30, r28
    1e08:	e4 5b       	subi	r30, 0xB4	; 180
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_write_data_4bit+0x1b8>
    1e14:	fe 01       	movw	r30, r28
    1e16:	e4 5b       	subi	r30, 0xB4	; 180
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	de 01       	movw	r26, r28
    1e20:	a2 5b       	subi	r26, 0xB2	; 178
    1e22:	bf 4f       	sbci	r27, 0xFF	; 255
    1e24:	fe 01       	movw	r30, r28
    1e26:	e2 5b       	subi	r30, 0xB2	; 178
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	11 96       	adiw	r26, 0x01	; 1
    1e32:	9c 93       	st	X, r25
    1e34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	fe 01       	movw	r30, r28
    1e38:	e2 5b       	subi	r30, 0xB2	; 178
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	d1 f6       	brne	.-76     	; 0x1df8 <LCD_write_data_4bit+0x1a0>
    1e44:	4b c0       	rjmp	.+150    	; 0x1edc <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	8e 01       	movw	r16, r28
    1e48:	02 5b       	subi	r16, 0xB2	; 178
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e0 5b       	subi	r30, 0xB0	; 176
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	f8 01       	movw	r30, r16
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
    1e68:	de 01       	movw	r26, r28
    1e6a:	a6 5b       	subi	r26, 0xB6	; 182
    1e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e2 5b       	subi	r30, 0xB2	; 178
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	9c 93       	st	X, r25
    1e7c:	8e 93       	st	-X, r24
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e6 5b       	subi	r30, 0xB6	; 182
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_write_data_4bit+0x230>
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e6 5b       	subi	r30, 0xB6	; 182
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	80 83       	st	Z, r24
    1e96:	22 c0       	rjmp	.+68     	; 0x1edc <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e98:	8e 01       	movw	r16, r28
    1e9a:	08 5a       	subi	r16, 0xA8	; 168
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 5a       	subi	r30, 0xA7	; 167
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 83       	st	Z, r24
    1eb8:	de 01       	movw	r26, r28
    1eba:	a7 5b       	subi	r26, 0xB7	; 183
    1ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e8 5a       	subi	r30, 0xA8	; 168
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e7 5b       	subi	r30, 0xB7	; 183
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	8a 95       	dec	r24
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_write_data_4bit+0x278>
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e7 5b       	subi	r30, 0xB7	; 183
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	eb 5b       	subi	r30, 0xBB	; 187
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	80 83       	st	Z, r24
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	a2 83       	std	Z+2, r26	; 0x02
    1ef8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1efa:	8e 01       	movw	r16, r28
    1efc:	0f 5b       	subi	r16, 0xBF	; 191
    1efe:	1f 4f       	sbci	r17, 0xFF	; 255
    1f00:	fe 01       	movw	r30, r28
    1f02:	eb 5b       	subi	r30, 0xBB	; 187
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	2b ea       	ldi	r18, 0xAB	; 171
    1f10:	3a ea       	ldi	r19, 0xAA	; 170
    1f12:	4a e2       	ldi	r20, 0x2A	; 42
    1f14:	50 e4       	ldi	r21, 0x40	; 64
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	80 83       	st	Z, r24
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	a2 83       	std	Z+2, r26	; 0x02
    1f26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ef 5b       	subi	r30, 0xBF	; 191
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	34 f4       	brge	.+12     	; 0x1f52 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e0 5c       	subi	r30, 0xC0	; 192
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 83       	st	Z, r24
    1f50:	9d c0       	rjmp	.+314    	; 0x208c <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    1f52:	fe 01       	movw	r30, r28
    1f54:	ef 5b       	subi	r30, 0xBF	; 191
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	60 81       	ld	r22, Z
    1f5a:	71 81       	ldd	r23, Z+1	; 0x01
    1f5c:	82 81       	ldd	r24, Z+2	; 0x02
    1f5e:	93 81       	ldd	r25, Z+3	; 0x03
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	53 e4       	ldi	r21, 0x43	; 67
    1f68:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	0c f0       	brlt	.+2      	; 0x1f72 <LCD_write_data_4bit+0x31a>
    1f70:	7e c0       	rjmp	.+252    	; 0x206e <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    1f72:	fe 01       	movw	r30, r28
    1f74:	eb 5b       	subi	r30, 0xBB	; 187
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a e7       	ldi	r20, 0x7A	; 122
    1f86:	54 e4       	ldi	r21, 0x44	; 68
    1f88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8c af       	std	Y+60, r24	; 0x3c
    1f92:	9d af       	std	Y+61, r25	; 0x3d
    1f94:	ae af       	std	Y+62, r26	; 0x3e
    1f96:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f9a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4a ef       	ldi	r20, 0xFA	; 250
    1fa6:	54 e4       	ldi	r21, 0x44	; 68
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	88 af       	std	Y+56, r24	; 0x38
    1fb2:	99 af       	std	Y+57, r25	; 0x39
    1fb4:	aa af       	std	Y+58, r26	; 0x3a
    1fb6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1fb8:	68 ad       	ldd	r22, Y+56	; 0x38
    1fba:	79 ad       	ldd	r23, Y+57	; 0x39
    1fbc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fbe:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	2c f4       	brge	.+10     	; 0x1fda <LCD_write_data_4bit+0x382>
		__ticks = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	9f ab       	std	Y+55, r25	; 0x37
    1fd6:	8e ab       	std	Y+54, r24	; 0x36
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    1fda:	68 ad       	ldd	r22, Y+56	; 0x38
    1fdc:	79 ad       	ldd	r23, Y+57	; 0x39
    1fde:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fe0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	57 e4       	ldi	r21, 0x47	; 71
    1fea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	4c f5       	brge	.+82     	; 0x2044 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ff4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ff6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ff8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9f ab       	std	Y+55, r25	; 0x37
    2018:	8e ab       	std	Y+54, r24	; 0x36
    201a:	0f c0       	rjmp	.+30     	; 0x203a <LCD_write_data_4bit+0x3e2>
    201c:	88 ec       	ldi	r24, 0xC8	; 200
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9d ab       	std	Y+53, r25	; 0x35
    2022:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2024:	8c a9       	ldd	r24, Y+52	; 0x34
    2026:	9d a9       	ldd	r25, Y+53	; 0x35
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_write_data_4bit+0x3d0>
    202c:	9d ab       	std	Y+53, r25	; 0x35
    202e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2030:	8e a9       	ldd	r24, Y+54	; 0x36
    2032:	9f a9       	ldd	r25, Y+55	; 0x37
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9f ab       	std	Y+55, r25	; 0x37
    2038:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203a:	8e a9       	ldd	r24, Y+54	; 0x36
    203c:	9f a9       	ldd	r25, Y+55	; 0x37
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	69 f7       	brne	.-38     	; 0x201c <LCD_write_data_4bit+0x3c4>
    2042:	2d c0       	rjmp	.+90     	; 0x209e <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2044:	68 ad       	ldd	r22, Y+56	; 0x38
    2046:	79 ad       	ldd	r23, Y+57	; 0x39
    2048:	8a ad       	ldd	r24, Y+58	; 0x3a
    204a:	9b ad       	ldd	r25, Y+59	; 0x3b
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9f ab       	std	Y+55, r25	; 0x37
    2056:	8e ab       	std	Y+54, r24	; 0x36
    2058:	8e a9       	ldd	r24, Y+54	; 0x36
    205a:	9f a9       	ldd	r25, Y+55	; 0x37
    205c:	9b ab       	std	Y+51, r25	; 0x33
    205e:	8a ab       	std	Y+50, r24	; 0x32
    2060:	8a a9       	ldd	r24, Y+50	; 0x32
    2062:	9b a9       	ldd	r25, Y+51	; 0x33
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_write_data_4bit+0x40c>
    2068:	9b ab       	std	Y+51, r25	; 0x33
    206a:	8a ab       	std	Y+50, r24	; 0x32
    206c:	18 c0       	rjmp	.+48     	; 0x209e <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    206e:	fe 01       	movw	r30, r28
    2070:	ef 5b       	subi	r30, 0xBF	; 191
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	fe 01       	movw	r30, r28
    2086:	e0 5c       	subi	r30, 0xC0	; 192
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 83       	st	Z, r24
    208c:	fe 01       	movw	r30, r28
    208e:	e0 5c       	subi	r30, 0xC0	; 192
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2096:	89 a9       	ldd	r24, Y+49	; 0x31
    2098:	8a 95       	dec	r24
    209a:	f1 f7       	brne	.-4      	; 0x2098 <LCD_write_data_4bit+0x440>
    209c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    209e:	fe 01       	movw	r30, r28
    20a0:	ee 59       	subi	r30, 0x9E	; 158
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	84 e0       	ldi	r24, 0x04	; 4
    20a6:	80 83       	st	Z, r24
    20a8:	26 c0       	rjmp	.+76     	; 0x20f6 <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    20aa:	fe 01       	movw	r30, r28
    20ac:	ed 59       	subi	r30, 0x9D	; 157
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	fe 01       	movw	r30, r28
    20b8:	ee 59       	subi	r30, 0x9E	; 158
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a9 01       	movw	r20, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <LCD_write_data_4bit+0x472>
    20c6:	55 95       	asr	r21
    20c8:	47 95       	ror	r20
    20ca:	8a 95       	dec	r24
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <LCD_write_data_4bit+0x46e>
    20ce:	ca 01       	movw	r24, r20
    20d0:	98 2f       	mov	r25, r24
    20d2:	91 70       	andi	r25, 0x01	; 1
    20d4:	fe 01       	movw	r30, r28
    20d6:	ee 59       	subi	r30, 0x9E	; 158
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	60 81       	ld	r22, Z
    20de:	49 2f       	mov	r20, r25
    20e0:	0e 94 3e 2c 	call	0x587c	; 0x587c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    20e4:	de 01       	movw	r26, r28
    20e6:	ae 59       	subi	r26, 0x9E	; 158
    20e8:	bf 4f       	sbci	r27, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	ee 59       	subi	r30, 0x9E	; 158
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	8f 5f       	subi	r24, 0xFF	; 255
    20f4:	8c 93       	st	X, r24
    20f6:	fe 01       	movw	r30, r28
    20f8:	ee 59       	subi	r30, 0x9E	; 158
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	88 30       	cpi	r24, 0x08	; 8
    2100:	a0 f2       	brcs	.-88     	; 0x20aa <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 e2       	ldi	r26, 0x20	; 32
    2110:	b1 e4       	ldi	r27, 0x41	; 65
    2112:	8d a7       	std	Y+45, r24	; 0x2d
    2114:	9e a7       	std	Y+46, r25	; 0x2e
    2116:	af a7       	std	Y+47, r26	; 0x2f
    2118:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    211a:	6d a5       	ldd	r22, Y+45	; 0x2d
    211c:	7e a5       	ldd	r23, Y+46	; 0x2e
    211e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2120:	98 a9       	ldd	r25, Y+48	; 0x30
    2122:	2b ea       	ldi	r18, 0xAB	; 171
    2124:	3a ea       	ldi	r19, 0xAA	; 170
    2126:	4a e2       	ldi	r20, 0x2A	; 42
    2128:	50 e4       	ldi	r21, 0x40	; 64
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	89 a7       	std	Y+41, r24	; 0x29
    2134:	9a a7       	std	Y+42, r25	; 0x2a
    2136:	ab a7       	std	Y+43, r26	; 0x2b
    2138:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    213a:	69 a5       	ldd	r22, Y+41	; 0x29
    213c:	7a a5       	ldd	r23, Y+42	; 0x2a
    213e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2140:	9c a5       	ldd	r25, Y+44	; 0x2c
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e8       	ldi	r20, 0x80	; 128
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    214e:	88 23       	and	r24, r24
    2150:	1c f4       	brge	.+6      	; 0x2158 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	88 a7       	std	Y+40, r24	; 0x28
    2156:	91 c0       	rjmp	.+290    	; 0x227a <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    2158:	69 a5       	ldd	r22, Y+41	; 0x29
    215a:	7a a5       	ldd	r23, Y+42	; 0x2a
    215c:	8b a5       	ldd	r24, Y+43	; 0x2b
    215e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	53 e4       	ldi	r21, 0x43	; 67
    2168:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	0c f0       	brlt	.+2      	; 0x2172 <LCD_write_data_4bit+0x51a>
    2170:	7b c0       	rjmp	.+246    	; 0x2268 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2172:	6d a5       	ldd	r22, Y+45	; 0x2d
    2174:	7e a5       	ldd	r23, Y+46	; 0x2e
    2176:	8f a5       	ldd	r24, Y+47	; 0x2f
    2178:	98 a9       	ldd	r25, Y+48	; 0x30
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	54 e4       	ldi	r21, 0x44	; 68
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8c a3       	std	Y+36, r24	; 0x24
    218c:	9d a3       	std	Y+37, r25	; 0x25
    218e:	ae a3       	std	Y+38, r26	; 0x26
    2190:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	6c a1       	ldd	r22, Y+36	; 0x24
    2194:	7d a1       	ldd	r23, Y+37	; 0x25
    2196:	8e a1       	ldd	r24, Y+38	; 0x26
    2198:	9f a1       	ldd	r25, Y+39	; 0x27
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	88 a3       	std	Y+32, r24	; 0x20
    21ac:	99 a3       	std	Y+33, r25	; 0x21
    21ae:	aa a3       	std	Y+34, r26	; 0x22
    21b0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21b2:	68 a1       	ldd	r22, Y+32	; 0x20
    21b4:	79 a1       	ldd	r23, Y+33	; 0x21
    21b6:	8a a1       	ldd	r24, Y+34	; 0x22
    21b8:	9b a1       	ldd	r25, Y+35	; 0x23
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9f 8f       	std	Y+31, r25	; 0x1f
    21d0:	8e 8f       	std	Y+30, r24	; 0x1e
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    21d4:	68 a1       	ldd	r22, Y+32	; 0x20
    21d6:	79 a1       	ldd	r23, Y+33	; 0x21
    21d8:	8a a1       	ldd	r24, Y+34	; 0x22
    21da:	9b a1       	ldd	r25, Y+35	; 0x23
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	6c a1       	ldd	r22, Y+36	; 0x24
    21ee:	7d a1       	ldd	r23, Y+37	; 0x25
    21f0:	8e a1       	ldd	r24, Y+38	; 0x26
    21f2:	9f a1       	ldd	r25, Y+39	; 0x27
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9f 8f       	std	Y+31, r25	; 0x1f
    2212:	8e 8f       	std	Y+30, r24	; 0x1e
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <LCD_write_data_4bit+0x5dc>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9d 8f       	std	Y+29, r25	; 0x1d
    221c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    221e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2220:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_write_data_4bit+0x5ca>
    2226:	9d 8f       	std	Y+29, r25	; 0x1d
    2228:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    222c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9f 8f       	std	Y+31, r25	; 0x1f
    2232:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2236:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <LCD_write_data_4bit+0x5be>
    223c:	24 c0       	rjmp	.+72     	; 0x2286 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	68 a1       	ldd	r22, Y+32	; 0x20
    2240:	79 a1       	ldd	r23, Y+33	; 0x21
    2242:	8a a1       	ldd	r24, Y+34	; 0x22
    2244:	9b a1       	ldd	r25, Y+35	; 0x23
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9f 8f       	std	Y+31, r25	; 0x1f
    2250:	8e 8f       	std	Y+30, r24	; 0x1e
    2252:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2254:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2256:	9b 8f       	std	Y+27, r25	; 0x1b
    2258:	8a 8f       	std	Y+26, r24	; 0x1a
    225a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    225c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_write_data_4bit+0x606>
    2262:	9b 8f       	std	Y+27, r25	; 0x1b
    2264:	8a 8f       	std	Y+26, r24	; 0x1a
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2268:	69 a5       	ldd	r22, Y+41	; 0x29
    226a:	7a a5       	ldd	r23, Y+42	; 0x2a
    226c:	8b a5       	ldd	r24, Y+43	; 0x2b
    226e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	88 a7       	std	Y+40, r24	; 0x28
    227a:	88 a5       	ldd	r24, Y+40	; 0x28
    227c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    227e:	89 8d       	ldd	r24, Y+25	; 0x19
    2280:	8a 95       	dec	r24
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_write_data_4bit+0x628>
    2284:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e8       	ldi	r26, 0x80	; 128
    2294:	bf e3       	ldi	r27, 0x3F	; 63
    2296:	8d 8b       	std	Y+21, r24	; 0x15
    2298:	9e 8b       	std	Y+22, r25	; 0x16
    229a:	af 8b       	std	Y+23, r26	; 0x17
    229c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    229e:	6d 89       	ldd	r22, Y+21	; 0x15
    22a0:	7e 89       	ldd	r23, Y+22	; 0x16
    22a2:	8f 89       	ldd	r24, Y+23	; 0x17
    22a4:	98 8d       	ldd	r25, Y+24	; 0x18
    22a6:	2b ea       	ldi	r18, 0xAB	; 171
    22a8:	3a ea       	ldi	r19, 0xAA	; 170
    22aa:	4a e2       	ldi	r20, 0x2A	; 42
    22ac:	50 e4       	ldi	r21, 0x40	; 64
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	89 8b       	std	Y+17, r24	; 0x11
    22b8:	9a 8b       	std	Y+18, r25	; 0x12
    22ba:	ab 8b       	std	Y+19, r26	; 0x13
    22bc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22be:	69 89       	ldd	r22, Y+17	; 0x11
    22c0:	7a 89       	ldd	r23, Y+18	; 0x12
    22c2:	8b 89       	ldd	r24, Y+19	; 0x13
    22c4:	9c 89       	ldd	r25, Y+20	; 0x14
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	1c f4       	brge	.+6      	; 0x22dc <LCD_write_data_4bit+0x684>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	88 8b       	std	Y+16, r24	; 0x10
    22da:	91 c0       	rjmp	.+290    	; 0x23fe <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    22dc:	69 89       	ldd	r22, Y+17	; 0x11
    22de:	7a 89       	ldd	r23, Y+18	; 0x12
    22e0:	8b 89       	ldd	r24, Y+19	; 0x13
    22e2:	9c 89       	ldd	r25, Y+20	; 0x14
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	53 e4       	ldi	r21, 0x43	; 67
    22ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <LCD_write_data_4bit+0x69e>
    22f4:	7b c0       	rjmp	.+246    	; 0x23ec <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    22f6:	6d 89       	ldd	r22, Y+21	; 0x15
    22f8:	7e 89       	ldd	r23, Y+22	; 0x16
    22fa:	8f 89       	ldd	r24, Y+23	; 0x17
    22fc:	98 8d       	ldd	r25, Y+24	; 0x18
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a e7       	ldi	r20, 0x7A	; 122
    2304:	54 e4       	ldi	r21, 0x44	; 68
    2306:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8c 87       	std	Y+12, r24	; 0x0c
    2310:	9d 87       	std	Y+13, r25	; 0x0d
    2312:	ae 87       	std	Y+14, r26	; 0x0e
    2314:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6c 85       	ldd	r22, Y+12	; 0x0c
    2318:	7d 85       	ldd	r23, Y+13	; 0x0d
    231a:	8e 85       	ldd	r24, Y+14	; 0x0e
    231c:	9f 85       	ldd	r25, Y+15	; 0x0f
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	88 87       	std	Y+8, r24	; 0x08
    2330:	99 87       	std	Y+9, r25	; 0x09
    2332:	aa 87       	std	Y+10, r26	; 0x0a
    2334:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2336:	68 85       	ldd	r22, Y+8	; 0x08
    2338:	79 85       	ldd	r23, Y+9	; 0x09
    233a:	8a 85       	ldd	r24, Y+10	; 0x0a
    233c:	9b 85       	ldd	r25, Y+11	; 0x0b
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9f 83       	std	Y+7, r25	; 0x07
    2354:	8e 83       	std	Y+6, r24	; 0x06
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    2358:	68 85       	ldd	r22, Y+8	; 0x08
    235a:	79 85       	ldd	r23, Y+9	; 0x09
    235c:	8a 85       	ldd	r24, Y+10	; 0x0a
    235e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6c 85       	ldd	r22, Y+12	; 0x0c
    2372:	7d 85       	ldd	r23, Y+13	; 0x0d
    2374:	8e 85       	ldd	r24, Y+14	; 0x0e
    2376:	9f 85       	ldd	r25, Y+15	; 0x0f
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9f 83       	std	Y+7, r25	; 0x07
    2396:	8e 83       	std	Y+6, r24	; 0x06
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_write_data_4bit+0x760>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9d 83       	std	Y+5, r25	; 0x05
    23a0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a2:	8c 81       	ldd	r24, Y+4	; 0x04
    23a4:	9d 81       	ldd	r25, Y+5	; 0x05
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_write_data_4bit+0x74e>
    23aa:	9d 83       	std	Y+5, r25	; 0x05
    23ac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8e 81       	ldd	r24, Y+6	; 0x06
    23b0:	9f 81       	ldd	r25, Y+7	; 0x07
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9f 83       	std	Y+7, r25	; 0x07
    23b6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8e 81       	ldd	r24, Y+6	; 0x06
    23ba:	9f 81       	ldd	r25, Y+7	; 0x07
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_write_data_4bit+0x742>
    23c0:	24 c0       	rjmp	.+72     	; 0x240a <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	68 85       	ldd	r22, Y+8	; 0x08
    23c4:	79 85       	ldd	r23, Y+9	; 0x09
    23c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9f 83       	std	Y+7, r25	; 0x07
    23d4:	8e 83       	std	Y+6, r24	; 0x06
    23d6:	8e 81       	ldd	r24, Y+6	; 0x06
    23d8:	9f 81       	ldd	r25, Y+7	; 0x07
    23da:	9b 83       	std	Y+3, r25	; 0x03
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	9b 81       	ldd	r25, Y+3	; 0x03
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_write_data_4bit+0x78a>
    23e6:	9b 83       	std	Y+3, r25	; 0x03
    23e8:	8a 83       	std	Y+2, r24	; 0x02
    23ea:	0f c0       	rjmp	.+30     	; 0x240a <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23ec:	69 89       	ldd	r22, Y+17	; 0x11
    23ee:	7a 89       	ldd	r23, Y+18	; 0x12
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	9c 89       	ldd	r25, Y+20	; 0x14
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	88 8b       	std	Y+16, r24	; 0x10
    23fe:	88 89       	ldd	r24, Y+16	; 0x10
    2400:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	8a 95       	dec	r24
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_write_data_4bit+0x7ac>
    2408:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    240a:	fe 01       	movw	r30, r28
    240c:	ef 59       	subi	r30, 0x9F	; 159
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	84 e0       	ldi	r24, 0x04	; 4
    2412:	80 83       	st	Z, r24
    2414:	27 c0       	rjmp	.+78     	; 0x2464 <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    2416:	fe 01       	movw	r30, r28
    2418:	ed 59       	subi	r30, 0x9D	; 157
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	fe 01       	movw	r30, r28
    2424:	ef 59       	subi	r30, 0x9F	; 159
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	04 97       	sbiw	r24, 0x04	; 4
    2430:	f9 01       	movw	r30, r18
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <LCD_write_data_4bit+0x7e0>
    2434:	f5 95       	asr	r31
    2436:	e7 95       	ror	r30
    2438:	8a 95       	dec	r24
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <LCD_write_data_4bit+0x7dc>
    243c:	cf 01       	movw	r24, r30
    243e:	98 2f       	mov	r25, r24
    2440:	91 70       	andi	r25, 0x01	; 1
    2442:	fe 01       	movw	r30, r28
    2444:	ef 59       	subi	r30, 0x9F	; 159
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	82 e0       	ldi	r24, 0x02	; 2
    244a:	60 81       	ld	r22, Z
    244c:	49 2f       	mov	r20, r25
    244e:	0e 94 3e 2c 	call	0x587c	; 0x587c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2452:	de 01       	movw	r26, r28
    2454:	af 59       	subi	r26, 0x9F	; 159
    2456:	bf 4f       	sbci	r27, 0xFF	; 255
    2458:	fe 01       	movw	r30, r28
    245a:	ef 59       	subi	r30, 0x9F	; 159
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	8f 5f       	subi	r24, 0xFF	; 255
    2462:	8c 93       	st	X, r24
    2464:	fe 01       	movw	r30, r28
    2466:	ef 59       	subi	r30, 0x9F	; 159
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	88 30       	cpi	r24, 0x08	; 8
    246e:	98 f2       	brcs	.-90     	; 0x2416 <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
}
    2478:	cd 59       	subi	r28, 0x9D	; 157
    247a:	df 4f       	sbci	r29, 0xFF	; 255
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	08 95       	ret

00002490 <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	c3 56       	subi	r28, 0x63	; 99
    249e:	d0 40       	sbci	r29, 0x00	; 0
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	fe 01       	movw	r30, r28
    24ac:	ed 59       	subi	r30, 0x9D	; 157
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	62 e0       	ldi	r22, 0x02	; 2
    24b6:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	61 e0       	ldi	r22, 0x01	; 1
    24be:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    24c2:	fe 01       	movw	r30, r28
    24c4:	e3 5a       	subi	r30, 0xA3	; 163
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	a0 e8       	ldi	r26, 0x80	; 128
    24ce:	bf e3       	ldi	r27, 0x3F	; 63
    24d0:	80 83       	st	Z, r24
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	a2 83       	std	Z+2, r26	; 0x02
    24d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24d8:	8e 01       	movw	r16, r28
    24da:	07 5a       	subi	r16, 0xA7	; 167
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	fe 01       	movw	r30, r28
    24e0:	e3 5a       	subi	r30, 0xA3	; 163
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	2b ea       	ldi	r18, 0xAB	; 171
    24ee:	3a ea       	ldi	r19, 0xAA	; 170
    24f0:	4a e2       	ldi	r20, 0x2A	; 42
    24f2:	50 e4       	ldi	r21, 0x40	; 64
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	f8 01       	movw	r30, r16
    24fe:	80 83       	st	Z, r24
    2500:	91 83       	std	Z+1, r25	; 0x01
    2502:	a2 83       	std	Z+2, r26	; 0x02
    2504:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2506:	fe 01       	movw	r30, r28
    2508:	e7 5a       	subi	r30, 0xA7	; 167
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2520:	88 23       	and	r24, r24
    2522:	34 f4       	brge	.+12     	; 0x2530 <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    2524:	fe 01       	movw	r30, r28
    2526:	e8 5a       	subi	r30, 0xA8	; 168
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 83       	st	Z, r24
    252e:	e0 c0       	rjmp	.+448    	; 0x26f0 <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    2530:	fe 01       	movw	r30, r28
    2532:	e7 5a       	subi	r30, 0xA7	; 167
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	53 e4       	ldi	r21, 0x43	; 67
    2546:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	0c f0       	brlt	.+2      	; 0x2550 <LCD_write_cmd_4bit+0xc0>
    254e:	c0 c0       	rjmp	.+384    	; 0x26d0 <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    2550:	fe 01       	movw	r30, r28
    2552:	e3 5a       	subi	r30, 0xA3	; 163
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4a e7       	ldi	r20, 0x7A	; 122
    2564:	54 e4       	ldi	r21, 0x44	; 68
    2566:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	fe 01       	movw	r30, r28
    2570:	ec 5a       	subi	r30, 0xAC	; 172
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 83       	st	Z, r24
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	a2 83       	std	Z+2, r26	; 0x02
    257a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	8e 01       	movw	r16, r28
    257e:	00 5b       	subi	r16, 0xB0	; 176
    2580:	1f 4f       	sbci	r17, 0xFF	; 255
    2582:	fe 01       	movw	r30, r28
    2584:	ec 5a       	subi	r30, 0xAC	; 172
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a ef       	ldi	r20, 0xFA	; 250
    2596:	54 e4       	ldi	r21, 0x44	; 68
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	f8 01       	movw	r30, r16
    25a2:	80 83       	st	Z, r24
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	a2 83       	std	Z+2, r26	; 0x02
    25a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25aa:	fe 01       	movw	r30, r28
    25ac:	e0 5b       	subi	r30, 0xB0	; 176
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	44 f4       	brge	.+16     	; 0x25d8 <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    25c8:	fe 01       	movw	r30, r28
    25ca:	e2 5b       	subi	r30, 0xB2	; 178
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
    25d6:	64 c0       	rjmp	.+200    	; 0x26a0 <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    25d8:	fe 01       	movw	r30, r28
    25da:	e0 5b       	subi	r30, 0xB0	; 176
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	0c f0       	brlt	.+2      	; 0x25f8 <LCD_write_cmd_4bit+0x168>
    25f6:	43 c0       	rjmp	.+134    	; 0x267e <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f8:	fe 01       	movw	r30, r28
    25fa:	ec 5a       	subi	r30, 0xAC	; 172
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	60 81       	ld	r22, Z
    2600:	71 81       	ldd	r23, Z+1	; 0x01
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	51 e4       	ldi	r21, 0x41	; 65
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	8e 01       	movw	r16, r28
    2618:	02 5b       	subi	r16, 0xB2	; 178
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	f8 01       	movw	r30, r16
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    262e:	1f c0       	rjmp	.+62     	; 0x266e <LCD_write_cmd_4bit+0x1de>
    2630:	fe 01       	movw	r30, r28
    2632:	e4 5b       	subi	r30, 0xB4	; 180
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	88 ec       	ldi	r24, 0xC8	; 200
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    263e:	fe 01       	movw	r30, r28
    2640:	e4 5b       	subi	r30, 0xB4	; 180
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <LCD_write_cmd_4bit+0x1b8>
    264c:	fe 01       	movw	r30, r28
    264e:	e4 5b       	subi	r30, 0xB4	; 180
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2656:	de 01       	movw	r26, r28
    2658:	a2 5b       	subi	r26, 0xB2	; 178
    265a:	bf 4f       	sbci	r27, 0xFF	; 255
    265c:	fe 01       	movw	r30, r28
    265e:	e2 5b       	subi	r30, 0xB2	; 178
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	11 96       	adiw	r26, 0x01	; 1
    266a:	9c 93       	st	X, r25
    266c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266e:	fe 01       	movw	r30, r28
    2670:	e2 5b       	subi	r30, 0xB2	; 178
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	d1 f6       	brne	.-76     	; 0x2630 <LCD_write_cmd_4bit+0x1a0>
    267c:	4b c0       	rjmp	.+150    	; 0x2714 <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267e:	8e 01       	movw	r16, r28
    2680:	02 5b       	subi	r16, 0xB2	; 178
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	fe 01       	movw	r30, r28
    2686:	e0 5b       	subi	r30, 0xB0	; 176
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	82 81       	ldd	r24, Z+2	; 0x02
    2690:	93 81       	ldd	r25, Z+3	; 0x03
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	f8 01       	movw	r30, r16
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
    26a0:	de 01       	movw	r26, r28
    26a2:	a6 5b       	subi	r26, 0xB6	; 182
    26a4:	bf 4f       	sbci	r27, 0xFF	; 255
    26a6:	fe 01       	movw	r30, r28
    26a8:	e2 5b       	subi	r30, 0xB2	; 178
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	11 96       	adiw	r26, 0x01	; 1
    26b2:	9c 93       	st	X, r25
    26b4:	8e 93       	st	-X, r24
    26b6:	fe 01       	movw	r30, r28
    26b8:	e6 5b       	subi	r30, 0xB6	; 182
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_write_cmd_4bit+0x230>
    26c4:	fe 01       	movw	r30, r28
    26c6:	e6 5b       	subi	r30, 0xB6	; 182
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
    26ce:	22 c0       	rjmp	.+68     	; 0x2714 <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26d0:	8e 01       	movw	r16, r28
    26d2:	08 5a       	subi	r16, 0xA8	; 168
    26d4:	1f 4f       	sbci	r17, 0xFF	; 255
    26d6:	fe 01       	movw	r30, r28
    26d8:	e7 5a       	subi	r30, 0xA7	; 167
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	f8 01       	movw	r30, r16
    26ee:	80 83       	st	Z, r24
    26f0:	de 01       	movw	r26, r28
    26f2:	a7 5b       	subi	r26, 0xB7	; 183
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	e8 5a       	subi	r30, 0xA8	; 168
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2700:	fe 01       	movw	r30, r28
    2702:	e7 5b       	subi	r30, 0xB7	; 183
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	8a 95       	dec	r24
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_write_cmd_4bit+0x278>
    270c:	fe 01       	movw	r30, r28
    270e:	e7 5b       	subi	r30, 0xB7	; 183
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    271c:	fe 01       	movw	r30, r28
    271e:	eb 5b       	subi	r30, 0xBB	; 187
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 e8       	ldi	r26, 0x80	; 128
    2728:	bf e3       	ldi	r27, 0x3F	; 63
    272a:	80 83       	st	Z, r24
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	a2 83       	std	Z+2, r26	; 0x02
    2730:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2732:	8e 01       	movw	r16, r28
    2734:	0f 5b       	subi	r16, 0xBF	; 191
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	fe 01       	movw	r30, r28
    273a:	eb 5b       	subi	r30, 0xBB	; 187
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	2b ea       	ldi	r18, 0xAB	; 171
    2748:	3a ea       	ldi	r19, 0xAA	; 170
    274a:	4a e2       	ldi	r20, 0x2A	; 42
    274c:	50 e4       	ldi	r21, 0x40	; 64
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	f8 01       	movw	r30, r16
    2758:	80 83       	st	Z, r24
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	a2 83       	std	Z+2, r26	; 0x02
    275e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2760:	fe 01       	movw	r30, r28
    2762:	ef 5b       	subi	r30, 0xBF	; 191
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	34 f4       	brge	.+12     	; 0x278a <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	fe 01       	movw	r30, r28
    2782:	e0 5c       	subi	r30, 0xC0	; 192
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 83       	st	Z, r24
    2788:	9d c0       	rjmp	.+314    	; 0x28c4 <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    278a:	fe 01       	movw	r30, r28
    278c:	ef 5b       	subi	r30, 0xBF	; 191
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	53 e4       	ldi	r21, 0x43	; 67
    27a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	0c f0       	brlt	.+2      	; 0x27aa <LCD_write_cmd_4bit+0x31a>
    27a8:	7e c0       	rjmp	.+252    	; 0x28a6 <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    27aa:	fe 01       	movw	r30, r28
    27ac:	eb 5b       	subi	r30, 0xBB	; 187
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a e7       	ldi	r20, 0x7A	; 122
    27be:	54 e4       	ldi	r21, 0x44	; 68
    27c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8c af       	std	Y+60, r24	; 0x3c
    27ca:	9d af       	std	Y+61, r25	; 0x3d
    27cc:	ae af       	std	Y+62, r26	; 0x3e
    27ce:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    27d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    27d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    27d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	88 af       	std	Y+56, r24	; 0x38
    27ea:	99 af       	std	Y+57, r25	; 0x39
    27ec:	aa af       	std	Y+58, r26	; 0x3a
    27ee:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    27f0:	68 ad       	ldd	r22, Y+56	; 0x38
    27f2:	79 ad       	ldd	r23, Y+57	; 0x39
    27f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    27f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9f ab       	std	Y+55, r25	; 0x37
    280e:	8e ab       	std	Y+54, r24	; 0x36
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    2812:	68 ad       	ldd	r22, Y+56	; 0x38
    2814:	79 ad       	ldd	r23, Y+57	; 0x39
    2816:	8a ad       	ldd	r24, Y+58	; 0x3a
    2818:	9b ad       	ldd	r25, Y+59	; 0x3b
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6c ad       	ldd	r22, Y+60	; 0x3c
    282c:	7d ad       	ldd	r23, Y+61	; 0x3d
    282e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2830:	9f ad       	ldd	r25, Y+63	; 0x3f
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9f ab       	std	Y+55, r25	; 0x37
    2850:	8e ab       	std	Y+54, r24	; 0x36
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <LCD_write_cmd_4bit+0x3e2>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9d ab       	std	Y+53, r25	; 0x35
    285a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    285c:	8c a9       	ldd	r24, Y+52	; 0x34
    285e:	9d a9       	ldd	r25, Y+53	; 0x35
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_write_cmd_4bit+0x3d0>
    2864:	9d ab       	std	Y+53, r25	; 0x35
    2866:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8e a9       	ldd	r24, Y+54	; 0x36
    286a:	9f a9       	ldd	r25, Y+55	; 0x37
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9f ab       	std	Y+55, r25	; 0x37
    2870:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8e a9       	ldd	r24, Y+54	; 0x36
    2874:	9f a9       	ldd	r25, Y+55	; 0x37
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <LCD_write_cmd_4bit+0x3c4>
    287a:	2d c0       	rjmp	.+90     	; 0x28d6 <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	68 ad       	ldd	r22, Y+56	; 0x38
    287e:	79 ad       	ldd	r23, Y+57	; 0x39
    2880:	8a ad       	ldd	r24, Y+58	; 0x3a
    2882:	9b ad       	ldd	r25, Y+59	; 0x3b
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9f ab       	std	Y+55, r25	; 0x37
    288e:	8e ab       	std	Y+54, r24	; 0x36
    2890:	8e a9       	ldd	r24, Y+54	; 0x36
    2892:	9f a9       	ldd	r25, Y+55	; 0x37
    2894:	9b ab       	std	Y+51, r25	; 0x33
    2896:	8a ab       	std	Y+50, r24	; 0x32
    2898:	8a a9       	ldd	r24, Y+50	; 0x32
    289a:	9b a9       	ldd	r25, Y+51	; 0x33
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <LCD_write_cmd_4bit+0x40c>
    28a0:	9b ab       	std	Y+51, r25	; 0x33
    28a2:	8a ab       	std	Y+50, r24	; 0x32
    28a4:	18 c0       	rjmp	.+48     	; 0x28d6 <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28a6:	fe 01       	movw	r30, r28
    28a8:	ef 5b       	subi	r30, 0xBF	; 191
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	fe 01       	movw	r30, r28
    28be:	e0 5c       	subi	r30, 0xC0	; 192
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 83       	st	Z, r24
    28c4:	fe 01       	movw	r30, r28
    28c6:	e0 5c       	subi	r30, 0xC0	; 192
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 81       	ld	r24, Z
    28cc:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28ce:	89 a9       	ldd	r24, Y+49	; 0x31
    28d0:	8a 95       	dec	r24
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_write_cmd_4bit+0x440>
    28d4:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    28d6:	fe 01       	movw	r30, r28
    28d8:	ee 59       	subi	r30, 0x9E	; 158
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	84 e0       	ldi	r24, 0x04	; 4
    28de:	80 83       	st	Z, r24
    28e0:	26 c0       	rjmp	.+76     	; 0x292e <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    28e2:	fe 01       	movw	r30, r28
    28e4:	ed 59       	subi	r30, 0x9D	; 157
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	fe 01       	movw	r30, r28
    28f0:	ee 59       	subi	r30, 0x9E	; 158
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a9 01       	movw	r20, r18
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <LCD_write_cmd_4bit+0x472>
    28fe:	55 95       	asr	r21
    2900:	47 95       	ror	r20
    2902:	8a 95       	dec	r24
    2904:	e2 f7       	brpl	.-8      	; 0x28fe <LCD_write_cmd_4bit+0x46e>
    2906:	ca 01       	movw	r24, r20
    2908:	98 2f       	mov	r25, r24
    290a:	91 70       	andi	r25, 0x01	; 1
    290c:	fe 01       	movw	r30, r28
    290e:	ee 59       	subi	r30, 0x9E	; 158
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	60 81       	ld	r22, Z
    2916:	49 2f       	mov	r20, r25
    2918:	0e 94 3e 2c 	call	0x587c	; 0x587c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    291c:	de 01       	movw	r26, r28
    291e:	ae 59       	subi	r26, 0x9E	; 158
    2920:	bf 4f       	sbci	r27, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	ee 59       	subi	r30, 0x9E	; 158
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	8c 93       	st	X, r24
    292e:	fe 01       	movw	r30, r28
    2930:	ee 59       	subi	r30, 0x9E	; 158
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	88 30       	cpi	r24, 0x08	; 8
    2938:	a0 f2       	brcs	.-88     	; 0x28e2 <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 e2       	ldi	r26, 0x20	; 32
    2948:	b1 e4       	ldi	r27, 0x41	; 65
    294a:	8d a7       	std	Y+45, r24	; 0x2d
    294c:	9e a7       	std	Y+46, r25	; 0x2e
    294e:	af a7       	std	Y+47, r26	; 0x2f
    2950:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2952:	6d a5       	ldd	r22, Y+45	; 0x2d
    2954:	7e a5       	ldd	r23, Y+46	; 0x2e
    2956:	8f a5       	ldd	r24, Y+47	; 0x2f
    2958:	98 a9       	ldd	r25, Y+48	; 0x30
    295a:	2b ea       	ldi	r18, 0xAB	; 171
    295c:	3a ea       	ldi	r19, 0xAA	; 170
    295e:	4a e2       	ldi	r20, 0x2A	; 42
    2960:	50 e4       	ldi	r21, 0x40	; 64
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	89 a7       	std	Y+41, r24	; 0x29
    296c:	9a a7       	std	Y+42, r25	; 0x2a
    296e:	ab a7       	std	Y+43, r26	; 0x2b
    2970:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2972:	69 a5       	ldd	r22, Y+41	; 0x29
    2974:	7a a5       	ldd	r23, Y+42	; 0x2a
    2976:	8b a5       	ldd	r24, Y+43	; 0x2b
    2978:	9c a5       	ldd	r25, Y+44	; 0x2c
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	1c f4       	brge	.+6      	; 0x2990 <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	88 a7       	std	Y+40, r24	; 0x28
    298e:	91 c0       	rjmp	.+290    	; 0x2ab2 <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    2990:	69 a5       	ldd	r22, Y+41	; 0x29
    2992:	7a a5       	ldd	r23, Y+42	; 0x2a
    2994:	8b a5       	ldd	r24, Y+43	; 0x2b
    2996:	9c a5       	ldd	r25, Y+44	; 0x2c
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	53 e4       	ldi	r21, 0x43	; 67
    29a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	0c f0       	brlt	.+2      	; 0x29aa <LCD_write_cmd_4bit+0x51a>
    29a8:	7b c0       	rjmp	.+246    	; 0x2aa0 <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    29aa:	6d a5       	ldd	r22, Y+45	; 0x2d
    29ac:	7e a5       	ldd	r23, Y+46	; 0x2e
    29ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b0:	98 a9       	ldd	r25, Y+48	; 0x30
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a e7       	ldi	r20, 0x7A	; 122
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8c a3       	std	Y+36, r24	; 0x24
    29c4:	9d a3       	std	Y+37, r25	; 0x25
    29c6:	ae a3       	std	Y+38, r26	; 0x26
    29c8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	6c a1       	ldd	r22, Y+36	; 0x24
    29cc:	7d a1       	ldd	r23, Y+37	; 0x25
    29ce:	8e a1       	ldd	r24, Y+38	; 0x26
    29d0:	9f a1       	ldd	r25, Y+39	; 0x27
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a ef       	ldi	r20, 0xFA	; 250
    29d8:	54 e4       	ldi	r21, 0x44	; 68
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	88 a3       	std	Y+32, r24	; 0x20
    29e4:	99 a3       	std	Y+33, r25	; 0x21
    29e6:	aa a3       	std	Y+34, r26	; 0x22
    29e8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29ea:	68 a1       	ldd	r22, Y+32	; 0x20
    29ec:	79 a1       	ldd	r23, Y+33	; 0x21
    29ee:	8a a1       	ldd	r24, Y+34	; 0x22
    29f0:	9b a1       	ldd	r25, Y+35	; 0x23
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e8       	ldi	r20, 0x80	; 128
    29f8:	5f e3       	ldi	r21, 0x3F	; 63
    29fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29fe:	88 23       	and	r24, r24
    2a00:	2c f4       	brge	.+10     	; 0x2a0c <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9f 8f       	std	Y+31, r25	; 0x1f
    2a08:	8e 8f       	std	Y+30, r24	; 0x1e
    2a0a:	3f c0       	rjmp	.+126    	; 0x2a8a <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    2a0c:	68 a1       	ldd	r22, Y+32	; 0x20
    2a0e:	79 a1       	ldd	r23, Y+33	; 0x21
    2a10:	8a a1       	ldd	r24, Y+34	; 0x22
    2a12:	9b a1       	ldd	r25, Y+35	; 0x23
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	3f ef       	ldi	r19, 0xFF	; 255
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	57 e4       	ldi	r21, 0x47	; 71
    2a1c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	4c f5       	brge	.+82     	; 0x2a76 <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a24:	6c a1       	ldd	r22, Y+36	; 0x24
    2a26:	7d a1       	ldd	r23, Y+37	; 0x25
    2a28:	8e a1       	ldd	r24, Y+38	; 0x26
    2a2a:	9f a1       	ldd	r25, Y+39	; 0x27
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 e2       	ldi	r20, 0x20	; 32
    2a32:	51 e4       	ldi	r21, 0x41	; 65
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9f 8f       	std	Y+31, r25	; 0x1f
    2a4a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a4c:	0f c0       	rjmp	.+30     	; 0x2a6c <LCD_write_cmd_4bit+0x5dc>
    2a4e:	88 ec       	ldi	r24, 0xC8	; 200
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9d 8f       	std	Y+29, r25	; 0x1d
    2a54:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a58:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <LCD_write_cmd_4bit+0x5ca>
    2a5e:	9d 8f       	std	Y+29, r25	; 0x1d
    2a60:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	9f 8f       	std	Y+31, r25	; 0x1f
    2a6a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	69 f7       	brne	.-38     	; 0x2a4e <LCD_write_cmd_4bit+0x5be>
    2a74:	24 c0       	rjmp	.+72     	; 0x2abe <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a76:	68 a1       	ldd	r22, Y+32	; 0x20
    2a78:	79 a1       	ldd	r23, Y+33	; 0x21
    2a7a:	8a a1       	ldd	r24, Y+34	; 0x22
    2a7c:	9b a1       	ldd	r25, Y+35	; 0x23
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	9f 8f       	std	Y+31, r25	; 0x1f
    2a88:	8e 8f       	std	Y+30, r24	; 0x1e
    2a8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a8c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a8e:	9b 8f       	std	Y+27, r25	; 0x1b
    2a90:	8a 8f       	std	Y+26, r24	; 0x1a
    2a92:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a94:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <LCD_write_cmd_4bit+0x606>
    2a9a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a9c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2aa0:	69 a5       	ldd	r22, Y+41	; 0x29
    2aa2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2aa4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	88 a7       	std	Y+40, r24	; 0x28
    2ab2:	88 a5       	ldd	r24, Y+40	; 0x28
    2ab4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ab6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ab8:	8a 95       	dec	r24
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_write_cmd_4bit+0x628>
    2abc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e8       	ldi	r26, 0x80	; 128
    2acc:	bf e3       	ldi	r27, 0x3F	; 63
    2ace:	8d 8b       	std	Y+21, r24	; 0x15
    2ad0:	9e 8b       	std	Y+22, r25	; 0x16
    2ad2:	af 8b       	std	Y+23, r26	; 0x17
    2ad4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ada:	8f 89       	ldd	r24, Y+23	; 0x17
    2adc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ade:	2b ea       	ldi	r18, 0xAB	; 171
    2ae0:	3a ea       	ldi	r19, 0xAA	; 170
    2ae2:	4a e2       	ldi	r20, 0x2A	; 42
    2ae4:	50 e4       	ldi	r21, 0x40	; 64
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	89 8b       	std	Y+17, r24	; 0x11
    2af0:	9a 8b       	std	Y+18, r25	; 0x12
    2af2:	ab 8b       	std	Y+19, r26	; 0x13
    2af4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2af6:	69 89       	ldd	r22, Y+17	; 0x11
    2af8:	7a 89       	ldd	r23, Y+18	; 0x12
    2afa:	8b 89       	ldd	r24, Y+19	; 0x13
    2afc:	9c 89       	ldd	r25, Y+20	; 0x14
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	1c f4       	brge	.+6      	; 0x2b14 <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	88 8b       	std	Y+16, r24	; 0x10
    2b12:	91 c0       	rjmp	.+290    	; 0x2c36 <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    2b14:	69 89       	ldd	r22, Y+17	; 0x11
    2b16:	7a 89       	ldd	r23, Y+18	; 0x12
    2b18:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	53 e4       	ldi	r21, 0x43	; 67
    2b24:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	0c f0       	brlt	.+2      	; 0x2b2e <LCD_write_cmd_4bit+0x69e>
    2b2c:	7b c0       	rjmp	.+246    	; 0x2c24 <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	4a e7       	ldi	r20, 0x7A	; 122
    2b3c:	54 e4       	ldi	r21, 0x44	; 68
    2b3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	8c 87       	std	Y+12, r24	; 0x0c
    2b48:	9d 87       	std	Y+13, r25	; 0x0d
    2b4a:	ae 87       	std	Y+14, r26	; 0x0e
    2b4c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b50:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b52:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b54:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	4a ef       	ldi	r20, 0xFA	; 250
    2b5c:	54 e4       	ldi	r21, 0x44	; 68
    2b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	88 87       	std	Y+8, r24	; 0x08
    2b68:	99 87       	std	Y+9, r25	; 0x09
    2b6a:	aa 87       	std	Y+10, r26	; 0x0a
    2b6c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b6e:	68 85       	ldd	r22, Y+8	; 0x08
    2b70:	79 85       	ldd	r23, Y+9	; 0x09
    2b72:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b74:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e8       	ldi	r20, 0x80	; 128
    2b7c:	5f e3       	ldi	r21, 0x3F	; 63
    2b7e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b82:	88 23       	and	r24, r24
    2b84:	2c f4       	brge	.+10     	; 0x2b90 <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9f 83       	std	Y+7, r25	; 0x07
    2b8c:	8e 83       	std	Y+6, r24	; 0x06
    2b8e:	3f c0       	rjmp	.+126    	; 0x2c0e <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    2b90:	68 85       	ldd	r22, Y+8	; 0x08
    2b92:	79 85       	ldd	r23, Y+9	; 0x09
    2b94:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b96:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	3f ef       	ldi	r19, 0xFF	; 255
    2b9c:	4f e7       	ldi	r20, 0x7F	; 127
    2b9e:	57 e4       	ldi	r21, 0x47	; 71
    2ba0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ba4:	18 16       	cp	r1, r24
    2ba6:	4c f5       	brge	.+82     	; 0x2bfa <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2baa:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bae:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e2       	ldi	r20, 0x20	; 32
    2bb6:	51 e4       	ldi	r21, 0x41	; 65
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9f 83       	std	Y+7, r25	; 0x07
    2bce:	8e 83       	std	Y+6, r24	; 0x06
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <LCD_write_cmd_4bit+0x760>
    2bd2:	88 ec       	ldi	r24, 0xC8	; 200
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9d 83       	std	Y+5, r25	; 0x05
    2bd8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bda:	8c 81       	ldd	r24, Y+4	; 0x04
    2bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_write_cmd_4bit+0x74e>
    2be2:	9d 83       	std	Y+5, r25	; 0x05
    2be4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be6:	8e 81       	ldd	r24, Y+6	; 0x06
    2be8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	9f 83       	std	Y+7, r25	; 0x07
    2bee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	69 f7       	brne	.-38     	; 0x2bd2 <LCD_write_cmd_4bit+0x742>
    2bf8:	24 c0       	rjmp	.+72     	; 0x2c42 <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfa:	68 85       	ldd	r22, Y+8	; 0x08
    2bfc:	79 85       	ldd	r23, Y+9	; 0x09
    2bfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c00:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9f 83       	std	Y+7, r25	; 0x07
    2c0c:	8e 83       	std	Y+6, r24	; 0x06
    2c0e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c10:	9f 81       	ldd	r25, Y+7	; 0x07
    2c12:	9b 83       	std	Y+3, r25	; 0x03
    2c14:	8a 83       	std	Y+2, r24	; 0x02
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_write_cmd_4bit+0x78a>
    2c1e:	9b 83       	std	Y+3, r25	; 0x03
    2c20:	8a 83       	std	Y+2, r24	; 0x02
    2c22:	0f c0       	rjmp	.+30     	; 0x2c42 <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c24:	69 89       	ldd	r22, Y+17	; 0x11
    2c26:	7a 89       	ldd	r23, Y+18	; 0x12
    2c28:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	88 8b       	std	Y+16, r24	; 0x10
    2c36:	88 89       	ldd	r24, Y+16	; 0x10
    2c38:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	8a 95       	dec	r24
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <LCD_write_cmd_4bit+0x7ac>
    2c40:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2c42:	fe 01       	movw	r30, r28
    2c44:	ef 59       	subi	r30, 0x9F	; 159
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	84 e0       	ldi	r24, 0x04	; 4
    2c4a:	80 83       	st	Z, r24
    2c4c:	27 c0       	rjmp	.+78     	; 0x2c9c <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ed 59       	subi	r30, 0x9D	; 157
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ef 59       	subi	r30, 0x9F	; 159
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	04 97       	sbiw	r24, 0x04	; 4
    2c68:	f9 01       	movw	r30, r18
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <LCD_write_cmd_4bit+0x7e0>
    2c6c:	f5 95       	asr	r31
    2c6e:	e7 95       	ror	r30
    2c70:	8a 95       	dec	r24
    2c72:	e2 f7       	brpl	.-8      	; 0x2c6c <LCD_write_cmd_4bit+0x7dc>
    2c74:	cf 01       	movw	r24, r30
    2c76:	98 2f       	mov	r25, r24
    2c78:	91 70       	andi	r25, 0x01	; 1
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ef 59       	subi	r30, 0x9F	; 159
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	60 81       	ld	r22, Z
    2c84:	49 2f       	mov	r20, r25
    2c86:	0e 94 3e 2c 	call	0x587c	; 0x587c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2c8a:	de 01       	movw	r26, r28
    2c8c:	af 59       	subi	r26, 0x9F	; 159
    2c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c90:	fe 01       	movw	r30, r28
    2c92:	ef 59       	subi	r30, 0x9F	; 159
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	80 81       	ld	r24, Z
    2c98:	8f 5f       	subi	r24, 0xFF	; 255
    2c9a:	8c 93       	st	X, r24
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	ef 59       	subi	r30, 0x9F	; 159
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 30       	cpi	r24, 0x08	; 8
    2ca6:	98 f2       	brcs	.-90     	; 0x2c4e <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
}
    2cb0:	cd 59       	subi	r28, 0x9D	; 157
    2cb2:	df 4f       	sbci	r29, 0xFF	; 255
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	08 95       	ret

00002cc8 <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	cb 5a       	subi	r28, 0xAB	; 171
    2cd6:	d0 40       	sbci	r29, 0x00	; 0
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	62 e0       	ldi	r22, 0x02	; 2
    2ce6:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	61 e0       	ldi	r22, 0x01	; 1
    2cee:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	eb 55       	subi	r30, 0x5B	; 91
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 e8       	ldi	r26, 0x80	; 128
    2cfe:	bf e3       	ldi	r27, 0x3F	; 63
    2d00:	80 83       	st	Z, r24
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	a2 83       	std	Z+2, r26	; 0x02
    2d06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d08:	8e 01       	movw	r16, r28
    2d0a:	0f 55       	subi	r16, 0x5F	; 95
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	fe 01       	movw	r30, r28
    2d10:	eb 55       	subi	r30, 0x5B	; 91
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	60 81       	ld	r22, Z
    2d16:	71 81       	ldd	r23, Z+1	; 0x01
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	93 81       	ldd	r25, Z+3	; 0x03
    2d1c:	2b ea       	ldi	r18, 0xAB	; 171
    2d1e:	3a ea       	ldi	r19, 0xAA	; 170
    2d20:	4a e2       	ldi	r20, 0x2A	; 42
    2d22:	50 e4       	ldi	r21, 0x40	; 64
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	80 83       	st	Z, r24
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	a2 83       	std	Z+2, r26	; 0x02
    2d34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d36:	fe 01       	movw	r30, r28
    2d38:	ef 55       	subi	r30, 0x5F	; 95
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	34 f4       	brge	.+12     	; 0x2d60 <LCD_function_set_4bit+0x98>
		__ticks = 1;
    2d54:	fe 01       	movw	r30, r28
    2d56:	e0 56       	subi	r30, 0x60	; 96
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	80 83       	st	Z, r24
    2d5e:	e0 c0       	rjmp	.+448    	; 0x2f20 <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    2d60:	fe 01       	movw	r30, r28
    2d62:	ef 55       	subi	r30, 0x5F	; 95
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	4f e7       	ldi	r20, 0x7F	; 127
    2d74:	53 e4       	ldi	r21, 0x43	; 67
    2d76:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d7a:	18 16       	cp	r1, r24
    2d7c:	0c f0       	brlt	.+2      	; 0x2d80 <LCD_function_set_4bit+0xb8>
    2d7e:	c0 c0       	rjmp	.+384    	; 0x2f00 <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2d80:	fe 01       	movw	r30, r28
    2d82:	eb 55       	subi	r30, 0x5B	; 91
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	93 81       	ldd	r25, Z+3	; 0x03
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a e7       	ldi	r20, 0x7A	; 122
    2d94:	54 e4       	ldi	r21, 0x44	; 68
    2d96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e4 56       	subi	r30, 0x64	; 100
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 83       	st	Z, r24
    2da6:	91 83       	std	Z+1, r25	; 0x01
    2da8:	a2 83       	std	Z+2, r26	; 0x02
    2daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	8e 01       	movw	r16, r28
    2dae:	08 56       	subi	r16, 0x68	; 104
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	fe 01       	movw	r30, r28
    2db4:	e4 56       	subi	r30, 0x64	; 100
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	4a ef       	ldi	r20, 0xFA	; 250
    2dc6:	54 e4       	ldi	r21, 0x44	; 68
    2dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	80 83       	st	Z, r24
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	a2 83       	std	Z+2, r26	; 0x02
    2dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e8 56       	subi	r30, 0x68	; 104
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5f e3       	ldi	r21, 0x3F	; 63
    2df0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2df4:	88 23       	and	r24, r24
    2df6:	44 f4       	brge	.+16     	; 0x2e08 <LCD_function_set_4bit+0x140>
		__ticks = 1;
    2df8:	fe 01       	movw	r30, r28
    2dfa:	ea 56       	subi	r30, 0x6A	; 106
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	80 83       	st	Z, r24
    2e06:	64 c0       	rjmp	.+200    	; 0x2ed0 <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e8 56       	subi	r30, 0x68	; 104
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	3f ef       	ldi	r19, 0xFF	; 255
    2e1a:	4f e7       	ldi	r20, 0x7F	; 127
    2e1c:	57 e4       	ldi	r21, 0x47	; 71
    2e1e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e22:	18 16       	cp	r1, r24
    2e24:	0c f0       	brlt	.+2      	; 0x2e28 <LCD_function_set_4bit+0x160>
    2e26:	43 c0       	rjmp	.+134    	; 0x2eae <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e4 56       	subi	r30, 0x64	; 100
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e2       	ldi	r20, 0x20	; 32
    2e3c:	51 e4       	ldi	r21, 0x41	; 65
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	8e 01       	movw	r16, r28
    2e48:	0a 56       	subi	r16, 0x6A	; 106
    2e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	f8 01       	movw	r30, r16
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
    2e5e:	1f c0       	rjmp	.+62     	; 0x2e9e <LCD_function_set_4bit+0x1d6>
    2e60:	fe 01       	movw	r30, r28
    2e62:	ec 56       	subi	r30, 0x6C	; 108
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	88 ec       	ldi	r24, 0xC8	; 200
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ec 56       	subi	r30, 0x6C	; 108
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_function_set_4bit+0x1b0>
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ec 56       	subi	r30, 0x6C	; 108
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e86:	de 01       	movw	r26, r28
    2e88:	aa 56       	subi	r26, 0x6A	; 106
    2e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ea 56       	subi	r30, 0x6A	; 106
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	9c 93       	st	X, r25
    2e9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	ea 56       	subi	r30, 0x6A	; 106
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	d1 f6       	brne	.-76     	; 0x2e60 <LCD_function_set_4bit+0x198>
    2eac:	4b c0       	rjmp	.+150    	; 0x2f44 <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	8e 01       	movw	r16, r28
    2eb0:	0a 56       	subi	r16, 0x6A	; 106
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e8 56       	subi	r30, 0x68	; 104
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	f8 01       	movw	r30, r16
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24
    2ed0:	de 01       	movw	r26, r28
    2ed2:	ae 56       	subi	r26, 0x6E	; 110
    2ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ea 56       	subi	r30, 0x6A	; 106
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	11 96       	adiw	r26, 0x01	; 1
    2ee2:	9c 93       	st	X, r25
    2ee4:	8e 93       	st	-X, r24
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ee 56       	subi	r30, 0x6E	; 110
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <LCD_function_set_4bit+0x228>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ee 56       	subi	r30, 0x6E	; 110
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
    2efe:	22 c0       	rjmp	.+68     	; 0x2f44 <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f00:	8e 01       	movw	r16, r28
    2f02:	00 56       	subi	r16, 0x60	; 96
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	fe 01       	movw	r30, r28
    2f08:	ef 55       	subi	r30, 0x5F	; 95
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	80 83       	st	Z, r24
    2f20:	de 01       	movw	r26, r28
    2f22:	af 56       	subi	r26, 0x6F	; 111
    2f24:	bf 4f       	sbci	r27, 0xFF	; 255
    2f26:	fe 01       	movw	r30, r28
    2f28:	e0 56       	subi	r30, 0x60	; 96
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f30:	fe 01       	movw	r30, r28
    2f32:	ef 56       	subi	r30, 0x6F	; 111
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	8a 95       	dec	r24
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <LCD_function_set_4bit+0x270>
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	ef 56       	subi	r30, 0x6F	; 111
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e3 57       	subi	r30, 0x73	; 115
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e8       	ldi	r26, 0x80	; 128
    2f58:	bf e3       	ldi	r27, 0x3F	; 63
    2f5a:	80 83       	st	Z, r24
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	a2 83       	std	Z+2, r26	; 0x02
    2f60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f62:	8e 01       	movw	r16, r28
    2f64:	07 57       	subi	r16, 0x77	; 119
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e3 57       	subi	r30, 0x73	; 115
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	2b ea       	ldi	r18, 0xAB	; 171
    2f78:	3a ea       	ldi	r19, 0xAA	; 170
    2f7a:	4a e2       	ldi	r20, 0x2A	; 42
    2f7c:	50 e4       	ldi	r21, 0x40	; 64
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	f8 01       	movw	r30, r16
    2f88:	80 83       	st	Z, r24
    2f8a:	91 83       	std	Z+1, r25	; 0x01
    2f8c:	a2 83       	std	Z+2, r26	; 0x02
    2f8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f90:	fe 01       	movw	r30, r28
    2f92:	e7 57       	subi	r30, 0x77	; 119
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	60 81       	ld	r22, Z
    2f98:	71 81       	ldd	r23, Z+1	; 0x01
    2f9a:	82 81       	ldd	r24, Z+2	; 0x02
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e8       	ldi	r20, 0x80	; 128
    2fa4:	5f e3       	ldi	r21, 0x3F	; 63
    2fa6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	34 f4       	brge	.+12     	; 0x2fba <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e8 57       	subi	r30, 0x78	; 120
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	80 83       	st	Z, r24
    2fb8:	e0 c0       	rjmp	.+448    	; 0x317a <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e7 57       	subi	r30, 0x77	; 119
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	60 81       	ld	r22, Z
    2fc2:	71 81       	ldd	r23, Z+1	; 0x01
    2fc4:	82 81       	ldd	r24, Z+2	; 0x02
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4f e7       	ldi	r20, 0x7F	; 127
    2fce:	53 e4       	ldi	r21, 0x43	; 67
    2fd0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fd4:	18 16       	cp	r1, r24
    2fd6:	0c f0       	brlt	.+2      	; 0x2fda <LCD_function_set_4bit+0x312>
    2fd8:	c0 c0       	rjmp	.+384    	; 0x315a <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e3 57       	subi	r30, 0x73	; 115
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	82 81       	ldd	r24, Z+2	; 0x02
    2fe6:	93 81       	ldd	r25, Z+3	; 0x03
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	4a e7       	ldi	r20, 0x7A	; 122
    2fee:	54 e4       	ldi	r21, 0x44	; 68
    2ff0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	ec 57       	subi	r30, 0x7C	; 124
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 83       	st	Z, r24
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	a2 83       	std	Z+2, r26	; 0x02
    3004:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	8e 01       	movw	r16, r28
    3008:	00 58       	subi	r16, 0x80	; 128
    300a:	1f 4f       	sbci	r17, 0xFF	; 255
    300c:	fe 01       	movw	r30, r28
    300e:	ec 57       	subi	r30, 0x7C	; 124
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	4a ef       	ldi	r20, 0xFA	; 250
    3020:	54 e4       	ldi	r21, 0x44	; 68
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	f8 01       	movw	r30, r16
    302c:	80 83       	st	Z, r24
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	a2 83       	std	Z+2, r26	; 0x02
    3032:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3034:	fe 01       	movw	r30, r28
    3036:	e0 58       	subi	r30, 0x80	; 128
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	60 81       	ld	r22, Z
    303c:	71 81       	ldd	r23, Z+1	; 0x01
    303e:	82 81       	ldd	r24, Z+2	; 0x02
    3040:	93 81       	ldd	r25, Z+3	; 0x03
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    304e:	88 23       	and	r24, r24
    3050:	44 f4       	brge	.+16     	; 0x3062 <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    3052:	fe 01       	movw	r30, r28
    3054:	e2 58       	subi	r30, 0x82	; 130
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	91 83       	std	Z+1, r25	; 0x01
    305e:	80 83       	st	Z, r24
    3060:	64 c0       	rjmp	.+200    	; 0x312a <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    3062:	fe 01       	movw	r30, r28
    3064:	e0 58       	subi	r30, 0x80	; 128
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	3f ef       	ldi	r19, 0xFF	; 255
    3074:	4f e7       	ldi	r20, 0x7F	; 127
    3076:	57 e4       	ldi	r21, 0x47	; 71
    3078:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    307c:	18 16       	cp	r1, r24
    307e:	0c f0       	brlt	.+2      	; 0x3082 <LCD_function_set_4bit+0x3ba>
    3080:	43 c0       	rjmp	.+134    	; 0x3108 <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3082:	fe 01       	movw	r30, r28
    3084:	ec 57       	subi	r30, 0x7C	; 124
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	60 81       	ld	r22, Z
    308a:	71 81       	ldd	r23, Z+1	; 0x01
    308c:	82 81       	ldd	r24, Z+2	; 0x02
    308e:	93 81       	ldd	r25, Z+3	; 0x03
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e2       	ldi	r20, 0x20	; 32
    3096:	51 e4       	ldi	r21, 0x41	; 65
    3098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	8e 01       	movw	r16, r28
    30a2:	02 58       	subi	r16, 0x82	; 130
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	f8 01       	movw	r30, r16
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
    30b8:	1f c0       	rjmp	.+62     	; 0x30f8 <LCD_function_set_4bit+0x430>
    30ba:	fe 01       	movw	r30, r28
    30bc:	e4 58       	subi	r30, 0x84	; 132
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	88 ec       	ldi	r24, 0xC8	; 200
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	91 83       	std	Z+1, r25	; 0x01
    30c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30c8:	fe 01       	movw	r30, r28
    30ca:	e4 58       	subi	r30, 0x84	; 132
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <LCD_function_set_4bit+0x40a>
    30d6:	fe 01       	movw	r30, r28
    30d8:	e4 58       	subi	r30, 0x84	; 132
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	de 01       	movw	r26, r28
    30e2:	a2 58       	subi	r26, 0x82	; 130
    30e4:	bf 4f       	sbci	r27, 0xFF	; 255
    30e6:	fe 01       	movw	r30, r28
    30e8:	e2 58       	subi	r30, 0x82	; 130
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	11 96       	adiw	r26, 0x01	; 1
    30f4:	9c 93       	st	X, r25
    30f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	fe 01       	movw	r30, r28
    30fa:	e2 58       	subi	r30, 0x82	; 130
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	91 81       	ldd	r25, Z+1	; 0x01
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	d1 f6       	brne	.-76     	; 0x30ba <LCD_function_set_4bit+0x3f2>
    3106:	4b c0       	rjmp	.+150    	; 0x319e <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3108:	8e 01       	movw	r16, r28
    310a:	02 58       	subi	r16, 0x82	; 130
    310c:	1f 4f       	sbci	r17, 0xFF	; 255
    310e:	fe 01       	movw	r30, r28
    3110:	e0 58       	subi	r30, 0x80	; 128
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	60 81       	ld	r22, Z
    3116:	71 81       	ldd	r23, Z+1	; 0x01
    3118:	82 81       	ldd	r24, Z+2	; 0x02
    311a:	93 81       	ldd	r25, Z+3	; 0x03
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	f8 01       	movw	r30, r16
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	80 83       	st	Z, r24
    312a:	de 01       	movw	r26, r28
    312c:	a6 58       	subi	r26, 0x86	; 134
    312e:	bf 4f       	sbci	r27, 0xFF	; 255
    3130:	fe 01       	movw	r30, r28
    3132:	e2 58       	subi	r30, 0x82	; 130
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	11 96       	adiw	r26, 0x01	; 1
    313c:	9c 93       	st	X, r25
    313e:	8e 93       	st	-X, r24
    3140:	fe 01       	movw	r30, r28
    3142:	e6 58       	subi	r30, 0x86	; 134
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	f1 f7       	brne	.-4      	; 0x314a <LCD_function_set_4bit+0x482>
    314e:	fe 01       	movw	r30, r28
    3150:	e6 58       	subi	r30, 0x86	; 134
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	80 83       	st	Z, r24
    3158:	22 c0       	rjmp	.+68     	; 0x319e <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    315a:	8e 01       	movw	r16, r28
    315c:	08 57       	subi	r16, 0x78	; 120
    315e:	1f 4f       	sbci	r17, 0xFF	; 255
    3160:	fe 01       	movw	r30, r28
    3162:	e7 57       	subi	r30, 0x77	; 119
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	f8 01       	movw	r30, r16
    3178:	80 83       	st	Z, r24
    317a:	de 01       	movw	r26, r28
    317c:	a7 58       	subi	r26, 0x87	; 135
    317e:	bf 4f       	sbci	r27, 0xFF	; 255
    3180:	fe 01       	movw	r30, r28
    3182:	e8 57       	subi	r30, 0x78	; 120
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	80 81       	ld	r24, Z
    3188:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    318a:	fe 01       	movw	r30, r28
    318c:	e7 58       	subi	r30, 0x87	; 135
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	80 81       	ld	r24, Z
    3192:	8a 95       	dec	r24
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_function_set_4bit+0x4ca>
    3196:	fe 01       	movw	r30, r28
    3198:	e7 58       	subi	r30, 0x87	; 135
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    319e:	fe 01       	movw	r30, r28
    31a0:	e5 55       	subi	r30, 0x55	; 85
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	10 82       	st	Z, r1
    31a6:	23 c0       	rjmp	.+70     	; 0x31ee <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    31a8:	fe 01       	movw	r30, r28
    31aa:	e5 55       	subi	r30, 0x55	; 85
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	80 81       	ld	r24, Z
    31b0:	48 2f       	mov	r20, r24
    31b2:	4c 5f       	subi	r20, 0xFC	; 252
    31b4:	fe 01       	movw	r30, r28
    31b6:	e5 55       	subi	r30, 0x55	; 85
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <LCD_function_set_4bit+0x502>
    31c6:	95 95       	asr	r25
    31c8:	87 95       	ror	r24
    31ca:	2a 95       	dec	r18
    31cc:	e2 f7       	brpl	.-8      	; 0x31c6 <LCD_function_set_4bit+0x4fe>
    31ce:	98 2f       	mov	r25, r24
    31d0:	91 70       	andi	r25, 0x01	; 1
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	64 2f       	mov	r22, r20
    31d6:	49 2f       	mov	r20, r25
    31d8:	0e 94 3e 2c 	call	0x587c	; 0x587c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    31dc:	de 01       	movw	r26, r28
    31de:	a5 55       	subi	r26, 0x55	; 85
    31e0:	bf 4f       	sbci	r27, 0xFF	; 255
    31e2:	fe 01       	movw	r30, r28
    31e4:	e5 55       	subi	r30, 0x55	; 85
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	8f 5f       	subi	r24, 0xFF	; 255
    31ec:	8c 93       	st	X, r24
    31ee:	fe 01       	movw	r30, r28
    31f0:	e5 55       	subi	r30, 0x55	; 85
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	84 30       	cpi	r24, 0x04	; 4
    31f8:	b8 f2       	brcs	.-82     	; 0x31a8 <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    3202:	fe 01       	movw	r30, r28
    3204:	eb 58       	subi	r30, 0x8B	; 139
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a0 e2       	ldi	r26, 0x20	; 32
    320e:	b1 e4       	ldi	r27, 0x41	; 65
    3210:	80 83       	st	Z, r24
    3212:	91 83       	std	Z+1, r25	; 0x01
    3214:	a2 83       	std	Z+2, r26	; 0x02
    3216:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3218:	8e 01       	movw	r16, r28
    321a:	0f 58       	subi	r16, 0x8F	; 143
    321c:	1f 4f       	sbci	r17, 0xFF	; 255
    321e:	fe 01       	movw	r30, r28
    3220:	eb 58       	subi	r30, 0x8B	; 139
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	2b ea       	ldi	r18, 0xAB	; 171
    322e:	3a ea       	ldi	r19, 0xAA	; 170
    3230:	4a e2       	ldi	r20, 0x2A	; 42
    3232:	50 e4       	ldi	r21, 0x40	; 64
    3234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	f8 01       	movw	r30, r16
    323e:	80 83       	st	Z, r24
    3240:	91 83       	std	Z+1, r25	; 0x01
    3242:	a2 83       	std	Z+2, r26	; 0x02
    3244:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3246:	fe 01       	movw	r30, r28
    3248:	ef 58       	subi	r30, 0x8F	; 143
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	60 81       	ld	r22, Z
    324e:	71 81       	ldd	r23, Z+1	; 0x01
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	93 81       	ldd	r25, Z+3	; 0x03
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e8       	ldi	r20, 0x80	; 128
    325a:	5f e3       	ldi	r21, 0x3F	; 63
    325c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3260:	88 23       	and	r24, r24
    3262:	34 f4       	brge	.+12     	; 0x3270 <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    3264:	fe 01       	movw	r30, r28
    3266:	e0 59       	subi	r30, 0x90	; 144
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	80 83       	st	Z, r24
    326e:	e0 c0       	rjmp	.+448    	; 0x3430 <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    3270:	fe 01       	movw	r30, r28
    3272:	ef 58       	subi	r30, 0x8F	; 143
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	53 e4       	ldi	r21, 0x43	; 67
    3286:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	0c f0       	brlt	.+2      	; 0x3290 <LCD_function_set_4bit+0x5c8>
    328e:	c0 c0       	rjmp	.+384    	; 0x3410 <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    3290:	fe 01       	movw	r30, r28
    3292:	eb 58       	subi	r30, 0x8B	; 139
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	93 81       	ldd	r25, Z+3	; 0x03
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	4a e7       	ldi	r20, 0x7A	; 122
    32a4:	54 e4       	ldi	r21, 0x44	; 68
    32a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	fe 01       	movw	r30, r28
    32b0:	e4 59       	subi	r30, 0x94	; 148
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 83       	st	Z, r24
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	a2 83       	std	Z+2, r26	; 0x02
    32ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	8e 01       	movw	r16, r28
    32be:	08 59       	subi	r16, 0x98	; 152
    32c0:	1f 4f       	sbci	r17, 0xFF	; 255
    32c2:	fe 01       	movw	r30, r28
    32c4:	e4 59       	subi	r30, 0x94	; 148
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	60 81       	ld	r22, Z
    32ca:	71 81       	ldd	r23, Z+1	; 0x01
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a ef       	ldi	r20, 0xFA	; 250
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	f8 01       	movw	r30, r16
    32e2:	80 83       	st	Z, r24
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	a2 83       	std	Z+2, r26	; 0x02
    32e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32ea:	fe 01       	movw	r30, r28
    32ec:	e8 59       	subi	r30, 0x98	; 152
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e8       	ldi	r20, 0x80	; 128
    32fe:	5f e3       	ldi	r21, 0x3F	; 63
    3300:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3304:	88 23       	and	r24, r24
    3306:	44 f4       	brge	.+16     	; 0x3318 <LCD_function_set_4bit+0x650>
		__ticks = 1;
    3308:	fe 01       	movw	r30, r28
    330a:	ea 59       	subi	r30, 0x9A	; 154
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	80 83       	st	Z, r24
    3316:	64 c0       	rjmp	.+200    	; 0x33e0 <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    3318:	fe 01       	movw	r30, r28
    331a:	e8 59       	subi	r30, 0x98	; 152
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	93 81       	ldd	r25, Z+3	; 0x03
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	4f e7       	ldi	r20, 0x7F	; 127
    332c:	57 e4       	ldi	r21, 0x47	; 71
    332e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3332:	18 16       	cp	r1, r24
    3334:	0c f0       	brlt	.+2      	; 0x3338 <LCD_function_set_4bit+0x670>
    3336:	43 c0       	rjmp	.+134    	; 0x33be <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	fe 01       	movw	r30, r28
    333a:	e4 59       	subi	r30, 0x94	; 148
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e2       	ldi	r20, 0x20	; 32
    334c:	51 e4       	ldi	r21, 0x41	; 65
    334e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8e 01       	movw	r16, r28
    3358:	0a 59       	subi	r16, 0x9A	; 154
    335a:	1f 4f       	sbci	r17, 0xFF	; 255
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	f8 01       	movw	r30, r16
    336a:	91 83       	std	Z+1, r25	; 0x01
    336c:	80 83       	st	Z, r24
    336e:	1f c0       	rjmp	.+62     	; 0x33ae <LCD_function_set_4bit+0x6e6>
    3370:	fe 01       	movw	r30, r28
    3372:	ec 59       	subi	r30, 0x9C	; 156
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	88 ec       	ldi	r24, 0xC8	; 200
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    337e:	fe 01       	movw	r30, r28
    3380:	ec 59       	subi	r30, 0x9C	; 156
    3382:	ff 4f       	sbci	r31, 0xFF	; 255
    3384:	80 81       	ld	r24, Z
    3386:	91 81       	ldd	r25, Z+1	; 0x01
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <LCD_function_set_4bit+0x6c0>
    338c:	fe 01       	movw	r30, r28
    338e:	ec 59       	subi	r30, 0x9C	; 156
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	de 01       	movw	r26, r28
    3398:	aa 59       	subi	r26, 0x9A	; 154
    339a:	bf 4f       	sbci	r27, 0xFF	; 255
    339c:	fe 01       	movw	r30, r28
    339e:	ea 59       	subi	r30, 0x9A	; 154
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	11 96       	adiw	r26, 0x01	; 1
    33aa:	9c 93       	st	X, r25
    33ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ae:	fe 01       	movw	r30, r28
    33b0:	ea 59       	subi	r30, 0x9A	; 154
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	80 81       	ld	r24, Z
    33b6:	91 81       	ldd	r25, Z+1	; 0x01
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	d1 f6       	brne	.-76     	; 0x3370 <LCD_function_set_4bit+0x6a8>
    33bc:	4b c0       	rjmp	.+150    	; 0x3454 <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33be:	8e 01       	movw	r16, r28
    33c0:	0a 59       	subi	r16, 0x9A	; 154
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	fe 01       	movw	r30, r28
    33c6:	e8 59       	subi	r30, 0x98	; 152
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	f8 01       	movw	r30, r16
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
    33e0:	de 01       	movw	r26, r28
    33e2:	ae 59       	subi	r26, 0x9E	; 158
    33e4:	bf 4f       	sbci	r27, 0xFF	; 255
    33e6:	fe 01       	movw	r30, r28
    33e8:	ea 59       	subi	r30, 0x9A	; 154
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	11 96       	adiw	r26, 0x01	; 1
    33f2:	9c 93       	st	X, r25
    33f4:	8e 93       	st	-X, r24
    33f6:	fe 01       	movw	r30, r28
    33f8:	ee 59       	subi	r30, 0x9E	; 158
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	80 81       	ld	r24, Z
    33fe:	91 81       	ldd	r25, Z+1	; 0x01
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <LCD_function_set_4bit+0x738>
    3404:	fe 01       	movw	r30, r28
    3406:	ee 59       	subi	r30, 0x9E	; 158
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	22 c0       	rjmp	.+68     	; 0x3454 <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3410:	8e 01       	movw	r16, r28
    3412:	00 59       	subi	r16, 0x90	; 144
    3414:	1f 4f       	sbci	r17, 0xFF	; 255
    3416:	fe 01       	movw	r30, r28
    3418:	ef 58       	subi	r30, 0x8F	; 143
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	f8 01       	movw	r30, r16
    342e:	80 83       	st	Z, r24
    3430:	de 01       	movw	r26, r28
    3432:	af 59       	subi	r26, 0x9F	; 159
    3434:	bf 4f       	sbci	r27, 0xFF	; 255
    3436:	fe 01       	movw	r30, r28
    3438:	e0 59       	subi	r30, 0x90	; 144
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	80 81       	ld	r24, Z
    343e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3440:	fe 01       	movw	r30, r28
    3442:	ef 59       	subi	r30, 0x9F	; 159
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	8a 95       	dec	r24
    344a:	f1 f7       	brne	.-4      	; 0x3448 <LCD_function_set_4bit+0x780>
    344c:	fe 01       	movw	r30, r28
    344e:	ef 59       	subi	r30, 0x9F	; 159
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3454:	82 e0       	ldi	r24, 0x02	; 2
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    345c:	fe 01       	movw	r30, r28
    345e:	e3 5a       	subi	r30, 0xA3	; 163
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	a0 e8       	ldi	r26, 0x80	; 128
    3468:	bf e3       	ldi	r27, 0x3F	; 63
    346a:	80 83       	st	Z, r24
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	a2 83       	std	Z+2, r26	; 0x02
    3470:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3472:	8e 01       	movw	r16, r28
    3474:	07 5a       	subi	r16, 0xA7	; 167
    3476:	1f 4f       	sbci	r17, 0xFF	; 255
    3478:	fe 01       	movw	r30, r28
    347a:	e3 5a       	subi	r30, 0xA3	; 163
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	60 81       	ld	r22, Z
    3480:	71 81       	ldd	r23, Z+1	; 0x01
    3482:	82 81       	ldd	r24, Z+2	; 0x02
    3484:	93 81       	ldd	r25, Z+3	; 0x03
    3486:	2b ea       	ldi	r18, 0xAB	; 171
    3488:	3a ea       	ldi	r19, 0xAA	; 170
    348a:	4a e2       	ldi	r20, 0x2A	; 42
    348c:	50 e4       	ldi	r21, 0x40	; 64
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	f8 01       	movw	r30, r16
    3498:	80 83       	st	Z, r24
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	a2 83       	std	Z+2, r26	; 0x02
    349e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34a0:	fe 01       	movw	r30, r28
    34a2:	e7 5a       	subi	r30, 0xA7	; 167
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	93 81       	ldd	r25, Z+3	; 0x03
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e8       	ldi	r20, 0x80	; 128
    34b4:	5f e3       	ldi	r21, 0x3F	; 63
    34b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	34 f4       	brge	.+12     	; 0x34ca <LCD_function_set_4bit+0x802>
		__ticks = 1;
    34be:	fe 01       	movw	r30, r28
    34c0:	e8 5a       	subi	r30, 0xA8	; 168
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	80 83       	st	Z, r24
    34c8:	e0 c0       	rjmp	.+448    	; 0x368a <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    34ca:	fe 01       	movw	r30, r28
    34cc:	e7 5a       	subi	r30, 0xA7	; 167
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	60 81       	ld	r22, Z
    34d2:	71 81       	ldd	r23, Z+1	; 0x01
    34d4:	82 81       	ldd	r24, Z+2	; 0x02
    34d6:	93 81       	ldd	r25, Z+3	; 0x03
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	4f e7       	ldi	r20, 0x7F	; 127
    34de:	53 e4       	ldi	r21, 0x43	; 67
    34e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    34e4:	18 16       	cp	r1, r24
    34e6:	0c f0       	brlt	.+2      	; 0x34ea <LCD_function_set_4bit+0x822>
    34e8:	c0 c0       	rjmp	.+384    	; 0x366a <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    34ea:	fe 01       	movw	r30, r28
    34ec:	e3 5a       	subi	r30, 0xA3	; 163
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	60 81       	ld	r22, Z
    34f2:	71 81       	ldd	r23, Z+1	; 0x01
    34f4:	82 81       	ldd	r24, Z+2	; 0x02
    34f6:	93 81       	ldd	r25, Z+3	; 0x03
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	4a e7       	ldi	r20, 0x7A	; 122
    34fe:	54 e4       	ldi	r21, 0x44	; 68
    3500:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	fe 01       	movw	r30, r28
    350a:	ec 5a       	subi	r30, 0xAC	; 172
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	80 83       	st	Z, r24
    3510:	91 83       	std	Z+1, r25	; 0x01
    3512:	a2 83       	std	Z+2, r26	; 0x02
    3514:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3516:	8e 01       	movw	r16, r28
    3518:	00 5b       	subi	r16, 0xB0	; 176
    351a:	1f 4f       	sbci	r17, 0xFF	; 255
    351c:	fe 01       	movw	r30, r28
    351e:	ec 5a       	subi	r30, 0xAC	; 172
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	60 81       	ld	r22, Z
    3524:	71 81       	ldd	r23, Z+1	; 0x01
    3526:	82 81       	ldd	r24, Z+2	; 0x02
    3528:	93 81       	ldd	r25, Z+3	; 0x03
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	4a ef       	ldi	r20, 0xFA	; 250
    3530:	54 e4       	ldi	r21, 0x44	; 68
    3532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	f8 01       	movw	r30, r16
    353c:	80 83       	st	Z, r24
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	a2 83       	std	Z+2, r26	; 0x02
    3542:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3544:	fe 01       	movw	r30, r28
    3546:	e0 5b       	subi	r30, 0xB0	; 176
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    355e:	88 23       	and	r24, r24
    3560:	44 f4       	brge	.+16     	; 0x3572 <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    3562:	fe 01       	movw	r30, r28
    3564:	e2 5b       	subi	r30, 0xB2	; 178
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	91 83       	std	Z+1, r25	; 0x01
    356e:	80 83       	st	Z, r24
    3570:	64 c0       	rjmp	.+200    	; 0x363a <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    3572:	fe 01       	movw	r30, r28
    3574:	e0 5b       	subi	r30, 0xB0	; 176
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	0c f0       	brlt	.+2      	; 0x3592 <LCD_function_set_4bit+0x8ca>
    3590:	43 c0       	rjmp	.+134    	; 0x3618 <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3592:	fe 01       	movw	r30, r28
    3594:	ec 5a       	subi	r30, 0xAC	; 172
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	60 81       	ld	r22, Z
    359a:	71 81       	ldd	r23, Z+1	; 0x01
    359c:	82 81       	ldd	r24, Z+2	; 0x02
    359e:	93 81       	ldd	r25, Z+3	; 0x03
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	8e 01       	movw	r16, r28
    35b2:	02 5b       	subi	r16, 0xB2	; 178
    35b4:	1f 4f       	sbci	r17, 0xFF	; 255
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	f8 01       	movw	r30, r16
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
    35c8:	1f c0       	rjmp	.+62     	; 0x3608 <LCD_function_set_4bit+0x940>
    35ca:	fe 01       	movw	r30, r28
    35cc:	e4 5b       	subi	r30, 0xB4	; 180
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	88 ec       	ldi	r24, 0xC8	; 200
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35d8:	fe 01       	movw	r30, r28
    35da:	e4 5b       	subi	r30, 0xB4	; 180
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	91 81       	ldd	r25, Z+1	; 0x01
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <LCD_function_set_4bit+0x91a>
    35e6:	fe 01       	movw	r30, r28
    35e8:	e4 5b       	subi	r30, 0xB4	; 180
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f0:	de 01       	movw	r26, r28
    35f2:	a2 5b       	subi	r26, 0xB2	; 178
    35f4:	bf 4f       	sbci	r27, 0xFF	; 255
    35f6:	fe 01       	movw	r30, r28
    35f8:	e2 5b       	subi	r30, 0xB2	; 178
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	01 97       	sbiw	r24, 0x01	; 1
    3602:	11 96       	adiw	r26, 0x01	; 1
    3604:	9c 93       	st	X, r25
    3606:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3608:	fe 01       	movw	r30, r28
    360a:	e2 5b       	subi	r30, 0xB2	; 178
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	80 81       	ld	r24, Z
    3610:	91 81       	ldd	r25, Z+1	; 0x01
    3612:	00 97       	sbiw	r24, 0x00	; 0
    3614:	d1 f6       	brne	.-76     	; 0x35ca <LCD_function_set_4bit+0x902>
    3616:	4b c0       	rjmp	.+150    	; 0x36ae <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3618:	8e 01       	movw	r16, r28
    361a:	02 5b       	subi	r16, 0xB2	; 178
    361c:	1f 4f       	sbci	r17, 0xFF	; 255
    361e:	fe 01       	movw	r30, r28
    3620:	e0 5b       	subi	r30, 0xB0	; 176
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	60 81       	ld	r22, Z
    3626:	71 81       	ldd	r23, Z+1	; 0x01
    3628:	82 81       	ldd	r24, Z+2	; 0x02
    362a:	93 81       	ldd	r25, Z+3	; 0x03
    362c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	f8 01       	movw	r30, r16
    3636:	91 83       	std	Z+1, r25	; 0x01
    3638:	80 83       	st	Z, r24
    363a:	de 01       	movw	r26, r28
    363c:	a6 5b       	subi	r26, 0xB6	; 182
    363e:	bf 4f       	sbci	r27, 0xFF	; 255
    3640:	fe 01       	movw	r30, r28
    3642:	e2 5b       	subi	r30, 0xB2	; 178
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	80 81       	ld	r24, Z
    3648:	91 81       	ldd	r25, Z+1	; 0x01
    364a:	11 96       	adiw	r26, 0x01	; 1
    364c:	9c 93       	st	X, r25
    364e:	8e 93       	st	-X, r24
    3650:	fe 01       	movw	r30, r28
    3652:	e6 5b       	subi	r30, 0xB6	; 182
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	80 81       	ld	r24, Z
    3658:	91 81       	ldd	r25, Z+1	; 0x01
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <LCD_function_set_4bit+0x992>
    365e:	fe 01       	movw	r30, r28
    3660:	e6 5b       	subi	r30, 0xB6	; 182
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
    3668:	22 c0       	rjmp	.+68     	; 0x36ae <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    366a:	8e 01       	movw	r16, r28
    366c:	08 5a       	subi	r16, 0xA8	; 168
    366e:	1f 4f       	sbci	r17, 0xFF	; 255
    3670:	fe 01       	movw	r30, r28
    3672:	e7 5a       	subi	r30, 0xA7	; 167
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	60 81       	ld	r22, Z
    3678:	71 81       	ldd	r23, Z+1	; 0x01
    367a:	82 81       	ldd	r24, Z+2	; 0x02
    367c:	93 81       	ldd	r25, Z+3	; 0x03
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	f8 01       	movw	r30, r16
    3688:	80 83       	st	Z, r24
    368a:	de 01       	movw	r26, r28
    368c:	a7 5b       	subi	r26, 0xB7	; 183
    368e:	bf 4f       	sbci	r27, 0xFF	; 255
    3690:	fe 01       	movw	r30, r28
    3692:	e8 5a       	subi	r30, 0xA8	; 168
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 81       	ld	r24, Z
    3698:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    369a:	fe 01       	movw	r30, r28
    369c:	e7 5b       	subi	r30, 0xB7	; 183
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 81       	ld	r24, Z
    36a2:	8a 95       	dec	r24
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <LCD_function_set_4bit+0x9da>
    36a6:	fe 01       	movw	r30, r28
    36a8:	e7 5b       	subi	r30, 0xB7	; 183
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    36ae:	fe 01       	movw	r30, r28
    36b0:	e6 55       	subi	r30, 0x56	; 86
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	10 82       	st	Z, r1
    36b6:	23 c0       	rjmp	.+70     	; 0x36fe <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    36b8:	fe 01       	movw	r30, r28
    36ba:	e6 55       	subi	r30, 0x56	; 86
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	80 81       	ld	r24, Z
    36c0:	48 2f       	mov	r20, r24
    36c2:	4c 5f       	subi	r20, 0xFC	; 252
    36c4:	fe 01       	movw	r30, r28
    36c6:	e6 55       	subi	r30, 0x56	; 86
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	80 81       	ld	r24, Z
    36cc:	28 2f       	mov	r18, r24
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	82 e0       	ldi	r24, 0x02	; 2
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <LCD_function_set_4bit+0xa12>
    36d6:	95 95       	asr	r25
    36d8:	87 95       	ror	r24
    36da:	2a 95       	dec	r18
    36dc:	e2 f7       	brpl	.-8      	; 0x36d6 <LCD_function_set_4bit+0xa0e>
    36de:	98 2f       	mov	r25, r24
    36e0:	91 70       	andi	r25, 0x01	; 1
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	64 2f       	mov	r22, r20
    36e6:	49 2f       	mov	r20, r25
    36e8:	0e 94 3e 2c 	call	0x587c	; 0x587c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    36ec:	de 01       	movw	r26, r28
    36ee:	a6 55       	subi	r26, 0x56	; 86
    36f0:	bf 4f       	sbci	r27, 0xFF	; 255
    36f2:	fe 01       	movw	r30, r28
    36f4:	e6 55       	subi	r30, 0x56	; 86
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	80 81       	ld	r24, Z
    36fa:	8f 5f       	subi	r24, 0xFF	; 255
    36fc:	8c 93       	st	X, r24
    36fe:	fe 01       	movw	r30, r28
    3700:	e6 55       	subi	r30, 0x56	; 86
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 81       	ld	r24, Z
    3706:	84 30       	cpi	r24, 0x04	; 4
    3708:	b8 f2       	brcs	.-82     	; 0x36b8 <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    3712:	fe 01       	movw	r30, r28
    3714:	eb 5b       	subi	r30, 0xBB	; 187
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	a0 e2       	ldi	r26, 0x20	; 32
    371e:	b1 e4       	ldi	r27, 0x41	; 65
    3720:	80 83       	st	Z, r24
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	a2 83       	std	Z+2, r26	; 0x02
    3726:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3728:	8e 01       	movw	r16, r28
    372a:	0f 5b       	subi	r16, 0xBF	; 191
    372c:	1f 4f       	sbci	r17, 0xFF	; 255
    372e:	fe 01       	movw	r30, r28
    3730:	eb 5b       	subi	r30, 0xBB	; 187
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	60 81       	ld	r22, Z
    3736:	71 81       	ldd	r23, Z+1	; 0x01
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	2b ea       	ldi	r18, 0xAB	; 171
    373e:	3a ea       	ldi	r19, 0xAA	; 170
    3740:	4a e2       	ldi	r20, 0x2A	; 42
    3742:	50 e4       	ldi	r21, 0x40	; 64
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	f8 01       	movw	r30, r16
    374e:	80 83       	st	Z, r24
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	a2 83       	std	Z+2, r26	; 0x02
    3754:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3756:	fe 01       	movw	r30, r28
    3758:	ef 5b       	subi	r30, 0xBF	; 191
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	60 81       	ld	r22, Z
    375e:	71 81       	ldd	r23, Z+1	; 0x01
    3760:	82 81       	ldd	r24, Z+2	; 0x02
    3762:	93 81       	ldd	r25, Z+3	; 0x03
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5f e3       	ldi	r21, 0x3F	; 63
    376c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3770:	88 23       	and	r24, r24
    3772:	34 f4       	brge	.+12     	; 0x3780 <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	fe 01       	movw	r30, r28
    3778:	e0 5c       	subi	r30, 0xC0	; 192
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 83       	st	Z, r24
    377e:	9d c0       	rjmp	.+314    	; 0x38ba <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    3780:	fe 01       	movw	r30, r28
    3782:	ef 5b       	subi	r30, 0xBF	; 191
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	4f e7       	ldi	r20, 0x7F	; 127
    3794:	53 e4       	ldi	r21, 0x43	; 67
    3796:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    379a:	18 16       	cp	r1, r24
    379c:	0c f0       	brlt	.+2      	; 0x37a0 <LCD_function_set_4bit+0xad8>
    379e:	7e c0       	rjmp	.+252    	; 0x389c <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    37a0:	fe 01       	movw	r30, r28
    37a2:	eb 5b       	subi	r30, 0xBB	; 187
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	60 81       	ld	r22, Z
    37a8:	71 81       	ldd	r23, Z+1	; 0x01
    37aa:	82 81       	ldd	r24, Z+2	; 0x02
    37ac:	93 81       	ldd	r25, Z+3	; 0x03
    37ae:	20 e0       	ldi	r18, 0x00	; 0
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	4a e7       	ldi	r20, 0x7A	; 122
    37b4:	54 e4       	ldi	r21, 0x44	; 68
    37b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	8c af       	std	Y+60, r24	; 0x3c
    37c0:	9d af       	std	Y+61, r25	; 0x3d
    37c2:	ae af       	std	Y+62, r26	; 0x3e
    37c4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c6:	6c ad       	ldd	r22, Y+60	; 0x3c
    37c8:	7d ad       	ldd	r23, Y+61	; 0x3d
    37ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    37cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	4a ef       	ldi	r20, 0xFA	; 250
    37d4:	54 e4       	ldi	r21, 0x44	; 68
    37d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37da:	dc 01       	movw	r26, r24
    37dc:	cb 01       	movw	r24, r22
    37de:	88 af       	std	Y+56, r24	; 0x38
    37e0:	99 af       	std	Y+57, r25	; 0x39
    37e2:	aa af       	std	Y+58, r26	; 0x3a
    37e4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    37e6:	68 ad       	ldd	r22, Y+56	; 0x38
    37e8:	79 ad       	ldd	r23, Y+57	; 0x39
    37ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    37ec:	9b ad       	ldd	r25, Y+59	; 0x3b
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	40 e8       	ldi	r20, 0x80	; 128
    37f4:	5f e3       	ldi	r21, 0x3F	; 63
    37f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37fa:	88 23       	and	r24, r24
    37fc:	2c f4       	brge	.+10     	; 0x3808 <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	9f ab       	std	Y+55, r25	; 0x37
    3804:	8e ab       	std	Y+54, r24	; 0x36
    3806:	3f c0       	rjmp	.+126    	; 0x3886 <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    3808:	68 ad       	ldd	r22, Y+56	; 0x38
    380a:	79 ad       	ldd	r23, Y+57	; 0x39
    380c:	8a ad       	ldd	r24, Y+58	; 0x3a
    380e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	3f ef       	ldi	r19, 0xFF	; 255
    3814:	4f e7       	ldi	r20, 0x7F	; 127
    3816:	57 e4       	ldi	r21, 0x47	; 71
    3818:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    381c:	18 16       	cp	r1, r24
    381e:	4c f5       	brge	.+82     	; 0x3872 <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3820:	6c ad       	ldd	r22, Y+60	; 0x3c
    3822:	7d ad       	ldd	r23, Y+61	; 0x3d
    3824:	8e ad       	ldd	r24, Y+62	; 0x3e
    3826:	9f ad       	ldd	r25, Y+63	; 0x3f
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 e2       	ldi	r20, 0x20	; 32
    382e:	51 e4       	ldi	r21, 0x41	; 65
    3830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	bc 01       	movw	r22, r24
    383a:	cd 01       	movw	r24, r26
    383c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	9f ab       	std	Y+55, r25	; 0x37
    3846:	8e ab       	std	Y+54, r24	; 0x36
    3848:	0f c0       	rjmp	.+30     	; 0x3868 <LCD_function_set_4bit+0xba0>
    384a:	88 ec       	ldi	r24, 0xC8	; 200
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	9d ab       	std	Y+53, r25	; 0x35
    3850:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3852:	8c a9       	ldd	r24, Y+52	; 0x34
    3854:	9d a9       	ldd	r25, Y+53	; 0x35
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	f1 f7       	brne	.-4      	; 0x3856 <LCD_function_set_4bit+0xb8e>
    385a:	9d ab       	std	Y+53, r25	; 0x35
    385c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385e:	8e a9       	ldd	r24, Y+54	; 0x36
    3860:	9f a9       	ldd	r25, Y+55	; 0x37
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	9f ab       	std	Y+55, r25	; 0x37
    3866:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3868:	8e a9       	ldd	r24, Y+54	; 0x36
    386a:	9f a9       	ldd	r25, Y+55	; 0x37
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	69 f7       	brne	.-38     	; 0x384a <LCD_function_set_4bit+0xb82>
    3870:	2d c0       	rjmp	.+90     	; 0x38cc <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3872:	68 ad       	ldd	r22, Y+56	; 0x38
    3874:	79 ad       	ldd	r23, Y+57	; 0x39
    3876:	8a ad       	ldd	r24, Y+58	; 0x3a
    3878:	9b ad       	ldd	r25, Y+59	; 0x3b
    387a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	9f ab       	std	Y+55, r25	; 0x37
    3884:	8e ab       	std	Y+54, r24	; 0x36
    3886:	8e a9       	ldd	r24, Y+54	; 0x36
    3888:	9f a9       	ldd	r25, Y+55	; 0x37
    388a:	9b ab       	std	Y+51, r25	; 0x33
    388c:	8a ab       	std	Y+50, r24	; 0x32
    388e:	8a a9       	ldd	r24, Y+50	; 0x32
    3890:	9b a9       	ldd	r25, Y+51	; 0x33
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <LCD_function_set_4bit+0xbca>
    3896:	9b ab       	std	Y+51, r25	; 0x33
    3898:	8a ab       	std	Y+50, r24	; 0x32
    389a:	18 c0       	rjmp	.+48     	; 0x38cc <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    389c:	fe 01       	movw	r30, r28
    389e:	ef 5b       	subi	r30, 0xBF	; 191
    38a0:	ff 4f       	sbci	r31, 0xFF	; 255
    38a2:	60 81       	ld	r22, Z
    38a4:	71 81       	ldd	r23, Z+1	; 0x01
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	93 81       	ldd	r25, Z+3	; 0x03
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	fe 01       	movw	r30, r28
    38b4:	e0 5c       	subi	r30, 0xC0	; 192
    38b6:	ff 4f       	sbci	r31, 0xFF	; 255
    38b8:	80 83       	st	Z, r24
    38ba:	fe 01       	movw	r30, r28
    38bc:	e0 5c       	subi	r30, 0xC0	; 192
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	80 81       	ld	r24, Z
    38c2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38c4:	89 a9       	ldd	r24, Y+49	; 0x31
    38c6:	8a 95       	dec	r24
    38c8:	f1 f7       	brne	.-4      	; 0x38c6 <LCD_function_set_4bit+0xbfe>
    38ca:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    38cc:	82 e0       	ldi	r24, 0x02	; 2
    38ce:	60 e0       	ldi	r22, 0x00	; 0
    38d0:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	a0 e8       	ldi	r26, 0x80	; 128
    38da:	bf e3       	ldi	r27, 0x3F	; 63
    38dc:	8d a7       	std	Y+45, r24	; 0x2d
    38de:	9e a7       	std	Y+46, r25	; 0x2e
    38e0:	af a7       	std	Y+47, r26	; 0x2f
    38e2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    38e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    38e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ea:	98 a9       	ldd	r25, Y+48	; 0x30
    38ec:	2b ea       	ldi	r18, 0xAB	; 171
    38ee:	3a ea       	ldi	r19, 0xAA	; 170
    38f0:	4a e2       	ldi	r20, 0x2A	; 42
    38f2:	50 e4       	ldi	r21, 0x40	; 64
    38f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f8:	dc 01       	movw	r26, r24
    38fa:	cb 01       	movw	r24, r22
    38fc:	89 a7       	std	Y+41, r24	; 0x29
    38fe:	9a a7       	std	Y+42, r25	; 0x2a
    3900:	ab a7       	std	Y+43, r26	; 0x2b
    3902:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3904:	69 a5       	ldd	r22, Y+41	; 0x29
    3906:	7a a5       	ldd	r23, Y+42	; 0x2a
    3908:	8b a5       	ldd	r24, Y+43	; 0x2b
    390a:	9c a5       	ldd	r25, Y+44	; 0x2c
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e8       	ldi	r20, 0x80	; 128
    3912:	5f e3       	ldi	r21, 0x3F	; 63
    3914:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3918:	88 23       	and	r24, r24
    391a:	1c f4       	brge	.+6      	; 0x3922 <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	88 a7       	std	Y+40, r24	; 0x28
    3920:	91 c0       	rjmp	.+290    	; 0x3a44 <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    3922:	69 a5       	ldd	r22, Y+41	; 0x29
    3924:	7a a5       	ldd	r23, Y+42	; 0x2a
    3926:	8b a5       	ldd	r24, Y+43	; 0x2b
    3928:	9c a5       	ldd	r25, Y+44	; 0x2c
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	4f e7       	ldi	r20, 0x7F	; 127
    3930:	53 e4       	ldi	r21, 0x43	; 67
    3932:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3936:	18 16       	cp	r1, r24
    3938:	0c f0       	brlt	.+2      	; 0x393c <LCD_function_set_4bit+0xc74>
    393a:	7b c0       	rjmp	.+246    	; 0x3a32 <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    393c:	6d a5       	ldd	r22, Y+45	; 0x2d
    393e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3940:	8f a5       	ldd	r24, Y+47	; 0x2f
    3942:	98 a9       	ldd	r25, Y+48	; 0x30
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a e7       	ldi	r20, 0x7A	; 122
    394a:	54 e4       	ldi	r21, 0x44	; 68
    394c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	8c a3       	std	Y+36, r24	; 0x24
    3956:	9d a3       	std	Y+37, r25	; 0x25
    3958:	ae a3       	std	Y+38, r26	; 0x26
    395a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395c:	6c a1       	ldd	r22, Y+36	; 0x24
    395e:	7d a1       	ldd	r23, Y+37	; 0x25
    3960:	8e a1       	ldd	r24, Y+38	; 0x26
    3962:	9f a1       	ldd	r25, Y+39	; 0x27
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	4a ef       	ldi	r20, 0xFA	; 250
    396a:	54 e4       	ldi	r21, 0x44	; 68
    396c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	88 a3       	std	Y+32, r24	; 0x20
    3976:	99 a3       	std	Y+33, r25	; 0x21
    3978:	aa a3       	std	Y+34, r26	; 0x22
    397a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    397c:	68 a1       	ldd	r22, Y+32	; 0x20
    397e:	79 a1       	ldd	r23, Y+33	; 0x21
    3980:	8a a1       	ldd	r24, Y+34	; 0x22
    3982:	9b a1       	ldd	r25, Y+35	; 0x23
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e8       	ldi	r20, 0x80	; 128
    398a:	5f e3       	ldi	r21, 0x3F	; 63
    398c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3990:	88 23       	and	r24, r24
    3992:	2c f4       	brge	.+10     	; 0x399e <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9f 8f       	std	Y+31, r25	; 0x1f
    399a:	8e 8f       	std	Y+30, r24	; 0x1e
    399c:	3f c0       	rjmp	.+126    	; 0x3a1c <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    399e:	68 a1       	ldd	r22, Y+32	; 0x20
    39a0:	79 a1       	ldd	r23, Y+33	; 0x21
    39a2:	8a a1       	ldd	r24, Y+34	; 0x22
    39a4:	9b a1       	ldd	r25, Y+35	; 0x23
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	3f ef       	ldi	r19, 0xFF	; 255
    39aa:	4f e7       	ldi	r20, 0x7F	; 127
    39ac:	57 e4       	ldi	r21, 0x47	; 71
    39ae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39b2:	18 16       	cp	r1, r24
    39b4:	4c f5       	brge	.+82     	; 0x3a08 <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b6:	6c a1       	ldd	r22, Y+36	; 0x24
    39b8:	7d a1       	ldd	r23, Y+37	; 0x25
    39ba:	8e a1       	ldd	r24, Y+38	; 0x26
    39bc:	9f a1       	ldd	r25, Y+39	; 0x27
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	40 e2       	ldi	r20, 0x20	; 32
    39c4:	51 e4       	ldi	r21, 0x41	; 65
    39c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	9f 8f       	std	Y+31, r25	; 0x1f
    39dc:	8e 8f       	std	Y+30, r24	; 0x1e
    39de:	0f c0       	rjmp	.+30     	; 0x39fe <LCD_function_set_4bit+0xd36>
    39e0:	88 ec       	ldi	r24, 0xC8	; 200
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	9d 8f       	std	Y+29, r25	; 0x1d
    39e6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <LCD_function_set_4bit+0xd24>
    39f0:	9d 8f       	std	Y+29, r25	; 0x1d
    39f2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	9f 8f       	std	Y+31, r25	; 0x1f
    39fc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a00:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a02:	00 97       	sbiw	r24, 0x00	; 0
    3a04:	69 f7       	brne	.-38     	; 0x39e0 <LCD_function_set_4bit+0xd18>
    3a06:	24 c0       	rjmp	.+72     	; 0x3a50 <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a08:	68 a1       	ldd	r22, Y+32	; 0x20
    3a0a:	79 a1       	ldd	r23, Y+33	; 0x21
    3a0c:	8a a1       	ldd	r24, Y+34	; 0x22
    3a0e:	9b a1       	ldd	r25, Y+35	; 0x23
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	9f 8f       	std	Y+31, r25	; 0x1f
    3a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    3a1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3a20:	9b 8f       	std	Y+27, r25	; 0x1b
    3a22:	8a 8f       	std	Y+26, r24	; 0x1a
    3a24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <LCD_function_set_4bit+0xd60>
    3a2c:	9b 8f       	std	Y+27, r25	; 0x1b
    3a2e:	8a 8f       	std	Y+26, r24	; 0x1a
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a32:	69 a5       	ldd	r22, Y+41	; 0x29
    3a34:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a36:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a38:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	88 a7       	std	Y+40, r24	; 0x28
    3a44:	88 a5       	ldd	r24, Y+40	; 0x28
    3a46:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a48:	89 8d       	ldd	r24, Y+25	; 0x19
    3a4a:	8a 95       	dec	r24
    3a4c:	f1 f7       	brne	.-4      	; 0x3a4a <LCD_function_set_4bit+0xd82>
    3a4e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3a50:	fe 01       	movw	r30, r28
    3a52:	e7 55       	subi	r30, 0x57	; 87
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	10 82       	st	Z, r1
    3a58:	23 c0       	rjmp	.+70     	; 0x3aa0 <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	e7 55       	subi	r30, 0x57	; 87
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	80 81       	ld	r24, Z
    3a62:	48 2f       	mov	r20, r24
    3a64:	4c 5f       	subi	r20, 0xFC	; 252
    3a66:	fe 01       	movw	r30, r28
    3a68:	e7 55       	subi	r30, 0x57	; 87
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 81       	ld	r24, Z
    3a6e:	28 2f       	mov	r18, r24
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	88 e0       	ldi	r24, 0x08	; 8
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	02 c0       	rjmp	.+4      	; 0x3a7c <LCD_function_set_4bit+0xdb4>
    3a78:	95 95       	asr	r25
    3a7a:	87 95       	ror	r24
    3a7c:	2a 95       	dec	r18
    3a7e:	e2 f7       	brpl	.-8      	; 0x3a78 <LCD_function_set_4bit+0xdb0>
    3a80:	98 2f       	mov	r25, r24
    3a82:	91 70       	andi	r25, 0x01	; 1
    3a84:	82 e0       	ldi	r24, 0x02	; 2
    3a86:	64 2f       	mov	r22, r20
    3a88:	49 2f       	mov	r20, r25
    3a8a:	0e 94 3e 2c 	call	0x587c	; 0x587c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3a8e:	de 01       	movw	r26, r28
    3a90:	a7 55       	subi	r26, 0x57	; 87
    3a92:	bf 4f       	sbci	r27, 0xFF	; 255
    3a94:	fe 01       	movw	r30, r28
    3a96:	e7 55       	subi	r30, 0x57	; 87
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	80 81       	ld	r24, Z
    3a9c:	8f 5f       	subi	r24, 0xFF	; 255
    3a9e:	8c 93       	st	X, r24
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e7 55       	subi	r30, 0x57	; 87
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	84 30       	cpi	r24, 0x04	; 4
    3aaa:	b8 f2       	brcs	.-82     	; 0x3a5a <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3aac:	82 e0       	ldi	r24, 0x02	; 2
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e2       	ldi	r26, 0x20	; 32
    3aba:	b1 e4       	ldi	r27, 0x41	; 65
    3abc:	8d 8b       	std	Y+21, r24	; 0x15
    3abe:	9e 8b       	std	Y+22, r25	; 0x16
    3ac0:	af 8b       	std	Y+23, r26	; 0x17
    3ac2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aca:	98 8d       	ldd	r25, Y+24	; 0x18
    3acc:	2b ea       	ldi	r18, 0xAB	; 171
    3ace:	3a ea       	ldi	r19, 0xAA	; 170
    3ad0:	4a e2       	ldi	r20, 0x2A	; 42
    3ad2:	50 e4       	ldi	r21, 0x40	; 64
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	89 8b       	std	Y+17, r24	; 0x11
    3ade:	9a 8b       	std	Y+18, r25	; 0x12
    3ae0:	ab 8b       	std	Y+19, r26	; 0x13
    3ae2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3ae4:	69 89       	ldd	r22, Y+17	; 0x11
    3ae6:	7a 89       	ldd	r23, Y+18	; 0x12
    3ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aea:	9c 89       	ldd	r25, Y+20	; 0x14
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	1c f4       	brge	.+6      	; 0x3b02 <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	88 8b       	std	Y+16, r24	; 0x10
    3b00:	91 c0       	rjmp	.+290    	; 0x3c24 <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    3b02:	69 89       	ldd	r22, Y+17	; 0x11
    3b04:	7a 89       	ldd	r23, Y+18	; 0x12
    3b06:	8b 89       	ldd	r24, Y+19	; 0x13
    3b08:	9c 89       	ldd	r25, Y+20	; 0x14
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	4f e7       	ldi	r20, 0x7F	; 127
    3b10:	53 e4       	ldi	r21, 0x43	; 67
    3b12:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b16:	18 16       	cp	r1, r24
    3b18:	0c f0       	brlt	.+2      	; 0x3b1c <LCD_function_set_4bit+0xe54>
    3b1a:	7b c0       	rjmp	.+246    	; 0x3c12 <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    3b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b20:	8f 89       	ldd	r24, Y+23	; 0x17
    3b22:	98 8d       	ldd	r25, Y+24	; 0x18
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	4a e7       	ldi	r20, 0x7A	; 122
    3b2a:	54 e4       	ldi	r21, 0x44	; 68
    3b2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8c 87       	std	Y+12, r24	; 0x0c
    3b36:	9d 87       	std	Y+13, r25	; 0x0d
    3b38:	ae 87       	std	Y+14, r26	; 0x0e
    3b3a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b40:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b42:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	4a ef       	ldi	r20, 0xFA	; 250
    3b4a:	54 e4       	ldi	r21, 0x44	; 68
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	88 87       	std	Y+8, r24	; 0x08
    3b56:	99 87       	std	Y+9, r25	; 0x09
    3b58:	aa 87       	std	Y+10, r26	; 0x0a
    3b5a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b5c:	68 85       	ldd	r22, Y+8	; 0x08
    3b5e:	79 85       	ldd	r23, Y+9	; 0x09
    3b60:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b62:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	40 e8       	ldi	r20, 0x80	; 128
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b70:	88 23       	and	r24, r24
    3b72:	2c f4       	brge	.+10     	; 0x3b7e <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	9f 83       	std	Y+7, r25	; 0x07
    3b7a:	8e 83       	std	Y+6, r24	; 0x06
    3b7c:	3f c0       	rjmp	.+126    	; 0x3bfc <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    3b7e:	68 85       	ldd	r22, Y+8	; 0x08
    3b80:	79 85       	ldd	r23, Y+9	; 0x09
    3b82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b84:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	3f ef       	ldi	r19, 0xFF	; 255
    3b8a:	4f e7       	ldi	r20, 0x7F	; 127
    3b8c:	57 e4       	ldi	r21, 0x47	; 71
    3b8e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b92:	18 16       	cp	r1, r24
    3b94:	4c f5       	brge	.+82     	; 0x3be8 <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b96:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b98:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	bc 01       	movw	r22, r24
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9f 83       	std	Y+7, r25	; 0x07
    3bbc:	8e 83       	std	Y+6, r24	; 0x06
    3bbe:	0f c0       	rjmp	.+30     	; 0x3bde <LCD_function_set_4bit+0xf16>
    3bc0:	88 ec       	ldi	r24, 0xC8	; 200
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	9d 83       	std	Y+5, r25	; 0x05
    3bc6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bca:	9d 81       	ldd	r25, Y+5	; 0x05
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <LCD_function_set_4bit+0xf04>
    3bd0:	9d 83       	std	Y+5, r25	; 0x05
    3bd2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	9f 83       	std	Y+7, r25	; 0x07
    3bdc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bde:	8e 81       	ldd	r24, Y+6	; 0x06
    3be0:	9f 81       	ldd	r25, Y+7	; 0x07
    3be2:	00 97       	sbiw	r24, 0x00	; 0
    3be4:	69 f7       	brne	.-38     	; 0x3bc0 <LCD_function_set_4bit+0xef8>
    3be6:	24 c0       	rjmp	.+72     	; 0x3c30 <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be8:	68 85       	ldd	r22, Y+8	; 0x08
    3bea:	79 85       	ldd	r23, Y+9	; 0x09
    3bec:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bee:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	9f 83       	std	Y+7, r25	; 0x07
    3bfa:	8e 83       	std	Y+6, r24	; 0x06
    3bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bfe:	9f 81       	ldd	r25, Y+7	; 0x07
    3c00:	9b 83       	std	Y+3, r25	; 0x03
    3c02:	8a 83       	std	Y+2, r24	; 0x02
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	9b 81       	ldd	r25, Y+3	; 0x03
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <LCD_function_set_4bit+0xf40>
    3c0c:	9b 83       	std	Y+3, r25	; 0x03
    3c0e:	8a 83       	std	Y+2, r24	; 0x02
    3c10:	0f c0       	rjmp	.+30     	; 0x3c30 <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c12:	69 89       	ldd	r22, Y+17	; 0x11
    3c14:	7a 89       	ldd	r23, Y+18	; 0x12
    3c16:	8b 89       	ldd	r24, Y+19	; 0x13
    3c18:	9c 89       	ldd	r25, Y+20	; 0x14
    3c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	88 8b       	std	Y+16, r24	; 0x10
    3c24:	88 89       	ldd	r24, Y+16	; 0x10
    3c26:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	8a 95       	dec	r24
    3c2c:	f1 f7       	brne	.-4      	; 0x3c2a <LCD_function_set_4bit+0xf62>
    3c2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    3c30:	c5 55       	subi	r28, 0x55	; 85
    3c32:	df 4f       	sbci	r29, 0xFF	; 255
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	f8 94       	cli
    3c38:	de bf       	out	0x3e, r29	; 62
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	cd bf       	out	0x3d, r28	; 61
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	08 95       	ret

00003c48 <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    3c48:	0f 93       	push	r16
    3c4a:	1f 93       	push	r17
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	c1 56       	subi	r28, 0x61	; 97
    3c56:	d0 40       	sbci	r29, 0x00	; 0
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    3c62:	82 e0       	ldi	r24, 0x02	; 2
    3c64:	67 e0       	ldi	r22, 0x07	; 7
    3c66:	40 e0       	ldi	r20, 0x00	; 0
    3c68:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    3c6c:	82 e0       	ldi	r24, 0x02	; 2
    3c6e:	66 e0       	ldi	r22, 0x06	; 6
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	65 e0       	ldi	r22, 0x05	; 5
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    3c80:	82 e0       	ldi	r24, 0x02	; 2
    3c82:	64 e0       	ldi	r22, 0x04	; 4
    3c84:	40 e0       	ldi	r20, 0x00	; 0
    3c86:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	62 e0       	ldi	r22, 0x02	; 2
    3c8e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    3c92:	82 e0       	ldi	r24, 0x02	; 2
    3c94:	61 e0       	ldi	r22, 0x01	; 1
    3c96:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    3c9a:	fe 01       	movw	r30, r28
    3c9c:	e3 5a       	subi	r30, 0xA3	; 163
    3c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	a0 e8       	ldi	r26, 0x80	; 128
    3ca6:	bf e3       	ldi	r27, 0x3F	; 63
    3ca8:	80 83       	st	Z, r24
    3caa:	91 83       	std	Z+1, r25	; 0x01
    3cac:	a2 83       	std	Z+2, r26	; 0x02
    3cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cb0:	8e 01       	movw	r16, r28
    3cb2:	07 5a       	subi	r16, 0xA7	; 167
    3cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e3 5a       	subi	r30, 0xA3	; 163
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	60 81       	ld	r22, Z
    3cbe:	71 81       	ldd	r23, Z+1	; 0x01
    3cc0:	82 81       	ldd	r24, Z+2	; 0x02
    3cc2:	93 81       	ldd	r25, Z+3	; 0x03
    3cc4:	2b ea       	ldi	r18, 0xAB	; 171
    3cc6:	3a ea       	ldi	r19, 0xAA	; 170
    3cc8:	4a e2       	ldi	r20, 0x2A	; 42
    3cca:	50 e4       	ldi	r21, 0x40	; 64
    3ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	f8 01       	movw	r30, r16
    3cd6:	80 83       	st	Z, r24
    3cd8:	91 83       	std	Z+1, r25	; 0x01
    3cda:	a2 83       	std	Z+2, r26	; 0x02
    3cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cde:	fe 01       	movw	r30, r28
    3ce0:	e7 5a       	subi	r30, 0xA7	; 167
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	60 81       	ld	r22, Z
    3ce6:	71 81       	ldd	r23, Z+1	; 0x01
    3ce8:	82 81       	ldd	r24, Z+2	; 0x02
    3cea:	93 81       	ldd	r25, Z+3	; 0x03
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e8       	ldi	r20, 0x80	; 128
    3cf2:	5f e3       	ldi	r21, 0x3F	; 63
    3cf4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cf8:	88 23       	and	r24, r24
    3cfa:	34 f4       	brge	.+12     	; 0x3d08 <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	e8 5a       	subi	r30, 0xA8	; 168
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	80 83       	st	Z, r24
    3d06:	e0 c0       	rjmp	.+448    	; 0x3ec8 <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e7 5a       	subi	r30, 0xA7	; 167
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	60 81       	ld	r22, Z
    3d10:	71 81       	ldd	r23, Z+1	; 0x01
    3d12:	82 81       	ldd	r24, Z+2	; 0x02
    3d14:	93 81       	ldd	r25, Z+3	; 0x03
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	4f e7       	ldi	r20, 0x7F	; 127
    3d1c:	53 e4       	ldi	r21, 0x43	; 67
    3d1e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d22:	18 16       	cp	r1, r24
    3d24:	0c f0       	brlt	.+2      	; 0x3d28 <LCD_read_data_4bit+0xe0>
    3d26:	c0 c0       	rjmp	.+384    	; 0x3ea8 <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    3d28:	fe 01       	movw	r30, r28
    3d2a:	e3 5a       	subi	r30, 0xA3	; 163
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	60 81       	ld	r22, Z
    3d30:	71 81       	ldd	r23, Z+1	; 0x01
    3d32:	82 81       	ldd	r24, Z+2	; 0x02
    3d34:	93 81       	ldd	r25, Z+3	; 0x03
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a e7       	ldi	r20, 0x7A	; 122
    3d3c:	54 e4       	ldi	r21, 0x44	; 68
    3d3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	fe 01       	movw	r30, r28
    3d48:	ec 5a       	subi	r30, 0xAC	; 172
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	80 83       	st	Z, r24
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	a2 83       	std	Z+2, r26	; 0x02
    3d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d54:	8e 01       	movw	r16, r28
    3d56:	00 5b       	subi	r16, 0xB0	; 176
    3d58:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ec 5a       	subi	r30, 0xAC	; 172
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	60 81       	ld	r22, Z
    3d62:	71 81       	ldd	r23, Z+1	; 0x01
    3d64:	82 81       	ldd	r24, Z+2	; 0x02
    3d66:	93 81       	ldd	r25, Z+3	; 0x03
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	4a ef       	ldi	r20, 0xFA	; 250
    3d6e:	54 e4       	ldi	r21, 0x44	; 68
    3d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	f8 01       	movw	r30, r16
    3d7a:	80 83       	st	Z, r24
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	a2 83       	std	Z+2, r26	; 0x02
    3d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d82:	fe 01       	movw	r30, r28
    3d84:	e0 5b       	subi	r30, 0xB0	; 176
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	60 81       	ld	r22, Z
    3d8a:	71 81       	ldd	r23, Z+1	; 0x01
    3d8c:	82 81       	ldd	r24, Z+2	; 0x02
    3d8e:	93 81       	ldd	r25, Z+3	; 0x03
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	40 e8       	ldi	r20, 0x80	; 128
    3d96:	5f e3       	ldi	r21, 0x3F	; 63
    3d98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d9c:	88 23       	and	r24, r24
    3d9e:	44 f4       	brge	.+16     	; 0x3db0 <LCD_read_data_4bit+0x168>
		__ticks = 1;
    3da0:	fe 01       	movw	r30, r28
    3da2:	e2 5b       	subi	r30, 0xB2	; 178
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	80 83       	st	Z, r24
    3dae:	64 c0       	rjmp	.+200    	; 0x3e78 <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    3db0:	fe 01       	movw	r30, r28
    3db2:	e0 5b       	subi	r30, 0xB0	; 176
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	3f ef       	ldi	r19, 0xFF	; 255
    3dc2:	4f e7       	ldi	r20, 0x7F	; 127
    3dc4:	57 e4       	ldi	r21, 0x47	; 71
    3dc6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3dca:	18 16       	cp	r1, r24
    3dcc:	0c f0       	brlt	.+2      	; 0x3dd0 <LCD_read_data_4bit+0x188>
    3dce:	43 c0       	rjmp	.+134    	; 0x3e56 <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	ec 5a       	subi	r30, 0xAC	; 172
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	60 81       	ld	r22, Z
    3dd8:	71 81       	ldd	r23, Z+1	; 0x01
    3dda:	82 81       	ldd	r24, Z+2	; 0x02
    3ddc:	93 81       	ldd	r25, Z+3	; 0x03
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e2       	ldi	r20, 0x20	; 32
    3de4:	51 e4       	ldi	r21, 0x41	; 65
    3de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	8e 01       	movw	r16, r28
    3df0:	02 5b       	subi	r16, 0xB2	; 178
    3df2:	1f 4f       	sbci	r17, 0xFF	; 255
    3df4:	bc 01       	movw	r22, r24
    3df6:	cd 01       	movw	r24, r26
    3df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	cb 01       	movw	r24, r22
    3e00:	f8 01       	movw	r30, r16
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    3e06:	1f c0       	rjmp	.+62     	; 0x3e46 <LCD_read_data_4bit+0x1fe>
    3e08:	fe 01       	movw	r30, r28
    3e0a:	e4 5b       	subi	r30, 0xB4	; 180
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	88 ec       	ldi	r24, 0xC8	; 200
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	91 83       	std	Z+1, r25	; 0x01
    3e14:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e16:	fe 01       	movw	r30, r28
    3e18:	e4 5b       	subi	r30, 0xB4	; 180
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	80 81       	ld	r24, Z
    3e1e:	91 81       	ldd	r25, Z+1	; 0x01
    3e20:	01 97       	sbiw	r24, 0x01	; 1
    3e22:	f1 f7       	brne	.-4      	; 0x3e20 <LCD_read_data_4bit+0x1d8>
    3e24:	fe 01       	movw	r30, r28
    3e26:	e4 5b       	subi	r30, 0xB4	; 180
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	91 83       	std	Z+1, r25	; 0x01
    3e2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2e:	de 01       	movw	r26, r28
    3e30:	a2 5b       	subi	r26, 0xB2	; 178
    3e32:	bf 4f       	sbci	r27, 0xFF	; 255
    3e34:	fe 01       	movw	r30, r28
    3e36:	e2 5b       	subi	r30, 0xB2	; 178
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	80 81       	ld	r24, Z
    3e3c:	91 81       	ldd	r25, Z+1	; 0x01
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	11 96       	adiw	r26, 0x01	; 1
    3e42:	9c 93       	st	X, r25
    3e44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e46:	fe 01       	movw	r30, r28
    3e48:	e2 5b       	subi	r30, 0xB2	; 178
    3e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4c:	80 81       	ld	r24, Z
    3e4e:	91 81       	ldd	r25, Z+1	; 0x01
    3e50:	00 97       	sbiw	r24, 0x00	; 0
    3e52:	d1 f6       	brne	.-76     	; 0x3e08 <LCD_read_data_4bit+0x1c0>
    3e54:	4b c0       	rjmp	.+150    	; 0x3eec <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e56:	8e 01       	movw	r16, r28
    3e58:	02 5b       	subi	r16, 0xB2	; 178
    3e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	e0 5b       	subi	r30, 0xB0	; 176
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	60 81       	ld	r22, Z
    3e64:	71 81       	ldd	r23, Z+1	; 0x01
    3e66:	82 81       	ldd	r24, Z+2	; 0x02
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	f8 01       	movw	r30, r16
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	80 83       	st	Z, r24
    3e78:	de 01       	movw	r26, r28
    3e7a:	a6 5b       	subi	r26, 0xB6	; 182
    3e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e2 5b       	subi	r30, 0xB2	; 178
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	80 81       	ld	r24, Z
    3e86:	91 81       	ldd	r25, Z+1	; 0x01
    3e88:	11 96       	adiw	r26, 0x01	; 1
    3e8a:	9c 93       	st	X, r25
    3e8c:	8e 93       	st	-X, r24
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e6 5b       	subi	r30, 0xB6	; 182
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	80 81       	ld	r24, Z
    3e96:	91 81       	ldd	r25, Z+1	; 0x01
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	f1 f7       	brne	.-4      	; 0x3e98 <LCD_read_data_4bit+0x250>
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e6 5b       	subi	r30, 0xB6	; 182
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	80 83       	st	Z, r24
    3ea6:	22 c0       	rjmp	.+68     	; 0x3eec <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ea8:	8e 01       	movw	r16, r28
    3eaa:	08 5a       	subi	r16, 0xA8	; 168
    3eac:	1f 4f       	sbci	r17, 0xFF	; 255
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e7 5a       	subi	r30, 0xA7	; 167
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	60 81       	ld	r22, Z
    3eb6:	71 81       	ldd	r23, Z+1	; 0x01
    3eb8:	82 81       	ldd	r24, Z+2	; 0x02
    3eba:	93 81       	ldd	r25, Z+3	; 0x03
    3ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	80 83       	st	Z, r24
    3ec8:	de 01       	movw	r26, r28
    3eca:	a7 5b       	subi	r26, 0xB7	; 183
    3ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e8 5a       	subi	r30, 0xA8	; 168
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	80 81       	ld	r24, Z
    3ed6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e7 5b       	subi	r30, 0xB7	; 183
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	80 81       	ld	r24, Z
    3ee0:	8a 95       	dec	r24
    3ee2:	f1 f7       	brne	.-4      	; 0x3ee0 <LCD_read_data_4bit+0x298>
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	e7 5b       	subi	r30, 0xB7	; 183
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	eb 5b       	subi	r30, 0xBB	; 187
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	a0 e8       	ldi	r26, 0x80	; 128
    3f00:	bf e3       	ldi	r27, 0x3F	; 63
    3f02:	80 83       	st	Z, r24
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	a2 83       	std	Z+2, r26	; 0x02
    3f08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f0a:	8e 01       	movw	r16, r28
    3f0c:	0f 5b       	subi	r16, 0xBF	; 191
    3f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f10:	fe 01       	movw	r30, r28
    3f12:	eb 5b       	subi	r30, 0xBB	; 187
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	60 81       	ld	r22, Z
    3f18:	71 81       	ldd	r23, Z+1	; 0x01
    3f1a:	82 81       	ldd	r24, Z+2	; 0x02
    3f1c:	93 81       	ldd	r25, Z+3	; 0x03
    3f1e:	2b ea       	ldi	r18, 0xAB	; 171
    3f20:	3a ea       	ldi	r19, 0xAA	; 170
    3f22:	4a e2       	ldi	r20, 0x2A	; 42
    3f24:	50 e4       	ldi	r21, 0x40	; 64
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	f8 01       	movw	r30, r16
    3f30:	80 83       	st	Z, r24
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	a2 83       	std	Z+2, r26	; 0x02
    3f36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f38:	fe 01       	movw	r30, r28
    3f3a:	ef 5b       	subi	r30, 0xBF	; 191
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e8       	ldi	r20, 0x80	; 128
    3f4c:	5f e3       	ldi	r21, 0x3F	; 63
    3f4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f52:	88 23       	and	r24, r24
    3f54:	34 f4       	brge	.+12     	; 0x3f62 <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e0 5c       	subi	r30, 0xC0	; 192
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 83       	st	Z, r24
    3f60:	9d c0       	rjmp	.+314    	; 0x409c <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    3f62:	fe 01       	movw	r30, r28
    3f64:	ef 5b       	subi	r30, 0xBF	; 191
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	60 81       	ld	r22, Z
    3f6a:	71 81       	ldd	r23, Z+1	; 0x01
    3f6c:	82 81       	ldd	r24, Z+2	; 0x02
    3f6e:	93 81       	ldd	r25, Z+3	; 0x03
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	4f e7       	ldi	r20, 0x7F	; 127
    3f76:	53 e4       	ldi	r21, 0x43	; 67
    3f78:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f7c:	18 16       	cp	r1, r24
    3f7e:	0c f0       	brlt	.+2      	; 0x3f82 <LCD_read_data_4bit+0x33a>
    3f80:	7e c0       	rjmp	.+252    	; 0x407e <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    3f82:	fe 01       	movw	r30, r28
    3f84:	eb 5b       	subi	r30, 0xBB	; 187
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	60 81       	ld	r22, Z
    3f8a:	71 81       	ldd	r23, Z+1	; 0x01
    3f8c:	82 81       	ldd	r24, Z+2	; 0x02
    3f8e:	93 81       	ldd	r25, Z+3	; 0x03
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	4a e7       	ldi	r20, 0x7A	; 122
    3f96:	54 e4       	ldi	r21, 0x44	; 68
    3f98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	8c af       	std	Y+60, r24	; 0x3c
    3fa2:	9d af       	std	Y+61, r25	; 0x3d
    3fa4:	ae af       	std	Y+62, r26	; 0x3e
    3fa6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa8:	6c ad       	ldd	r22, Y+60	; 0x3c
    3faa:	7d ad       	ldd	r23, Y+61	; 0x3d
    3fac:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fae:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	4a ef       	ldi	r20, 0xFA	; 250
    3fb6:	54 e4       	ldi	r21, 0x44	; 68
    3fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	88 af       	std	Y+56, r24	; 0x38
    3fc2:	99 af       	std	Y+57, r25	; 0x39
    3fc4:	aa af       	std	Y+58, r26	; 0x3a
    3fc6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3fc8:	68 ad       	ldd	r22, Y+56	; 0x38
    3fca:	79 ad       	ldd	r23, Y+57	; 0x39
    3fcc:	8a ad       	ldd	r24, Y+58	; 0x3a
    3fce:	9b ad       	ldd	r25, Y+59	; 0x3b
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e8       	ldi	r20, 0x80	; 128
    3fd6:	5f e3       	ldi	r21, 0x3F	; 63
    3fd8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3fdc:	88 23       	and	r24, r24
    3fde:	2c f4       	brge	.+10     	; 0x3fea <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	9f ab       	std	Y+55, r25	; 0x37
    3fe6:	8e ab       	std	Y+54, r24	; 0x36
    3fe8:	3f c0       	rjmp	.+126    	; 0x4068 <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    3fea:	68 ad       	ldd	r22, Y+56	; 0x38
    3fec:	79 ad       	ldd	r23, Y+57	; 0x39
    3fee:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ff0:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	3f ef       	ldi	r19, 0xFF	; 255
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	57 e4       	ldi	r21, 0x47	; 71
    3ffa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ffe:	18 16       	cp	r1, r24
    4000:	4c f5       	brge	.+82     	; 0x4054 <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4002:	6c ad       	ldd	r22, Y+60	; 0x3c
    4004:	7d ad       	ldd	r23, Y+61	; 0x3d
    4006:	8e ad       	ldd	r24, Y+62	; 0x3e
    4008:	9f ad       	ldd	r25, Y+63	; 0x3f
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e2       	ldi	r20, 0x20	; 32
    4010:	51 e4       	ldi	r21, 0x41	; 65
    4012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	bc 01       	movw	r22, r24
    401c:	cd 01       	movw	r24, r26
    401e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	9f ab       	std	Y+55, r25	; 0x37
    4028:	8e ab       	std	Y+54, r24	; 0x36
    402a:	0f c0       	rjmp	.+30     	; 0x404a <LCD_read_data_4bit+0x402>
    402c:	88 ec       	ldi	r24, 0xC8	; 200
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	9d ab       	std	Y+53, r25	; 0x35
    4032:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4034:	8c a9       	ldd	r24, Y+52	; 0x34
    4036:	9d a9       	ldd	r25, Y+53	; 0x35
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <LCD_read_data_4bit+0x3f0>
    403c:	9d ab       	std	Y+53, r25	; 0x35
    403e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4040:	8e a9       	ldd	r24, Y+54	; 0x36
    4042:	9f a9       	ldd	r25, Y+55	; 0x37
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	9f ab       	std	Y+55, r25	; 0x37
    4048:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404a:	8e a9       	ldd	r24, Y+54	; 0x36
    404c:	9f a9       	ldd	r25, Y+55	; 0x37
    404e:	00 97       	sbiw	r24, 0x00	; 0
    4050:	69 f7       	brne	.-38     	; 0x402c <LCD_read_data_4bit+0x3e4>
    4052:	2d c0       	rjmp	.+90     	; 0x40ae <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4054:	68 ad       	ldd	r22, Y+56	; 0x38
    4056:	79 ad       	ldd	r23, Y+57	; 0x39
    4058:	8a ad       	ldd	r24, Y+58	; 0x3a
    405a:	9b ad       	ldd	r25, Y+59	; 0x3b
    405c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	9f ab       	std	Y+55, r25	; 0x37
    4066:	8e ab       	std	Y+54, r24	; 0x36
    4068:	8e a9       	ldd	r24, Y+54	; 0x36
    406a:	9f a9       	ldd	r25, Y+55	; 0x37
    406c:	9b ab       	std	Y+51, r25	; 0x33
    406e:	8a ab       	std	Y+50, r24	; 0x32
    4070:	8a a9       	ldd	r24, Y+50	; 0x32
    4072:	9b a9       	ldd	r25, Y+51	; 0x33
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	f1 f7       	brne	.-4      	; 0x4074 <LCD_read_data_4bit+0x42c>
    4078:	9b ab       	std	Y+51, r25	; 0x33
    407a:	8a ab       	std	Y+50, r24	; 0x32
    407c:	18 c0       	rjmp	.+48     	; 0x40ae <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    407e:	fe 01       	movw	r30, r28
    4080:	ef 5b       	subi	r30, 0xBF	; 191
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	60 81       	ld	r22, Z
    4086:	71 81       	ldd	r23, Z+1	; 0x01
    4088:	82 81       	ldd	r24, Z+2	; 0x02
    408a:	93 81       	ldd	r25, Z+3	; 0x03
    408c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	fe 01       	movw	r30, r28
    4096:	e0 5c       	subi	r30, 0xC0	; 192
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	80 83       	st	Z, r24
    409c:	fe 01       	movw	r30, r28
    409e:	e0 5c       	subi	r30, 0xC0	; 192
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	80 81       	ld	r24, Z
    40a4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40a6:	89 a9       	ldd	r24, Y+49	; 0x31
    40a8:	8a 95       	dec	r24
    40aa:	f1 f7       	brne	.-4      	; 0x40a8 <LCD_read_data_4bit+0x460>
    40ac:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    40ae:	82 e0       	ldi	r24, 0x02	; 2
    40b0:	0e 94 9a 2c 	call	0x5934	; 0x5934 <DIO_u8_get_port>
    40b4:	fe 01       	movw	r30, r28
    40b6:	ef 59       	subi	r30, 0x9F	; 159
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	82 95       	swap	r24
    40bc:	80 7f       	andi	r24, 0xF0	; 240
    40be:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	60 e0       	ldi	r22, 0x00	; 0
    40c4:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	a0 e2       	ldi	r26, 0x20	; 32
    40ce:	b1 e4       	ldi	r27, 0x41	; 65
    40d0:	8d a7       	std	Y+45, r24	; 0x2d
    40d2:	9e a7       	std	Y+46, r25	; 0x2e
    40d4:	af a7       	std	Y+47, r26	; 0x2f
    40d6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40d8:	6d a5       	ldd	r22, Y+45	; 0x2d
    40da:	7e a5       	ldd	r23, Y+46	; 0x2e
    40dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    40de:	98 a9       	ldd	r25, Y+48	; 0x30
    40e0:	2b ea       	ldi	r18, 0xAB	; 171
    40e2:	3a ea       	ldi	r19, 0xAA	; 170
    40e4:	4a e2       	ldi	r20, 0x2A	; 42
    40e6:	50 e4       	ldi	r21, 0x40	; 64
    40e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	89 a7       	std	Y+41, r24	; 0x29
    40f2:	9a a7       	std	Y+42, r25	; 0x2a
    40f4:	ab a7       	std	Y+43, r26	; 0x2b
    40f6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    40f8:	69 a5       	ldd	r22, Y+41	; 0x29
    40fa:	7a a5       	ldd	r23, Y+42	; 0x2a
    40fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    40fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    4100:	20 e0       	ldi	r18, 0x00	; 0
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	40 e8       	ldi	r20, 0x80	; 128
    4106:	5f e3       	ldi	r21, 0x3F	; 63
    4108:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    410c:	88 23       	and	r24, r24
    410e:	1c f4       	brge	.+6      	; 0x4116 <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	88 a7       	std	Y+40, r24	; 0x28
    4114:	91 c0       	rjmp	.+290    	; 0x4238 <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    4116:	69 a5       	ldd	r22, Y+41	; 0x29
    4118:	7a a5       	ldd	r23, Y+42	; 0x2a
    411a:	8b a5       	ldd	r24, Y+43	; 0x2b
    411c:	9c a5       	ldd	r25, Y+44	; 0x2c
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	4f e7       	ldi	r20, 0x7F	; 127
    4124:	53 e4       	ldi	r21, 0x43	; 67
    4126:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    412a:	18 16       	cp	r1, r24
    412c:	0c f0       	brlt	.+2      	; 0x4130 <LCD_read_data_4bit+0x4e8>
    412e:	7b c0       	rjmp	.+246    	; 0x4226 <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    4130:	6d a5       	ldd	r22, Y+45	; 0x2d
    4132:	7e a5       	ldd	r23, Y+46	; 0x2e
    4134:	8f a5       	ldd	r24, Y+47	; 0x2f
    4136:	98 a9       	ldd	r25, Y+48	; 0x30
    4138:	20 e0       	ldi	r18, 0x00	; 0
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	4a e7       	ldi	r20, 0x7A	; 122
    413e:	54 e4       	ldi	r21, 0x44	; 68
    4140:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	8c a3       	std	Y+36, r24	; 0x24
    414a:	9d a3       	std	Y+37, r25	; 0x25
    414c:	ae a3       	std	Y+38, r26	; 0x26
    414e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4150:	6c a1       	ldd	r22, Y+36	; 0x24
    4152:	7d a1       	ldd	r23, Y+37	; 0x25
    4154:	8e a1       	ldd	r24, Y+38	; 0x26
    4156:	9f a1       	ldd	r25, Y+39	; 0x27
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	4a ef       	ldi	r20, 0xFA	; 250
    415e:	54 e4       	ldi	r21, 0x44	; 68
    4160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	88 a3       	std	Y+32, r24	; 0x20
    416a:	99 a3       	std	Y+33, r25	; 0x21
    416c:	aa a3       	std	Y+34, r26	; 0x22
    416e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4170:	68 a1       	ldd	r22, Y+32	; 0x20
    4172:	79 a1       	ldd	r23, Y+33	; 0x21
    4174:	8a a1       	ldd	r24, Y+34	; 0x22
    4176:	9b a1       	ldd	r25, Y+35	; 0x23
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e8       	ldi	r20, 0x80	; 128
    417e:	5f e3       	ldi	r21, 0x3F	; 63
    4180:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4184:	88 23       	and	r24, r24
    4186:	2c f4       	brge	.+10     	; 0x4192 <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	9f 8f       	std	Y+31, r25	; 0x1f
    418e:	8e 8f       	std	Y+30, r24	; 0x1e
    4190:	3f c0       	rjmp	.+126    	; 0x4210 <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    4192:	68 a1       	ldd	r22, Y+32	; 0x20
    4194:	79 a1       	ldd	r23, Y+33	; 0x21
    4196:	8a a1       	ldd	r24, Y+34	; 0x22
    4198:	9b a1       	ldd	r25, Y+35	; 0x23
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	3f ef       	ldi	r19, 0xFF	; 255
    419e:	4f e7       	ldi	r20, 0x7F	; 127
    41a0:	57 e4       	ldi	r21, 0x47	; 71
    41a2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    41a6:	18 16       	cp	r1, r24
    41a8:	4c f5       	brge	.+82     	; 0x41fc <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41aa:	6c a1       	ldd	r22, Y+36	; 0x24
    41ac:	7d a1       	ldd	r23, Y+37	; 0x25
    41ae:	8e a1       	ldd	r24, Y+38	; 0x26
    41b0:	9f a1       	ldd	r25, Y+39	; 0x27
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e2       	ldi	r20, 0x20	; 32
    41b8:	51 e4       	ldi	r21, 0x41	; 65
    41ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	9f 8f       	std	Y+31, r25	; 0x1f
    41d0:	8e 8f       	std	Y+30, r24	; 0x1e
    41d2:	0f c0       	rjmp	.+30     	; 0x41f2 <LCD_read_data_4bit+0x5aa>
    41d4:	88 ec       	ldi	r24, 0xC8	; 200
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	9d 8f       	std	Y+29, r25	; 0x1d
    41da:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <LCD_read_data_4bit+0x598>
    41e4:	9d 8f       	std	Y+29, r25	; 0x1d
    41e6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	9f 8f       	std	Y+31, r25	; 0x1f
    41f0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	69 f7       	brne	.-38     	; 0x41d4 <LCD_read_data_4bit+0x58c>
    41fa:	24 c0       	rjmp	.+72     	; 0x4244 <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fc:	68 a1       	ldd	r22, Y+32	; 0x20
    41fe:	79 a1       	ldd	r23, Y+33	; 0x21
    4200:	8a a1       	ldd	r24, Y+34	; 0x22
    4202:	9b a1       	ldd	r25, Y+35	; 0x23
    4204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	9f 8f       	std	Y+31, r25	; 0x1f
    420e:	8e 8f       	std	Y+30, r24	; 0x1e
    4210:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4212:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4214:	9b 8f       	std	Y+27, r25	; 0x1b
    4216:	8a 8f       	std	Y+26, r24	; 0x1a
    4218:	8a 8d       	ldd	r24, Y+26	; 0x1a
    421a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	f1 f7       	brne	.-4      	; 0x421c <LCD_read_data_4bit+0x5d4>
    4220:	9b 8f       	std	Y+27, r25	; 0x1b
    4222:	8a 8f       	std	Y+26, r24	; 0x1a
    4224:	0f c0       	rjmp	.+30     	; 0x4244 <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4226:	69 a5       	ldd	r22, Y+41	; 0x29
    4228:	7a a5       	ldd	r23, Y+42	; 0x2a
    422a:	8b a5       	ldd	r24, Y+43	; 0x2b
    422c:	9c a5       	ldd	r25, Y+44	; 0x2c
    422e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4232:	dc 01       	movw	r26, r24
    4234:	cb 01       	movw	r24, r22
    4236:	88 a7       	std	Y+40, r24	; 0x28
    4238:	88 a5       	ldd	r24, Y+40	; 0x28
    423a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    423c:	89 8d       	ldd	r24, Y+25	; 0x19
    423e:	8a 95       	dec	r24
    4240:	f1 f7       	brne	.-4      	; 0x423e <LCD_read_data_4bit+0x5f6>
    4242:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    4244:	82 e0       	ldi	r24, 0x02	; 2
    4246:	60 e0       	ldi	r22, 0x00	; 0
    4248:	0e 94 ad 2b 	call	0x575a	; 0x575a <DIO_void_set_pin>
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	a0 e8       	ldi	r26, 0x80	; 128
    4252:	bf e3       	ldi	r27, 0x3F	; 63
    4254:	8d 8b       	std	Y+21, r24	; 0x15
    4256:	9e 8b       	std	Y+22, r25	; 0x16
    4258:	af 8b       	std	Y+23, r26	; 0x17
    425a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    425c:	6d 89       	ldd	r22, Y+21	; 0x15
    425e:	7e 89       	ldd	r23, Y+22	; 0x16
    4260:	8f 89       	ldd	r24, Y+23	; 0x17
    4262:	98 8d       	ldd	r25, Y+24	; 0x18
    4264:	2b ea       	ldi	r18, 0xAB	; 171
    4266:	3a ea       	ldi	r19, 0xAA	; 170
    4268:	4a e2       	ldi	r20, 0x2A	; 42
    426a:	50 e4       	ldi	r21, 0x40	; 64
    426c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	89 8b       	std	Y+17, r24	; 0x11
    4276:	9a 8b       	std	Y+18, r25	; 0x12
    4278:	ab 8b       	std	Y+19, r26	; 0x13
    427a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    427c:	69 89       	ldd	r22, Y+17	; 0x11
    427e:	7a 89       	ldd	r23, Y+18	; 0x12
    4280:	8b 89       	ldd	r24, Y+19	; 0x13
    4282:	9c 89       	ldd	r25, Y+20	; 0x14
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	40 e8       	ldi	r20, 0x80	; 128
    428a:	5f e3       	ldi	r21, 0x3F	; 63
    428c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4290:	88 23       	and	r24, r24
    4292:	1c f4       	brge	.+6      	; 0x429a <LCD_read_data_4bit+0x652>
		__ticks = 1;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	88 8b       	std	Y+16, r24	; 0x10
    4298:	91 c0       	rjmp	.+290    	; 0x43bc <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    429a:	69 89       	ldd	r22, Y+17	; 0x11
    429c:	7a 89       	ldd	r23, Y+18	; 0x12
    429e:	8b 89       	ldd	r24, Y+19	; 0x13
    42a0:	9c 89       	ldd	r25, Y+20	; 0x14
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	4f e7       	ldi	r20, 0x7F	; 127
    42a8:	53 e4       	ldi	r21, 0x43	; 67
    42aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42ae:	18 16       	cp	r1, r24
    42b0:	0c f0       	brlt	.+2      	; 0x42b4 <LCD_read_data_4bit+0x66c>
    42b2:	7b c0       	rjmp	.+246    	; 0x43aa <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    42b4:	6d 89       	ldd	r22, Y+21	; 0x15
    42b6:	7e 89       	ldd	r23, Y+22	; 0x16
    42b8:	8f 89       	ldd	r24, Y+23	; 0x17
    42ba:	98 8d       	ldd	r25, Y+24	; 0x18
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	4a e7       	ldi	r20, 0x7A	; 122
    42c2:	54 e4       	ldi	r21, 0x44	; 68
    42c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	8c 87       	std	Y+12, r24	; 0x0c
    42ce:	9d 87       	std	Y+13, r25	; 0x0d
    42d0:	ae 87       	std	Y+14, r26	; 0x0e
    42d2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    42d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    42d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    42da:	9f 85       	ldd	r25, Y+15	; 0x0f
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a ef       	ldi	r20, 0xFA	; 250
    42e2:	54 e4       	ldi	r21, 0x44	; 68
    42e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	88 87       	std	Y+8, r24	; 0x08
    42ee:	99 87       	std	Y+9, r25	; 0x09
    42f0:	aa 87       	std	Y+10, r26	; 0x0a
    42f2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    42f4:	68 85       	ldd	r22, Y+8	; 0x08
    42f6:	79 85       	ldd	r23, Y+9	; 0x09
    42f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    42fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e8       	ldi	r20, 0x80	; 128
    4302:	5f e3       	ldi	r21, 0x3F	; 63
    4304:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4308:	88 23       	and	r24, r24
    430a:	2c f4       	brge	.+10     	; 0x4316 <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	9f 83       	std	Y+7, r25	; 0x07
    4312:	8e 83       	std	Y+6, r24	; 0x06
    4314:	3f c0       	rjmp	.+126    	; 0x4394 <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    4316:	68 85       	ldd	r22, Y+8	; 0x08
    4318:	79 85       	ldd	r23, Y+9	; 0x09
    431a:	8a 85       	ldd	r24, Y+10	; 0x0a
    431c:	9b 85       	ldd	r25, Y+11	; 0x0b
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    432a:	18 16       	cp	r1, r24
    432c:	4c f5       	brge	.+82     	; 0x4380 <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    432e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4330:	7d 85       	ldd	r23, Y+13	; 0x0d
    4332:	8e 85       	ldd	r24, Y+14	; 0x0e
    4334:	9f 85       	ldd	r25, Y+15	; 0x0f
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e2       	ldi	r20, 0x20	; 32
    433c:	51 e4       	ldi	r21, 0x41	; 65
    433e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	bc 01       	movw	r22, r24
    4348:	cd 01       	movw	r24, r26
    434a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	9f 83       	std	Y+7, r25	; 0x07
    4354:	8e 83       	std	Y+6, r24	; 0x06
    4356:	0f c0       	rjmp	.+30     	; 0x4376 <LCD_read_data_4bit+0x72e>
    4358:	88 ec       	ldi	r24, 0xC8	; 200
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	9d 83       	std	Y+5, r25	; 0x05
    435e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4360:	8c 81       	ldd	r24, Y+4	; 0x04
    4362:	9d 81       	ldd	r25, Y+5	; 0x05
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <LCD_read_data_4bit+0x71c>
    4368:	9d 83       	std	Y+5, r25	; 0x05
    436a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436c:	8e 81       	ldd	r24, Y+6	; 0x06
    436e:	9f 81       	ldd	r25, Y+7	; 0x07
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	9f 83       	std	Y+7, r25	; 0x07
    4374:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4376:	8e 81       	ldd	r24, Y+6	; 0x06
    4378:	9f 81       	ldd	r25, Y+7	; 0x07
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	69 f7       	brne	.-38     	; 0x4358 <LCD_read_data_4bit+0x710>
    437e:	24 c0       	rjmp	.+72     	; 0x43c8 <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	68 85       	ldd	r22, Y+8	; 0x08
    4382:	79 85       	ldd	r23, Y+9	; 0x09
    4384:	8a 85       	ldd	r24, Y+10	; 0x0a
    4386:	9b 85       	ldd	r25, Y+11	; 0x0b
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9f 83       	std	Y+7, r25	; 0x07
    4392:	8e 83       	std	Y+6, r24	; 0x06
    4394:	8e 81       	ldd	r24, Y+6	; 0x06
    4396:	9f 81       	ldd	r25, Y+7	; 0x07
    4398:	9b 83       	std	Y+3, r25	; 0x03
    439a:	8a 83       	std	Y+2, r24	; 0x02
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	9b 81       	ldd	r25, Y+3	; 0x03
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <LCD_read_data_4bit+0x758>
    43a4:	9b 83       	std	Y+3, r25	; 0x03
    43a6:	8a 83       	std	Y+2, r24	; 0x02
    43a8:	0f c0       	rjmp	.+30     	; 0x43c8 <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43aa:	69 89       	ldd	r22, Y+17	; 0x11
    43ac:	7a 89       	ldd	r23, Y+18	; 0x12
    43ae:	8b 89       	ldd	r24, Y+19	; 0x13
    43b0:	9c 89       	ldd	r25, Y+20	; 0x14
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	88 8b       	std	Y+16, r24	; 0x10
    43bc:	88 89       	ldd	r24, Y+16	; 0x10
    43be:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	8a 95       	dec	r24
    43c4:	f1 f7       	brne	.-4      	; 0x43c2 <LCD_read_data_4bit+0x77a>
    43c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    43c8:	82 e0       	ldi	r24, 0x02	; 2
    43ca:	0e 94 9a 2c 	call	0x5934	; 0x5934 <DIO_u8_get_port>
    43ce:	98 2f       	mov	r25, r24
    43d0:	de 01       	movw	r26, r28
    43d2:	af 59       	subi	r26, 0x9F	; 159
    43d4:	bf 4f       	sbci	r27, 0xFF	; 255
    43d6:	fe 01       	movw	r30, r28
    43d8:	ef 59       	subi	r30, 0x9F	; 159
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	80 81       	ld	r24, Z
    43de:	89 2b       	or	r24, r25
    43e0:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    43e2:	82 e0       	ldi	r24, 0x02	; 2
    43e4:	60 e0       	ldi	r22, 0x00	; 0
    43e6:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    43ea:	de 01       	movw	r26, r28
    43ec:	af 59       	subi	r26, 0x9F	; 159
    43ee:	bf 4f       	sbci	r27, 0xFF	; 255
    43f0:	fe 01       	movw	r30, r28
    43f2:	ef 59       	subi	r30, 0x9F	; 159
    43f4:	ff 4f       	sbci	r31, 0xFF	; 255
    43f6:	80 81       	ld	r24, Z
    43f8:	8f 77       	andi	r24, 0x7F	; 127
    43fa:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    43fc:	82 e0       	ldi	r24, 0x02	; 2
    43fe:	67 e0       	ldi	r22, 0x07	; 7
    4400:	4f ef       	ldi	r20, 0xFF	; 255
    4402:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4406:	82 e0       	ldi	r24, 0x02	; 2
    4408:	66 e0       	ldi	r22, 0x06	; 6
    440a:	4f ef       	ldi	r20, 0xFF	; 255
    440c:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4410:	82 e0       	ldi	r24, 0x02	; 2
    4412:	65 e0       	ldi	r22, 0x05	; 5
    4414:	4f ef       	ldi	r20, 0xFF	; 255
    4416:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    441a:	82 e0       	ldi	r24, 0x02	; 2
    441c:	64 e0       	ldi	r22, 0x04	; 4
    441e:	4f ef       	ldi	r20, 0xFF	; 255
    4420:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    4424:	fe 01       	movw	r30, r28
    4426:	ef 59       	subi	r30, 0x9F	; 159
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	80 81       	ld	r24, Z
}
    442c:	cf 59       	subi	r28, 0x9F	; 159
    442e:	df 4f       	sbci	r29, 0xFF	; 255
    4430:	0f b6       	in	r0, 0x3f	; 63
    4432:	f8 94       	cli
    4434:	de bf       	out	0x3e, r29	; 62
    4436:	0f be       	out	0x3f, r0	; 63
    4438:	cd bf       	out	0x3d, r28	; 61
    443a:	cf 91       	pop	r28
    443c:	df 91       	pop	r29
    443e:	1f 91       	pop	r17
    4440:	0f 91       	pop	r16
    4442:	08 95       	ret

00004444 <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    4444:	0f 93       	push	r16
    4446:	1f 93       	push	r17
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	cc 54       	subi	r28, 0x4C	; 76
    4452:	d0 40       	sbci	r29, 0x00	; 0
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	67 e0       	ldi	r22, 0x07	; 7
    4462:	4f ef       	ldi	r20, 0xFF	; 255
    4464:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	66 e0       	ldi	r22, 0x06	; 6
    446c:	4f ef       	ldi	r20, 0xFF	; 255
    446e:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4472:	82 e0       	ldi	r24, 0x02	; 2
    4474:	65 e0       	ldi	r22, 0x05	; 5
    4476:	4f ef       	ldi	r20, 0xFF	; 255
    4478:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    447c:	82 e0       	ldi	r24, 0x02	; 2
    447e:	64 e0       	ldi	r22, 0x04	; 4
    4480:	4f ef       	ldi	r20, 0xFF	; 255
    4482:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	4f ef       	ldi	r20, 0xFF	; 255
    448c:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    4490:	82 e0       	ldi	r24, 0x02	; 2
    4492:	61 e0       	ldi	r22, 0x01	; 1
    4494:	4f ef       	ldi	r20, 0xFF	; 255
    4496:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	62 e0       	ldi	r22, 0x02	; 2
    449e:	4f ef       	ldi	r20, 0xFF	; 255
    44a0:	0e 94 95 2a 	call	0x552a	; 0x552a <DIO_void_set_pin_dir>
    44a4:	fe 01       	movw	r30, r28
    44a6:	e7 5b       	subi	r30, 0xB7	; 183
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	a8 e4       	ldi	r26, 0x48	; 72
    44b0:	b2 e4       	ldi	r27, 0x42	; 66
    44b2:	80 83       	st	Z, r24
    44b4:	91 83       	std	Z+1, r25	; 0x01
    44b6:	a2 83       	std	Z+2, r26	; 0x02
    44b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ba:	8e 01       	movw	r16, r28
    44bc:	0b 5b       	subi	r16, 0xBB	; 187
    44be:	1f 4f       	sbci	r17, 0xFF	; 255
    44c0:	fe 01       	movw	r30, r28
    44c2:	e7 5b       	subi	r30, 0xB7	; 183
    44c4:	ff 4f       	sbci	r31, 0xFF	; 255
    44c6:	60 81       	ld	r22, Z
    44c8:	71 81       	ldd	r23, Z+1	; 0x01
    44ca:	82 81       	ldd	r24, Z+2	; 0x02
    44cc:	93 81       	ldd	r25, Z+3	; 0x03
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	4a ef       	ldi	r20, 0xFA	; 250
    44d4:	54 e4       	ldi	r21, 0x44	; 68
    44d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	f8 01       	movw	r30, r16
    44e0:	80 83       	st	Z, r24
    44e2:	91 83       	std	Z+1, r25	; 0x01
    44e4:	a2 83       	std	Z+2, r26	; 0x02
    44e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44e8:	fe 01       	movw	r30, r28
    44ea:	eb 5b       	subi	r30, 0xBB	; 187
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	60 81       	ld	r22, Z
    44f0:	71 81       	ldd	r23, Z+1	; 0x01
    44f2:	82 81       	ldd	r24, Z+2	; 0x02
    44f4:	93 81       	ldd	r25, Z+3	; 0x03
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	40 e8       	ldi	r20, 0x80	; 128
    44fc:	5f e3       	ldi	r21, 0x3F	; 63
    44fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4502:	88 23       	and	r24, r24
    4504:	44 f4       	brge	.+16     	; 0x4516 <LCD_init+0xd2>
		__ticks = 1;
    4506:	fe 01       	movw	r30, r28
    4508:	ed 5b       	subi	r30, 0xBD	; 189
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	91 83       	std	Z+1, r25	; 0x01
    4512:	80 83       	st	Z, r24
    4514:	64 c0       	rjmp	.+200    	; 0x45de <LCD_init+0x19a>
	else if (__tmp > 65535)
    4516:	fe 01       	movw	r30, r28
    4518:	eb 5b       	subi	r30, 0xBB	; 187
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	60 81       	ld	r22, Z
    451e:	71 81       	ldd	r23, Z+1	; 0x01
    4520:	82 81       	ldd	r24, Z+2	; 0x02
    4522:	93 81       	ldd	r25, Z+3	; 0x03
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	3f ef       	ldi	r19, 0xFF	; 255
    4528:	4f e7       	ldi	r20, 0x7F	; 127
    452a:	57 e4       	ldi	r21, 0x47	; 71
    452c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4530:	18 16       	cp	r1, r24
    4532:	0c f0       	brlt	.+2      	; 0x4536 <LCD_init+0xf2>
    4534:	43 c0       	rjmp	.+134    	; 0x45bc <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4536:	fe 01       	movw	r30, r28
    4538:	e7 5b       	subi	r30, 0xB7	; 183
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	60 81       	ld	r22, Z
    453e:	71 81       	ldd	r23, Z+1	; 0x01
    4540:	82 81       	ldd	r24, Z+2	; 0x02
    4542:	93 81       	ldd	r25, Z+3	; 0x03
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e2       	ldi	r20, 0x20	; 32
    454a:	51 e4       	ldi	r21, 0x41	; 65
    454c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	8e 01       	movw	r16, r28
    4556:	0d 5b       	subi	r16, 0xBD	; 189
    4558:	1f 4f       	sbci	r17, 0xFF	; 255
    455a:	bc 01       	movw	r22, r24
    455c:	cd 01       	movw	r24, r26
    455e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	f8 01       	movw	r30, r16
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    456c:	1f c0       	rjmp	.+62     	; 0x45ac <LCD_init+0x168>
    456e:	fe 01       	movw	r30, r28
    4570:	ef 5b       	subi	r30, 0xBF	; 191
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	88 ec       	ldi	r24, 0xC8	; 200
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    457c:	fe 01       	movw	r30, r28
    457e:	ef 5b       	subi	r30, 0xBF	; 191
    4580:	ff 4f       	sbci	r31, 0xFF	; 255
    4582:	80 81       	ld	r24, Z
    4584:	91 81       	ldd	r25, Z+1	; 0x01
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	f1 f7       	brne	.-4      	; 0x4586 <LCD_init+0x142>
    458a:	fe 01       	movw	r30, r28
    458c:	ef 5b       	subi	r30, 0xBF	; 191
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4594:	de 01       	movw	r26, r28
    4596:	ad 5b       	subi	r26, 0xBD	; 189
    4598:	bf 4f       	sbci	r27, 0xFF	; 255
    459a:	fe 01       	movw	r30, r28
    459c:	ed 5b       	subi	r30, 0xBD	; 189
    459e:	ff 4f       	sbci	r31, 0xFF	; 255
    45a0:	80 81       	ld	r24, Z
    45a2:	91 81       	ldd	r25, Z+1	; 0x01
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	11 96       	adiw	r26, 0x01	; 1
    45a8:	9c 93       	st	X, r25
    45aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ac:	fe 01       	movw	r30, r28
    45ae:	ed 5b       	subi	r30, 0xBD	; 189
    45b0:	ff 4f       	sbci	r31, 0xFF	; 255
    45b2:	80 81       	ld	r24, Z
    45b4:	91 81       	ldd	r25, Z+1	; 0x01
    45b6:	00 97       	sbiw	r24, 0x00	; 0
    45b8:	d1 f6       	brne	.-76     	; 0x456e <LCD_init+0x12a>
    45ba:	24 c0       	rjmp	.+72     	; 0x4604 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45bc:	8e 01       	movw	r16, r28
    45be:	0d 5b       	subi	r16, 0xBD	; 189
    45c0:	1f 4f       	sbci	r17, 0xFF	; 255
    45c2:	fe 01       	movw	r30, r28
    45c4:	eb 5b       	subi	r30, 0xBB	; 187
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	60 81       	ld	r22, Z
    45ca:	71 81       	ldd	r23, Z+1	; 0x01
    45cc:	82 81       	ldd	r24, Z+2	; 0x02
    45ce:	93 81       	ldd	r25, Z+3	; 0x03
    45d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	f8 01       	movw	r30, r16
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	80 83       	st	Z, r24
    45de:	fe 01       	movw	r30, r28
    45e0:	ed 5b       	subi	r30, 0xBD	; 189
    45e2:	ff 4f       	sbci	r31, 0xFF	; 255
    45e4:	80 81       	ld	r24, Z
    45e6:	91 81       	ldd	r25, Z+1	; 0x01
    45e8:	fe 01       	movw	r30, r28
    45ea:	ff 96       	adiw	r30, 0x3f	; 63
    45ec:	91 83       	std	Z+1, r25	; 0x01
    45ee:	80 83       	st	Z, r24
    45f0:	fe 01       	movw	r30, r28
    45f2:	ff 96       	adiw	r30, 0x3f	; 63
    45f4:	80 81       	ld	r24, Z
    45f6:	91 81       	ldd	r25, Z+1	; 0x01
    45f8:	01 97       	sbiw	r24, 0x01	; 1
    45fa:	f1 f7       	brne	.-4      	; 0x45f8 <LCD_init+0x1b4>
    45fc:	fe 01       	movw	r30, r28
    45fe:	ff 96       	adiw	r30, 0x3f	; 63
    4600:	91 83       	std	Z+1, r25	; 0x01
    4602:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    4604:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_function_set_4bit>
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	a8 e4       	ldi	r26, 0x48	; 72
    460e:	b2 e4       	ldi	r27, 0x42	; 66
    4610:	8b af       	std	Y+59, r24	; 0x3b
    4612:	9c af       	std	Y+60, r25	; 0x3c
    4614:	ad af       	std	Y+61, r26	; 0x3d
    4616:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4618:	6b ad       	ldd	r22, Y+59	; 0x3b
    461a:	7c ad       	ldd	r23, Y+60	; 0x3c
    461c:	8d ad       	ldd	r24, Y+61	; 0x3d
    461e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4620:	2b ea       	ldi	r18, 0xAB	; 171
    4622:	3a ea       	ldi	r19, 0xAA	; 170
    4624:	4a e2       	ldi	r20, 0x2A	; 42
    4626:	50 e4       	ldi	r21, 0x40	; 64
    4628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	8f ab       	std	Y+55, r24	; 0x37
    4632:	98 af       	std	Y+56, r25	; 0x38
    4634:	a9 af       	std	Y+57, r26	; 0x39
    4636:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4638:	6f a9       	ldd	r22, Y+55	; 0x37
    463a:	78 ad       	ldd	r23, Y+56	; 0x38
    463c:	89 ad       	ldd	r24, Y+57	; 0x39
    463e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	40 e8       	ldi	r20, 0x80	; 128
    4646:	5f e3       	ldi	r21, 0x3F	; 63
    4648:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    464c:	88 23       	and	r24, r24
    464e:	1c f4       	brge	.+6      	; 0x4656 <LCD_init+0x212>
		__ticks = 1;
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	8e ab       	std	Y+54, r24	; 0x36
    4654:	91 c0       	rjmp	.+290    	; 0x4778 <LCD_init+0x334>
	else if (__tmp > 255)
    4656:	6f a9       	ldd	r22, Y+55	; 0x37
    4658:	78 ad       	ldd	r23, Y+56	; 0x38
    465a:	89 ad       	ldd	r24, Y+57	; 0x39
    465c:	9a ad       	ldd	r25, Y+58	; 0x3a
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	4f e7       	ldi	r20, 0x7F	; 127
    4664:	53 e4       	ldi	r21, 0x43	; 67
    4666:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    466a:	18 16       	cp	r1, r24
    466c:	0c f0       	brlt	.+2      	; 0x4670 <LCD_init+0x22c>
    466e:	7b c0       	rjmp	.+246    	; 0x4766 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    4670:	6b ad       	ldd	r22, Y+59	; 0x3b
    4672:	7c ad       	ldd	r23, Y+60	; 0x3c
    4674:	8d ad       	ldd	r24, Y+61	; 0x3d
    4676:	9e ad       	ldd	r25, Y+62	; 0x3e
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	4a e7       	ldi	r20, 0x7A	; 122
    467e:	54 e4       	ldi	r21, 0x44	; 68
    4680:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	8a ab       	std	Y+50, r24	; 0x32
    468a:	9b ab       	std	Y+51, r25	; 0x33
    468c:	ac ab       	std	Y+52, r26	; 0x34
    468e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4690:	6a a9       	ldd	r22, Y+50	; 0x32
    4692:	7b a9       	ldd	r23, Y+51	; 0x33
    4694:	8c a9       	ldd	r24, Y+52	; 0x34
    4696:	9d a9       	ldd	r25, Y+53	; 0x35
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	4a ef       	ldi	r20, 0xFA	; 250
    469e:	54 e4       	ldi	r21, 0x44	; 68
    46a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	8e a7       	std	Y+46, r24	; 0x2e
    46aa:	9f a7       	std	Y+47, r25	; 0x2f
    46ac:	a8 ab       	std	Y+48, r26	; 0x30
    46ae:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    46b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    46b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    46b4:	88 a9       	ldd	r24, Y+48	; 0x30
    46b6:	99 a9       	ldd	r25, Y+49	; 0x31
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	40 e8       	ldi	r20, 0x80	; 128
    46be:	5f e3       	ldi	r21, 0x3F	; 63
    46c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    46c4:	88 23       	and	r24, r24
    46c6:	2c f4       	brge	.+10     	; 0x46d2 <LCD_init+0x28e>
		__ticks = 1;
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	9d a7       	std	Y+45, r25	; 0x2d
    46ce:	8c a7       	std	Y+44, r24	; 0x2c
    46d0:	3f c0       	rjmp	.+126    	; 0x4750 <LCD_init+0x30c>
	else if (__tmp > 65535)
    46d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    46d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    46d6:	88 a9       	ldd	r24, Y+48	; 0x30
    46d8:	99 a9       	ldd	r25, Y+49	; 0x31
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	3f ef       	ldi	r19, 0xFF	; 255
    46de:	4f e7       	ldi	r20, 0x7F	; 127
    46e0:	57 e4       	ldi	r21, 0x47	; 71
    46e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    46e6:	18 16       	cp	r1, r24
    46e8:	4c f5       	brge	.+82     	; 0x473c <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ea:	6a a9       	ldd	r22, Y+50	; 0x32
    46ec:	7b a9       	ldd	r23, Y+51	; 0x33
    46ee:	8c a9       	ldd	r24, Y+52	; 0x34
    46f0:	9d a9       	ldd	r25, Y+53	; 0x35
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	40 e2       	ldi	r20, 0x20	; 32
    46f8:	51 e4       	ldi	r21, 0x41	; 65
    46fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	bc 01       	movw	r22, r24
    4704:	cd 01       	movw	r24, r26
    4706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	9d a7       	std	Y+45, r25	; 0x2d
    4710:	8c a7       	std	Y+44, r24	; 0x2c
    4712:	0f c0       	rjmp	.+30     	; 0x4732 <LCD_init+0x2ee>
    4714:	88 ec       	ldi	r24, 0xC8	; 200
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	9b a7       	std	Y+43, r25	; 0x2b
    471a:	8a a7       	std	Y+42, r24	; 0x2a
    471c:	8a a5       	ldd	r24, Y+42	; 0x2a
    471e:	9b a5       	ldd	r25, Y+43	; 0x2b
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	f1 f7       	brne	.-4      	; 0x4720 <LCD_init+0x2dc>
    4724:	9b a7       	std	Y+43, r25	; 0x2b
    4726:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4728:	8c a5       	ldd	r24, Y+44	; 0x2c
    472a:	9d a5       	ldd	r25, Y+45	; 0x2d
    472c:	01 97       	sbiw	r24, 0x01	; 1
    472e:	9d a7       	std	Y+45, r25	; 0x2d
    4730:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4732:	8c a5       	ldd	r24, Y+44	; 0x2c
    4734:	9d a5       	ldd	r25, Y+45	; 0x2d
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	69 f7       	brne	.-38     	; 0x4714 <LCD_init+0x2d0>
    473a:	24 c0       	rjmp	.+72     	; 0x4784 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473c:	6e a5       	ldd	r22, Y+46	; 0x2e
    473e:	7f a5       	ldd	r23, Y+47	; 0x2f
    4740:	88 a9       	ldd	r24, Y+48	; 0x30
    4742:	99 a9       	ldd	r25, Y+49	; 0x31
    4744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4748:	dc 01       	movw	r26, r24
    474a:	cb 01       	movw	r24, r22
    474c:	9d a7       	std	Y+45, r25	; 0x2d
    474e:	8c a7       	std	Y+44, r24	; 0x2c
    4750:	8c a5       	ldd	r24, Y+44	; 0x2c
    4752:	9d a5       	ldd	r25, Y+45	; 0x2d
    4754:	99 a7       	std	Y+41, r25	; 0x29
    4756:	88 a7       	std	Y+40, r24	; 0x28
    4758:	88 a5       	ldd	r24, Y+40	; 0x28
    475a:	99 a5       	ldd	r25, Y+41	; 0x29
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	f1 f7       	brne	.-4      	; 0x475c <LCD_init+0x318>
    4760:	99 a7       	std	Y+41, r25	; 0x29
    4762:	88 a7       	std	Y+40, r24	; 0x28
    4764:	0f c0       	rjmp	.+30     	; 0x4784 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4766:	6f a9       	ldd	r22, Y+55	; 0x37
    4768:	78 ad       	ldd	r23, Y+56	; 0x38
    476a:	89 ad       	ldd	r24, Y+57	; 0x39
    476c:	9a ad       	ldd	r25, Y+58	; 0x3a
    476e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4772:	dc 01       	movw	r26, r24
    4774:	cb 01       	movw	r24, r22
    4776:	8e ab       	std	Y+54, r24	; 0x36
    4778:	8e a9       	ldd	r24, Y+54	; 0x36
    477a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    477c:	8f a1       	ldd	r24, Y+39	; 0x27
    477e:	8a 95       	dec	r24
    4780:	f1 f7       	brne	.-4      	; 0x477e <LCD_init+0x33a>
    4782:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    4784:	8c e0       	ldi	r24, 0x0C	; 12
    4786:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_write_cmd_4bit>
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	a8 e4       	ldi	r26, 0x48	; 72
    4790:	b2 e4       	ldi	r27, 0x42	; 66
    4792:	8b a3       	std	Y+35, r24	; 0x23
    4794:	9c a3       	std	Y+36, r25	; 0x24
    4796:	ad a3       	std	Y+37, r26	; 0x25
    4798:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    479a:	6b a1       	ldd	r22, Y+35	; 0x23
    479c:	7c a1       	ldd	r23, Y+36	; 0x24
    479e:	8d a1       	ldd	r24, Y+37	; 0x25
    47a0:	9e a1       	ldd	r25, Y+38	; 0x26
    47a2:	2b ea       	ldi	r18, 0xAB	; 171
    47a4:	3a ea       	ldi	r19, 0xAA	; 170
    47a6:	4a e2       	ldi	r20, 0x2A	; 42
    47a8:	50 e4       	ldi	r21, 0x40	; 64
    47aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	8f 8f       	std	Y+31, r24	; 0x1f
    47b4:	98 a3       	std	Y+32, r25	; 0x20
    47b6:	a9 a3       	std	Y+33, r26	; 0x21
    47b8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    47ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    47bc:	78 a1       	ldd	r23, Y+32	; 0x20
    47be:	89 a1       	ldd	r24, Y+33	; 0x21
    47c0:	9a a1       	ldd	r25, Y+34	; 0x22
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e8       	ldi	r20, 0x80	; 128
    47c8:	5f e3       	ldi	r21, 0x3F	; 63
    47ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    47ce:	88 23       	and	r24, r24
    47d0:	1c f4       	brge	.+6      	; 0x47d8 <LCD_init+0x394>
		__ticks = 1;
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	8e 8f       	std	Y+30, r24	; 0x1e
    47d6:	91 c0       	rjmp	.+290    	; 0x48fa <LCD_init+0x4b6>
	else if (__tmp > 255)
    47d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    47da:	78 a1       	ldd	r23, Y+32	; 0x20
    47dc:	89 a1       	ldd	r24, Y+33	; 0x21
    47de:	9a a1       	ldd	r25, Y+34	; 0x22
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	4f e7       	ldi	r20, 0x7F	; 127
    47e6:	53 e4       	ldi	r21, 0x43	; 67
    47e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    47ec:	18 16       	cp	r1, r24
    47ee:	0c f0       	brlt	.+2      	; 0x47f2 <LCD_init+0x3ae>
    47f0:	7b c0       	rjmp	.+246    	; 0x48e8 <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    47f2:	6b a1       	ldd	r22, Y+35	; 0x23
    47f4:	7c a1       	ldd	r23, Y+36	; 0x24
    47f6:	8d a1       	ldd	r24, Y+37	; 0x25
    47f8:	9e a1       	ldd	r25, Y+38	; 0x26
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	4a e7       	ldi	r20, 0x7A	; 122
    4800:	54 e4       	ldi	r21, 0x44	; 68
    4802:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	8a 8f       	std	Y+26, r24	; 0x1a
    480c:	9b 8f       	std	Y+27, r25	; 0x1b
    480e:	ac 8f       	std	Y+28, r26	; 0x1c
    4810:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4812:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4814:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4816:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4818:	9d 8d       	ldd	r25, Y+29	; 0x1d
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	4a ef       	ldi	r20, 0xFA	; 250
    4820:	54 e4       	ldi	r21, 0x44	; 68
    4822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4826:	dc 01       	movw	r26, r24
    4828:	cb 01       	movw	r24, r22
    482a:	8e 8b       	std	Y+22, r24	; 0x16
    482c:	9f 8b       	std	Y+23, r25	; 0x17
    482e:	a8 8f       	std	Y+24, r26	; 0x18
    4830:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4832:	6e 89       	ldd	r22, Y+22	; 0x16
    4834:	7f 89       	ldd	r23, Y+23	; 0x17
    4836:	88 8d       	ldd	r24, Y+24	; 0x18
    4838:	99 8d       	ldd	r25, Y+25	; 0x19
    483a:	20 e0       	ldi	r18, 0x00	; 0
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	40 e8       	ldi	r20, 0x80	; 128
    4840:	5f e3       	ldi	r21, 0x3F	; 63
    4842:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4846:	88 23       	and	r24, r24
    4848:	2c f4       	brge	.+10     	; 0x4854 <LCD_init+0x410>
		__ticks = 1;
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	9d 8b       	std	Y+21, r25	; 0x15
    4850:	8c 8b       	std	Y+20, r24	; 0x14
    4852:	3f c0       	rjmp	.+126    	; 0x48d2 <LCD_init+0x48e>
	else if (__tmp > 65535)
    4854:	6e 89       	ldd	r22, Y+22	; 0x16
    4856:	7f 89       	ldd	r23, Y+23	; 0x17
    4858:	88 8d       	ldd	r24, Y+24	; 0x18
    485a:	99 8d       	ldd	r25, Y+25	; 0x19
    485c:	20 e0       	ldi	r18, 0x00	; 0
    485e:	3f ef       	ldi	r19, 0xFF	; 255
    4860:	4f e7       	ldi	r20, 0x7F	; 127
    4862:	57 e4       	ldi	r21, 0x47	; 71
    4864:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4868:	18 16       	cp	r1, r24
    486a:	4c f5       	brge	.+82     	; 0x48be <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    486c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    486e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4870:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4872:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	40 e2       	ldi	r20, 0x20	; 32
    487a:	51 e4       	ldi	r21, 0x41	; 65
    487c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4880:	dc 01       	movw	r26, r24
    4882:	cb 01       	movw	r24, r22
    4884:	bc 01       	movw	r22, r24
    4886:	cd 01       	movw	r24, r26
    4888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	9d 8b       	std	Y+21, r25	; 0x15
    4892:	8c 8b       	std	Y+20, r24	; 0x14
    4894:	0f c0       	rjmp	.+30     	; 0x48b4 <LCD_init+0x470>
    4896:	88 ec       	ldi	r24, 0xC8	; 200
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	9b 8b       	std	Y+19, r25	; 0x13
    489c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    489e:	8a 89       	ldd	r24, Y+18	; 0x12
    48a0:	9b 89       	ldd	r25, Y+19	; 0x13
    48a2:	01 97       	sbiw	r24, 0x01	; 1
    48a4:	f1 f7       	brne	.-4      	; 0x48a2 <LCD_init+0x45e>
    48a6:	9b 8b       	std	Y+19, r25	; 0x13
    48a8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48aa:	8c 89       	ldd	r24, Y+20	; 0x14
    48ac:	9d 89       	ldd	r25, Y+21	; 0x15
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	9d 8b       	std	Y+21, r25	; 0x15
    48b2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b4:	8c 89       	ldd	r24, Y+20	; 0x14
    48b6:	9d 89       	ldd	r25, Y+21	; 0x15
    48b8:	00 97       	sbiw	r24, 0x00	; 0
    48ba:	69 f7       	brne	.-38     	; 0x4896 <LCD_init+0x452>
    48bc:	24 c0       	rjmp	.+72     	; 0x4906 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48be:	6e 89       	ldd	r22, Y+22	; 0x16
    48c0:	7f 89       	ldd	r23, Y+23	; 0x17
    48c2:	88 8d       	ldd	r24, Y+24	; 0x18
    48c4:	99 8d       	ldd	r25, Y+25	; 0x19
    48c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	9d 8b       	std	Y+21, r25	; 0x15
    48d0:	8c 8b       	std	Y+20, r24	; 0x14
    48d2:	8c 89       	ldd	r24, Y+20	; 0x14
    48d4:	9d 89       	ldd	r25, Y+21	; 0x15
    48d6:	99 8b       	std	Y+17, r25	; 0x11
    48d8:	88 8b       	std	Y+16, r24	; 0x10
    48da:	88 89       	ldd	r24, Y+16	; 0x10
    48dc:	99 89       	ldd	r25, Y+17	; 0x11
    48de:	01 97       	sbiw	r24, 0x01	; 1
    48e0:	f1 f7       	brne	.-4      	; 0x48de <LCD_init+0x49a>
    48e2:	99 8b       	std	Y+17, r25	; 0x11
    48e4:	88 8b       	std	Y+16, r24	; 0x10
    48e6:	0f c0       	rjmp	.+30     	; 0x4906 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    48ea:	78 a1       	ldd	r23, Y+32	; 0x20
    48ec:	89 a1       	ldd	r24, Y+33	; 0x21
    48ee:	9a a1       	ldd	r25, Y+34	; 0x22
    48f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	8e 8f       	std	Y+30, r24	; 0x1e
    48fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    48fc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4900:	8a 95       	dec	r24
    4902:	f1 f7       	brne	.-4      	; 0x4900 <LCD_init+0x4bc>
    4904:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_write_cmd_4bit>
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	a0 e0       	ldi	r26, 0x00	; 0
    4912:	b0 e4       	ldi	r27, 0x40	; 64
    4914:	8b 87       	std	Y+11, r24	; 0x0b
    4916:	9c 87       	std	Y+12, r25	; 0x0c
    4918:	ad 87       	std	Y+13, r26	; 0x0d
    491a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    491c:	6b 85       	ldd	r22, Y+11	; 0x0b
    491e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4920:	8d 85       	ldd	r24, Y+13	; 0x0d
    4922:	9e 85       	ldd	r25, Y+14	; 0x0e
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	4a ef       	ldi	r20, 0xFA	; 250
    492a:	54 e4       	ldi	r21, 0x44	; 68
    492c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	8f 83       	std	Y+7, r24	; 0x07
    4936:	98 87       	std	Y+8, r25	; 0x08
    4938:	a9 87       	std	Y+9, r26	; 0x09
    493a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    493c:	6f 81       	ldd	r22, Y+7	; 0x07
    493e:	78 85       	ldd	r23, Y+8	; 0x08
    4940:	89 85       	ldd	r24, Y+9	; 0x09
    4942:	9a 85       	ldd	r25, Y+10	; 0x0a
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	40 e8       	ldi	r20, 0x80	; 128
    494a:	5f e3       	ldi	r21, 0x3F	; 63
    494c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4950:	88 23       	and	r24, r24
    4952:	2c f4       	brge	.+10     	; 0x495e <LCD_init+0x51a>
		__ticks = 1;
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	9e 83       	std	Y+6, r25	; 0x06
    495a:	8d 83       	std	Y+5, r24	; 0x05
    495c:	3f c0       	rjmp	.+126    	; 0x49dc <LCD_init+0x598>
	else if (__tmp > 65535)
    495e:	6f 81       	ldd	r22, Y+7	; 0x07
    4960:	78 85       	ldd	r23, Y+8	; 0x08
    4962:	89 85       	ldd	r24, Y+9	; 0x09
    4964:	9a 85       	ldd	r25, Y+10	; 0x0a
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	3f ef       	ldi	r19, 0xFF	; 255
    496a:	4f e7       	ldi	r20, 0x7F	; 127
    496c:	57 e4       	ldi	r21, 0x47	; 71
    496e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4972:	18 16       	cp	r1, r24
    4974:	4c f5       	brge	.+82     	; 0x49c8 <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4976:	6b 85       	ldd	r22, Y+11	; 0x0b
    4978:	7c 85       	ldd	r23, Y+12	; 0x0c
    497a:	8d 85       	ldd	r24, Y+13	; 0x0d
    497c:	9e 85       	ldd	r25, Y+14	; 0x0e
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	40 e2       	ldi	r20, 0x20	; 32
    4984:	51 e4       	ldi	r21, 0x41	; 65
    4986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498a:	dc 01       	movw	r26, r24
    498c:	cb 01       	movw	r24, r22
    498e:	bc 01       	movw	r22, r24
    4990:	cd 01       	movw	r24, r26
    4992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	9e 83       	std	Y+6, r25	; 0x06
    499c:	8d 83       	std	Y+5, r24	; 0x05
    499e:	0f c0       	rjmp	.+30     	; 0x49be <LCD_init+0x57a>
    49a0:	88 ec       	ldi	r24, 0xC8	; 200
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	9c 83       	std	Y+4, r25	; 0x04
    49a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    49a8:	8b 81       	ldd	r24, Y+3	; 0x03
    49aa:	9c 81       	ldd	r25, Y+4	; 0x04
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	f1 f7       	brne	.-4      	; 0x49ac <LCD_init+0x568>
    49b0:	9c 83       	std	Y+4, r25	; 0x04
    49b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	9e 81       	ldd	r25, Y+6	; 0x06
    49b8:	01 97       	sbiw	r24, 0x01	; 1
    49ba:	9e 83       	std	Y+6, r25	; 0x06
    49bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49be:	8d 81       	ldd	r24, Y+5	; 0x05
    49c0:	9e 81       	ldd	r25, Y+6	; 0x06
    49c2:	00 97       	sbiw	r24, 0x00	; 0
    49c4:	69 f7       	brne	.-38     	; 0x49a0 <LCD_init+0x55c>
    49c6:	14 c0       	rjmp	.+40     	; 0x49f0 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c8:	6f 81       	ldd	r22, Y+7	; 0x07
    49ca:	78 85       	ldd	r23, Y+8	; 0x08
    49cc:	89 85       	ldd	r24, Y+9	; 0x09
    49ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    49d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d4:	dc 01       	movw	r26, r24
    49d6:	cb 01       	movw	r24, r22
    49d8:	9e 83       	std	Y+6, r25	; 0x06
    49da:	8d 83       	std	Y+5, r24	; 0x05
    49dc:	8d 81       	ldd	r24, Y+5	; 0x05
    49de:	9e 81       	ldd	r25, Y+6	; 0x06
    49e0:	9a 83       	std	Y+2, r25	; 0x02
    49e2:	89 83       	std	Y+1, r24	; 0x01
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	9a 81       	ldd	r25, Y+2	; 0x02
    49e8:	01 97       	sbiw	r24, 0x01	; 1
    49ea:	f1 f7       	brne	.-4      	; 0x49e8 <LCD_init+0x5a4>
    49ec:	9a 83       	std	Y+2, r25	; 0x02
    49ee:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    49f0:	c4 5b       	subi	r28, 0xB4	; 180
    49f2:	df 4f       	sbci	r29, 0xFF	; 255
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	f8 94       	cli
    49f8:	de bf       	out	0x3e, r29	; 62
    49fa:	0f be       	out	0x3f, r0	; 63
    49fc:	cd bf       	out	0x3d, r28	; 61
    49fe:	cf 91       	pop	r28
    4a00:	df 91       	pop	r29
    4a02:	1f 91       	pop	r17
    4a04:	0f 91       	pop	r16
    4a06:	08 95       	ret

00004a08 <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    4a08:	df 93       	push	r29
    4a0a:	cf 93       	push	r28
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
    4a10:	6b 97       	sbiw	r28, 0x1b	; 27
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	f8 94       	cli
    4a16:	de bf       	out	0x3e, r29	; 62
    4a18:	0f be       	out	0x3f, r0	; 63
    4a1a:	cd bf       	out	0x3d, r28	; 61
    4a1c:	8a 8f       	std	Y+26, r24	; 0x1a
    4a1e:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    4a20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4a22:	88 2f       	mov	r24, r24
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	02 96       	adiw	r24, 0x02	; 2
    4a28:	00 24       	eor	r0, r0
    4a2a:	96 95       	lsr	r25
    4a2c:	87 95       	ror	r24
    4a2e:	07 94       	ror	r0
    4a30:	96 95       	lsr	r25
    4a32:	87 95       	ror	r24
    4a34:	07 94       	ror	r0
    4a36:	98 2f       	mov	r25, r24
    4a38:	80 2d       	mov	r24, r0
    4a3a:	98 2f       	mov	r25, r24
    4a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a3e:	89 0f       	add	r24, r25
    4a40:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    4a42:	89 8d       	ldd	r24, Y+25	; 0x19
    4a44:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_write_cmd_4bit>
    4a48:	80 e0       	ldi	r24, 0x00	; 0
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	a8 e4       	ldi	r26, 0x48	; 72
    4a4e:	b2 e4       	ldi	r27, 0x42	; 66
    4a50:	8d 8b       	std	Y+21, r24	; 0x15
    4a52:	9e 8b       	std	Y+22, r25	; 0x16
    4a54:	af 8b       	std	Y+23, r26	; 0x17
    4a56:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a58:	6d 89       	ldd	r22, Y+21	; 0x15
    4a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a60:	2b ea       	ldi	r18, 0xAB	; 171
    4a62:	3a ea       	ldi	r19, 0xAA	; 170
    4a64:	4a e2       	ldi	r20, 0x2A	; 42
    4a66:	50 e4       	ldi	r21, 0x40	; 64
    4a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	89 8b       	std	Y+17, r24	; 0x11
    4a72:	9a 8b       	std	Y+18, r25	; 0x12
    4a74:	ab 8b       	std	Y+19, r26	; 0x13
    4a76:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4a78:	69 89       	ldd	r22, Y+17	; 0x11
    4a7a:	7a 89       	ldd	r23, Y+18	; 0x12
    4a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	40 e8       	ldi	r20, 0x80	; 128
    4a86:	5f e3       	ldi	r21, 0x3F	; 63
    4a88:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4a8c:	88 23       	and	r24, r24
    4a8e:	1c f4       	brge	.+6      	; 0x4a96 <LCD_set_cursor+0x8e>
		__ticks = 1;
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	88 8b       	std	Y+16, r24	; 0x10
    4a94:	91 c0       	rjmp	.+290    	; 0x4bb8 <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    4a96:	69 89       	ldd	r22, Y+17	; 0x11
    4a98:	7a 89       	ldd	r23, Y+18	; 0x12
    4a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	4f e7       	ldi	r20, 0x7F	; 127
    4aa4:	53 e4       	ldi	r21, 0x43	; 67
    4aa6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4aaa:	18 16       	cp	r1, r24
    4aac:	0c f0       	brlt	.+2      	; 0x4ab0 <LCD_set_cursor+0xa8>
    4aae:	7b c0       	rjmp	.+246    	; 0x4ba6 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    4ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	4a e7       	ldi	r20, 0x7A	; 122
    4abe:	54 e4       	ldi	r21, 0x44	; 68
    4ac0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	8c 87       	std	Y+12, r24	; 0x0c
    4aca:	9d 87       	std	Y+13, r25	; 0x0d
    4acc:	ae 87       	std	Y+14, r26	; 0x0e
    4ace:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad0:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ad2:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ad4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ad6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	4a ef       	ldi	r20, 0xFA	; 250
    4ade:	54 e4       	ldi	r21, 0x44	; 68
    4ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	cb 01       	movw	r24, r22
    4ae8:	88 87       	std	Y+8, r24	; 0x08
    4aea:	99 87       	std	Y+9, r25	; 0x09
    4aec:	aa 87       	std	Y+10, r26	; 0x0a
    4aee:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4af0:	68 85       	ldd	r22, Y+8	; 0x08
    4af2:	79 85       	ldd	r23, Y+9	; 0x09
    4af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4af6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	30 e0       	ldi	r19, 0x00	; 0
    4afc:	40 e8       	ldi	r20, 0x80	; 128
    4afe:	5f e3       	ldi	r21, 0x3F	; 63
    4b00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4b04:	88 23       	and	r24, r24
    4b06:	2c f4       	brge	.+10     	; 0x4b12 <LCD_set_cursor+0x10a>
		__ticks = 1;
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	9f 83       	std	Y+7, r25	; 0x07
    4b0e:	8e 83       	std	Y+6, r24	; 0x06
    4b10:	3f c0       	rjmp	.+126    	; 0x4b90 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4b12:	68 85       	ldd	r22, Y+8	; 0x08
    4b14:	79 85       	ldd	r23, Y+9	; 0x09
    4b16:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b18:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	3f ef       	ldi	r19, 0xFF	; 255
    4b1e:	4f e7       	ldi	r20, 0x7F	; 127
    4b20:	57 e4       	ldi	r21, 0x47	; 71
    4b22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4b26:	18 16       	cp	r1, r24
    4b28:	4c f5       	brge	.+82     	; 0x4b7c <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b2a:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b2c:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b30:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	40 e2       	ldi	r20, 0x20	; 32
    4b38:	51 e4       	ldi	r21, 0x41	; 65
    4b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	bc 01       	movw	r22, r24
    4b44:	cd 01       	movw	r24, r26
    4b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b4a:	dc 01       	movw	r26, r24
    4b4c:	cb 01       	movw	r24, r22
    4b4e:	9f 83       	std	Y+7, r25	; 0x07
    4b50:	8e 83       	std	Y+6, r24	; 0x06
    4b52:	0f c0       	rjmp	.+30     	; 0x4b72 <LCD_set_cursor+0x16a>
    4b54:	88 ec       	ldi	r24, 0xC8	; 200
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	9d 83       	std	Y+5, r25	; 0x05
    4b5a:	8c 83       	std	Y+4, r24	; 0x04
    4b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    4b60:	01 97       	sbiw	r24, 0x01	; 1
    4b62:	f1 f7       	brne	.-4      	; 0x4b60 <LCD_set_cursor+0x158>
    4b64:	9d 83       	std	Y+5, r25	; 0x05
    4b66:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b68:	8e 81       	ldd	r24, Y+6	; 0x06
    4b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	9f 83       	std	Y+7, r25	; 0x07
    4b70:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b72:	8e 81       	ldd	r24, Y+6	; 0x06
    4b74:	9f 81       	ldd	r25, Y+7	; 0x07
    4b76:	00 97       	sbiw	r24, 0x00	; 0
    4b78:	69 f7       	brne	.-38     	; 0x4b54 <LCD_set_cursor+0x14c>
    4b7a:	24 c0       	rjmp	.+72     	; 0x4bc4 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b7c:	68 85       	ldd	r22, Y+8	; 0x08
    4b7e:	79 85       	ldd	r23, Y+9	; 0x09
    4b80:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b82:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b88:	dc 01       	movw	r26, r24
    4b8a:	cb 01       	movw	r24, r22
    4b8c:	9f 83       	std	Y+7, r25	; 0x07
    4b8e:	8e 83       	std	Y+6, r24	; 0x06
    4b90:	8e 81       	ldd	r24, Y+6	; 0x06
    4b92:	9f 81       	ldd	r25, Y+7	; 0x07
    4b94:	9b 83       	std	Y+3, r25	; 0x03
    4b96:	8a 83       	std	Y+2, r24	; 0x02
    4b98:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	f1 f7       	brne	.-4      	; 0x4b9c <LCD_set_cursor+0x194>
    4ba0:	9b 83       	std	Y+3, r25	; 0x03
    4ba2:	8a 83       	std	Y+2, r24	; 0x02
    4ba4:	0f c0       	rjmp	.+30     	; 0x4bc4 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4ba6:	69 89       	ldd	r22, Y+17	; 0x11
    4ba8:	7a 89       	ldd	r23, Y+18	; 0x12
    4baa:	8b 89       	ldd	r24, Y+19	; 0x13
    4bac:	9c 89       	ldd	r25, Y+20	; 0x14
    4bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	88 8b       	std	Y+16, r24	; 0x10
    4bb8:	88 89       	ldd	r24, Y+16	; 0x10
    4bba:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4bbc:	89 81       	ldd	r24, Y+1	; 0x01
    4bbe:	8a 95       	dec	r24
    4bc0:	f1 f7       	brne	.-4      	; 0x4bbe <LCD_set_cursor+0x1b6>
    4bc2:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    4bc4:	6b 96       	adiw	r28, 0x1b	; 27
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	f8 94       	cli
    4bca:	de bf       	out	0x3e, r29	; 62
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	cd bf       	out	0x3d, r28	; 61
    4bd0:	cf 91       	pop	r28
    4bd2:	df 91       	pop	r29
    4bd4:	08 95       	ret

00004bd6 <LCD_clear>:

void LCD_clear(void){
    4bd6:	df 93       	push	r29
    4bd8:	cf 93       	push	r28
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
    4bde:	6c 97       	sbiw	r28, 0x1c	; 28
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0f be       	out	0x3f, r0	; 63
    4be8:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_write_cmd_4bit>
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	a0 e0       	ldi	r26, 0x00	; 0
    4bf6:	b0 e4       	ldi	r27, 0x40	; 64
    4bf8:	89 8f       	std	Y+25, r24	; 0x19
    4bfa:	9a 8f       	std	Y+26, r25	; 0x1a
    4bfc:	ab 8f       	std	Y+27, r26	; 0x1b
    4bfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c00:	69 8d       	ldd	r22, Y+25	; 0x19
    4c02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	4a ef       	ldi	r20, 0xFA	; 250
    4c0e:	54 e4       	ldi	r21, 0x44	; 68
    4c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c14:	dc 01       	movw	r26, r24
    4c16:	cb 01       	movw	r24, r22
    4c18:	8d 8b       	std	Y+21, r24	; 0x15
    4c1a:	9e 8b       	std	Y+22, r25	; 0x16
    4c1c:	af 8b       	std	Y+23, r26	; 0x17
    4c1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c20:	6d 89       	ldd	r22, Y+21	; 0x15
    4c22:	7e 89       	ldd	r23, Y+22	; 0x16
    4c24:	8f 89       	ldd	r24, Y+23	; 0x17
    4c26:	98 8d       	ldd	r25, Y+24	; 0x18
    4c28:	20 e0       	ldi	r18, 0x00	; 0
    4c2a:	30 e0       	ldi	r19, 0x00	; 0
    4c2c:	40 e8       	ldi	r20, 0x80	; 128
    4c2e:	5f e3       	ldi	r21, 0x3F	; 63
    4c30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c34:	88 23       	and	r24, r24
    4c36:	2c f4       	brge	.+10     	; 0x4c42 <LCD_clear+0x6c>
		__ticks = 1;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	9c 8b       	std	Y+20, r25	; 0x14
    4c3e:	8b 8b       	std	Y+19, r24	; 0x13
    4c40:	3f c0       	rjmp	.+126    	; 0x4cc0 <LCD_clear+0xea>
	else if (__tmp > 65535)
    4c42:	6d 89       	ldd	r22, Y+21	; 0x15
    4c44:	7e 89       	ldd	r23, Y+22	; 0x16
    4c46:	8f 89       	ldd	r24, Y+23	; 0x17
    4c48:	98 8d       	ldd	r25, Y+24	; 0x18
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	3f ef       	ldi	r19, 0xFF	; 255
    4c4e:	4f e7       	ldi	r20, 0x7F	; 127
    4c50:	57 e4       	ldi	r21, 0x47	; 71
    4c52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c56:	18 16       	cp	r1, r24
    4c58:	4c f5       	brge	.+82     	; 0x4cac <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    4c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	40 e2       	ldi	r20, 0x20	; 32
    4c68:	51 e4       	ldi	r21, 0x41	; 65
    4c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c6e:	dc 01       	movw	r26, r24
    4c70:	cb 01       	movw	r24, r22
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	9c 8b       	std	Y+20, r25	; 0x14
    4c80:	8b 8b       	std	Y+19, r24	; 0x13
    4c82:	0f c0       	rjmp	.+30     	; 0x4ca2 <LCD_clear+0xcc>
    4c84:	88 ec       	ldi	r24, 0xC8	; 200
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	9a 8b       	std	Y+18, r25	; 0x12
    4c8a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c8c:	89 89       	ldd	r24, Y+17	; 0x11
    4c8e:	9a 89       	ldd	r25, Y+18	; 0x12
    4c90:	01 97       	sbiw	r24, 0x01	; 1
    4c92:	f1 f7       	brne	.-4      	; 0x4c90 <LCD_clear+0xba>
    4c94:	9a 8b       	std	Y+18, r25	; 0x12
    4c96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c98:	8b 89       	ldd	r24, Y+19	; 0x13
    4c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c9c:	01 97       	sbiw	r24, 0x01	; 1
    4c9e:	9c 8b       	std	Y+20, r25	; 0x14
    4ca0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	69 f7       	brne	.-38     	; 0x4c84 <LCD_clear+0xae>
    4caa:	14 c0       	rjmp	.+40     	; 0x4cd4 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cac:	6d 89       	ldd	r22, Y+21	; 0x15
    4cae:	7e 89       	ldd	r23, Y+22	; 0x16
    4cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    4cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    4cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb8:	dc 01       	movw	r26, r24
    4cba:	cb 01       	movw	r24, r22
    4cbc:	9c 8b       	std	Y+20, r25	; 0x14
    4cbe:	8b 8b       	std	Y+19, r24	; 0x13
    4cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4cc4:	98 8b       	std	Y+16, r25	; 0x10
    4cc6:	8f 87       	std	Y+15, r24	; 0x0f
    4cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cca:	98 89       	ldd	r25, Y+16	; 0x10
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	f1 f7       	brne	.-4      	; 0x4ccc <LCD_clear+0xf6>
    4cd0:	98 8b       	std	Y+16, r25	; 0x10
    4cd2:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    4cd4:	82 e0       	ldi	r24, 0x02	; 2
    4cd6:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_write_cmd_4bit>
    4cda:	80 e0       	ldi	r24, 0x00	; 0
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	a0 e0       	ldi	r26, 0x00	; 0
    4ce0:	b0 e4       	ldi	r27, 0x40	; 64
    4ce2:	8b 87       	std	Y+11, r24	; 0x0b
    4ce4:	9c 87       	std	Y+12, r25	; 0x0c
    4ce6:	ad 87       	std	Y+13, r26	; 0x0d
    4ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	4a ef       	ldi	r20, 0xFA	; 250
    4cf8:	54 e4       	ldi	r21, 0x44	; 68
    4cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	8f 83       	std	Y+7, r24	; 0x07
    4d04:	98 87       	std	Y+8, r25	; 0x08
    4d06:	a9 87       	std	Y+9, r26	; 0x09
    4d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d0c:	78 85       	ldd	r23, Y+8	; 0x08
    4d0e:	89 85       	ldd	r24, Y+9	; 0x09
    4d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e8       	ldi	r20, 0x80	; 128
    4d18:	5f e3       	ldi	r21, 0x3F	; 63
    4d1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d1e:	88 23       	and	r24, r24
    4d20:	2c f4       	brge	.+10     	; 0x4d2c <LCD_clear+0x156>
		__ticks = 1;
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	9e 83       	std	Y+6, r25	; 0x06
    4d28:	8d 83       	std	Y+5, r24	; 0x05
    4d2a:	3f c0       	rjmp	.+126    	; 0x4daa <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    4d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d2e:	78 85       	ldd	r23, Y+8	; 0x08
    4d30:	89 85       	ldd	r24, Y+9	; 0x09
    4d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	3f ef       	ldi	r19, 0xFF	; 255
    4d38:	4f e7       	ldi	r20, 0x7F	; 127
    4d3a:	57 e4       	ldi	r21, 0x47	; 71
    4d3c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4d40:	18 16       	cp	r1, r24
    4d42:	4c f5       	brge	.+82     	; 0x4d96 <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e2       	ldi	r20, 0x20	; 32
    4d52:	51 e4       	ldi	r21, 0x41	; 65
    4d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	9e 83       	std	Y+6, r25	; 0x06
    4d6a:	8d 83       	std	Y+5, r24	; 0x05
    4d6c:	0f c0       	rjmp	.+30     	; 0x4d8c <LCD_clear+0x1b6>
    4d6e:	88 ec       	ldi	r24, 0xC8	; 200
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	9c 83       	std	Y+4, r25	; 0x04
    4d74:	8b 83       	std	Y+3, r24	; 0x03
    4d76:	8b 81       	ldd	r24, Y+3	; 0x03
    4d78:	9c 81       	ldd	r25, Y+4	; 0x04
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	f1 f7       	brne	.-4      	; 0x4d7a <LCD_clear+0x1a4>
    4d7e:	9c 83       	std	Y+4, r25	; 0x04
    4d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d82:	8d 81       	ldd	r24, Y+5	; 0x05
    4d84:	9e 81       	ldd	r25, Y+6	; 0x06
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	9e 83       	std	Y+6, r25	; 0x06
    4d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	69 f7       	brne	.-38     	; 0x4d6e <LCD_clear+0x198>
    4d94:	14 c0       	rjmp	.+40     	; 0x4dbe <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d96:	6f 81       	ldd	r22, Y+7	; 0x07
    4d98:	78 85       	ldd	r23, Y+8	; 0x08
    4d9a:	89 85       	ldd	r24, Y+9	; 0x09
    4d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	9e 83       	std	Y+6, r25	; 0x06
    4da8:	8d 83       	std	Y+5, r24	; 0x05
    4daa:	8d 81       	ldd	r24, Y+5	; 0x05
    4dac:	9e 81       	ldd	r25, Y+6	; 0x06
    4dae:	9a 83       	std	Y+2, r25	; 0x02
    4db0:	89 83       	std	Y+1, r24	; 0x01
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	9a 81       	ldd	r25, Y+2	; 0x02
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	f1 f7       	brne	.-4      	; 0x4db6 <LCD_clear+0x1e0>
    4dba:	9a 83       	std	Y+2, r25	; 0x02
    4dbc:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    4dbe:	6c 96       	adiw	r28, 0x1c	; 28
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	f8 94       	cli
    4dc4:	de bf       	out	0x3e, r29	; 62
    4dc6:	0f be       	out	0x3f, r0	; 63
    4dc8:	cd bf       	out	0x3d, r28	; 61
    4dca:	cf 91       	pop	r28
    4dcc:	df 91       	pop	r29
    4dce:	08 95       	ret

00004dd0 <LCD_off>:

void LCD_off(void ){
    4dd0:	df 93       	push	r29
    4dd2:	cf 93       	push	r28
    4dd4:	cd b7       	in	r28, 0x3d	; 61
    4dd6:	de b7       	in	r29, 0x3e	; 62
    4dd8:	2e 97       	sbiw	r28, 0x0e	; 14
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	f8 94       	cli
    4dde:	de bf       	out	0x3e, r29	; 62
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    4de4:	88 e0       	ldi	r24, 0x08	; 8
    4de6:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_write_cmd_4bit>
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	a8 e4       	ldi	r26, 0x48	; 72
    4df0:	b2 e4       	ldi	r27, 0x42	; 66
    4df2:	8b 87       	std	Y+11, r24	; 0x0b
    4df4:	9c 87       	std	Y+12, r25	; 0x0c
    4df6:	ad 87       	std	Y+13, r26	; 0x0d
    4df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	4a ef       	ldi	r20, 0xFA	; 250
    4e08:	54 e4       	ldi	r21, 0x44	; 68
    4e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	8f 83       	std	Y+7, r24	; 0x07
    4e14:	98 87       	std	Y+8, r25	; 0x08
    4e16:	a9 87       	std	Y+9, r26	; 0x09
    4e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e1c:	78 85       	ldd	r23, Y+8	; 0x08
    4e1e:	89 85       	ldd	r24, Y+9	; 0x09
    4e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e22:	20 e0       	ldi	r18, 0x00	; 0
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	40 e8       	ldi	r20, 0x80	; 128
    4e28:	5f e3       	ldi	r21, 0x3F	; 63
    4e2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e2e:	88 23       	and	r24, r24
    4e30:	2c f4       	brge	.+10     	; 0x4e3c <LCD_off+0x6c>
		__ticks = 1;
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	9e 83       	std	Y+6, r25	; 0x06
    4e38:	8d 83       	std	Y+5, r24	; 0x05
    4e3a:	3f c0       	rjmp	.+126    	; 0x4eba <LCD_off+0xea>
	else if (__tmp > 65535)
    4e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e3e:	78 85       	ldd	r23, Y+8	; 0x08
    4e40:	89 85       	ldd	r24, Y+9	; 0x09
    4e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	3f ef       	ldi	r19, 0xFF	; 255
    4e48:	4f e7       	ldi	r20, 0x7F	; 127
    4e4a:	57 e4       	ldi	r21, 0x47	; 71
    4e4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e50:	18 16       	cp	r1, r24
    4e52:	4c f5       	brge	.+82     	; 0x4ea6 <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e5c:	20 e0       	ldi	r18, 0x00	; 0
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	40 e2       	ldi	r20, 0x20	; 32
    4e62:	51 e4       	ldi	r21, 0x41	; 65
    4e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	bc 01       	movw	r22, r24
    4e6e:	cd 01       	movw	r24, r26
    4e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	9e 83       	std	Y+6, r25	; 0x06
    4e7a:	8d 83       	std	Y+5, r24	; 0x05
    4e7c:	0f c0       	rjmp	.+30     	; 0x4e9c <LCD_off+0xcc>
    4e7e:	88 ec       	ldi	r24, 0xC8	; 200
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	9c 83       	std	Y+4, r25	; 0x04
    4e84:	8b 83       	std	Y+3, r24	; 0x03
    4e86:	8b 81       	ldd	r24, Y+3	; 0x03
    4e88:	9c 81       	ldd	r25, Y+4	; 0x04
    4e8a:	01 97       	sbiw	r24, 0x01	; 1
    4e8c:	f1 f7       	brne	.-4      	; 0x4e8a <LCD_off+0xba>
    4e8e:	9c 83       	std	Y+4, r25	; 0x04
    4e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e92:	8d 81       	ldd	r24, Y+5	; 0x05
    4e94:	9e 81       	ldd	r25, Y+6	; 0x06
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	9e 83       	std	Y+6, r25	; 0x06
    4e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea0:	00 97       	sbiw	r24, 0x00	; 0
    4ea2:	69 f7       	brne	.-38     	; 0x4e7e <LCD_off+0xae>
    4ea4:	14 c0       	rjmp	.+40     	; 0x4ece <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    4ea8:	78 85       	ldd	r23, Y+8	; 0x08
    4eaa:	89 85       	ldd	r24, Y+9	; 0x09
    4eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	9e 83       	std	Y+6, r25	; 0x06
    4eb8:	8d 83       	std	Y+5, r24	; 0x05
    4eba:	8d 81       	ldd	r24, Y+5	; 0x05
    4ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ebe:	9a 83       	std	Y+2, r25	; 0x02
    4ec0:	89 83       	std	Y+1, r24	; 0x01
    4ec2:	89 81       	ldd	r24, Y+1	; 0x01
    4ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	f1 f7       	brne	.-4      	; 0x4ec6 <LCD_off+0xf6>
    4eca:	9a 83       	std	Y+2, r25	; 0x02
    4ecc:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    4ece:	2e 96       	adiw	r28, 0x0e	; 14
    4ed0:	0f b6       	in	r0, 0x3f	; 63
    4ed2:	f8 94       	cli
    4ed4:	de bf       	out	0x3e, r29	; 62
    4ed6:	0f be       	out	0x3f, r0	; 63
    4ed8:	cd bf       	out	0x3d, r28	; 61
    4eda:	cf 91       	pop	r28
    4edc:	df 91       	pop	r29
    4ede:	08 95       	ret

00004ee0 <LCD_on>:

void LCD_on(void ){
    4ee0:	df 93       	push	r29
    4ee2:	cf 93       	push	r28
    4ee4:	cd b7       	in	r28, 0x3d	; 61
    4ee6:	de b7       	in	r29, 0x3e	; 62
    4ee8:	68 97       	sbiw	r28, 0x18	; 24
    4eea:	0f b6       	in	r0, 0x3f	; 63
    4eec:	f8 94       	cli
    4eee:	de bf       	out	0x3e, r29	; 62
    4ef0:	0f be       	out	0x3f, r0	; 63
    4ef2:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    4ef4:	8c e0       	ldi	r24, 0x0C	; 12
    4ef6:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_write_cmd_4bit>
    4efa:	80 e0       	ldi	r24, 0x00	; 0
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	a8 e4       	ldi	r26, 0x48	; 72
    4f00:	b2 e4       	ldi	r27, 0x42	; 66
    4f02:	8d 8b       	std	Y+21, r24	; 0x15
    4f04:	9e 8b       	std	Y+22, r25	; 0x16
    4f06:	af 8b       	std	Y+23, r26	; 0x17
    4f08:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f10:	98 8d       	ldd	r25, Y+24	; 0x18
    4f12:	2b ea       	ldi	r18, 0xAB	; 171
    4f14:	3a ea       	ldi	r19, 0xAA	; 170
    4f16:	4a e2       	ldi	r20, 0x2A	; 42
    4f18:	50 e4       	ldi	r21, 0x40	; 64
    4f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	89 8b       	std	Y+17, r24	; 0x11
    4f24:	9a 8b       	std	Y+18, r25	; 0x12
    4f26:	ab 8b       	std	Y+19, r26	; 0x13
    4f28:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4f2a:	69 89       	ldd	r22, Y+17	; 0x11
    4f2c:	7a 89       	ldd	r23, Y+18	; 0x12
    4f2e:	8b 89       	ldd	r24, Y+19	; 0x13
    4f30:	9c 89       	ldd	r25, Y+20	; 0x14
    4f32:	20 e0       	ldi	r18, 0x00	; 0
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	40 e8       	ldi	r20, 0x80	; 128
    4f38:	5f e3       	ldi	r21, 0x3F	; 63
    4f3a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f3e:	88 23       	and	r24, r24
    4f40:	1c f4       	brge	.+6      	; 0x4f48 <LCD_on+0x68>
		__ticks = 1;
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	88 8b       	std	Y+16, r24	; 0x10
    4f46:	91 c0       	rjmp	.+290    	; 0x506a <LCD_on+0x18a>
	else if (__tmp > 255)
    4f48:	69 89       	ldd	r22, Y+17	; 0x11
    4f4a:	7a 89       	ldd	r23, Y+18	; 0x12
    4f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f4e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f50:	20 e0       	ldi	r18, 0x00	; 0
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	4f e7       	ldi	r20, 0x7F	; 127
    4f56:	53 e4       	ldi	r21, 0x43	; 67
    4f58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4f5c:	18 16       	cp	r1, r24
    4f5e:	0c f0       	brlt	.+2      	; 0x4f62 <LCD_on+0x82>
    4f60:	7b c0       	rjmp	.+246    	; 0x5058 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    4f62:	6d 89       	ldd	r22, Y+21	; 0x15
    4f64:	7e 89       	ldd	r23, Y+22	; 0x16
    4f66:	8f 89       	ldd	r24, Y+23	; 0x17
    4f68:	98 8d       	ldd	r25, Y+24	; 0x18
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	4a e7       	ldi	r20, 0x7A	; 122
    4f70:	54 e4       	ldi	r21, 0x44	; 68
    4f72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	8c 87       	std	Y+12, r24	; 0x0c
    4f7c:	9d 87       	std	Y+13, r25	; 0x0d
    4f7e:	ae 87       	std	Y+14, r26	; 0x0e
    4f80:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f82:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f84:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f86:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f88:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	4a ef       	ldi	r20, 0xFA	; 250
    4f90:	54 e4       	ldi	r21, 0x44	; 68
    4f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f96:	dc 01       	movw	r26, r24
    4f98:	cb 01       	movw	r24, r22
    4f9a:	88 87       	std	Y+8, r24	; 0x08
    4f9c:	99 87       	std	Y+9, r25	; 0x09
    4f9e:	aa 87       	std	Y+10, r26	; 0x0a
    4fa0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4fa2:	68 85       	ldd	r22, Y+8	; 0x08
    4fa4:	79 85       	ldd	r23, Y+9	; 0x09
    4fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	40 e8       	ldi	r20, 0x80	; 128
    4fb0:	5f e3       	ldi	r21, 0x3F	; 63
    4fb2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4fb6:	88 23       	and	r24, r24
    4fb8:	2c f4       	brge	.+10     	; 0x4fc4 <LCD_on+0xe4>
		__ticks = 1;
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	9f 83       	std	Y+7, r25	; 0x07
    4fc0:	8e 83       	std	Y+6, r24	; 0x06
    4fc2:	3f c0       	rjmp	.+126    	; 0x5042 <LCD_on+0x162>
	else if (__tmp > 65535)
    4fc4:	68 85       	ldd	r22, Y+8	; 0x08
    4fc6:	79 85       	ldd	r23, Y+9	; 0x09
    4fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fca:	9b 85       	ldd	r25, Y+11	; 0x0b
    4fcc:	20 e0       	ldi	r18, 0x00	; 0
    4fce:	3f ef       	ldi	r19, 0xFF	; 255
    4fd0:	4f e7       	ldi	r20, 0x7F	; 127
    4fd2:	57 e4       	ldi	r21, 0x47	; 71
    4fd4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4fd8:	18 16       	cp	r1, r24
    4fda:	4c f5       	brge	.+82     	; 0x502e <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fdc:	6c 85       	ldd	r22, Y+12	; 0x0c
    4fde:	7d 85       	ldd	r23, Y+13	; 0x0d
    4fe0:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fe2:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fe4:	20 e0       	ldi	r18, 0x00	; 0
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	40 e2       	ldi	r20, 0x20	; 32
    4fea:	51 e4       	ldi	r21, 0x41	; 65
    4fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ff0:	dc 01       	movw	r26, r24
    4ff2:	cb 01       	movw	r24, r22
    4ff4:	bc 01       	movw	r22, r24
    4ff6:	cd 01       	movw	r24, r26
    4ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ffc:	dc 01       	movw	r26, r24
    4ffe:	cb 01       	movw	r24, r22
    5000:	9f 83       	std	Y+7, r25	; 0x07
    5002:	8e 83       	std	Y+6, r24	; 0x06
    5004:	0f c0       	rjmp	.+30     	; 0x5024 <LCD_on+0x144>
    5006:	88 ec       	ldi	r24, 0xC8	; 200
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	9d 83       	std	Y+5, r25	; 0x05
    500c:	8c 83       	std	Y+4, r24	; 0x04
    500e:	8c 81       	ldd	r24, Y+4	; 0x04
    5010:	9d 81       	ldd	r25, Y+5	; 0x05
    5012:	01 97       	sbiw	r24, 0x01	; 1
    5014:	f1 f7       	brne	.-4      	; 0x5012 <LCD_on+0x132>
    5016:	9d 83       	std	Y+5, r25	; 0x05
    5018:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    501a:	8e 81       	ldd	r24, Y+6	; 0x06
    501c:	9f 81       	ldd	r25, Y+7	; 0x07
    501e:	01 97       	sbiw	r24, 0x01	; 1
    5020:	9f 83       	std	Y+7, r25	; 0x07
    5022:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5024:	8e 81       	ldd	r24, Y+6	; 0x06
    5026:	9f 81       	ldd	r25, Y+7	; 0x07
    5028:	00 97       	sbiw	r24, 0x00	; 0
    502a:	69 f7       	brne	.-38     	; 0x5006 <LCD_on+0x126>
    502c:	24 c0       	rjmp	.+72     	; 0x5076 <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    502e:	68 85       	ldd	r22, Y+8	; 0x08
    5030:	79 85       	ldd	r23, Y+9	; 0x09
    5032:	8a 85       	ldd	r24, Y+10	; 0x0a
    5034:	9b 85       	ldd	r25, Y+11	; 0x0b
    5036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    503a:	dc 01       	movw	r26, r24
    503c:	cb 01       	movw	r24, r22
    503e:	9f 83       	std	Y+7, r25	; 0x07
    5040:	8e 83       	std	Y+6, r24	; 0x06
    5042:	8e 81       	ldd	r24, Y+6	; 0x06
    5044:	9f 81       	ldd	r25, Y+7	; 0x07
    5046:	9b 83       	std	Y+3, r25	; 0x03
    5048:	8a 83       	std	Y+2, r24	; 0x02
    504a:	8a 81       	ldd	r24, Y+2	; 0x02
    504c:	9b 81       	ldd	r25, Y+3	; 0x03
    504e:	01 97       	sbiw	r24, 0x01	; 1
    5050:	f1 f7       	brne	.-4      	; 0x504e <LCD_on+0x16e>
    5052:	9b 83       	std	Y+3, r25	; 0x03
    5054:	8a 83       	std	Y+2, r24	; 0x02
    5056:	0f c0       	rjmp	.+30     	; 0x5076 <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5058:	69 89       	ldd	r22, Y+17	; 0x11
    505a:	7a 89       	ldd	r23, Y+18	; 0x12
    505c:	8b 89       	ldd	r24, Y+19	; 0x13
    505e:	9c 89       	ldd	r25, Y+20	; 0x14
    5060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	88 8b       	std	Y+16, r24	; 0x10
    506a:	88 89       	ldd	r24, Y+16	; 0x10
    506c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	8a 95       	dec	r24
    5072:	f1 f7       	brne	.-4      	; 0x5070 <LCD_on+0x190>
    5074:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    5076:	68 96       	adiw	r28, 0x18	; 24
    5078:	0f b6       	in	r0, 0x3f	; 63
    507a:	f8 94       	cli
    507c:	de bf       	out	0x3e, r29	; 62
    507e:	0f be       	out	0x3f, r0	; 63
    5080:	cd bf       	out	0x3d, r28	; 61
    5082:	cf 91       	pop	r28
    5084:	df 91       	pop	r29
    5086:	08 95       	ret

00005088 <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    5088:	df 93       	push	r29
    508a:	cf 93       	push	r28
    508c:	00 d0       	rcall	.+0      	; 0x508e <LCD_create_char+0x6>
    508e:	0f 92       	push	r0
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	9a 83       	std	Y+2, r25	; 0x02
    5096:	89 83       	std	Y+1, r24	; 0x01
    5098:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    509a:	0f 90       	pop	r0
    509c:	0f 90       	pop	r0
    509e:	0f 90       	pop	r0
    50a0:	cf 91       	pop	r28
    50a2:	df 91       	pop	r29
    50a4:	08 95       	ret

000050a6 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    50a6:	df 93       	push	r29
    50a8:	cf 93       	push	r28
    50aa:	cd b7       	in	r28, 0x3d	; 61
    50ac:	de b7       	in	r29, 0x3e	; 62
    50ae:	69 97       	sbiw	r28, 0x19	; 25
    50b0:	0f b6       	in	r0, 0x3f	; 63
    50b2:	f8 94       	cli
    50b4:	de bf       	out	0x3e, r29	; 62
    50b6:	0f be       	out	0x3f, r0	; 63
    50b8:	cd bf       	out	0x3d, r28	; 61
    50ba:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    50bc:	89 8d       	ldd	r24, Y+25	; 0x19
    50be:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_write_data_4bit>
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	a8 e4       	ldi	r26, 0x48	; 72
    50c8:	b2 e4       	ldi	r27, 0x42	; 66
    50ca:	8d 8b       	std	Y+21, r24	; 0x15
    50cc:	9e 8b       	std	Y+22, r25	; 0x16
    50ce:	af 8b       	std	Y+23, r26	; 0x17
    50d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    50d2:	6d 89       	ldd	r22, Y+21	; 0x15
    50d4:	7e 89       	ldd	r23, Y+22	; 0x16
    50d6:	8f 89       	ldd	r24, Y+23	; 0x17
    50d8:	98 8d       	ldd	r25, Y+24	; 0x18
    50da:	2b ea       	ldi	r18, 0xAB	; 171
    50dc:	3a ea       	ldi	r19, 0xAA	; 170
    50de:	4a e2       	ldi	r20, 0x2A	; 42
    50e0:	50 e4       	ldi	r21, 0x40	; 64
    50e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e6:	dc 01       	movw	r26, r24
    50e8:	cb 01       	movw	r24, r22
    50ea:	89 8b       	std	Y+17, r24	; 0x11
    50ec:	9a 8b       	std	Y+18, r25	; 0x12
    50ee:	ab 8b       	std	Y+19, r26	; 0x13
    50f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    50f2:	69 89       	ldd	r22, Y+17	; 0x11
    50f4:	7a 89       	ldd	r23, Y+18	; 0x12
    50f6:	8b 89       	ldd	r24, Y+19	; 0x13
    50f8:	9c 89       	ldd	r25, Y+20	; 0x14
    50fa:	20 e0       	ldi	r18, 0x00	; 0
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	40 e8       	ldi	r20, 0x80	; 128
    5100:	5f e3       	ldi	r21, 0x3F	; 63
    5102:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5106:	88 23       	and	r24, r24
    5108:	1c f4       	brge	.+6      	; 0x5110 <LCD_write_char+0x6a>
		__ticks = 1;
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	88 8b       	std	Y+16, r24	; 0x10
    510e:	91 c0       	rjmp	.+290    	; 0x5232 <LCD_write_char+0x18c>
	else if (__tmp > 255)
    5110:	69 89       	ldd	r22, Y+17	; 0x11
    5112:	7a 89       	ldd	r23, Y+18	; 0x12
    5114:	8b 89       	ldd	r24, Y+19	; 0x13
    5116:	9c 89       	ldd	r25, Y+20	; 0x14
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	4f e7       	ldi	r20, 0x7F	; 127
    511e:	53 e4       	ldi	r21, 0x43	; 67
    5120:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5124:	18 16       	cp	r1, r24
    5126:	0c f0       	brlt	.+2      	; 0x512a <LCD_write_char+0x84>
    5128:	7b c0       	rjmp	.+246    	; 0x5220 <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    512a:	6d 89       	ldd	r22, Y+21	; 0x15
    512c:	7e 89       	ldd	r23, Y+22	; 0x16
    512e:	8f 89       	ldd	r24, Y+23	; 0x17
    5130:	98 8d       	ldd	r25, Y+24	; 0x18
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	4a e7       	ldi	r20, 0x7A	; 122
    5138:	54 e4       	ldi	r21, 0x44	; 68
    513a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	8c 87       	std	Y+12, r24	; 0x0c
    5144:	9d 87       	std	Y+13, r25	; 0x0d
    5146:	ae 87       	std	Y+14, r26	; 0x0e
    5148:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    514a:	6c 85       	ldd	r22, Y+12	; 0x0c
    514c:	7d 85       	ldd	r23, Y+13	; 0x0d
    514e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5150:	9f 85       	ldd	r25, Y+15	; 0x0f
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	4a ef       	ldi	r20, 0xFA	; 250
    5158:	54 e4       	ldi	r21, 0x44	; 68
    515a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    515e:	dc 01       	movw	r26, r24
    5160:	cb 01       	movw	r24, r22
    5162:	88 87       	std	Y+8, r24	; 0x08
    5164:	99 87       	std	Y+9, r25	; 0x09
    5166:	aa 87       	std	Y+10, r26	; 0x0a
    5168:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    516a:	68 85       	ldd	r22, Y+8	; 0x08
    516c:	79 85       	ldd	r23, Y+9	; 0x09
    516e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5170:	9b 85       	ldd	r25, Y+11	; 0x0b
    5172:	20 e0       	ldi	r18, 0x00	; 0
    5174:	30 e0       	ldi	r19, 0x00	; 0
    5176:	40 e8       	ldi	r20, 0x80	; 128
    5178:	5f e3       	ldi	r21, 0x3F	; 63
    517a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    517e:	88 23       	and	r24, r24
    5180:	2c f4       	brge	.+10     	; 0x518c <LCD_write_char+0xe6>
		__ticks = 1;
    5182:	81 e0       	ldi	r24, 0x01	; 1
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	9f 83       	std	Y+7, r25	; 0x07
    5188:	8e 83       	std	Y+6, r24	; 0x06
    518a:	3f c0       	rjmp	.+126    	; 0x520a <LCD_write_char+0x164>
	else if (__tmp > 65535)
    518c:	68 85       	ldd	r22, Y+8	; 0x08
    518e:	79 85       	ldd	r23, Y+9	; 0x09
    5190:	8a 85       	ldd	r24, Y+10	; 0x0a
    5192:	9b 85       	ldd	r25, Y+11	; 0x0b
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	3f ef       	ldi	r19, 0xFF	; 255
    5198:	4f e7       	ldi	r20, 0x7F	; 127
    519a:	57 e4       	ldi	r21, 0x47	; 71
    519c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    51a0:	18 16       	cp	r1, r24
    51a2:	4c f5       	brge	.+82     	; 0x51f6 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    51a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    51a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    51aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    51ac:	20 e0       	ldi	r18, 0x00	; 0
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	40 e2       	ldi	r20, 0x20	; 32
    51b2:	51 e4       	ldi	r21, 0x41	; 65
    51b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51b8:	dc 01       	movw	r26, r24
    51ba:	cb 01       	movw	r24, r22
    51bc:	bc 01       	movw	r22, r24
    51be:	cd 01       	movw	r24, r26
    51c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	9f 83       	std	Y+7, r25	; 0x07
    51ca:	8e 83       	std	Y+6, r24	; 0x06
    51cc:	0f c0       	rjmp	.+30     	; 0x51ec <LCD_write_char+0x146>
    51ce:	88 ec       	ldi	r24, 0xC8	; 200
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	9d 83       	std	Y+5, r25	; 0x05
    51d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    51d6:	8c 81       	ldd	r24, Y+4	; 0x04
    51d8:	9d 81       	ldd	r25, Y+5	; 0x05
    51da:	01 97       	sbiw	r24, 0x01	; 1
    51dc:	f1 f7       	brne	.-4      	; 0x51da <LCD_write_char+0x134>
    51de:	9d 83       	std	Y+5, r25	; 0x05
    51e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51e2:	8e 81       	ldd	r24, Y+6	; 0x06
    51e4:	9f 81       	ldd	r25, Y+7	; 0x07
    51e6:	01 97       	sbiw	r24, 0x01	; 1
    51e8:	9f 83       	std	Y+7, r25	; 0x07
    51ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ec:	8e 81       	ldd	r24, Y+6	; 0x06
    51ee:	9f 81       	ldd	r25, Y+7	; 0x07
    51f0:	00 97       	sbiw	r24, 0x00	; 0
    51f2:	69 f7       	brne	.-38     	; 0x51ce <LCD_write_char+0x128>
    51f4:	24 c0       	rjmp	.+72     	; 0x523e <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51f6:	68 85       	ldd	r22, Y+8	; 0x08
    51f8:	79 85       	ldd	r23, Y+9	; 0x09
    51fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    51fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    51fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5202:	dc 01       	movw	r26, r24
    5204:	cb 01       	movw	r24, r22
    5206:	9f 83       	std	Y+7, r25	; 0x07
    5208:	8e 83       	std	Y+6, r24	; 0x06
    520a:	8e 81       	ldd	r24, Y+6	; 0x06
    520c:	9f 81       	ldd	r25, Y+7	; 0x07
    520e:	9b 83       	std	Y+3, r25	; 0x03
    5210:	8a 83       	std	Y+2, r24	; 0x02
    5212:	8a 81       	ldd	r24, Y+2	; 0x02
    5214:	9b 81       	ldd	r25, Y+3	; 0x03
    5216:	01 97       	sbiw	r24, 0x01	; 1
    5218:	f1 f7       	brne	.-4      	; 0x5216 <LCD_write_char+0x170>
    521a:	9b 83       	std	Y+3, r25	; 0x03
    521c:	8a 83       	std	Y+2, r24	; 0x02
    521e:	0f c0       	rjmp	.+30     	; 0x523e <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5220:	69 89       	ldd	r22, Y+17	; 0x11
    5222:	7a 89       	ldd	r23, Y+18	; 0x12
    5224:	8b 89       	ldd	r24, Y+19	; 0x13
    5226:	9c 89       	ldd	r25, Y+20	; 0x14
    5228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    522c:	dc 01       	movw	r26, r24
    522e:	cb 01       	movw	r24, r22
    5230:	88 8b       	std	Y+16, r24	; 0x10
    5232:	88 89       	ldd	r24, Y+16	; 0x10
    5234:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5236:	89 81       	ldd	r24, Y+1	; 0x01
    5238:	8a 95       	dec	r24
    523a:	f1 f7       	brne	.-4      	; 0x5238 <LCD_write_char+0x192>
    523c:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    523e:	69 96       	adiw	r28, 0x19	; 25
    5240:	0f b6       	in	r0, 0x3f	; 63
    5242:	f8 94       	cli
    5244:	de bf       	out	0x3e, r29	; 62
    5246:	0f be       	out	0x3f, r0	; 63
    5248:	cd bf       	out	0x3d, r28	; 61
    524a:	cf 91       	pop	r28
    524c:	df 91       	pop	r29
    524e:	08 95       	ret

00005250 <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    5250:	df 93       	push	r29
    5252:	cf 93       	push	r28
    5254:	00 d0       	rcall	.+0      	; 0x5256 <LCD_write_str+0x6>
    5256:	0f 92       	push	r0
    5258:	cd b7       	in	r28, 0x3d	; 61
    525a:	de b7       	in	r29, 0x3e	; 62
    525c:	9b 83       	std	Y+3, r25	; 0x03
    525e:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    5260:	19 82       	std	Y+1, r1	; 0x01
    5262:	0e c0       	rjmp	.+28     	; 0x5280 <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    5264:	89 81       	ldd	r24, Y+1	; 0x01
    5266:	28 2f       	mov	r18, r24
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	8a 81       	ldd	r24, Y+2	; 0x02
    526c:	9b 81       	ldd	r25, Y+3	; 0x03
    526e:	fc 01       	movw	r30, r24
    5270:	e2 0f       	add	r30, r18
    5272:	f3 1f       	adc	r31, r19
    5274:	80 81       	ld	r24, Z
    5276:	0e 94 53 28 	call	0x50a6	; 0x50a6 <LCD_write_char>
		// Increment the string index
		i++;
    527a:	89 81       	ldd	r24, Y+1	; 0x01
    527c:	8f 5f       	subi	r24, 0xFF	; 255
    527e:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	28 2f       	mov	r18, r24
    5284:	30 e0       	ldi	r19, 0x00	; 0
    5286:	8a 81       	ldd	r24, Y+2	; 0x02
    5288:	9b 81       	ldd	r25, Y+3	; 0x03
    528a:	fc 01       	movw	r30, r24
    528c:	e2 0f       	add	r30, r18
    528e:	f3 1f       	adc	r31, r19
    5290:	80 81       	ld	r24, Z
    5292:	88 23       	and	r24, r24
    5294:	39 f7       	brne	.-50     	; 0x5264 <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    5296:	0f 90       	pop	r0
    5298:	0f 90       	pop	r0
    529a:	0f 90       	pop	r0
    529c:	cf 91       	pop	r28
    529e:	df 91       	pop	r29
    52a0:	08 95       	ret

000052a2 <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    52a2:	0f 93       	push	r16
    52a4:	1f 93       	push	r17
    52a6:	df 93       	push	r29
    52a8:	cf 93       	push	r28
    52aa:	cd b7       	in	r28, 0x3d	; 61
    52ac:	de b7       	in	r29, 0x3e	; 62
    52ae:	60 97       	sbiw	r28, 0x10	; 16
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	6d 87       	std	Y+13, r22	; 0x0d
    52bc:	7e 87       	std	Y+14, r23	; 0x0e
    52be:	8f 87       	std	Y+15, r24	; 0x0f
    52c0:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    52c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52c6:	af 85       	ldd	r26, Y+15	; 0x0f
    52c8:	b8 89       	ldd	r27, Y+16	; 0x10
    52ca:	00 97       	sbiw	r24, 0x00	; 0
    52cc:	a1 05       	cpc	r26, r1
    52ce:	b1 05       	cpc	r27, r1
    52d0:	21 f4       	brne	.+8      	; 0x52da <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    52d2:	80 e3       	ldi	r24, 0x30	; 48
    52d4:	0e 94 53 28 	call	0x50a6	; 0x50a6 <LCD_write_char>
    52d8:	18 c0       	rjmp	.+48     	; 0x530a <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    52da:	8d 85       	ldd	r24, Y+13	; 0x0d
    52dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    52de:	af 85       	ldd	r26, Y+15	; 0x0f
    52e0:	b8 89       	ldd	r27, Y+16	; 0x10
    52e2:	bb 23       	and	r27, r27
    52e4:	94 f4       	brge	.+36     	; 0x530a <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    52e6:	8d e2       	ldi	r24, 0x2D	; 45
    52e8:	0e 94 53 28 	call	0x50a6	; 0x50a6 <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    52ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    52f0:	af 85       	ldd	r26, Y+15	; 0x0f
    52f2:	b8 89       	ldd	r27, Y+16	; 0x10
    52f4:	b0 95       	com	r27
    52f6:	a0 95       	com	r26
    52f8:	90 95       	com	r25
    52fa:	81 95       	neg	r24
    52fc:	9f 4f       	sbci	r25, 0xFF	; 255
    52fe:	af 4f       	sbci	r26, 0xFF	; 255
    5300:	bf 4f       	sbci	r27, 0xFF	; 255
    5302:	8d 87       	std	Y+13, r24	; 0x0d
    5304:	9e 87       	std	Y+14, r25	; 0x0e
    5306:	af 87       	std	Y+15, r26	; 0x0f
    5308:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    530a:	1a 82       	std	Y+2, r1	; 0x02
    530c:	2d c0       	rjmp	.+90     	; 0x5368 <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    530e:	8a 81       	ldd	r24, Y+2	; 0x02
    5310:	08 2f       	mov	r16, r24
    5312:	10 e0       	ldi	r17, 0x00	; 0
    5314:	8d 85       	ldd	r24, Y+13	; 0x0d
    5316:	9e 85       	ldd	r25, Y+14	; 0x0e
    5318:	af 85       	ldd	r26, Y+15	; 0x0f
    531a:	b8 89       	ldd	r27, Y+16	; 0x10
    531c:	2a e0       	ldi	r18, 0x0A	; 10
    531e:	30 e0       	ldi	r19, 0x00	; 0
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	bc 01       	movw	r22, r24
    5326:	cd 01       	movw	r24, r26
    5328:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__divmodsi4>
    532c:	dc 01       	movw	r26, r24
    532e:	cb 01       	movw	r24, r22
    5330:	28 2f       	mov	r18, r24
    5332:	ce 01       	movw	r24, r28
    5334:	03 96       	adiw	r24, 0x03	; 3
    5336:	fc 01       	movw	r30, r24
    5338:	e0 0f       	add	r30, r16
    533a:	f1 1f       	adc	r31, r17
    533c:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    533e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5340:	9e 85       	ldd	r25, Y+14	; 0x0e
    5342:	af 85       	ldd	r26, Y+15	; 0x0f
    5344:	b8 89       	ldd	r27, Y+16	; 0x10
    5346:	2a e0       	ldi	r18, 0x0A	; 10
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	40 e0       	ldi	r20, 0x00	; 0
    534c:	50 e0       	ldi	r21, 0x00	; 0
    534e:	bc 01       	movw	r22, r24
    5350:	cd 01       	movw	r24, r26
    5352:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__divmodsi4>
    5356:	da 01       	movw	r26, r20
    5358:	c9 01       	movw	r24, r18
    535a:	8d 87       	std	Y+13, r24	; 0x0d
    535c:	9e 87       	std	Y+14, r25	; 0x0e
    535e:	af 87       	std	Y+15, r26	; 0x0f
    5360:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    5362:	8a 81       	ldd	r24, Y+2	; 0x02
    5364:	8f 5f       	subi	r24, 0xFF	; 255
    5366:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    5368:	8a 81       	ldd	r24, Y+2	; 0x02
    536a:	8b 30       	cpi	r24, 0x0B	; 11
    536c:	40 f4       	brcc	.+16     	; 0x537e <LCD_write_s32_number+0xdc>
    536e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5370:	9e 85       	ldd	r25, Y+14	; 0x0e
    5372:	af 85       	ldd	r26, Y+15	; 0x0f
    5374:	b8 89       	ldd	r27, Y+16	; 0x10
    5376:	00 97       	sbiw	r24, 0x00	; 0
    5378:	a1 05       	cpc	r26, r1
    537a:	b1 05       	cpc	r27, r1
    537c:	41 f6       	brne	.-112    	; 0x530e <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	89 83       	std	Y+1, r24	; 0x01
    5382:	14 c0       	rjmp	.+40     	; 0x53ac <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    5384:	8a 81       	ldd	r24, Y+2	; 0x02
    5386:	28 2f       	mov	r18, r24
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	88 2f       	mov	r24, r24
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	28 1b       	sub	r18, r24
    5392:	39 0b       	sbc	r19, r25
    5394:	ce 01       	movw	r24, r28
    5396:	03 96       	adiw	r24, 0x03	; 3
    5398:	fc 01       	movw	r30, r24
    539a:	e2 0f       	add	r30, r18
    539c:	f3 1f       	adc	r31, r19
    539e:	80 81       	ld	r24, Z
    53a0:	80 5d       	subi	r24, 0xD0	; 208
    53a2:	0e 94 53 28 	call	0x50a6	; 0x50a6 <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    53a6:	89 81       	ldd	r24, Y+1	; 0x01
    53a8:	8f 5f       	subi	r24, 0xFF	; 255
    53aa:	89 83       	std	Y+1, r24	; 0x01
    53ac:	89 81       	ldd	r24, Y+1	; 0x01
    53ae:	28 2f       	mov	r18, r24
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	8a 81       	ldd	r24, Y+2	; 0x02
    53b4:	88 2f       	mov	r24, r24
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	01 96       	adiw	r24, 0x01	; 1
    53ba:	28 17       	cp	r18, r24
    53bc:	39 07       	cpc	r19, r25
    53be:	14 f3       	brlt	.-60     	; 0x5384 <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    53c0:	60 96       	adiw	r28, 0x10	; 16
    53c2:	0f b6       	in	r0, 0x3f	; 63
    53c4:	f8 94       	cli
    53c6:	de bf       	out	0x3e, r29	; 62
    53c8:	0f be       	out	0x3f, r0	; 63
    53ca:	cd bf       	out	0x3d, r28	; 61
    53cc:	cf 91       	pop	r28
    53ce:	df 91       	pop	r29
    53d0:	1f 91       	pop	r17
    53d2:	0f 91       	pop	r16
    53d4:	08 95       	ret

000053d6 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    53d6:	ef 92       	push	r14
    53d8:	ff 92       	push	r15
    53da:	0f 93       	push	r16
    53dc:	1f 93       	push	r17
    53de:	df 93       	push	r29
    53e0:	cf 93       	push	r28
    53e2:	cd b7       	in	r28, 0x3d	; 61
    53e4:	de b7       	in	r29, 0x3e	; 62
    53e6:	2d 97       	sbiw	r28, 0x0d	; 13
    53e8:	0f b6       	in	r0, 0x3f	; 63
    53ea:	f8 94       	cli
    53ec:	de bf       	out	0x3e, r29	; 62
    53ee:	0f be       	out	0x3f, r0	; 63
    53f0:	cd bf       	out	0x3d, r28	; 61
    53f2:	69 87       	std	Y+9, r22	; 0x09
    53f4:	7a 87       	std	Y+10, r23	; 0x0a
    53f6:	8b 87       	std	Y+11, r24	; 0x0b
    53f8:	9c 87       	std	Y+12, r25	; 0x0c
    53fa:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    53fc:	69 85       	ldd	r22, Y+9	; 0x09
    53fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    5400:	8b 85       	ldd	r24, Y+11	; 0x0b
    5402:	9c 85       	ldd	r25, Y+12	; 0x0c
    5404:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    5408:	dc 01       	movw	r26, r24
    540a:	cb 01       	movw	r24, r22
    540c:	8d 83       	std	Y+5, r24	; 0x05
    540e:	9e 83       	std	Y+6, r25	; 0x06
    5410:	af 83       	std	Y+7, r26	; 0x07
    5412:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    5414:	6d 81       	ldd	r22, Y+5	; 0x05
    5416:	7e 81       	ldd	r23, Y+6	; 0x06
    5418:	8f 81       	ldd	r24, Y+7	; 0x07
    541a:	98 85       	ldd	r25, Y+8	; 0x08
    541c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    5420:	9b 01       	movw	r18, r22
    5422:	ac 01       	movw	r20, r24
    5424:	69 85       	ldd	r22, Y+9	; 0x09
    5426:	7a 85       	ldd	r23, Y+10	; 0x0a
    5428:	8b 85       	ldd	r24, Y+11	; 0x0b
    542a:	9c 85       	ldd	r25, Y+12	; 0x0c
    542c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5430:	dc 01       	movw	r26, r24
    5432:	cb 01       	movw	r24, r22
    5434:	7c 01       	movw	r14, r24
    5436:	8d 01       	movw	r16, r26
    5438:	8a e0       	ldi	r24, 0x0A	; 10
    543a:	6d 85       	ldd	r22, Y+13	; 0x0d
    543c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <LCD_pow>
    5440:	dc 01       	movw	r26, r24
    5442:	cb 01       	movw	r24, r22
    5444:	bc 01       	movw	r22, r24
    5446:	cd 01       	movw	r24, r26
    5448:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    544c:	9b 01       	movw	r18, r22
    544e:	ac 01       	movw	r20, r24
    5450:	c8 01       	movw	r24, r16
    5452:	b7 01       	movw	r22, r14
    5454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	bc 01       	movw	r22, r24
    545e:	cd 01       	movw	r24, r26
    5460:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    5464:	dc 01       	movw	r26, r24
    5466:	cb 01       	movw	r24, r22
    5468:	89 83       	std	Y+1, r24	; 0x01
    546a:	9a 83       	std	Y+2, r25	; 0x02
    546c:	ab 83       	std	Y+3, r26	; 0x03
    546e:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    5470:	8d 81       	ldd	r24, Y+5	; 0x05
    5472:	9e 81       	ldd	r25, Y+6	; 0x06
    5474:	af 81       	ldd	r26, Y+7	; 0x07
    5476:	b8 85       	ldd	r27, Y+8	; 0x08
    5478:	bc 01       	movw	r22, r24
    547a:	cd 01       	movw	r24, r26
    547c:	0e 94 51 29 	call	0x52a2	; 0x52a2 <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    5480:	8e e2       	ldi	r24, 0x2E	; 46
    5482:	0e 94 53 28 	call	0x50a6	; 0x50a6 <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    5486:	89 81       	ldd	r24, Y+1	; 0x01
    5488:	9a 81       	ldd	r25, Y+2	; 0x02
    548a:	ab 81       	ldd	r26, Y+3	; 0x03
    548c:	bc 81       	ldd	r27, Y+4	; 0x04
    548e:	8f 77       	andi	r24, 0x7F	; 127
    5490:	bc 01       	movw	r22, r24
    5492:	cd 01       	movw	r24, r26
    5494:	0e 94 51 29 	call	0x52a2	; 0x52a2 <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    5498:	2d 96       	adiw	r28, 0x0d	; 13
    549a:	0f b6       	in	r0, 0x3f	; 63
    549c:	f8 94       	cli
    549e:	de bf       	out	0x3e, r29	; 62
    54a0:	0f be       	out	0x3f, r0	; 63
    54a2:	cd bf       	out	0x3d, r28	; 61
    54a4:	cf 91       	pop	r28
    54a6:	df 91       	pop	r29
    54a8:	1f 91       	pop	r17
    54aa:	0f 91       	pop	r16
    54ac:	ff 90       	pop	r15
    54ae:	ef 90       	pop	r14
    54b0:	08 95       	ret

000054b2 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    54b2:	df 93       	push	r29
    54b4:	cf 93       	push	r28
    54b6:	00 d0       	rcall	.+0      	; 0x54b8 <DIO_void_set_port_dir+0x6>
    54b8:	cd b7       	in	r28, 0x3d	; 61
    54ba:	de b7       	in	r29, 0x3e	; 62
    54bc:	89 83       	std	Y+1, r24	; 0x01
    54be:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    54c0:	89 81       	ldd	r24, Y+1	; 0x01
    54c2:	88 2f       	mov	r24, r24
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	88 0f       	add	r24, r24
    54c8:	99 1f       	adc	r25, r25
    54ca:	fc 01       	movw	r30, r24
    54cc:	e5 58       	subi	r30, 0x85	; 133
    54ce:	fe 4f       	sbci	r31, 0xFE	; 254
    54d0:	01 90       	ld	r0, Z+
    54d2:	f0 81       	ld	r31, Z
    54d4:	e0 2d       	mov	r30, r0
    54d6:	8a 81       	ldd	r24, Y+2	; 0x02
    54d8:	80 83       	st	Z, r24
}
    54da:	0f 90       	pop	r0
    54dc:	0f 90       	pop	r0
    54de:	cf 91       	pop	r28
    54e0:	df 91       	pop	r29
    54e2:	08 95       	ret

000054e4 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    54e4:	df 93       	push	r29
    54e6:	cf 93       	push	r28
    54e8:	0f 92       	push	r0
    54ea:	cd b7       	in	r28, 0x3d	; 61
    54ec:	de b7       	in	r29, 0x3e	; 62
    54ee:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    54f0:	89 81       	ldd	r24, Y+1	; 0x01
    54f2:	88 2f       	mov	r24, r24
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	88 0f       	add	r24, r24
    54f8:	99 1f       	adc	r25, r25
    54fa:	fc 01       	movw	r30, r24
    54fc:	e5 58       	subi	r30, 0x85	; 133
    54fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5500:	01 90       	ld	r0, Z+
    5502:	f0 81       	ld	r31, Z
    5504:	e0 2d       	mov	r30, r0
    5506:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    5508:	89 81       	ldd	r24, Y+1	; 0x01
    550a:	88 2f       	mov	r24, r24
    550c:	90 e0       	ldi	r25, 0x00	; 0
    550e:	88 0f       	add	r24, r24
    5510:	99 1f       	adc	r25, r25
    5512:	fc 01       	movw	r30, r24
    5514:	ed 57       	subi	r30, 0x7D	; 125
    5516:	fe 4f       	sbci	r31, 0xFE	; 254
    5518:	01 90       	ld	r0, Z+
    551a:	f0 81       	ld	r31, Z
    551c:	e0 2d       	mov	r30, r0
    551e:	8f ef       	ldi	r24, 0xFF	; 255
    5520:	80 83       	st	Z, r24
}
    5522:	0f 90       	pop	r0
    5524:	cf 91       	pop	r28
    5526:	df 91       	pop	r29
    5528:	08 95       	ret

0000552a <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    552a:	df 93       	push	r29
    552c:	cf 93       	push	r28
    552e:	00 d0       	rcall	.+0      	; 0x5530 <DIO_void_set_pin_dir+0x6>
    5530:	0f 92       	push	r0
    5532:	cd b7       	in	r28, 0x3d	; 61
    5534:	de b7       	in	r29, 0x3e	; 62
    5536:	89 83       	std	Y+1, r24	; 0x01
    5538:	6a 83       	std	Y+2, r22	; 0x02
    553a:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    553c:	8b 81       	ldd	r24, Y+3	; 0x03
    553e:	88 23       	and	r24, r24
    5540:	29 f1       	breq	.+74     	; 0x558c <DIO_void_set_pin_dir+0x62>
    5542:	89 81       	ldd	r24, Y+1	; 0x01
    5544:	88 2f       	mov	r24, r24
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	88 0f       	add	r24, r24
    554a:	99 1f       	adc	r25, r25
    554c:	fc 01       	movw	r30, r24
    554e:	e5 58       	subi	r30, 0x85	; 133
    5550:	fe 4f       	sbci	r31, 0xFE	; 254
    5552:	a0 81       	ld	r26, Z
    5554:	b1 81       	ldd	r27, Z+1	; 0x01
    5556:	89 81       	ldd	r24, Y+1	; 0x01
    5558:	88 2f       	mov	r24, r24
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	88 0f       	add	r24, r24
    555e:	99 1f       	adc	r25, r25
    5560:	fc 01       	movw	r30, r24
    5562:	e5 58       	subi	r30, 0x85	; 133
    5564:	fe 4f       	sbci	r31, 0xFE	; 254
    5566:	01 90       	ld	r0, Z+
    5568:	f0 81       	ld	r31, Z
    556a:	e0 2d       	mov	r30, r0
    556c:	80 81       	ld	r24, Z
    556e:	48 2f       	mov	r20, r24
    5570:	8a 81       	ldd	r24, Y+2	; 0x02
    5572:	28 2f       	mov	r18, r24
    5574:	30 e0       	ldi	r19, 0x00	; 0
    5576:	81 e0       	ldi	r24, 0x01	; 1
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	02 2e       	mov	r0, r18
    557c:	02 c0       	rjmp	.+4      	; 0x5582 <DIO_void_set_pin_dir+0x58>
    557e:	88 0f       	add	r24, r24
    5580:	99 1f       	adc	r25, r25
    5582:	0a 94       	dec	r0
    5584:	e2 f7       	brpl	.-8      	; 0x557e <DIO_void_set_pin_dir+0x54>
    5586:	84 2b       	or	r24, r20
    5588:	8c 93       	st	X, r24
    558a:	25 c0       	rjmp	.+74     	; 0x55d6 <DIO_void_set_pin_dir+0xac>
    558c:	89 81       	ldd	r24, Y+1	; 0x01
    558e:	88 2f       	mov	r24, r24
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	88 0f       	add	r24, r24
    5594:	99 1f       	adc	r25, r25
    5596:	fc 01       	movw	r30, r24
    5598:	e5 58       	subi	r30, 0x85	; 133
    559a:	fe 4f       	sbci	r31, 0xFE	; 254
    559c:	a0 81       	ld	r26, Z
    559e:	b1 81       	ldd	r27, Z+1	; 0x01
    55a0:	89 81       	ldd	r24, Y+1	; 0x01
    55a2:	88 2f       	mov	r24, r24
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	88 0f       	add	r24, r24
    55a8:	99 1f       	adc	r25, r25
    55aa:	fc 01       	movw	r30, r24
    55ac:	e5 58       	subi	r30, 0x85	; 133
    55ae:	fe 4f       	sbci	r31, 0xFE	; 254
    55b0:	01 90       	ld	r0, Z+
    55b2:	f0 81       	ld	r31, Z
    55b4:	e0 2d       	mov	r30, r0
    55b6:	80 81       	ld	r24, Z
    55b8:	48 2f       	mov	r20, r24
    55ba:	8a 81       	ldd	r24, Y+2	; 0x02
    55bc:	28 2f       	mov	r18, r24
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	81 e0       	ldi	r24, 0x01	; 1
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	02 2e       	mov	r0, r18
    55c6:	02 c0       	rjmp	.+4      	; 0x55cc <DIO_void_set_pin_dir+0xa2>
    55c8:	88 0f       	add	r24, r24
    55ca:	99 1f       	adc	r25, r25
    55cc:	0a 94       	dec	r0
    55ce:	e2 f7       	brpl	.-8      	; 0x55c8 <DIO_void_set_pin_dir+0x9e>
    55d0:	80 95       	com	r24
    55d2:	84 23       	and	r24, r20
    55d4:	8c 93       	st	X, r24
}
    55d6:	0f 90       	pop	r0
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	cf 91       	pop	r28
    55de:	df 91       	pop	r29
    55e0:	08 95       	ret

000055e2 <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    55e2:	df 93       	push	r29
    55e4:	cf 93       	push	r28
    55e6:	00 d0       	rcall	.+0      	; 0x55e8 <DIO_void_set_pin_in_pullUP+0x6>
    55e8:	cd b7       	in	r28, 0x3d	; 61
    55ea:	de b7       	in	r29, 0x3e	; 62
    55ec:	89 83       	std	Y+1, r24	; 0x01
    55ee:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    55f0:	89 81       	ldd	r24, Y+1	; 0x01
    55f2:	88 2f       	mov	r24, r24
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	88 0f       	add	r24, r24
    55f8:	99 1f       	adc	r25, r25
    55fa:	fc 01       	movw	r30, r24
    55fc:	e5 58       	subi	r30, 0x85	; 133
    55fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5600:	a0 81       	ld	r26, Z
    5602:	b1 81       	ldd	r27, Z+1	; 0x01
    5604:	89 81       	ldd	r24, Y+1	; 0x01
    5606:	88 2f       	mov	r24, r24
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	88 0f       	add	r24, r24
    560c:	99 1f       	adc	r25, r25
    560e:	fc 01       	movw	r30, r24
    5610:	e5 58       	subi	r30, 0x85	; 133
    5612:	fe 4f       	sbci	r31, 0xFE	; 254
    5614:	01 90       	ld	r0, Z+
    5616:	f0 81       	ld	r31, Z
    5618:	e0 2d       	mov	r30, r0
    561a:	80 81       	ld	r24, Z
    561c:	48 2f       	mov	r20, r24
    561e:	8a 81       	ldd	r24, Y+2	; 0x02
    5620:	28 2f       	mov	r18, r24
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	81 e0       	ldi	r24, 0x01	; 1
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	02 c0       	rjmp	.+4      	; 0x562e <DIO_void_set_pin_in_pullUP+0x4c>
    562a:	88 0f       	add	r24, r24
    562c:	99 1f       	adc	r25, r25
    562e:	2a 95       	dec	r18
    5630:	e2 f7       	brpl	.-8      	; 0x562a <DIO_void_set_pin_in_pullUP+0x48>
    5632:	80 95       	com	r24
    5634:	84 23       	and	r24, r20
    5636:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5638:	89 81       	ldd	r24, Y+1	; 0x01
    563a:	88 2f       	mov	r24, r24
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	88 0f       	add	r24, r24
    5640:	99 1f       	adc	r25, r25
    5642:	fc 01       	movw	r30, r24
    5644:	ed 57       	subi	r30, 0x7D	; 125
    5646:	fe 4f       	sbci	r31, 0xFE	; 254
    5648:	a0 81       	ld	r26, Z
    564a:	b1 81       	ldd	r27, Z+1	; 0x01
    564c:	89 81       	ldd	r24, Y+1	; 0x01
    564e:	88 2f       	mov	r24, r24
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	88 0f       	add	r24, r24
    5654:	99 1f       	adc	r25, r25
    5656:	fc 01       	movw	r30, r24
    5658:	ed 57       	subi	r30, 0x7D	; 125
    565a:	fe 4f       	sbci	r31, 0xFE	; 254
    565c:	01 90       	ld	r0, Z+
    565e:	f0 81       	ld	r31, Z
    5660:	e0 2d       	mov	r30, r0
    5662:	80 81       	ld	r24, Z
    5664:	48 2f       	mov	r20, r24
    5666:	8a 81       	ldd	r24, Y+2	; 0x02
    5668:	28 2f       	mov	r18, r24
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	02 2e       	mov	r0, r18
    5672:	02 c0       	rjmp	.+4      	; 0x5678 <DIO_void_set_pin_in_pullUP+0x96>
    5674:	88 0f       	add	r24, r24
    5676:	99 1f       	adc	r25, r25
    5678:	0a 94       	dec	r0
    567a:	e2 f7       	brpl	.-8      	; 0x5674 <DIO_void_set_pin_in_pullUP+0x92>
    567c:	84 2b       	or	r24, r20
    567e:	8c 93       	st	X, r24
}
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	cf 91       	pop	r28
    5686:	df 91       	pop	r29
    5688:	08 95       	ret

0000568a <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    568a:	df 93       	push	r29
    568c:	cf 93       	push	r28
    568e:	0f 92       	push	r0
    5690:	cd b7       	in	r28, 0x3d	; 61
    5692:	de b7       	in	r29, 0x3e	; 62
    5694:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    5696:	89 81       	ldd	r24, Y+1	; 0x01
    5698:	88 2f       	mov	r24, r24
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	88 0f       	add	r24, r24
    569e:	99 1f       	adc	r25, r25
    56a0:	fc 01       	movw	r30, r24
    56a2:	ed 57       	subi	r30, 0x7D	; 125
    56a4:	fe 4f       	sbci	r31, 0xFE	; 254
    56a6:	01 90       	ld	r0, Z+
    56a8:	f0 81       	ld	r31, Z
    56aa:	e0 2d       	mov	r30, r0
    56ac:	8f ef       	ldi	r24, 0xFF	; 255
    56ae:	80 83       	st	Z, r24
}
    56b0:	0f 90       	pop	r0
    56b2:	cf 91       	pop	r28
    56b4:	df 91       	pop	r29
    56b6:	08 95       	ret

000056b8 <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    56b8:	df 93       	push	r29
    56ba:	cf 93       	push	r28
    56bc:	0f 92       	push	r0
    56be:	cd b7       	in	r28, 0x3d	; 61
    56c0:	de b7       	in	r29, 0x3e	; 62
    56c2:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    56c4:	89 81       	ldd	r24, Y+1	; 0x01
    56c6:	88 2f       	mov	r24, r24
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	88 0f       	add	r24, r24
    56cc:	99 1f       	adc	r25, r25
    56ce:	fc 01       	movw	r30, r24
    56d0:	ed 57       	subi	r30, 0x7D	; 125
    56d2:	fe 4f       	sbci	r31, 0xFE	; 254
    56d4:	01 90       	ld	r0, Z+
    56d6:	f0 81       	ld	r31, Z
    56d8:	e0 2d       	mov	r30, r0
    56da:	10 82       	st	Z, r1
}
    56dc:	0f 90       	pop	r0
    56de:	cf 91       	pop	r28
    56e0:	df 91       	pop	r29
    56e2:	08 95       	ret

000056e4 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    56e4:	df 93       	push	r29
    56e6:	cf 93       	push	r28
    56e8:	0f 92       	push	r0
    56ea:	cd b7       	in	r28, 0x3d	; 61
    56ec:	de b7       	in	r29, 0x3e	; 62
    56ee:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    56f0:	89 81       	ldd	r24, Y+1	; 0x01
    56f2:	88 2f       	mov	r24, r24
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	88 0f       	add	r24, r24
    56f8:	99 1f       	adc	r25, r25
    56fa:	fc 01       	movw	r30, r24
    56fc:	ed 57       	subi	r30, 0x7D	; 125
    56fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5700:	a0 81       	ld	r26, Z
    5702:	b1 81       	ldd	r27, Z+1	; 0x01
    5704:	89 81       	ldd	r24, Y+1	; 0x01
    5706:	88 2f       	mov	r24, r24
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	88 0f       	add	r24, r24
    570c:	99 1f       	adc	r25, r25
    570e:	fc 01       	movw	r30, r24
    5710:	ed 57       	subi	r30, 0x7D	; 125
    5712:	fe 4f       	sbci	r31, 0xFE	; 254
    5714:	01 90       	ld	r0, Z+
    5716:	f0 81       	ld	r31, Z
    5718:	e0 2d       	mov	r30, r0
    571a:	80 81       	ld	r24, Z
    571c:	80 95       	com	r24
    571e:	8c 93       	st	X, r24
}
    5720:	0f 90       	pop	r0
    5722:	cf 91       	pop	r28
    5724:	df 91       	pop	r29
    5726:	08 95       	ret

00005728 <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    5728:	df 93       	push	r29
    572a:	cf 93       	push	r28
    572c:	00 d0       	rcall	.+0      	; 0x572e <DIO_void_assign_port+0x6>
    572e:	cd b7       	in	r28, 0x3d	; 61
    5730:	de b7       	in	r29, 0x3e	; 62
    5732:	89 83       	std	Y+1, r24	; 0x01
    5734:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    5736:	89 81       	ldd	r24, Y+1	; 0x01
    5738:	88 2f       	mov	r24, r24
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	88 0f       	add	r24, r24
    573e:	99 1f       	adc	r25, r25
    5740:	fc 01       	movw	r30, r24
    5742:	ed 57       	subi	r30, 0x7D	; 125
    5744:	fe 4f       	sbci	r31, 0xFE	; 254
    5746:	01 90       	ld	r0, Z+
    5748:	f0 81       	ld	r31, Z
    574a:	e0 2d       	mov	r30, r0
    574c:	8a 81       	ldd	r24, Y+2	; 0x02
    574e:	80 83       	st	Z, r24
}
    5750:	0f 90       	pop	r0
    5752:	0f 90       	pop	r0
    5754:	cf 91       	pop	r28
    5756:	df 91       	pop	r29
    5758:	08 95       	ret

0000575a <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    575a:	df 93       	push	r29
    575c:	cf 93       	push	r28
    575e:	00 d0       	rcall	.+0      	; 0x5760 <DIO_void_set_pin+0x6>
    5760:	cd b7       	in	r28, 0x3d	; 61
    5762:	de b7       	in	r29, 0x3e	; 62
    5764:	89 83       	std	Y+1, r24	; 0x01
    5766:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5768:	89 81       	ldd	r24, Y+1	; 0x01
    576a:	88 2f       	mov	r24, r24
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	88 0f       	add	r24, r24
    5770:	99 1f       	adc	r25, r25
    5772:	fc 01       	movw	r30, r24
    5774:	ed 57       	subi	r30, 0x7D	; 125
    5776:	fe 4f       	sbci	r31, 0xFE	; 254
    5778:	a0 81       	ld	r26, Z
    577a:	b1 81       	ldd	r27, Z+1	; 0x01
    577c:	89 81       	ldd	r24, Y+1	; 0x01
    577e:	88 2f       	mov	r24, r24
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	88 0f       	add	r24, r24
    5784:	99 1f       	adc	r25, r25
    5786:	fc 01       	movw	r30, r24
    5788:	ed 57       	subi	r30, 0x7D	; 125
    578a:	fe 4f       	sbci	r31, 0xFE	; 254
    578c:	01 90       	ld	r0, Z+
    578e:	f0 81       	ld	r31, Z
    5790:	e0 2d       	mov	r30, r0
    5792:	80 81       	ld	r24, Z
    5794:	48 2f       	mov	r20, r24
    5796:	8a 81       	ldd	r24, Y+2	; 0x02
    5798:	28 2f       	mov	r18, r24
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	02 2e       	mov	r0, r18
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <DIO_void_set_pin+0x4e>
    57a4:	88 0f       	add	r24, r24
    57a6:	99 1f       	adc	r25, r25
    57a8:	0a 94       	dec	r0
    57aa:	e2 f7       	brpl	.-8      	; 0x57a4 <DIO_void_set_pin+0x4a>
    57ac:	84 2b       	or	r24, r20
    57ae:	8c 93       	st	X, r24
}
    57b0:	0f 90       	pop	r0
    57b2:	0f 90       	pop	r0
    57b4:	cf 91       	pop	r28
    57b6:	df 91       	pop	r29
    57b8:	08 95       	ret

000057ba <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    57ba:	df 93       	push	r29
    57bc:	cf 93       	push	r28
    57be:	00 d0       	rcall	.+0      	; 0x57c0 <DIO_void_clear_pin+0x6>
    57c0:	cd b7       	in	r28, 0x3d	; 61
    57c2:	de b7       	in	r29, 0x3e	; 62
    57c4:	89 83       	std	Y+1, r24	; 0x01
    57c6:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    57c8:	89 81       	ldd	r24, Y+1	; 0x01
    57ca:	88 2f       	mov	r24, r24
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	88 0f       	add	r24, r24
    57d0:	99 1f       	adc	r25, r25
    57d2:	fc 01       	movw	r30, r24
    57d4:	ed 57       	subi	r30, 0x7D	; 125
    57d6:	fe 4f       	sbci	r31, 0xFE	; 254
    57d8:	a0 81       	ld	r26, Z
    57da:	b1 81       	ldd	r27, Z+1	; 0x01
    57dc:	89 81       	ldd	r24, Y+1	; 0x01
    57de:	88 2f       	mov	r24, r24
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	88 0f       	add	r24, r24
    57e4:	99 1f       	adc	r25, r25
    57e6:	fc 01       	movw	r30, r24
    57e8:	ed 57       	subi	r30, 0x7D	; 125
    57ea:	fe 4f       	sbci	r31, 0xFE	; 254
    57ec:	01 90       	ld	r0, Z+
    57ee:	f0 81       	ld	r31, Z
    57f0:	e0 2d       	mov	r30, r0
    57f2:	80 81       	ld	r24, Z
    57f4:	48 2f       	mov	r20, r24
    57f6:	8a 81       	ldd	r24, Y+2	; 0x02
    57f8:	28 2f       	mov	r18, r24
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	81 e0       	ldi	r24, 0x01	; 1
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	02 2e       	mov	r0, r18
    5802:	02 c0       	rjmp	.+4      	; 0x5808 <DIO_void_clear_pin+0x4e>
    5804:	88 0f       	add	r24, r24
    5806:	99 1f       	adc	r25, r25
    5808:	0a 94       	dec	r0
    580a:	e2 f7       	brpl	.-8      	; 0x5804 <DIO_void_clear_pin+0x4a>
    580c:	80 95       	com	r24
    580e:	84 23       	and	r24, r20
    5810:	8c 93       	st	X, r24
}
    5812:	0f 90       	pop	r0
    5814:	0f 90       	pop	r0
    5816:	cf 91       	pop	r28
    5818:	df 91       	pop	r29
    581a:	08 95       	ret

0000581c <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    581c:	df 93       	push	r29
    581e:	cf 93       	push	r28
    5820:	00 d0       	rcall	.+0      	; 0x5822 <DIO_void_toggle_pin+0x6>
    5822:	cd b7       	in	r28, 0x3d	; 61
    5824:	de b7       	in	r29, 0x3e	; 62
    5826:	89 83       	std	Y+1, r24	; 0x01
    5828:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    582a:	89 81       	ldd	r24, Y+1	; 0x01
    582c:	88 2f       	mov	r24, r24
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	88 0f       	add	r24, r24
    5832:	99 1f       	adc	r25, r25
    5834:	fc 01       	movw	r30, r24
    5836:	ed 57       	subi	r30, 0x7D	; 125
    5838:	fe 4f       	sbci	r31, 0xFE	; 254
    583a:	a0 81       	ld	r26, Z
    583c:	b1 81       	ldd	r27, Z+1	; 0x01
    583e:	89 81       	ldd	r24, Y+1	; 0x01
    5840:	88 2f       	mov	r24, r24
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	88 0f       	add	r24, r24
    5846:	99 1f       	adc	r25, r25
    5848:	fc 01       	movw	r30, r24
    584a:	ed 57       	subi	r30, 0x7D	; 125
    584c:	fe 4f       	sbci	r31, 0xFE	; 254
    584e:	01 90       	ld	r0, Z+
    5850:	f0 81       	ld	r31, Z
    5852:	e0 2d       	mov	r30, r0
    5854:	80 81       	ld	r24, Z
    5856:	48 2f       	mov	r20, r24
    5858:	8a 81       	ldd	r24, Y+2	; 0x02
    585a:	28 2f       	mov	r18, r24
    585c:	30 e0       	ldi	r19, 0x00	; 0
    585e:	81 e0       	ldi	r24, 0x01	; 1
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	02 2e       	mov	r0, r18
    5864:	02 c0       	rjmp	.+4      	; 0x586a <DIO_void_toggle_pin+0x4e>
    5866:	88 0f       	add	r24, r24
    5868:	99 1f       	adc	r25, r25
    586a:	0a 94       	dec	r0
    586c:	e2 f7       	brpl	.-8      	; 0x5866 <DIO_void_toggle_pin+0x4a>
    586e:	84 27       	eor	r24, r20
    5870:	8c 93       	st	X, r24
}
    5872:	0f 90       	pop	r0
    5874:	0f 90       	pop	r0
    5876:	cf 91       	pop	r28
    5878:	df 91       	pop	r29
    587a:	08 95       	ret

0000587c <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    587c:	df 93       	push	r29
    587e:	cf 93       	push	r28
    5880:	00 d0       	rcall	.+0      	; 0x5882 <DIO_void_assign_pin+0x6>
    5882:	0f 92       	push	r0
    5884:	cd b7       	in	r28, 0x3d	; 61
    5886:	de b7       	in	r29, 0x3e	; 62
    5888:	89 83       	std	Y+1, r24	; 0x01
    588a:	6a 83       	std	Y+2, r22	; 0x02
    588c:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    588e:	8b 81       	ldd	r24, Y+3	; 0x03
    5890:	88 23       	and	r24, r24
    5892:	29 f1       	breq	.+74     	; 0x58de <DIO_void_assign_pin+0x62>
    5894:	89 81       	ldd	r24, Y+1	; 0x01
    5896:	88 2f       	mov	r24, r24
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	88 0f       	add	r24, r24
    589c:	99 1f       	adc	r25, r25
    589e:	fc 01       	movw	r30, r24
    58a0:	ed 57       	subi	r30, 0x7D	; 125
    58a2:	fe 4f       	sbci	r31, 0xFE	; 254
    58a4:	a0 81       	ld	r26, Z
    58a6:	b1 81       	ldd	r27, Z+1	; 0x01
    58a8:	89 81       	ldd	r24, Y+1	; 0x01
    58aa:	88 2f       	mov	r24, r24
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	88 0f       	add	r24, r24
    58b0:	99 1f       	adc	r25, r25
    58b2:	fc 01       	movw	r30, r24
    58b4:	ed 57       	subi	r30, 0x7D	; 125
    58b6:	fe 4f       	sbci	r31, 0xFE	; 254
    58b8:	01 90       	ld	r0, Z+
    58ba:	f0 81       	ld	r31, Z
    58bc:	e0 2d       	mov	r30, r0
    58be:	80 81       	ld	r24, Z
    58c0:	48 2f       	mov	r20, r24
    58c2:	8a 81       	ldd	r24, Y+2	; 0x02
    58c4:	28 2f       	mov	r18, r24
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	02 2e       	mov	r0, r18
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <DIO_void_assign_pin+0x58>
    58d0:	88 0f       	add	r24, r24
    58d2:	99 1f       	adc	r25, r25
    58d4:	0a 94       	dec	r0
    58d6:	e2 f7       	brpl	.-8      	; 0x58d0 <DIO_void_assign_pin+0x54>
    58d8:	84 2b       	or	r24, r20
    58da:	8c 93       	st	X, r24
    58dc:	25 c0       	rjmp	.+74     	; 0x5928 <DIO_void_assign_pin+0xac>
    58de:	89 81       	ldd	r24, Y+1	; 0x01
    58e0:	88 2f       	mov	r24, r24
    58e2:	90 e0       	ldi	r25, 0x00	; 0
    58e4:	88 0f       	add	r24, r24
    58e6:	99 1f       	adc	r25, r25
    58e8:	fc 01       	movw	r30, r24
    58ea:	ed 57       	subi	r30, 0x7D	; 125
    58ec:	fe 4f       	sbci	r31, 0xFE	; 254
    58ee:	a0 81       	ld	r26, Z
    58f0:	b1 81       	ldd	r27, Z+1	; 0x01
    58f2:	89 81       	ldd	r24, Y+1	; 0x01
    58f4:	88 2f       	mov	r24, r24
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	88 0f       	add	r24, r24
    58fa:	99 1f       	adc	r25, r25
    58fc:	fc 01       	movw	r30, r24
    58fe:	ed 57       	subi	r30, 0x7D	; 125
    5900:	fe 4f       	sbci	r31, 0xFE	; 254
    5902:	01 90       	ld	r0, Z+
    5904:	f0 81       	ld	r31, Z
    5906:	e0 2d       	mov	r30, r0
    5908:	80 81       	ld	r24, Z
    590a:	48 2f       	mov	r20, r24
    590c:	8a 81       	ldd	r24, Y+2	; 0x02
    590e:	28 2f       	mov	r18, r24
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	02 2e       	mov	r0, r18
    5918:	02 c0       	rjmp	.+4      	; 0x591e <DIO_void_assign_pin+0xa2>
    591a:	88 0f       	add	r24, r24
    591c:	99 1f       	adc	r25, r25
    591e:	0a 94       	dec	r0
    5920:	e2 f7       	brpl	.-8      	; 0x591a <DIO_void_assign_pin+0x9e>
    5922:	80 95       	com	r24
    5924:	84 23       	and	r24, r20
    5926:	8c 93       	st	X, r24
}
    5928:	0f 90       	pop	r0
    592a:	0f 90       	pop	r0
    592c:	0f 90       	pop	r0
    592e:	cf 91       	pop	r28
    5930:	df 91       	pop	r29
    5932:	08 95       	ret

00005934 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    5934:	df 93       	push	r29
    5936:	cf 93       	push	r28
    5938:	0f 92       	push	r0
    593a:	cd b7       	in	r28, 0x3d	; 61
    593c:	de b7       	in	r29, 0x3e	; 62
    593e:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    5940:	89 81       	ldd	r24, Y+1	; 0x01
    5942:	88 2f       	mov	r24, r24
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	88 0f       	add	r24, r24
    5948:	99 1f       	adc	r25, r25
    594a:	fc 01       	movw	r30, r24
    594c:	ed 58       	subi	r30, 0x8D	; 141
    594e:	fe 4f       	sbci	r31, 0xFE	; 254
    5950:	01 90       	ld	r0, Z+
    5952:	f0 81       	ld	r31, Z
    5954:	e0 2d       	mov	r30, r0
    5956:	80 81       	ld	r24, Z
}
    5958:	0f 90       	pop	r0
    595a:	cf 91       	pop	r28
    595c:	df 91       	pop	r29
    595e:	08 95       	ret

00005960 <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5960:	df 93       	push	r29
    5962:	cf 93       	push	r28
    5964:	00 d0       	rcall	.+0      	; 0x5966 <DIO_u8_get_pin+0x6>
    5966:	cd b7       	in	r28, 0x3d	; 61
    5968:	de b7       	in	r29, 0x3e	; 62
    596a:	89 83       	std	Y+1, r24	; 0x01
    596c:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    596e:	89 81       	ldd	r24, Y+1	; 0x01
    5970:	88 2f       	mov	r24, r24
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	88 0f       	add	r24, r24
    5976:	99 1f       	adc	r25, r25
    5978:	fc 01       	movw	r30, r24
    597a:	ed 58       	subi	r30, 0x8D	; 141
    597c:	fe 4f       	sbci	r31, 0xFE	; 254
    597e:	01 90       	ld	r0, Z+
    5980:	f0 81       	ld	r31, Z
    5982:	e0 2d       	mov	r30, r0
    5984:	80 81       	ld	r24, Z
    5986:	28 2f       	mov	r18, r24
    5988:	30 e0       	ldi	r19, 0x00	; 0
    598a:	8a 81       	ldd	r24, Y+2	; 0x02
    598c:	88 2f       	mov	r24, r24
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	a9 01       	movw	r20, r18
    5992:	02 c0       	rjmp	.+4      	; 0x5998 <DIO_u8_get_pin+0x38>
    5994:	55 95       	asr	r21
    5996:	47 95       	ror	r20
    5998:	8a 95       	dec	r24
    599a:	e2 f7       	brpl	.-8      	; 0x5994 <DIO_u8_get_pin+0x34>
    599c:	ca 01       	movw	r24, r20
    599e:	81 70       	andi	r24, 0x01	; 1
}
    59a0:	0f 90       	pop	r0
    59a2:	0f 90       	pop	r0
    59a4:	cf 91       	pop	r28
    59a6:	df 91       	pop	r29
    59a8:	08 95       	ret

000059aa <ADC_void_init>:

//Global variables
static void (*callback_functions_address)(u16 )= NULL;

/* Implementing of the driver functions */
void ADC_void_init(void ){
    59aa:	df 93       	push	r29
    59ac:	cf 93       	push	r28
    59ae:	cd b7       	in	r28, 0x3d	; 61
    59b0:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Assign the value of the left adjust bit
	agn_bit(ADC_ADMUX, ADC_ADLAR_pin, ADC_ADLAR);
    59b2:	a7 e2       	ldi	r26, 0x27	; 39
    59b4:	b0 e0       	ldi	r27, 0x00	; 0
    59b6:	e7 e2       	ldi	r30, 0x27	; 39
    59b8:	f0 e0       	ldi	r31, 0x00	; 0
    59ba:	80 81       	ld	r24, Z
    59bc:	8f 7d       	andi	r24, 0xDF	; 223
    59be:	8c 93       	st	X, r24

	// Assign the values of the reference selection regesters
	agn_bit(ADC_ADMUX, ADC_REFS0_pin, ADC_REFS0);
    59c0:	a7 e2       	ldi	r26, 0x27	; 39
    59c2:	b0 e0       	ldi	r27, 0x00	; 0
    59c4:	e7 e2       	ldi	r30, 0x27	; 39
    59c6:	f0 e0       	ldi	r31, 0x00	; 0
    59c8:	80 81       	ld	r24, Z
    59ca:	80 64       	ori	r24, 0x40	; 64
    59cc:	8c 93       	st	X, r24
	agn_bit(ADC_ADMUX, ADC_REFS1_pin, ADC_REFS1);
    59ce:	a7 e2       	ldi	r26, 0x27	; 39
    59d0:	b0 e0       	ldi	r27, 0x00	; 0
    59d2:	e7 e2       	ldi	r30, 0x27	; 39
    59d4:	f0 e0       	ldi	r31, 0x00	; 0
    59d6:	80 81       	ld	r24, Z
    59d8:	8f 77       	andi	r24, 0x7F	; 127
    59da:	8c 93       	st	X, r24

	// Assign the value of the enable bit
	agn_bit(ADC_ADCSRA, ADC_ADEN_pin, ADC_ADEN);
    59dc:	a6 e2       	ldi	r26, 0x26	; 38
    59de:	b0 e0       	ldi	r27, 0x00	; 0
    59e0:	e6 e2       	ldi	r30, 0x26	; 38
    59e2:	f0 e0       	ldi	r31, 0x00	; 0
    59e4:	80 81       	ld	r24, Z
    59e6:	80 68       	ori	r24, 0x80	; 128
    59e8:	8c 93       	st	X, r24
}
    59ea:	cf 91       	pop	r28
    59ec:	df 91       	pop	r29
    59ee:	08 95       	ret

000059f0 <ADC_void_config>:


void ADC_void_config(ADC_config_struct* ptr_config){
    59f0:	df 93       	push	r29
    59f2:	cf 93       	push	r28
    59f4:	00 d0       	rcall	.+0      	; 0x59f6 <ADC_void_config+0x6>
    59f6:	cd b7       	in	r28, 0x3d	; 61
    59f8:	de b7       	in	r29, 0x3e	; 62
    59fa:	9a 83       	std	Y+2, r25	; 0x02
    59fc:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_config>> Pointer to ADC configurations Struct.
	 *	
	 *	Function does not return any values, Hence it needs to be called every time you need to reconfigure the ADC.
	 */
	// Configure the analog channel and gain selection bits
	ADC_ADMUX &= ADC_MUX_clear;
    59fe:	a7 e2       	ldi	r26, 0x27	; 39
    5a00:	b0 e0       	ldi	r27, 0x00	; 0
    5a02:	e7 e2       	ldi	r30, 0x27	; 39
    5a04:	f0 e0       	ldi	r31, 0x00	; 0
    5a06:	80 81       	ld	r24, Z
    5a08:	80 7e       	andi	r24, 0xE0	; 224
    5a0a:	8c 93       	st	X, r24
	ADC_ADMUX |= ptr_config -> MUX;
    5a0c:	a7 e2       	ldi	r26, 0x27	; 39
    5a0e:	b0 e0       	ldi	r27, 0x00	; 0
    5a10:	e7 e2       	ldi	r30, 0x27	; 39
    5a12:	f0 e0       	ldi	r31, 0x00	; 0
    5a14:	90 81       	ld	r25, Z
    5a16:	e9 81       	ldd	r30, Y+1	; 0x01
    5a18:	fa 81       	ldd	r31, Y+2	; 0x02
    5a1a:	80 81       	ld	r24, Z
    5a1c:	8f 71       	andi	r24, 0x1F	; 31
    5a1e:	89 2b       	or	r24, r25
    5a20:	8c 93       	st	X, r24

	// Configure the ADC prescaler select bits
	ADC_ADCSRA &= ADC_ADPS_clear;
    5a22:	a6 e2       	ldi	r26, 0x26	; 38
    5a24:	b0 e0       	ldi	r27, 0x00	; 0
    5a26:	e6 e2       	ldi	r30, 0x26	; 38
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	80 81       	ld	r24, Z
    5a2c:	88 7f       	andi	r24, 0xF8	; 248
    5a2e:	8c 93       	st	X, r24
	ADC_ADCSRA |= ptr_config -> ADPS;
    5a30:	a6 e2       	ldi	r26, 0x26	; 38
    5a32:	b0 e0       	ldi	r27, 0x00	; 0
    5a34:	e6 e2       	ldi	r30, 0x26	; 38
    5a36:	f0 e0       	ldi	r31, 0x00	; 0
    5a38:	90 81       	ld	r25, Z
    5a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    5a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    5a3e:	80 81       	ld	r24, Z
    5a40:	82 95       	swap	r24
    5a42:	86 95       	lsr	r24
    5a44:	87 70       	andi	r24, 0x07	; 7
    5a46:	89 2b       	or	r24, r25
    5a48:	8c 93       	st	X, r24

	// Configure the ADC auto trigger source bits
	ADC_SFIOR &= ADC_ADTS_clear;
    5a4a:	a0 e5       	ldi	r26, 0x50	; 80
    5a4c:	b0 e0       	ldi	r27, 0x00	; 0
    5a4e:	e0 e5       	ldi	r30, 0x50	; 80
    5a50:	f0 e0       	ldi	r31, 0x00	; 0
    5a52:	80 81       	ld	r24, Z
    5a54:	8f 71       	andi	r24, 0x1F	; 31
    5a56:	8c 93       	st	X, r24
	ADC_SFIOR |= ptr_config -> ADTS;
    5a58:	a0 e5       	ldi	r26, 0x50	; 80
    5a5a:	b0 e0       	ldi	r27, 0x00	; 0
    5a5c:	e0 e5       	ldi	r30, 0x50	; 80
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	90 81       	ld	r25, Z
    5a62:	e9 81       	ldd	r30, Y+1	; 0x01
    5a64:	fa 81       	ldd	r31, Y+2	; 0x02
    5a66:	81 81       	ldd	r24, Z+1	; 0x01
    5a68:	86 95       	lsr	r24
    5a6a:	87 70       	andi	r24, 0x07	; 7
    5a6c:	89 2b       	or	r24, r25
    5a6e:	8c 93       	st	X, r24

	// Configure the ADC auto trigger enable bit
	agn_bit(ADC_ADCSRA, ADC_ADATE_pin, ptr_config -> ADATE);
    5a70:	e9 81       	ldd	r30, Y+1	; 0x01
    5a72:	fa 81       	ldd	r31, Y+2	; 0x02
    5a74:	81 81       	ldd	r24, Z+1	; 0x01
    5a76:	81 70       	andi	r24, 0x01	; 1
    5a78:	88 23       	and	r24, r24
    5a7a:	41 f0       	breq	.+16     	; 0x5a8c <ADC_void_config+0x9c>
    5a7c:	a6 e2       	ldi	r26, 0x26	; 38
    5a7e:	b0 e0       	ldi	r27, 0x00	; 0
    5a80:	e6 e2       	ldi	r30, 0x26	; 38
    5a82:	f0 e0       	ldi	r31, 0x00	; 0
    5a84:	80 81       	ld	r24, Z
    5a86:	80 62       	ori	r24, 0x20	; 32
    5a88:	8c 93       	st	X, r24
    5a8a:	07 c0       	rjmp	.+14     	; 0x5a9a <ADC_void_config+0xaa>
    5a8c:	a6 e2       	ldi	r26, 0x26	; 38
    5a8e:	b0 e0       	ldi	r27, 0x00	; 0
    5a90:	e6 e2       	ldi	r30, 0x26	; 38
    5a92:	f0 e0       	ldi	r31, 0x00	; 0
    5a94:	80 81       	ld	r24, Z
    5a96:	8f 7d       	andi	r24, 0xDF	; 223
    5a98:	8c 93       	st	X, r24

	// Configure the ADC interrupt enable bit
	agn_bit(ADC_ADCSRA, ADC_ADIE_pin, ptr_config -> ADIE);
    5a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    5a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    5a9e:	81 81       	ldd	r24, Z+1	; 0x01
    5aa0:	80 71       	andi	r24, 0x10	; 16
    5aa2:	88 23       	and	r24, r24
    5aa4:	41 f0       	breq	.+16     	; 0x5ab6 <ADC_void_config+0xc6>
    5aa6:	a6 e2       	ldi	r26, 0x26	; 38
    5aa8:	b0 e0       	ldi	r27, 0x00	; 0
    5aaa:	e6 e2       	ldi	r30, 0x26	; 38
    5aac:	f0 e0       	ldi	r31, 0x00	; 0
    5aae:	80 81       	ld	r24, Z
    5ab0:	88 60       	ori	r24, 0x08	; 8
    5ab2:	8c 93       	st	X, r24
    5ab4:	07 c0       	rjmp	.+14     	; 0x5ac4 <ADC_void_config+0xd4>
    5ab6:	a6 e2       	ldi	r26, 0x26	; 38
    5ab8:	b0 e0       	ldi	r27, 0x00	; 0
    5aba:	e6 e2       	ldi	r30, 0x26	; 38
    5abc:	f0 e0       	ldi	r31, 0x00	; 0
    5abe:	80 81       	ld	r24, Z
    5ac0:	87 7f       	andi	r24, 0xF7	; 247
    5ac2:	8c 93       	st	X, r24

	// Configure the Global interupt bit
	agn_bit(ADC_SREG, ADC_Global_INT, ptr_config -> ADIE);
    5ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    5ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    5ac8:	81 81       	ldd	r24, Z+1	; 0x01
    5aca:	80 71       	andi	r24, 0x10	; 16
    5acc:	88 23       	and	r24, r24
    5ace:	41 f0       	breq	.+16     	; 0x5ae0 <ADC_void_config+0xf0>
    5ad0:	af e5       	ldi	r26, 0x5F	; 95
    5ad2:	b0 e0       	ldi	r27, 0x00	; 0
    5ad4:	ef e5       	ldi	r30, 0x5F	; 95
    5ad6:	f0 e0       	ldi	r31, 0x00	; 0
    5ad8:	80 81       	ld	r24, Z
    5ada:	80 68       	ori	r24, 0x80	; 128
    5adc:	8c 93       	st	X, r24
    5ade:	07 c0       	rjmp	.+14     	; 0x5aee <ADC_void_config+0xfe>
    5ae0:	af e5       	ldi	r26, 0x5F	; 95
    5ae2:	b0 e0       	ldi	r27, 0x00	; 0
    5ae4:	ef e5       	ldi	r30, 0x5F	; 95
    5ae6:	f0 e0       	ldi	r31, 0x00	; 0
    5ae8:	80 81       	ld	r24, Z
    5aea:	8f 77       	andi	r24, 0x7F	; 127
    5aec:	8c 93       	st	X, r24
}
    5aee:	0f 90       	pop	r0
    5af0:	0f 90       	pop	r0
    5af2:	cf 91       	pop	r28
    5af4:	df 91       	pop	r29
    5af6:	08 95       	ret

00005af8 <ADC_void_start_conv>:

void ADC_void_start_conv(void){
    5af8:	df 93       	push	r29
    5afa:	cf 93       	push	r28
    5afc:	cd b7       	in	r28, 0x3d	; 61
    5afe:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    5b00:	a6 e2       	ldi	r26, 0x26	; 38
    5b02:	b0 e0       	ldi	r27, 0x00	; 0
    5b04:	e6 e2       	ldi	r30, 0x26	; 38
    5b06:	f0 e0       	ldi	r31, 0x00	; 0
    5b08:	80 81       	ld	r24, Z
    5b0a:	80 64       	ori	r24, 0x40	; 64
    5b0c:	8c 93       	st	X, r24
}
    5b0e:	cf 91       	pop	r28
    5b10:	df 91       	pop	r29
    5b12:	08 95       	ret

00005b14 <ADC_void_read_data>:

void ADC_void_read_data(u16* ptr_result){
    5b14:	df 93       	push	r29
    5b16:	cf 93       	push	r28
    5b18:	00 d0       	rcall	.+0      	; 0x5b1a <ADC_void_read_data+0x6>
    5b1a:	cd b7       	in	r28, 0x3d	; 61
    5b1c:	de b7       	in	r29, 0x3e	; 62
    5b1e:	9a 83       	std	Y+2, r25	; 0x02
    5b20:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_result>> pointer to the ADC value container variable.
	 *	
	 *	Function does not retuen any data, Hence it needs to be called when a value update is needed.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    5b22:	a6 e2       	ldi	r26, 0x26	; 38
    5b24:	b0 e0       	ldi	r27, 0x00	; 0
    5b26:	e6 e2       	ldi	r30, 0x26	; 38
    5b28:	f0 e0       	ldi	r31, 0x00	; 0
    5b2a:	80 81       	ld	r24, Z
    5b2c:	80 64       	ori	r24, 0x40	; 64
    5b2e:	8c 93       	st	X, r24

	// Polling on the ADC interrupt flag bit
	while(get_bit(ADC_ADCSRA, ADC_ADIF_pin) == 0);
    5b30:	e6 e2       	ldi	r30, 0x26	; 38
    5b32:	f0 e0       	ldi	r31, 0x00	; 0
    5b34:	80 81       	ld	r24, Z
    5b36:	82 95       	swap	r24
    5b38:	8f 70       	andi	r24, 0x0F	; 15
    5b3a:	88 2f       	mov	r24, r24
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	81 70       	andi	r24, 0x01	; 1
    5b40:	90 70       	andi	r25, 0x00	; 0
    5b42:	00 97       	sbiw	r24, 0x00	; 0
    5b44:	a9 f3       	breq	.-22     	; 0x5b30 <ADC_void_read_data+0x1c>

	// Resit the ADC interrupt flag bit
	set_bit(ADC_ADCSRA, ADC_ADIF_pin);
    5b46:	a6 e2       	ldi	r26, 0x26	; 38
    5b48:	b0 e0       	ldi	r27, 0x00	; 0
    5b4a:	e6 e2       	ldi	r30, 0x26	; 38
    5b4c:	f0 e0       	ldi	r31, 0x00	; 0
    5b4e:	80 81       	ld	r24, Z
    5b50:	80 61       	ori	r24, 0x10	; 16
    5b52:	8c 93       	st	X, r24

	// Return the digital value
	*(ptr_result)= ADC_ADCD_16bit;
    5b54:	e4 e2       	ldi	r30, 0x24	; 36
    5b56:	f0 e0       	ldi	r31, 0x00	; 0
    5b58:	80 81       	ld	r24, Z
    5b5a:	91 81       	ldd	r25, Z+1	; 0x01
    5b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    5b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    5b60:	91 83       	std	Z+1, r25	; 0x01
    5b62:	80 83       	st	Z, r24
}
    5b64:	0f 90       	pop	r0
    5b66:	0f 90       	pop	r0
    5b68:	cf 91       	pop	r28
    5b6a:	df 91       	pop	r29
    5b6c:	08 95       	ret

00005b6e <ADC_void_INIT_callback>:


void ADC_void_INIT_callback(void (*ptr_callback_function)(u16 ) ){
    5b6e:	df 93       	push	r29
    5b70:	cf 93       	push	r28
    5b72:	00 d0       	rcall	.+0      	; 0x5b74 <ADC_void_INIT_callback+0x6>
    5b74:	cd b7       	in	r28, 0x3d	; 61
    5b76:	de b7       	in	r29, 0x3e	; 62
    5b78:	9a 83       	std	Y+2, r25	; 0x02
    5b7a:	89 83       	std	Y+1, r24	; 0x01
	 *	Inputs::
	 *		ptr_callback_function>> pointer to the callback function.
	 *
	 *	Function does not return any value and anly called when addressing the callback function.
	 */
	callback_functions_address= ptr_callback_function;
    5b7c:	89 81       	ldd	r24, Y+1	; 0x01
    5b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b80:	90 93 8d 01 	sts	0x018D, r25
    5b84:	80 93 8c 01 	sts	0x018C, r24
}
    5b88:	0f 90       	pop	r0
    5b8a:	0f 90       	pop	r0
    5b8c:	cf 91       	pop	r28
    5b8e:	df 91       	pop	r29
    5b90:	08 95       	ret

00005b92 <__vector_16>:

void __vector_16(void){
    5b92:	1f 92       	push	r1
    5b94:	0f 92       	push	r0
    5b96:	0f b6       	in	r0, 0x3f	; 63
    5b98:	0f 92       	push	r0
    5b9a:	11 24       	eor	r1, r1
    5b9c:	2f 93       	push	r18
    5b9e:	3f 93       	push	r19
    5ba0:	4f 93       	push	r20
    5ba2:	5f 93       	push	r21
    5ba4:	6f 93       	push	r22
    5ba6:	7f 93       	push	r23
    5ba8:	8f 93       	push	r24
    5baa:	9f 93       	push	r25
    5bac:	af 93       	push	r26
    5bae:	bf 93       	push	r27
    5bb0:	ef 93       	push	r30
    5bb2:	ff 93       	push	r31
    5bb4:	df 93       	push	r29
    5bb6:	cf 93       	push	r28
    5bb8:	cd b7       	in	r28, 0x3d	; 61
    5bba:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	ADC flag ISR
	 */
	if(callback_functions_address != NULL){
    5bbc:	80 91 8c 01 	lds	r24, 0x018C
    5bc0:	90 91 8d 01 	lds	r25, 0x018D
    5bc4:	00 97       	sbiw	r24, 0x00	; 0
    5bc6:	49 f0       	breq	.+18     	; 0x5bda <__vector_16+0x48>
		callback_functions_address(ADC_ADCD_16bit);
    5bc8:	e0 91 8c 01 	lds	r30, 0x018C
    5bcc:	f0 91 8d 01 	lds	r31, 0x018D
    5bd0:	a4 e2       	ldi	r26, 0x24	; 36
    5bd2:	b0 e0       	ldi	r27, 0x00	; 0
    5bd4:	8d 91       	ld	r24, X+
    5bd6:	9c 91       	ld	r25, X
    5bd8:	09 95       	icall
	}
}
    5bda:	cf 91       	pop	r28
    5bdc:	df 91       	pop	r29
    5bde:	ff 91       	pop	r31
    5be0:	ef 91       	pop	r30
    5be2:	bf 91       	pop	r27
    5be4:	af 91       	pop	r26
    5be6:	9f 91       	pop	r25
    5be8:	8f 91       	pop	r24
    5bea:	7f 91       	pop	r23
    5bec:	6f 91       	pop	r22
    5bee:	5f 91       	pop	r21
    5bf0:	4f 91       	pop	r20
    5bf2:	3f 91       	pop	r19
    5bf4:	2f 91       	pop	r18
    5bf6:	0f 90       	pop	r0
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	0f 90       	pop	r0
    5bfc:	1f 90       	pop	r1
    5bfe:	18 95       	reti

00005c00 <__mulsi3>:
    5c00:	62 9f       	mul	r22, r18
    5c02:	d0 01       	movw	r26, r0
    5c04:	73 9f       	mul	r23, r19
    5c06:	f0 01       	movw	r30, r0
    5c08:	82 9f       	mul	r24, r18
    5c0a:	e0 0d       	add	r30, r0
    5c0c:	f1 1d       	adc	r31, r1
    5c0e:	64 9f       	mul	r22, r20
    5c10:	e0 0d       	add	r30, r0
    5c12:	f1 1d       	adc	r31, r1
    5c14:	92 9f       	mul	r25, r18
    5c16:	f0 0d       	add	r31, r0
    5c18:	83 9f       	mul	r24, r19
    5c1a:	f0 0d       	add	r31, r0
    5c1c:	74 9f       	mul	r23, r20
    5c1e:	f0 0d       	add	r31, r0
    5c20:	65 9f       	mul	r22, r21
    5c22:	f0 0d       	add	r31, r0
    5c24:	99 27       	eor	r25, r25
    5c26:	72 9f       	mul	r23, r18
    5c28:	b0 0d       	add	r27, r0
    5c2a:	e1 1d       	adc	r30, r1
    5c2c:	f9 1f       	adc	r31, r25
    5c2e:	63 9f       	mul	r22, r19
    5c30:	b0 0d       	add	r27, r0
    5c32:	e1 1d       	adc	r30, r1
    5c34:	f9 1f       	adc	r31, r25
    5c36:	bd 01       	movw	r22, r26
    5c38:	cf 01       	movw	r24, r30
    5c3a:	11 24       	eor	r1, r1
    5c3c:	08 95       	ret

00005c3e <__udivmodhi4>:
    5c3e:	aa 1b       	sub	r26, r26
    5c40:	bb 1b       	sub	r27, r27
    5c42:	51 e1       	ldi	r21, 0x11	; 17
    5c44:	07 c0       	rjmp	.+14     	; 0x5c54 <__udivmodhi4_ep>

00005c46 <__udivmodhi4_loop>:
    5c46:	aa 1f       	adc	r26, r26
    5c48:	bb 1f       	adc	r27, r27
    5c4a:	a6 17       	cp	r26, r22
    5c4c:	b7 07       	cpc	r27, r23
    5c4e:	10 f0       	brcs	.+4      	; 0x5c54 <__udivmodhi4_ep>
    5c50:	a6 1b       	sub	r26, r22
    5c52:	b7 0b       	sbc	r27, r23

00005c54 <__udivmodhi4_ep>:
    5c54:	88 1f       	adc	r24, r24
    5c56:	99 1f       	adc	r25, r25
    5c58:	5a 95       	dec	r21
    5c5a:	a9 f7       	brne	.-22     	; 0x5c46 <__udivmodhi4_loop>
    5c5c:	80 95       	com	r24
    5c5e:	90 95       	com	r25
    5c60:	bc 01       	movw	r22, r24
    5c62:	cd 01       	movw	r24, r26
    5c64:	08 95       	ret

00005c66 <__divmodsi4>:
    5c66:	97 fb       	bst	r25, 7
    5c68:	09 2e       	mov	r0, r25
    5c6a:	05 26       	eor	r0, r21
    5c6c:	0e d0       	rcall	.+28     	; 0x5c8a <__divmodsi4_neg1>
    5c6e:	57 fd       	sbrc	r21, 7
    5c70:	04 d0       	rcall	.+8      	; 0x5c7a <__divmodsi4_neg2>
    5c72:	14 d0       	rcall	.+40     	; 0x5c9c <__udivmodsi4>
    5c74:	0a d0       	rcall	.+20     	; 0x5c8a <__divmodsi4_neg1>
    5c76:	00 1c       	adc	r0, r0
    5c78:	38 f4       	brcc	.+14     	; 0x5c88 <__divmodsi4_exit>

00005c7a <__divmodsi4_neg2>:
    5c7a:	50 95       	com	r21
    5c7c:	40 95       	com	r20
    5c7e:	30 95       	com	r19
    5c80:	21 95       	neg	r18
    5c82:	3f 4f       	sbci	r19, 0xFF	; 255
    5c84:	4f 4f       	sbci	r20, 0xFF	; 255
    5c86:	5f 4f       	sbci	r21, 0xFF	; 255

00005c88 <__divmodsi4_exit>:
    5c88:	08 95       	ret

00005c8a <__divmodsi4_neg1>:
    5c8a:	f6 f7       	brtc	.-4      	; 0x5c88 <__divmodsi4_exit>
    5c8c:	90 95       	com	r25
    5c8e:	80 95       	com	r24
    5c90:	70 95       	com	r23
    5c92:	61 95       	neg	r22
    5c94:	7f 4f       	sbci	r23, 0xFF	; 255
    5c96:	8f 4f       	sbci	r24, 0xFF	; 255
    5c98:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9a:	08 95       	ret

00005c9c <__udivmodsi4>:
    5c9c:	a1 e2       	ldi	r26, 0x21	; 33
    5c9e:	1a 2e       	mov	r1, r26
    5ca0:	aa 1b       	sub	r26, r26
    5ca2:	bb 1b       	sub	r27, r27
    5ca4:	fd 01       	movw	r30, r26
    5ca6:	0d c0       	rjmp	.+26     	; 0x5cc2 <__udivmodsi4_ep>

00005ca8 <__udivmodsi4_loop>:
    5ca8:	aa 1f       	adc	r26, r26
    5caa:	bb 1f       	adc	r27, r27
    5cac:	ee 1f       	adc	r30, r30
    5cae:	ff 1f       	adc	r31, r31
    5cb0:	a2 17       	cp	r26, r18
    5cb2:	b3 07       	cpc	r27, r19
    5cb4:	e4 07       	cpc	r30, r20
    5cb6:	f5 07       	cpc	r31, r21
    5cb8:	20 f0       	brcs	.+8      	; 0x5cc2 <__udivmodsi4_ep>
    5cba:	a2 1b       	sub	r26, r18
    5cbc:	b3 0b       	sbc	r27, r19
    5cbe:	e4 0b       	sbc	r30, r20
    5cc0:	f5 0b       	sbc	r31, r21

00005cc2 <__udivmodsi4_ep>:
    5cc2:	66 1f       	adc	r22, r22
    5cc4:	77 1f       	adc	r23, r23
    5cc6:	88 1f       	adc	r24, r24
    5cc8:	99 1f       	adc	r25, r25
    5cca:	1a 94       	dec	r1
    5ccc:	69 f7       	brne	.-38     	; 0x5ca8 <__udivmodsi4_loop>
    5cce:	60 95       	com	r22
    5cd0:	70 95       	com	r23
    5cd2:	80 95       	com	r24
    5cd4:	90 95       	com	r25
    5cd6:	9b 01       	movw	r18, r22
    5cd8:	ac 01       	movw	r20, r24
    5cda:	bd 01       	movw	r22, r26
    5cdc:	cf 01       	movw	r24, r30
    5cde:	08 95       	ret

00005ce0 <__prologue_saves__>:
    5ce0:	2f 92       	push	r2
    5ce2:	3f 92       	push	r3
    5ce4:	4f 92       	push	r4
    5ce6:	5f 92       	push	r5
    5ce8:	6f 92       	push	r6
    5cea:	7f 92       	push	r7
    5cec:	8f 92       	push	r8
    5cee:	9f 92       	push	r9
    5cf0:	af 92       	push	r10
    5cf2:	bf 92       	push	r11
    5cf4:	cf 92       	push	r12
    5cf6:	df 92       	push	r13
    5cf8:	ef 92       	push	r14
    5cfa:	ff 92       	push	r15
    5cfc:	0f 93       	push	r16
    5cfe:	1f 93       	push	r17
    5d00:	cf 93       	push	r28
    5d02:	df 93       	push	r29
    5d04:	cd b7       	in	r28, 0x3d	; 61
    5d06:	de b7       	in	r29, 0x3e	; 62
    5d08:	ca 1b       	sub	r28, r26
    5d0a:	db 0b       	sbc	r29, r27
    5d0c:	0f b6       	in	r0, 0x3f	; 63
    5d0e:	f8 94       	cli
    5d10:	de bf       	out	0x3e, r29	; 62
    5d12:	0f be       	out	0x3f, r0	; 63
    5d14:	cd bf       	out	0x3d, r28	; 61
    5d16:	09 94       	ijmp

00005d18 <__epilogue_restores__>:
    5d18:	2a 88       	ldd	r2, Y+18	; 0x12
    5d1a:	39 88       	ldd	r3, Y+17	; 0x11
    5d1c:	48 88       	ldd	r4, Y+16	; 0x10
    5d1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d20:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d22:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d24:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d26:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d28:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d2a:	b9 84       	ldd	r11, Y+9	; 0x09
    5d2c:	c8 84       	ldd	r12, Y+8	; 0x08
    5d2e:	df 80       	ldd	r13, Y+7	; 0x07
    5d30:	ee 80       	ldd	r14, Y+6	; 0x06
    5d32:	fd 80       	ldd	r15, Y+5	; 0x05
    5d34:	0c 81       	ldd	r16, Y+4	; 0x04
    5d36:	1b 81       	ldd	r17, Y+3	; 0x03
    5d38:	aa 81       	ldd	r26, Y+2	; 0x02
    5d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    5d3c:	ce 0f       	add	r28, r30
    5d3e:	d1 1d       	adc	r29, r1
    5d40:	0f b6       	in	r0, 0x3f	; 63
    5d42:	f8 94       	cli
    5d44:	de bf       	out	0x3e, r29	; 62
    5d46:	0f be       	out	0x3f, r0	; 63
    5d48:	cd bf       	out	0x3d, r28	; 61
    5d4a:	ed 01       	movw	r28, r26
    5d4c:	08 95       	ret

00005d4e <_exit>:
    5d4e:	f8 94       	cli

00005d50 <__stop_program>:
    5d50:	ff cf       	rjmp	.-2      	; 0x5d50 <__stop_program>
