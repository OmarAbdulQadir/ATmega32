
APP_38_Internal-monitoring-system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000650e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  0000650e  000065a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008001bc  008001bc  000066fe  2**0
                  ALLOC
  3 .stab         00004fd4  00000000  00000000  00006700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c60  00000000  00000000  0000b6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000d334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000d514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000d746  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000ffd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  000115ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  000129e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00012be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00012eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013945  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a7 31 	jmp	0x634e	; 0x634e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 08 	call	0x1158	; 0x1158 <main>
      8a:	0c 94 85 32 	jmp	0x650a	; 0x650a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 32 	jmp	0x649c	; 0x649c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 32 	jmp	0x64ec	; 0x64ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 32 	jmp	0x64ec	; 0x64ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 32 	jmp	0x649c	; 0x649c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 32 	jmp	0x64d4	; 0x64d4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 32 	jmp	0x64ac	; 0x64ac <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e9       	ldi	r22, 0x91	; 145
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 72 32 	jmp	0x64e4	; 0x64e4 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 76 32 	jmp	0x64ec	; 0x64ec <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 76 32 	jmp	0x64ec	; 0x64ec <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 76 32 	jmp	0x64ec	; 0x64ec <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5a 32 	jmp	0x64b4	; 0x64b4 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 76 32 	jmp	0x64ec	; 0x64ec <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 57 32 	jmp	0x64ae	; 0x64ae <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 73 32 	jmp	0x64e6	; 0x64e6 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 5e 32 	jmp	0x64bc	; 0x64bc <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 7a 32 	jmp	0x64f4	; 0x64f4 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 56 32 	jmp	0x64ac	; 0x64ac <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 72 32 	jmp	0x64e4	; 0x64e4 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e7 56       	subi	r30, 0x67	; 103
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <Vsensor_voidInit>:
ADC_config_struct V_DC_sensor_config = {V_DC_sensor_def_ch, V_DC_sensor_Prescaler, V_DC_sensor_ADATE, V_DC_sensor_ADTS, V_DC_sensor_ADIE};


/* Implementing of the driver functions */
// Initiate the sensor through a given ADC channel
void Vsensor_voidInit(u8 copy_u8_ADC_ch){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if(copy_u8_ADC_ch <= V_DC_sensor_max_ch){
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	50 f4       	brcc	.+20     	; 0xf70 <Vsensor_voidInit+0x26>
		V_DC_sensor_config.MUX = copy_u8_ADC_ch;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 71       	andi	r24, 0x1F	; 31
     f60:	98 2f       	mov	r25, r24
     f62:	9f 71       	andi	r25, 0x1F	; 31
     f64:	80 91 bc 01 	lds	r24, 0x01BC
     f68:	80 7e       	andi	r24, 0xE0	; 224
     f6a:	89 2b       	or	r24, r25
     f6c:	80 93 bc 01 	sts	0x01BC, r24
	}
	ADC_void_init();
     f70:	0e 94 b3 30 	call	0x6166	; 0x6166 <ADC_void_init>
}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <Vsensor_voidClcVolt>:

// start calculating the voltage value
f64 Vsensor_voidClcVolt(void ){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	29 97       	sbiw	r28, 0x09	; 9
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	/*
	 *
	 */
	u16 voltageAccumulator = V_DC_sensor_Val_flour;
     f90:	1f 82       	std	Y+7, r1	; 0x07
     f92:	1e 82       	std	Y+6, r1	; 0x06
	u16 Voltage_ADC_Data = V_DC_sensor_Val_flour;
     f94:	19 86       	std	Y+9, r1	; 0x09
     f96:	18 86       	std	Y+8, r1	; 0x08
	ADC_void_config(&V_DC_sensor_config);
     f98:	8c eb       	ldi	r24, 0xBC	; 188
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 d6 30 	call	0x61ac	; 0x61ac <ADC_void_config>
	for(u8 acc_counter= V_DC_sensor_Val_flour; acc_counter < Vsensor_Acc; acc_counter++){
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <Vsensor_voidClcVolt+0x46>
		ADC_void_read_data(&Voltage_ADC_Data);
     fa4:	ce 01       	movw	r24, r28
     fa6:	08 96       	adiw	r24, 0x08	; 8
     fa8:	0e 94 68 31 	call	0x62d0	; 0x62d0 <ADC_void_read_data>
		voltageAccumulator += Voltage_ADC_Data;
     fac:	28 85       	ldd	r18, Y+8	; 0x08
     fae:	39 85       	ldd	r19, Y+9	; 0x09
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	9f 81       	ldd	r25, Y+7	; 0x07
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	9f 83       	std	Y+7, r25	; 0x07
     fba:	8e 83       	std	Y+6, r24	; 0x06
	 *
	 */
	u16 voltageAccumulator = V_DC_sensor_Val_flour;
	u16 Voltage_ADC_Data = V_DC_sensor_Val_flour;
	ADC_void_config(&V_DC_sensor_config);
	for(u8 acc_counter= V_DC_sensor_Val_flour; acc_counter < Vsensor_Acc; acc_counter++){
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	8a 30       	cpi	r24, 0x0A	; 10
     fc6:	70 f3       	brcs	.-36     	; 0xfa4 <Vsensor_voidClcVolt+0x28>
		ADC_void_read_data(&Voltage_ADC_Data);
		voltageAccumulator += Voltage_ADC_Data;
	}
	Voltage_ADC_Data = voltageAccumulator/Vsensor_Acc;
     fc8:	8e 81       	ldd	r24, Y+6	; 0x06
     fca:	9f 81       	ldd	r25, Y+7	; 0x07
     fcc:	2a e0       	ldi	r18, 0x0A	; 10
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodhi4>
     fd6:	cb 01       	movw	r24, r22
     fd8:	99 87       	std	Y+9, r25	; 0x09
     fda:	88 87       	std	Y+8, r24	; 0x08
	f64 voltageValue = ((Voltage_ADC_Data*Volt_ref)/V_DC_sensor_ADC_MAX)*Stage_gain;
     fdc:	28 85       	ldd	r18, Y+8	; 0x08
     fde:	39 85       	ldd	r19, Y+9	; 0x09
     fe0:	c9 01       	movw	r24, r18
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	cc 01       	movw	r24, r24
     ff0:	a0 e0       	ldi	r26, 0x00	; 0
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	50 e4       	ldi	r21, 0x40	; 64
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	9b 83       	std	Y+3, r25	; 0x03
    102c:	ac 83       	std	Y+4, r26	; 0x04
    102e:	bd 83       	std	Y+5, r27	; 0x05
	return voltageValue;
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	ac 81       	ldd	r26, Y+4	; 0x04
    1036:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	29 96       	adiw	r28, 0x09	; 9
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <Temp_sensor_voidInit>:
ADC_config_struct Temp_sensor_config = {Temp_ADC_def_ch, Temp_sensor_Prescaler, Temp_sensor_ADATE, Temp_sensor_ADTS, Temp_sensor_ADIE};


/* Implementing of the driver functions */
// Initiate the sensor through a given ADC channel
void Temp_sensor_voidInit(u8 copy_u8_ADC_ch){
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if((copy_u8_ADC_ch <= Temp_ADC_max_ch)){
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	88 30       	cpi	r24, 0x08	; 8
    105e:	50 f4       	brcc	.+20     	; 0x1074 <Temp_sensor_voidInit+0x26>
		Temp_sensor_config.MUX = copy_u8_ADC_ch;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	8f 71       	andi	r24, 0x1F	; 31
    1064:	98 2f       	mov	r25, r24
    1066:	9f 71       	andi	r25, 0x1F	; 31
    1068:	80 91 99 01 	lds	r24, 0x0199
    106c:	80 7e       	andi	r24, 0xE0	; 224
    106e:	89 2b       	or	r24, r25
    1070:	80 93 99 01 	sts	0x0199, r24
	}
	else{

	}
	ADC_void_init();
    1074:	0e 94 b3 30 	call	0x6166	; 0x6166 <ADC_void_init>
}
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <Temp_sensor_voidClcTemp>:

// Calculate the current data and return it
f64 Temp_sensor_voidClcTemp(void ){
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	29 97       	sbiw	r28, 0x09	; 9
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
	/*
	 *
	 */
	u16 currentAccumulator = Temp_sensor_Val_flour;
    1094:	1f 82       	std	Y+7, r1	; 0x07
    1096:	1e 82       	std	Y+6, r1	; 0x06
	u16 current_ADC_data = Temp_sensor_Val_flour;
    1098:	19 86       	std	Y+9, r1	; 0x09
    109a:	18 86       	std	Y+8, r1	; 0x08
	ADC_void_config(&Temp_sensor_config);
    109c:	89 e9       	ldi	r24, 0x99	; 153
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 d6 30 	call	0x61ac	; 0x61ac <ADC_void_config>
	for(u8 acc_counter= Temp_sensor_Val_flour; acc_counter < Temp_sensor_Acc; acc_counter++){
    10a4:	19 82       	std	Y+1, r1	; 0x01
    10a6:	0f c0       	rjmp	.+30     	; 0x10c6 <Temp_sensor_voidClcTemp+0x46>
		ADC_void_read_data(&current_ADC_data);
    10a8:	ce 01       	movw	r24, r28
    10aa:	08 96       	adiw	r24, 0x08	; 8
    10ac:	0e 94 68 31 	call	0x62d0	; 0x62d0 <ADC_void_read_data>
		currentAccumulator+= current_ADC_data;
    10b0:	28 85       	ldd	r18, Y+8	; 0x08
    10b2:	39 85       	ldd	r19, Y+9	; 0x09
    10b4:	8e 81       	ldd	r24, Y+6	; 0x06
    10b6:	9f 81       	ldd	r25, Y+7	; 0x07
    10b8:	82 0f       	add	r24, r18
    10ba:	93 1f       	adc	r25, r19
    10bc:	9f 83       	std	Y+7, r25	; 0x07
    10be:	8e 83       	std	Y+6, r24	; 0x06
	 *
	 */
	u16 currentAccumulator = Temp_sensor_Val_flour;
	u16 current_ADC_data = Temp_sensor_Val_flour;
	ADC_void_config(&Temp_sensor_config);
	for(u8 acc_counter= Temp_sensor_Val_flour; acc_counter < Temp_sensor_Acc; acc_counter++){
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	8a 30       	cpi	r24, 0x0A	; 10
    10ca:	70 f3       	brcs	.-36     	; 0x10a8 <Temp_sensor_voidClcTemp+0x28>
		ADC_void_read_data(&current_ADC_data);
		currentAccumulator+= current_ADC_data;
	}
	current_ADC_data = currentAccumulator/Temp_sensor_Acc;
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	2a e0       	ldi	r18, 0x0A	; 10
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	b9 01       	movw	r22, r18
    10d6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodhi4>
    10da:	cb 01       	movw	r24, r22
    10dc:	99 87       	std	Y+9, r25	; 0x09
    10de:	88 87       	std	Y+8, r24	; 0x08
	f64 current_data = ((current_ADC_data/Temp_sensor_ADC_max)*Temp_V_ref)/Volt_temp_ref;
    10e0:	88 85       	ldd	r24, Y+8	; 0x08
    10e2:	99 85       	ldd	r25, Y+9	; 0x09
    10e4:	cc 01       	movw	r24, r24
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	bc 01       	movw	r22, r24
    10f8:	cd 01       	movw	r24, r26
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	54 e4       	ldi	r21, 0x44	; 68
    1102:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e4       	ldi	r19, 0x40	; 64
    1112:	4c e9       	ldi	r20, 0x9C	; 156
    1114:	55 e4       	ldi	r21, 0x45	; 69
    1116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	9b 83       	std	Y+3, r25	; 0x03
    1136:	ac 83       	std	Y+4, r26	; 0x04
    1138:	bd 83       	std	Y+5, r27	; 0x05
	return current_data;
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	ac 81       	ldd	r26, Y+4	; 0x04
    1140:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	29 96       	adiw	r28, 0x09	; 9
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <main>:
#define LCD_LOC2		1, 3
#define LCD_LOC3		1, 11
u32 cycle_counter= 0;


int main(void){
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	ae 97       	sbiw	r28, 0x2e	; 46
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    116c:	0e 94 09 25 	call	0x4a12	; 0x4a12 <LCD_init>
	LCD_write_str((u8*) "A=     mA");
    1170:	80 e6       	ldi	r24, 0x60	; 96
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>
	LCD_set_cursor(0, 9);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	69 e0       	ldi	r22, 0x09	; 9
    117c:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
	LCD_write_str((u8*) "V=     V");
    1180:	8a e6       	ldi	r24, 0x6A	; 106
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>
	LCD_set_cursor(1, 0);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
	LCD_write_str((u8*) "P=     mW");
    1190:	83 e7       	ldi	r24, 0x73	; 115
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>
	LCD_set_cursor(1, 9);
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	69 e0       	ldi	r22, 0x09	; 9
    119c:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
	LCD_write_str((u8*) "T=     C");
    11a0:	8d e7       	ldi	r24, 0x7D	; 125
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>

	A_DC_sensor_voidInit(Amp_A0_1);
    11a8:	8b e0       	ldi	r24, 0x0B	; 11
    11aa:	0e 94 25 30 	call	0x604a	; 0x604a <A_DC_sensor_voidInit>
	Vsensor_voidInit(2);
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Vsensor_voidInit>
	Temp_sensor_voidInit(3);
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	0e 94 27 08 	call	0x104e	; 0x104e <Temp_sensor_voidInit>

	f64 Curr_volt = Vsensor_voidClcVolt(),
    11ba:	0e 94 be 07 	call	0xf7c	; 0xf7c <Vsensor_voidClcVolt>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	8b a7       	std	Y+43, r24	; 0x2b
    11c4:	9c a7       	std	Y+44, r25	; 0x2c
    11c6:	ad a7       	std	Y+45, r26	; 0x2d
    11c8:	be a7       	std	Y+46, r27	; 0x2e
		Curr_amps = A_DC_sensor_voidClcAmps(),
    11ca:	0e 94 4d 30 	call	0x609a	; 0x609a <A_DC_sensor_voidClcAmps>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8f a3       	std	Y+39, r24	; 0x27
    11d4:	98 a7       	std	Y+40, r25	; 0x28
    11d6:	a9 a7       	std	Y+41, r26	; 0x29
    11d8:	ba a7       	std	Y+42, r27	; 0x2a
		Curr_temp = Temp_sensor_voidClcTemp(),
    11da:	0e 94 40 08 	call	0x1080	; 0x1080 <Temp_sensor_voidClcTemp>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	8b a3       	std	Y+35, r24	; 0x23
    11e4:	9c a3       	std	Y+36, r25	; 0x24
    11e6:	ad a3       	std	Y+37, r26	; 0x25
    11e8:	be a3       	std	Y+38, r27	; 0x26
		Curr_pwr = Curr_volt*Curr_amps;
    11ea:	6b a5       	ldd	r22, Y+43	; 0x2b
    11ec:	7c a5       	ldd	r23, Y+44	; 0x2c
    11ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    11f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    11f2:	2f a1       	ldd	r18, Y+39	; 0x27
    11f4:	38 a5       	ldd	r19, Y+40	; 0x28
    11f6:	49 a5       	ldd	r20, Y+41	; 0x29
    11f8:	5a a5       	ldd	r21, Y+42	; 0x2a
    11fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8f 8f       	std	Y+31, r24	; 0x1f
    1204:	98 a3       	std	Y+32, r25	; 0x20
    1206:	a9 a3       	std	Y+33, r26	; 0x21
    1208:	ba a3       	std	Y+34, r27	; 0x22

	f64 prev_volt = 0,
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e0       	ldi	r26, 0x00	; 0
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	8b 8f       	std	Y+27, r24	; 0x1b
    1214:	9c 8f       	std	Y+28, r25	; 0x1c
    1216:	ad 8f       	std	Y+29, r26	; 0x1d
    1218:	be 8f       	std	Y+30, r27	; 0x1e
		prev_amps = 0,
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a0 e0       	ldi	r26, 0x00	; 0
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	8f 8b       	std	Y+23, r24	; 0x17
    1224:	98 8f       	std	Y+24, r25	; 0x18
    1226:	a9 8f       	std	Y+25, r26	; 0x19
    1228:	ba 8f       	std	Y+26, r27	; 0x1a
		prev_temp = 0,
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a0 e0       	ldi	r26, 0x00	; 0
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	8b 8b       	std	Y+19, r24	; 0x13
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	ad 8b       	std	Y+21, r26	; 0x15
    1238:	be 8b       	std	Y+22, r27	; 0x16
		prev_pwr = 0;
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	8f 87       	std	Y+15, r24	; 0x0f
    1244:	98 8b       	std	Y+16, r25	; 0x10
    1246:	a9 8b       	std	Y+17, r26	; 0x11
    1248:	ba 8b       	std	Y+18, r27	; 0x12

	while(1){

		// Nxt move to update the values
		if(prev_volt != Curr_volt){
    124a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    124c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    124e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1250:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1252:	2b a5       	ldd	r18, Y+43	; 0x2b
    1254:	3c a5       	ldd	r19, Y+44	; 0x2c
    1256:	4d a5       	ldd	r20, Y+45	; 0x2d
    1258:	5e a5       	ldd	r21, Y+46	; 0x2e
    125a:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    125e:	88 23       	and	r24, r24
    1260:	89 f0       	breq	.+34     	; 0x1284 <main+0x12c>
			prev_volt = Curr_volt;
    1262:	8b a5       	ldd	r24, Y+43	; 0x2b
    1264:	9c a5       	ldd	r25, Y+44	; 0x2c
    1266:	ad a5       	ldd	r26, Y+45	; 0x2d
    1268:	be a5       	ldd	r27, Y+46	; 0x2e
    126a:	8b 8f       	std	Y+27, r24	; 0x1b
    126c:	9c 8f       	std	Y+28, r25	; 0x1c
    126e:	ad 8f       	std	Y+29, r26	; 0x1d
    1270:	be 8f       	std	Y+30, r27	; 0x1e
			APP_voidUpdateLCD(1, prev_volt);
    1272:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1274:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1276:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1278:	5e 8d       	ldd	r21, Y+30	; 0x1e
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	ba 01       	movw	r22, r20
    127e:	a9 01       	movw	r20, r18
    1280:	0e 94 47 0a 	call	0x148e	; 0x148e <APP_voidUpdateLCD>
		}
		if(prev_amps != Curr_amps){
    1284:	6f 89       	ldd	r22, Y+23	; 0x17
    1286:	78 8d       	ldd	r23, Y+24	; 0x18
    1288:	89 8d       	ldd	r24, Y+25	; 0x19
    128a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    128c:	2f a1       	ldd	r18, Y+39	; 0x27
    128e:	38 a5       	ldd	r19, Y+40	; 0x28
    1290:	49 a5       	ldd	r20, Y+41	; 0x29
    1292:	5a a5       	ldd	r21, Y+42	; 0x2a
    1294:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1298:	88 23       	and	r24, r24
    129a:	89 f0       	breq	.+34     	; 0x12be <main+0x166>
			prev_amps = Curr_amps;
    129c:	8f a1       	ldd	r24, Y+39	; 0x27
    129e:	98 a5       	ldd	r25, Y+40	; 0x28
    12a0:	a9 a5       	ldd	r26, Y+41	; 0x29
    12a2:	ba a5       	ldd	r27, Y+42	; 0x2a
    12a4:	8f 8b       	std	Y+23, r24	; 0x17
    12a6:	98 8f       	std	Y+24, r25	; 0x18
    12a8:	a9 8f       	std	Y+25, r26	; 0x19
    12aa:	ba 8f       	std	Y+26, r27	; 0x1a
			APP_voidUpdateLCD(0, prev_amps);
    12ac:	2f 89       	ldd	r18, Y+23	; 0x17
    12ae:	38 8d       	ldd	r19, Y+24	; 0x18
    12b0:	49 8d       	ldd	r20, Y+25	; 0x19
    12b2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	ba 01       	movw	r22, r20
    12b8:	a9 01       	movw	r20, r18
    12ba:	0e 94 47 0a 	call	0x148e	; 0x148e <APP_voidUpdateLCD>
		}
		if(prev_temp != Curr_temp){
    12be:	6b 89       	ldd	r22, Y+19	; 0x13
    12c0:	7c 89       	ldd	r23, Y+20	; 0x14
    12c2:	8d 89       	ldd	r24, Y+21	; 0x15
    12c4:	9e 89       	ldd	r25, Y+22	; 0x16
    12c6:	2b a1       	ldd	r18, Y+35	; 0x23
    12c8:	3c a1       	ldd	r19, Y+36	; 0x24
    12ca:	4d a1       	ldd	r20, Y+37	; 0x25
    12cc:	5e a1       	ldd	r21, Y+38	; 0x26
    12ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    12d2:	88 23       	and	r24, r24
    12d4:	89 f0       	breq	.+34     	; 0x12f8 <main+0x1a0>
			prev_temp = Curr_temp;
    12d6:	8b a1       	ldd	r24, Y+35	; 0x23
    12d8:	9c a1       	ldd	r25, Y+36	; 0x24
    12da:	ad a1       	ldd	r26, Y+37	; 0x25
    12dc:	be a1       	ldd	r27, Y+38	; 0x26
    12de:	8b 8b       	std	Y+19, r24	; 0x13
    12e0:	9c 8b       	std	Y+20, r25	; 0x14
    12e2:	ad 8b       	std	Y+21, r26	; 0x15
    12e4:	be 8b       	std	Y+22, r27	; 0x16
			APP_voidUpdateLCD(3, prev_temp);
    12e6:	2b 89       	ldd	r18, Y+19	; 0x13
    12e8:	3c 89       	ldd	r19, Y+20	; 0x14
    12ea:	4d 89       	ldd	r20, Y+21	; 0x15
    12ec:	5e 89       	ldd	r21, Y+22	; 0x16
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	ba 01       	movw	r22, r20
    12f2:	a9 01       	movw	r20, r18
    12f4:	0e 94 47 0a 	call	0x148e	; 0x148e <APP_voidUpdateLCD>
		}
		if(prev_pwr != Curr_pwr){
    12f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    12fa:	78 89       	ldd	r23, Y+16	; 0x10
    12fc:	89 89       	ldd	r24, Y+17	; 0x11
    12fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1300:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1302:	38 a1       	ldd	r19, Y+32	; 0x20
    1304:	49 a1       	ldd	r20, Y+33	; 0x21
    1306:	5a a1       	ldd	r21, Y+34	; 0x22
    1308:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    130c:	88 23       	and	r24, r24
    130e:	89 f0       	breq	.+34     	; 0x1332 <main+0x1da>
			prev_pwr = Curr_pwr;
    1310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1312:	98 a1       	ldd	r25, Y+32	; 0x20
    1314:	a9 a1       	ldd	r26, Y+33	; 0x21
    1316:	ba a1       	ldd	r27, Y+34	; 0x22
    1318:	8f 87       	std	Y+15, r24	; 0x0f
    131a:	98 8b       	std	Y+16, r25	; 0x10
    131c:	a9 8b       	std	Y+17, r26	; 0x11
    131e:	ba 8b       	std	Y+18, r27	; 0x12
			APP_voidUpdateLCD(2, prev_pwr);
    1320:	2f 85       	ldd	r18, Y+15	; 0x0f
    1322:	38 89       	ldd	r19, Y+16	; 0x10
    1324:	49 89       	ldd	r20, Y+17	; 0x11
    1326:	5a 89       	ldd	r21, Y+18	; 0x12
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	ba 01       	movw	r22, r20
    132c:	a9 01       	movw	r20, r18
    132e:	0e 94 47 0a 	call	0x148e	; 0x148e <APP_voidUpdateLCD>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	aa e7       	ldi	r26, 0x7A	; 122
    1338:	b3 e4       	ldi	r27, 0x43	; 67
    133a:	8b 87       	std	Y+11, r24	; 0x0b
    133c:	9c 87       	std	Y+12, r25	; 0x0c
    133e:	ad 87       	std	Y+13, r26	; 0x0d
    1340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a ef       	ldi	r20, 0xFA	; 250
    1350:	54 e4       	ldi	r21, 0x44	; 68
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8f 83       	std	Y+7, r24	; 0x07
    135c:	98 87       	std	Y+8, r25	; 0x08
    135e:	a9 87       	std	Y+9, r26	; 0x09
    1360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	78 85       	ldd	r23, Y+8	; 0x08
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1376:	88 23       	and	r24, r24
    1378:	2c f4       	brge	.+10     	; 0x1384 <main+0x22c>
		__ticks = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	3f c0       	rjmp	.+126    	; 0x1402 <main+0x2aa>
	else if (__tmp > 65535)
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1398:	18 16       	cp	r1, r24
    139a:	4c f5       	brge	.+82     	; 0x13ee <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139c:	6b 85       	ldd	r22, Y+11	; 0x0b
    139e:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <main+0x28c>
    13c6:	88 ec       	ldi	r24, 0xC8	; 200
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <main+0x27a>
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <main+0x26e>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <main+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	78 85       	ldd	r23, Y+8	; 0x08
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <main+0x2b6>
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(250);
		Curr_volt = Vsensor_voidClcVolt();
    1416:	0e 94 be 07 	call	0xf7c	; 0xf7c <Vsensor_voidClcVolt>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	8b a7       	std	Y+43, r24	; 0x2b
    1420:	9c a7       	std	Y+44, r25	; 0x2c
    1422:	ad a7       	std	Y+45, r26	; 0x2d
    1424:	be a7       	std	Y+46, r27	; 0x2e
		Curr_amps = A_DC_sensor_voidClcAmps();
    1426:	0e 94 4d 30 	call	0x609a	; 0x609a <A_DC_sensor_voidClcAmps>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8f a3       	std	Y+39, r24	; 0x27
    1430:	98 a7       	std	Y+40, r25	; 0x28
    1432:	a9 a7       	std	Y+41, r26	; 0x29
    1434:	ba a7       	std	Y+42, r27	; 0x2a
		Curr_temp = Temp_sensor_voidClcTemp();
    1436:	0e 94 40 08 	call	0x1080	; 0x1080 <Temp_sensor_voidClcTemp>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	8b a3       	std	Y+35, r24	; 0x23
    1440:	9c a3       	std	Y+36, r25	; 0x24
    1442:	ad a3       	std	Y+37, r26	; 0x25
    1444:	be a3       	std	Y+38, r27	; 0x26
		Curr_pwr = Curr_volt*Curr_amps;
    1446:	6b a5       	ldd	r22, Y+43	; 0x2b
    1448:	7c a5       	ldd	r23, Y+44	; 0x2c
    144a:	8d a5       	ldd	r24, Y+45	; 0x2d
    144c:	9e a5       	ldd	r25, Y+46	; 0x2e
    144e:	2f a1       	ldd	r18, Y+39	; 0x27
    1450:	38 a5       	ldd	r19, Y+40	; 0x28
    1452:	49 a5       	ldd	r20, Y+41	; 0x29
    1454:	5a a5       	ldd	r21, Y+42	; 0x2a
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	8f 8f       	std	Y+31, r24	; 0x1f
    1460:	98 a3       	std	Y+32, r25	; 0x20
    1462:	a9 a3       	std	Y+33, r26	; 0x21
    1464:	ba a3       	std	Y+34, r27	; 0x22
		cycle_counter++;
    1466:	80 91 be 01 	lds	r24, 0x01BE
    146a:	90 91 bf 01 	lds	r25, 0x01BF
    146e:	a0 91 c0 01 	lds	r26, 0x01C0
    1472:	b0 91 c1 01 	lds	r27, 0x01C1
    1476:	01 96       	adiw	r24, 0x01	; 1
    1478:	a1 1d       	adc	r26, r1
    147a:	b1 1d       	adc	r27, r1
    147c:	80 93 be 01 	sts	0x01BE, r24
    1480:	90 93 bf 01 	sts	0x01BF, r25
    1484:	a0 93 c0 01 	sts	0x01C0, r26
    1488:	b0 93 c1 01 	sts	0x01C1, r27
    148c:	de ce       	rjmp	.-580    	; 0x124a <main+0xf2>

0000148e <APP_voidUpdateLCD>:
	}
	return 0;
}


void APP_voidUpdateLCD(u8 copy_u8LCD_location, f64 copy_f64Variable){
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	27 97       	sbiw	r28, 0x07	; 7
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	4a 83       	std	Y+2, r20	; 0x02
    14a6:	5b 83       	std	Y+3, r21	; 0x03
    14a8:	6c 83       	std	Y+4, r22	; 0x04
    14aa:	7d 83       	std	Y+5, r23	; 0x05
	static u8 NVM_0= 0;
	static u16 NVM_1= 256;
	static u16 NVM_2= 512;
	static u16 NVM_3= 768;
	switch(copy_u8LCD_location){
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3f 83       	std	Y+7, r19	; 0x07
    14b4:	2e 83       	std	Y+6, r18	; 0x06
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	91 05       	cpc	r25, r1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <APP_voidUpdateLCD+0x34>
    14c0:	4e c0       	rjmp	.+156    	; 0x155e <APP_voidUpdateLCD+0xd0>
    14c2:	2e 81       	ldd	r18, Y+6	; 0x06
    14c4:	3f 81       	ldd	r19, Y+7	; 0x07
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <APP_voidUpdateLCD+0x48>
    14cc:	8e 81       	ldd	r24, Y+6	; 0x06
    14ce:	9f 81       	ldd	r25, Y+7	; 0x07
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	71 f0       	breq	.+28     	; 0x14f0 <APP_voidUpdateLCD+0x62>
    14d4:	f0 c0       	rjmp	.+480    	; 0x16b6 <APP_voidUpdateLCD+0x228>
    14d6:	2e 81       	ldd	r18, Y+6	; 0x06
    14d8:	3f 81       	ldd	r19, Y+7	; 0x07
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <APP_voidUpdateLCD+0x54>
    14e0:	78 c0       	rjmp	.+240    	; 0x15d2 <APP_voidUpdateLCD+0x144>
    14e2:	8e 81       	ldd	r24, Y+6	; 0x06
    14e4:	9f 81       	ldd	r25, Y+7	; 0x07
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <APP_voidUpdateLCD+0x60>
    14ec:	ac c0       	rjmp	.+344    	; 0x1646 <APP_voidUpdateLCD+0x1b8>
    14ee:	e3 c0       	rjmp	.+454    	; 0x16b6 <APP_voidUpdateLCD+0x228>
		case 0:
			LCD_set_cursor(LCD_LOC0);
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	63 e0       	ldi	r22, 0x03	; 3
    14f4:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_str((u8*)"     ");
    14f8:	86 e8       	ldi	r24, 0x86	; 134
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>
			LCD_set_cursor(LCD_LOC0);
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	63 e0       	ldi	r22, 0x03	; 3
    1504:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_float(copy_f64Variable, 2);
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	ac 81       	ldd	r26, Y+4	; 0x04
    150e:	bd 81       	ldd	r27, Y+5	; 0x05
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	42 e0       	ldi	r20, 0x02	; 2
    1516:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <LCD_write_float>
			if(copy_f64Variable > 150.0)
    151a:	6a 81       	ldd	r22, Y+2	; 0x02
    151c:	7b 81       	ldd	r23, Y+3	; 0x03
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	46 e1       	ldi	r20, 0x16	; 22
    1528:	53 e4       	ldi	r21, 0x43	; 67
    152a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	0c f0       	brlt	.+2      	; 0x1534 <APP_voidUpdateLCD+0xa6>
    1532:	c1 c0       	rjmp	.+386    	; 0x16b6 <APP_voidUpdateLCD+0x228>
				EEPROM_write_data(NVM_0++, cycle_counter);
    1534:	80 91 c2 01 	lds	r24, 0x01C2
    1538:	48 2f       	mov	r20, r24
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	80 93 c2 01 	sts	0x01C2, r24
    1542:	80 91 be 01 	lds	r24, 0x01BE
    1546:	90 91 bf 01 	lds	r25, 0x01BF
    154a:	a0 91 c0 01 	lds	r26, 0x01C0
    154e:	b0 91 c1 01 	lds	r27, 0x01C1
    1552:	28 2f       	mov	r18, r24
    1554:	ca 01       	movw	r24, r20
    1556:	62 2f       	mov	r22, r18
    1558:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <EEPROM_write_data>
    155c:	ac c0       	rjmp	.+344    	; 0x16b6 <APP_voidUpdateLCD+0x228>
			break;
		case 1:
			LCD_set_cursor(LCD_LOC1);
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	6b e0       	ldi	r22, 0x0B	; 11
    1562:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_str((u8*)"    ");
    1566:	8c e8       	ldi	r24, 0x8C	; 140
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>
			LCD_set_cursor(LCD_LOC1);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	6b e0       	ldi	r22, 0x0B	; 11
    1572:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_float(copy_f64Variable, 2);
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	ac 81       	ldd	r26, Y+4	; 0x04
    157c:	bd 81       	ldd	r27, Y+5	; 0x05
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	42 e0       	ldi	r20, 0x02	; 2
    1584:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <LCD_write_float>
			if(copy_f64Variable < 4.35)
    1588:	6a 81       	ldd	r22, Y+2	; 0x02
    158a:	7b 81       	ldd	r23, Y+3	; 0x03
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	9d 81       	ldd	r25, Y+5	; 0x05
    1590:	23 e3       	ldi	r18, 0x33	; 51
    1592:	33 e3       	ldi	r19, 0x33	; 51
    1594:	4b e8       	ldi	r20, 0x8B	; 139
    1596:	50 e4       	ldi	r21, 0x40	; 64
    1598:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	0c f0       	brlt	.+2      	; 0x15a2 <APP_voidUpdateLCD+0x114>
    15a0:	8a c0       	rjmp	.+276    	; 0x16b6 <APP_voidUpdateLCD+0x228>
				EEPROM_write_data(NVM_1++, cycle_counter);
    15a2:	80 91 9f 01 	lds	r24, 0x019F
    15a6:	90 91 a0 01 	lds	r25, 0x01A0
    15aa:	ac 01       	movw	r20, r24
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	90 93 a0 01 	sts	0x01A0, r25
    15b2:	80 93 9f 01 	sts	0x019F, r24
    15b6:	80 91 be 01 	lds	r24, 0x01BE
    15ba:	90 91 bf 01 	lds	r25, 0x01BF
    15be:	a0 91 c0 01 	lds	r26, 0x01C0
    15c2:	b0 91 c1 01 	lds	r27, 0x01C1
    15c6:	28 2f       	mov	r18, r24
    15c8:	ca 01       	movw	r24, r20
    15ca:	62 2f       	mov	r22, r18
    15cc:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <EEPROM_write_data>
    15d0:	72 c0       	rjmp	.+228    	; 0x16b6 <APP_voidUpdateLCD+0x228>
			break;
		case 2:
			LCD_set_cursor(LCD_LOC2);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	63 e0       	ldi	r22, 0x03	; 3
    15d6:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_str((u8*)"     ");
    15da:	86 e8       	ldi	r24, 0x86	; 134
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>
			LCD_set_cursor(LCD_LOC2);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	63 e0       	ldi	r22, 0x03	; 3
    15e6:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_float(copy_f64Variable, 2);
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	9b 81       	ldd	r25, Y+3	; 0x03
    15ee:	ac 81       	ldd	r26, Y+4	; 0x04
    15f0:	bd 81       	ldd	r27, Y+5	; 0x05
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	42 e0       	ldi	r20, 0x02	; 2
    15f8:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <LCD_write_float>
			if(copy_f64Variable > 750.0)
    15fc:	6a 81       	ldd	r22, Y+2	; 0x02
    15fe:	7b 81       	ldd	r23, Y+3	; 0x03
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e8       	ldi	r19, 0x80	; 128
    1608:	4b e3       	ldi	r20, 0x3B	; 59
    160a:	54 e4       	ldi	r21, 0x44	; 68
    160c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1610:	18 16       	cp	r1, r24
    1612:	0c f0       	brlt	.+2      	; 0x1616 <APP_voidUpdateLCD+0x188>
    1614:	50 c0       	rjmp	.+160    	; 0x16b6 <APP_voidUpdateLCD+0x228>
				EEPROM_write_data(NVM_2++, cycle_counter);
    1616:	80 91 9d 01 	lds	r24, 0x019D
    161a:	90 91 9e 01 	lds	r25, 0x019E
    161e:	ac 01       	movw	r20, r24
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	90 93 9e 01 	sts	0x019E, r25
    1626:	80 93 9d 01 	sts	0x019D, r24
    162a:	80 91 be 01 	lds	r24, 0x01BE
    162e:	90 91 bf 01 	lds	r25, 0x01BF
    1632:	a0 91 c0 01 	lds	r26, 0x01C0
    1636:	b0 91 c1 01 	lds	r27, 0x01C1
    163a:	28 2f       	mov	r18, r24
    163c:	ca 01       	movw	r24, r20
    163e:	62 2f       	mov	r22, r18
    1640:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <EEPROM_write_data>
    1644:	38 c0       	rjmp	.+112    	; 0x16b6 <APP_voidUpdateLCD+0x228>
			break;
		case 3:
			LCD_set_cursor(LCD_LOC3);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	6b e0       	ldi	r22, 0x0B	; 11
    164a:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_str((u8*)"     ");
    164e:	86 e8       	ldi	r24, 0x86	; 134
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 0f 2c 	call	0x581e	; 0x581e <LCD_write_str>
			LCD_set_cursor(LCD_LOC3);
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	6b e0       	ldi	r22, 0x0B	; 11
    165a:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <LCD_set_cursor>
			LCD_write_float(copy_f64Variable, 2);
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	9b 81       	ldd	r25, Y+3	; 0x03
    1662:	ac 81       	ldd	r26, Y+4	; 0x04
    1664:	bd 81       	ldd	r27, Y+5	; 0x05
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	42 e0       	ldi	r20, 0x02	; 2
    166c:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <LCD_write_float>
			if(copy_f64Variable > 40.0)
    1670:	6a 81       	ldd	r22, Y+2	; 0x02
    1672:	7b 81       	ldd	r23, Y+3	; 0x03
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	52 e4       	ldi	r21, 0x42	; 66
    1680:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	bc f4       	brge	.+46     	; 0x16b6 <APP_voidUpdateLCD+0x228>
				EEPROM_write_data(NVM_3++, cycle_counter);
    1688:	80 91 9b 01 	lds	r24, 0x019B
    168c:	90 91 9c 01 	lds	r25, 0x019C
    1690:	ac 01       	movw	r20, r24
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	90 93 9c 01 	sts	0x019C, r25
    1698:	80 93 9b 01 	sts	0x019B, r24
    169c:	80 91 be 01 	lds	r24, 0x01BE
    16a0:	90 91 bf 01 	lds	r25, 0x01BF
    16a4:	a0 91 c0 01 	lds	r26, 0x01C0
    16a8:	b0 91 c1 01 	lds	r27, 0x01C1
    16ac:	28 2f       	mov	r18, r24
    16ae:	ca 01       	movw	r24, r20
    16b0:	62 2f       	mov	r22, r18
    16b2:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <EEPROM_write_data>
			break;
		default:
			break;
	}
}
    16b6:	27 96       	adiw	r28, 0x07	; 7
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <LCD_pow>:
#include "../../MCAL/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	27 97       	sbiw	r28, 0x07	; 7
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	8e 83       	std	Y+6, r24	; 0x06
    16de:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
    16e0:	8e 81       	ldd	r24, Y+6	; 0x06
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    16ec:	9b 83       	std	Y+3, r25	; 0x03
    16ee:	ac 83       	std	Y+4, r26	; 0x04
    16f0:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    16f2:	19 82       	std	Y+1, r1	; 0x01
    16f4:	16 c0       	rjmp	.+44     	; 0x1722 <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
    16f6:	8e 81       	ldd	r24, Y+6	; 0x06
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	9b 81       	ldd	r25, Y+3	; 0x03
    1704:	ac 81       	ldd	r26, Y+4	; 0x04
    1706:	bd 81       	ldd	r27, Y+5	; 0x05
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 de 31 	call	0x63bc	; 0x63bc <__mulsi3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	8a 83       	std	Y+2, r24	; 0x02
    1716:	9b 83       	std	Y+3, r25	; 0x03
    1718:	ac 83       	std	Y+4, r26	; 0x04
    171a:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	8f 5f       	subi	r24, 0xFF	; 255
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8f 81       	ldd	r24, Y+7	; 0x07
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	28 17       	cp	r18, r24
    1732:	39 07       	cpc	r19, r25
    1734:	04 f3       	brlt	.-64     	; 0x16f6 <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	ac 81       	ldd	r26, Y+4	; 0x04
    173c:	bd 81       	ldd	r27, Y+5	; 0x05
}
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	27 96       	adiw	r28, 0x07	; 7
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	e1 97       	sbiw	r28, 0x31	; 49
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	62 e0       	ldi	r22, 0x02	; 2
    176e:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e8       	ldi	r26, 0x80	; 128
    1780:	bf e3       	ldi	r27, 0x3F	; 63
    1782:	8d a7       	std	Y+45, r24	; 0x2d
    1784:	9e a7       	std	Y+46, r25	; 0x2e
    1786:	af a7       	std	Y+47, r26	; 0x2f
    1788:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    178a:	6d a5       	ldd	r22, Y+45	; 0x2d
    178c:	7e a5       	ldd	r23, Y+46	; 0x2e
    178e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1790:	98 a9       	ldd	r25, Y+48	; 0x30
    1792:	2b ea       	ldi	r18, 0xAB	; 171
    1794:	3a ea       	ldi	r19, 0xAA	; 170
    1796:	4a e2       	ldi	r20, 0x2A	; 42
    1798:	50 e4       	ldi	r21, 0x40	; 64
    179a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	89 a7       	std	Y+41, r24	; 0x29
    17a4:	9a a7       	std	Y+42, r25	; 0x2a
    17a6:	ab a7       	std	Y+43, r26	; 0x2b
    17a8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    17aa:	69 a5       	ldd	r22, Y+41	; 0x29
    17ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    17ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17be:	88 23       	and	r24, r24
    17c0:	1c f4       	brge	.+6      	; 0x17c8 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	88 a7       	std	Y+40, r24	; 0x28
    17c6:	91 c0       	rjmp	.+290    	; 0x18ea <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    17c8:	69 a5       	ldd	r22, Y+41	; 0x29
    17ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    17cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	53 e4       	ldi	r21, 0x43	; 67
    17d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	0c f0       	brlt	.+2      	; 0x17e2 <LCD_write_data_8bit+0x8e>
    17e0:	7b c0       	rjmp	.+246    	; 0x18d8 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    17e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    17e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    17e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a e7       	ldi	r20, 0x7A	; 122
    17f0:	54 e4       	ldi	r21, 0x44	; 68
    17f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	8c a3       	std	Y+36, r24	; 0x24
    17fc:	9d a3       	std	Y+37, r25	; 0x25
    17fe:	ae a3       	std	Y+38, r26	; 0x26
    1800:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	6c a1       	ldd	r22, Y+36	; 0x24
    1804:	7d a1       	ldd	r23, Y+37	; 0x25
    1806:	8e a1       	ldd	r24, Y+38	; 0x26
    1808:	9f a1       	ldd	r25, Y+39	; 0x27
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a ef       	ldi	r20, 0xFA	; 250
    1810:	54 e4       	ldi	r21, 0x44	; 68
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	88 a3       	std	Y+32, r24	; 0x20
    181c:	99 a3       	std	Y+33, r25	; 0x21
    181e:	aa a3       	std	Y+34, r26	; 0x22
    1820:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1822:	68 a1       	ldd	r22, Y+32	; 0x20
    1824:	79 a1       	ldd	r23, Y+33	; 0x21
    1826:	8a a1       	ldd	r24, Y+34	; 0x22
    1828:	9b a1       	ldd	r25, Y+35	; 0x23
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9f 8f       	std	Y+31, r25	; 0x1f
    1840:	8e 8f       	std	Y+30, r24	; 0x1e
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    1844:	68 a1       	ldd	r22, Y+32	; 0x20
    1846:	79 a1       	ldd	r23, Y+33	; 0x21
    1848:	8a a1       	ldd	r24, Y+34	; 0x22
    184a:	9b a1       	ldd	r25, Y+35	; 0x23
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	6c a1       	ldd	r22, Y+36	; 0x24
    185e:	7d a1       	ldd	r23, Y+37	; 0x25
    1860:	8e a1       	ldd	r24, Y+38	; 0x26
    1862:	9f a1       	ldd	r25, Y+39	; 0x27
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9f 8f       	std	Y+31, r25	; 0x1f
    1882:	8e 8f       	std	Y+30, r24	; 0x1e
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <LCD_write_data_8bit+0x150>
    1886:	88 ec       	ldi	r24, 0xC8	; 200
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9d 8f       	std	Y+29, r25	; 0x1d
    188c:	8c 8f       	std	Y+28, r24	; 0x1c
    188e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1890:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_write_data_8bit+0x13e>
    1896:	9d 8f       	std	Y+29, r25	; 0x1d
    1898:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    189c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9f 8f       	std	Y+31, r25	; 0x1f
    18a2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <LCD_write_data_8bit+0x132>
    18ac:	24 c0       	rjmp	.+72     	; 0x18f6 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	68 a1       	ldd	r22, Y+32	; 0x20
    18b0:	79 a1       	ldd	r23, Y+33	; 0x21
    18b2:	8a a1       	ldd	r24, Y+34	; 0x22
    18b4:	9b a1       	ldd	r25, Y+35	; 0x23
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9f 8f       	std	Y+31, r25	; 0x1f
    18c0:	8e 8f       	std	Y+30, r24	; 0x1e
    18c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18c6:	9b 8f       	std	Y+27, r25	; 0x1b
    18c8:	8a 8f       	std	Y+26, r24	; 0x1a
    18ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_write_data_8bit+0x17a>
    18d2:	9b 8f       	std	Y+27, r25	; 0x1b
    18d4:	8a 8f       	std	Y+26, r24	; 0x1a
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18d8:	69 a5       	ldd	r22, Y+41	; 0x29
    18da:	7a a5       	ldd	r23, Y+42	; 0x2a
    18dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    18de:	9c a5       	ldd	r25, Y+44	; 0x2c
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	88 a7       	std	Y+40, r24	; 0x28
    18ea:	88 a5       	ldd	r24, Y+40	; 0x28
    18ec:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18ee:	89 8d       	ldd	r24, Y+25	; 0x19
    18f0:	8a 95       	dec	r24
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_write_data_8bit+0x19c>
    18f4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 e8       	ldi	r26, 0x80	; 128
    1904:	bf e3       	ldi	r27, 0x3F	; 63
    1906:	8d 8b       	std	Y+21, r24	; 0x15
    1908:	9e 8b       	std	Y+22, r25	; 0x16
    190a:	af 8b       	std	Y+23, r26	; 0x17
    190c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    190e:	6d 89       	ldd	r22, Y+21	; 0x15
    1910:	7e 89       	ldd	r23, Y+22	; 0x16
    1912:	8f 89       	ldd	r24, Y+23	; 0x17
    1914:	98 8d       	ldd	r25, Y+24	; 0x18
    1916:	2b ea       	ldi	r18, 0xAB	; 171
    1918:	3a ea       	ldi	r19, 0xAA	; 170
    191a:	4a e2       	ldi	r20, 0x2A	; 42
    191c:	50 e4       	ldi	r21, 0x40	; 64
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	89 8b       	std	Y+17, r24	; 0x11
    1928:	9a 8b       	std	Y+18, r25	; 0x12
    192a:	ab 8b       	std	Y+19, r26	; 0x13
    192c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    192e:	69 89       	ldd	r22, Y+17	; 0x11
    1930:	7a 89       	ldd	r23, Y+18	; 0x12
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	9c 89       	ldd	r25, Y+20	; 0x14
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	1c f4       	brge	.+6      	; 0x194c <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	88 8b       	std	Y+16, r24	; 0x10
    194a:	91 c0       	rjmp	.+290    	; 0x1a6e <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    194c:	69 89       	ldd	r22, Y+17	; 0x11
    194e:	7a 89       	ldd	r23, Y+18	; 0x12
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4f e7       	ldi	r20, 0x7F	; 127
    195a:	53 e4       	ldi	r21, 0x43	; 67
    195c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1960:	18 16       	cp	r1, r24
    1962:	0c f0       	brlt	.+2      	; 0x1966 <LCD_write_data_8bit+0x212>
    1964:	7b c0       	rjmp	.+246    	; 0x1a5c <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1966:	6d 89       	ldd	r22, Y+21	; 0x15
    1968:	7e 89       	ldd	r23, Y+22	; 0x16
    196a:	8f 89       	ldd	r24, Y+23	; 0x17
    196c:	98 8d       	ldd	r25, Y+24	; 0x18
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	4a e7       	ldi	r20, 0x7A	; 122
    1974:	54 e4       	ldi	r21, 0x44	; 68
    1976:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8c 87       	std	Y+12, r24	; 0x0c
    1980:	9d 87       	std	Y+13, r25	; 0x0d
    1982:	ae 87       	std	Y+14, r26	; 0x0e
    1984:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1986:	6c 85       	ldd	r22, Y+12	; 0x0c
    1988:	7d 85       	ldd	r23, Y+13	; 0x0d
    198a:	8e 85       	ldd	r24, Y+14	; 0x0e
    198c:	9f 85       	ldd	r25, Y+15	; 0x0f
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4a ef       	ldi	r20, 0xFA	; 250
    1994:	54 e4       	ldi	r21, 0x44	; 68
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	88 87       	std	Y+8, r24	; 0x08
    19a0:	99 87       	std	Y+9, r25	; 0x09
    19a2:	aa 87       	std	Y+10, r26	; 0x0a
    19a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19a6:	68 85       	ldd	r22, Y+8	; 0x08
    19a8:	79 85       	ldd	r23, Y+9	; 0x09
    19aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19ba:	88 23       	and	r24, r24
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	9f 83       	std	Y+7, r25	; 0x07
    19c4:	8e 83       	std	Y+6, r24	; 0x06
    19c6:	3f c0       	rjmp	.+126    	; 0x1a46 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    19c8:	68 85       	ldd	r22, Y+8	; 0x08
    19ca:	79 85       	ldd	r23, Y+9	; 0x09
    19cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	57 e4       	ldi	r21, 0x47	; 71
    19d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	4c f5       	brge	.+82     	; 0x1a32 <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    19e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    19e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    19e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	51 e4       	ldi	r21, 0x41	; 65
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	bc 01       	movw	r22, r24
    19fa:	cd 01       	movw	r24, r26
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9f 83       	std	Y+7, r25	; 0x07
    1a06:	8e 83       	std	Y+6, r24	; 0x06
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <LCD_write_data_8bit+0x2d4>
    1a0a:	88 ec       	ldi	r24, 0xC8	; 200
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9d 83       	std	Y+5, r25	; 0x05
    1a10:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	9d 81       	ldd	r25, Y+5	; 0x05
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <LCD_write_data_8bit+0x2c2>
    1a1a:	9d 83       	std	Y+5, r25	; 0x05
    1a1c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a20:	9f 81       	ldd	r25, Y+7	; 0x07
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	9f 83       	std	Y+7, r25	; 0x07
    1a26:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a28:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	69 f7       	brne	.-38     	; 0x1a0a <LCD_write_data_8bit+0x2b6>
    1a30:	24 c0       	rjmp	.+72     	; 0x1a7a <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a32:	68 85       	ldd	r22, Y+8	; 0x08
    1a34:	79 85       	ldd	r23, Y+9	; 0x09
    1a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9f 83       	std	Y+7, r25	; 0x07
    1a44:	8e 83       	std	Y+6, r24	; 0x06
    1a46:	8e 81       	ldd	r24, Y+6	; 0x06
    1a48:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4a:	9b 83       	std	Y+3, r25	; 0x03
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	9b 81       	ldd	r25, Y+3	; 0x03
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_write_data_8bit+0x2fe>
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	8a 83       	std	Y+2, r24	; 0x02
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a5c:	69 89       	ldd	r22, Y+17	; 0x11
    1a5e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	88 8b       	std	Y+16, r24	; 0x10
    1a6e:	88 89       	ldd	r24, Y+16	; 0x10
    1a70:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	8a 95       	dec	r24
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_write_data_8bit+0x320>
    1a78:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a7e:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
}
    1a8a:	e1 96       	adiw	r28, 0x31	; 49
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	e1 97       	sbiw	r28, 0x31	; 49
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8d a7       	std	Y+45, r24	; 0x2d
    1acc:	9e a7       	std	Y+46, r25	; 0x2e
    1ace:	af a7       	std	Y+47, r26	; 0x2f
    1ad0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ad2:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ad4:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ad6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad8:	98 a9       	ldd	r25, Y+48	; 0x30
    1ada:	2b ea       	ldi	r18, 0xAB	; 171
    1adc:	3a ea       	ldi	r19, 0xAA	; 170
    1ade:	4a e2       	ldi	r20, 0x2A	; 42
    1ae0:	50 e4       	ldi	r21, 0x40	; 64
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	89 a7       	std	Y+41, r24	; 0x29
    1aec:	9a a7       	std	Y+42, r25	; 0x2a
    1aee:	ab a7       	std	Y+43, r26	; 0x2b
    1af0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1af2:	69 a5       	ldd	r22, Y+41	; 0x29
    1af4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1af6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	1c f4       	brge	.+6      	; 0x1b10 <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	88 a7       	std	Y+40, r24	; 0x28
    1b0e:	91 c0       	rjmp	.+290    	; 0x1c32 <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    1b10:	69 a5       	ldd	r22, Y+41	; 0x29
    1b12:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	53 e4       	ldi	r21, 0x43	; 67
    1b20:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	0c f0       	brlt	.+2      	; 0x1b2a <LCD_write_cmd_8bit+0x8e>
    1b28:	7b c0       	rjmp	.+246    	; 0x1c20 <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    1b2a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b2c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b30:	98 a9       	ldd	r25, Y+48	; 0x30
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a e7       	ldi	r20, 0x7A	; 122
    1b38:	54 e4       	ldi	r21, 0x44	; 68
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8c a3       	std	Y+36, r24	; 0x24
    1b44:	9d a3       	std	Y+37, r25	; 0x25
    1b46:	ae a3       	std	Y+38, r26	; 0x26
    1b48:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4a:	6c a1       	ldd	r22, Y+36	; 0x24
    1b4c:	7d a1       	ldd	r23, Y+37	; 0x25
    1b4e:	8e a1       	ldd	r24, Y+38	; 0x26
    1b50:	9f a1       	ldd	r25, Y+39	; 0x27
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a ef       	ldi	r20, 0xFA	; 250
    1b58:	54 e4       	ldi	r21, 0x44	; 68
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	88 a3       	std	Y+32, r24	; 0x20
    1b64:	99 a3       	std	Y+33, r25	; 0x21
    1b66:	aa a3       	std	Y+34, r26	; 0x22
    1b68:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b6a:	68 a1       	ldd	r22, Y+32	; 0x20
    1b6c:	79 a1       	ldd	r23, Y+33	; 0x21
    1b6e:	8a a1       	ldd	r24, Y+34	; 0x22
    1b70:	9b a1       	ldd	r25, Y+35	; 0x23
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b7e:	88 23       	and	r24, r24
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9f 8f       	std	Y+31, r25	; 0x1f
    1b88:	8e 8f       	std	Y+30, r24	; 0x1e
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    1b8c:	68 a1       	ldd	r22, Y+32	; 0x20
    1b8e:	79 a1       	ldd	r23, Y+33	; 0x21
    1b90:	8a a1       	ldd	r24, Y+34	; 0x22
    1b92:	9b a1       	ldd	r25, Y+35	; 0x23
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	4c f5       	brge	.+82     	; 0x1bf6 <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	6c a1       	ldd	r22, Y+36	; 0x24
    1ba6:	7d a1       	ldd	r23, Y+37	; 0x25
    1ba8:	8e a1       	ldd	r24, Y+38	; 0x26
    1baa:	9f a1       	ldd	r25, Y+39	; 0x27
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9f 8f       	std	Y+31, r25	; 0x1f
    1bca:	8e 8f       	std	Y+30, r24	; 0x1e
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <LCD_write_cmd_8bit+0x150>
    1bce:	88 ec       	ldi	r24, 0xC8	; 200
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9d 8f       	std	Y+29, r25	; 0x1d
    1bd4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bd8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_write_cmd_8bit+0x13e>
    1bde:	9d 8f       	std	Y+29, r25	; 0x1d
    1be0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9f 8f       	std	Y+31, r25	; 0x1f
    1bea:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <LCD_write_cmd_8bit+0x132>
    1bf4:	24 c0       	rjmp	.+72     	; 0x1c3e <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	68 a1       	ldd	r22, Y+32	; 0x20
    1bf8:	79 a1       	ldd	r23, Y+33	; 0x21
    1bfa:	8a a1       	ldd	r24, Y+34	; 0x22
    1bfc:	9b a1       	ldd	r25, Y+35	; 0x23
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9f 8f       	std	Y+31, r25	; 0x1f
    1c08:	8e 8f       	std	Y+30, r24	; 0x1e
    1c0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c0e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c10:	8a 8f       	std	Y+26, r24	; 0x1a
    1c12:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c14:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_write_cmd_8bit+0x17a>
    1c1a:	9b 8f       	std	Y+27, r25	; 0x1b
    1c1c:	8a 8f       	std	Y+26, r24	; 0x1a
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c20:	69 a5       	ldd	r22, Y+41	; 0x29
    1c22:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	88 a7       	std	Y+40, r24	; 0x28
    1c32:	88 a5       	ldd	r24, Y+40	; 0x28
    1c34:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c36:	89 8d       	ldd	r24, Y+25	; 0x19
    1c38:	8a 95       	dec	r24
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_write_cmd_8bit+0x19c>
    1c3c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	a0 e8       	ldi	r26, 0x80	; 128
    1c4c:	bf e3       	ldi	r27, 0x3F	; 63
    1c4e:	8d 8b       	std	Y+21, r24	; 0x15
    1c50:	9e 8b       	std	Y+22, r25	; 0x16
    1c52:	af 8b       	std	Y+23, r26	; 0x17
    1c54:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c56:	6d 89       	ldd	r22, Y+21	; 0x15
    1c58:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5e:	2b ea       	ldi	r18, 0xAB	; 171
    1c60:	3a ea       	ldi	r19, 0xAA	; 170
    1c62:	4a e2       	ldi	r20, 0x2A	; 42
    1c64:	50 e4       	ldi	r21, 0x40	; 64
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	89 8b       	std	Y+17, r24	; 0x11
    1c70:	9a 8b       	std	Y+18, r25	; 0x12
    1c72:	ab 8b       	std	Y+19, r26	; 0x13
    1c74:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c76:	69 89       	ldd	r22, Y+17	; 0x11
    1c78:	7a 89       	ldd	r23, Y+18	; 0x12
    1c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	1c f4       	brge	.+6      	; 0x1c94 <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	88 8b       	std	Y+16, r24	; 0x10
    1c92:	91 c0       	rjmp	.+290    	; 0x1db6 <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    1c94:	69 89       	ldd	r22, Y+17	; 0x11
    1c96:	7a 89       	ldd	r23, Y+18	; 0x12
    1c98:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	53 e4       	ldi	r21, 0x43	; 67
    1ca4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	0c f0       	brlt	.+2      	; 0x1cae <LCD_write_cmd_8bit+0x212>
    1cac:	7b c0       	rjmp	.+246    	; 0x1da4 <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1cae:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a e7       	ldi	r20, 0x7A	; 122
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8c 87       	std	Y+12, r24	; 0x0c
    1cc8:	9d 87       	std	Y+13, r25	; 0x0d
    1cca:	ae 87       	std	Y+14, r26	; 0x0e
    1ccc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cd0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	88 87       	std	Y+8, r24	; 0x08
    1ce8:	99 87       	std	Y+9, r25	; 0x09
    1cea:	aa 87       	std	Y+10, r26	; 0x0a
    1cec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1cee:	68 85       	ldd	r22, Y+8	; 0x08
    1cf0:	79 85       	ldd	r23, Y+9	; 0x09
    1cf2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cf4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9f 83       	std	Y+7, r25	; 0x07
    1d0c:	8e 83       	std	Y+6, r24	; 0x06
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    1d10:	68 85       	ldd	r22, Y+8	; 0x08
    1d12:	79 85       	ldd	r23, Y+9	; 0x09
    1d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9f 83       	std	Y+7, r25	; 0x07
    1d4e:	8e 83       	std	Y+6, r24	; 0x06
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <LCD_write_cmd_8bit+0x2d4>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9d 83       	std	Y+5, r25	; 0x05
    1d58:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_write_cmd_8bit+0x2c2>
    1d62:	9d 83       	std	Y+5, r25	; 0x05
    1d64:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	8e 81       	ldd	r24, Y+6	; 0x06
    1d68:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9f 83       	std	Y+7, r25	; 0x07
    1d6e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	8e 81       	ldd	r24, Y+6	; 0x06
    1d72:	9f 81       	ldd	r25, Y+7	; 0x07
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <LCD_write_cmd_8bit+0x2b6>
    1d78:	24 c0       	rjmp	.+72     	; 0x1dc2 <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	68 85       	ldd	r22, Y+8	; 0x08
    1d7c:	79 85       	ldd	r23, Y+9	; 0x09
    1d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9f 83       	std	Y+7, r25	; 0x07
    1d8c:	8e 83       	std	Y+6, r24	; 0x06
    1d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d90:	9f 81       	ldd	r25, Y+7	; 0x07
    1d92:	9b 83       	std	Y+3, r25	; 0x03
    1d94:	8a 83       	std	Y+2, r24	; 0x02
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_write_cmd_8bit+0x2fe>
    1d9e:	9b 83       	std	Y+3, r25	; 0x03
    1da0:	8a 83       	std	Y+2, r24	; 0x02
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da4:	69 89       	ldd	r22, Y+17	; 0x11
    1da6:	7a 89       	ldd	r23, Y+18	; 0x12
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	88 8b       	std	Y+16, r24	; 0x10
    1db6:	88 89       	ldd	r24, Y+16	; 0x10
    1db8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	8a 95       	dec	r24
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_write_cmd_8bit+0x320>
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc6:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
}
    1dd2:	e1 96       	adiw	r28, 0x31	; 49
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	ef 97       	sbiw	r28, 0x3f	; 63
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <DIO_void_set_port_dir>
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a8 e4       	ldi	r26, 0x48	; 72
    1e06:	b2 e4       	ldi	r27, 0x42	; 66
    1e08:	8b af       	std	Y+59, r24	; 0x3b
    1e0a:	9c af       	std	Y+60, r25	; 0x3c
    1e0c:	ad af       	std	Y+61, r26	; 0x3d
    1e0e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e12:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a ef       	ldi	r20, 0xFA	; 250
    1e1e:	54 e4       	ldi	r21, 0x44	; 68
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8f ab       	std	Y+55, r24	; 0x37
    1e2a:	98 af       	std	Y+56, r25	; 0x38
    1e2c:	a9 af       	std	Y+57, r26	; 0x39
    1e2e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e30:	6f a9       	ldd	r22, Y+55	; 0x37
    1e32:	78 ad       	ldd	r23, Y+56	; 0x38
    1e34:	89 ad       	ldd	r24, Y+57	; 0x39
    1e36:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9e ab       	std	Y+54, r25	; 0x36
    1e4e:	8d ab       	std	Y+53, r24	; 0x35
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    1e52:	6f a9       	ldd	r22, Y+55	; 0x37
    1e54:	78 ad       	ldd	r23, Y+56	; 0x38
    1e56:	89 ad       	ldd	r24, Y+57	; 0x39
    1e58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e6c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e ab       	std	Y+54, r25	; 0x36
    1e90:	8d ab       	std	Y+53, r24	; 0x35
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_read_address_8bit+0xce>
    1e94:	88 ec       	ldi	r24, 0xC8	; 200
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c ab       	std	Y+52, r25	; 0x34
    1e9a:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_read_address_8bit+0xbc>
    1ea4:	9c ab       	std	Y+52, r25	; 0x34
    1ea6:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	8d a9       	ldd	r24, Y+53	; 0x35
    1eaa:	9e a9       	ldd	r25, Y+54	; 0x36
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9e ab       	std	Y+54, r25	; 0x36
    1eb0:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	8d a9       	ldd	r24, Y+53	; 0x35
    1eb4:	9e a9       	ldd	r25, Y+54	; 0x36
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_read_address_8bit+0xb0>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	6f a9       	ldd	r22, Y+55	; 0x37
    1ebe:	78 ad       	ldd	r23, Y+56	; 0x38
    1ec0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ec2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9e ab       	std	Y+54, r25	; 0x36
    1ece:	8d ab       	std	Y+53, r24	; 0x35
    1ed0:	8d a9       	ldd	r24, Y+53	; 0x35
    1ed2:	9e a9       	ldd	r25, Y+54	; 0x36
    1ed4:	9a ab       	std	Y+50, r25	; 0x32
    1ed6:	89 ab       	std	Y+49, r24	; 0x31
    1ed8:	89 a9       	ldd	r24, Y+49	; 0x31
    1eda:	9a a9       	ldd	r25, Y+50	; 0x32
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_read_address_8bit+0xf8>
    1ee0:	9a ab       	std	Y+50, r25	; 0x32
    1ee2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e8       	ldi	r26, 0x80	; 128
    1efa:	bf e3       	ldi	r27, 0x3F	; 63
    1efc:	8d a7       	std	Y+45, r24	; 0x2d
    1efe:	9e a7       	std	Y+46, r25	; 0x2e
    1f00:	af a7       	std	Y+47, r26	; 0x2f
    1f02:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f04:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f06:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	2b ea       	ldi	r18, 0xAB	; 171
    1f0e:	3a ea       	ldi	r19, 0xAA	; 170
    1f10:	4a e2       	ldi	r20, 0x2A	; 42
    1f12:	50 e4       	ldi	r21, 0x40	; 64
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	89 a7       	std	Y+41, r24	; 0x29
    1f1e:	9a a7       	std	Y+42, r25	; 0x2a
    1f20:	ab a7       	std	Y+43, r26	; 0x2b
    1f22:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f24:	69 a5       	ldd	r22, Y+41	; 0x29
    1f26:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	5f e3       	ldi	r21, 0x3F	; 63
    1f34:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	1c f4       	brge	.+6      	; 0x1f42 <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	88 a7       	std	Y+40, r24	; 0x28
    1f40:	91 c0       	rjmp	.+290    	; 0x2064 <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    1f42:	69 a5       	ldd	r22, Y+41	; 0x29
    1f44:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f46:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f48:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	53 e4       	ldi	r21, 0x43	; 67
    1f52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	0c f0       	brlt	.+2      	; 0x1f5c <LCD_read_address_8bit+0x178>
    1f5a:	7b c0       	rjmp	.+246    	; 0x2052 <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    1f5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8c a3       	std	Y+36, r24	; 0x24
    1f76:	9d a3       	std	Y+37, r25	; 0x25
    1f78:	ae a3       	std	Y+38, r26	; 0x26
    1f7a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	6c a1       	ldd	r22, Y+36	; 0x24
    1f7e:	7d a1       	ldd	r23, Y+37	; 0x25
    1f80:	8e a1       	ldd	r24, Y+38	; 0x26
    1f82:	9f a1       	ldd	r25, Y+39	; 0x27
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a ef       	ldi	r20, 0xFA	; 250
    1f8a:	54 e4       	ldi	r21, 0x44	; 68
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	88 a3       	std	Y+32, r24	; 0x20
    1f96:	99 a3       	std	Y+33, r25	; 0x21
    1f98:	aa a3       	std	Y+34, r26	; 0x22
    1f9a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f9c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f9e:	79 a1       	ldd	r23, Y+33	; 0x21
    1fa0:	8a a1       	ldd	r24, Y+34	; 0x22
    1fa2:	9b a1       	ldd	r25, Y+35	; 0x23
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9f 8f       	std	Y+31, r25	; 0x1f
    1fba:	8e 8f       	std	Y+30, r24	; 0x1e
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    1fbe:	68 a1       	ldd	r22, Y+32	; 0x20
    1fc0:	79 a1       	ldd	r23, Y+33	; 0x21
    1fc2:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc4:	9b a1       	ldd	r25, Y+35	; 0x23
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	6c a1       	ldd	r22, Y+36	; 0x24
    1fd8:	7d a1       	ldd	r23, Y+37	; 0x25
    1fda:	8e a1       	ldd	r24, Y+38	; 0x26
    1fdc:	9f a1       	ldd	r25, Y+39	; 0x27
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9f 8f       	std	Y+31, r25	; 0x1f
    1ffc:	8e 8f       	std	Y+30, r24	; 0x1e
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <LCD_read_address_8bit+0x23a>
    2000:	88 ec       	ldi	r24, 0xC8	; 200
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9d 8f       	std	Y+29, r25	; 0x1d
    2006:	8c 8f       	std	Y+28, r24	; 0x1c
    2008:	8c 8d       	ldd	r24, Y+28	; 0x1c
    200a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_read_address_8bit+0x228>
    2010:	9d 8f       	std	Y+29, r25	; 0x1d
    2012:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2016:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9f 8f       	std	Y+31, r25	; 0x1f
    201c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2020:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <LCD_read_address_8bit+0x21c>
    2026:	24 c0       	rjmp	.+72     	; 0x2070 <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	68 a1       	ldd	r22, Y+32	; 0x20
    202a:	79 a1       	ldd	r23, Y+33	; 0x21
    202c:	8a a1       	ldd	r24, Y+34	; 0x22
    202e:	9b a1       	ldd	r25, Y+35	; 0x23
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9f 8f       	std	Y+31, r25	; 0x1f
    203a:	8e 8f       	std	Y+30, r24	; 0x1e
    203c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    203e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2040:	9b 8f       	std	Y+27, r25	; 0x1b
    2042:	8a 8f       	std	Y+26, r24	; 0x1a
    2044:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2046:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_read_address_8bit+0x264>
    204c:	9b 8f       	std	Y+27, r25	; 0x1b
    204e:	8a 8f       	std	Y+26, r24	; 0x1a
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2052:	69 a5       	ldd	r22, Y+41	; 0x29
    2054:	7a a5       	ldd	r23, Y+42	; 0x2a
    2056:	8b a5       	ldd	r24, Y+43	; 0x2b
    2058:	9c a5       	ldd	r25, Y+44	; 0x2c
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	88 a7       	std	Y+40, r24	; 0x28
    2064:	88 a5       	ldd	r24, Y+40	; 0x28
    2066:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2068:	89 8d       	ldd	r24, Y+25	; 0x19
    206a:	8a 95       	dec	r24
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_read_address_8bit+0x286>
    206e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a0 e8       	ldi	r26, 0x80	; 128
    207e:	bf e3       	ldi	r27, 0x3F	; 63
    2080:	8d 8b       	std	Y+21, r24	; 0x15
    2082:	9e 8b       	std	Y+22, r25	; 0x16
    2084:	af 8b       	std	Y+23, r26	; 0x17
    2086:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	2b ea       	ldi	r18, 0xAB	; 171
    2092:	3a ea       	ldi	r19, 0xAA	; 170
    2094:	4a e2       	ldi	r20, 0x2A	; 42
    2096:	50 e4       	ldi	r21, 0x40	; 64
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	89 8b       	std	Y+17, r24	; 0x11
    20a2:	9a 8b       	std	Y+18, r25	; 0x12
    20a4:	ab 8b       	std	Y+19, r26	; 0x13
    20a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20a8:	69 89       	ldd	r22, Y+17	; 0x11
    20aa:	7a 89       	ldd	r23, Y+18	; 0x12
    20ac:	8b 89       	ldd	r24, Y+19	; 0x13
    20ae:	9c 89       	ldd	r25, Y+20	; 0x14
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	1c f4       	brge	.+6      	; 0x20c6 <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	88 8b       	std	Y+16, r24	; 0x10
    20c4:	91 c0       	rjmp	.+290    	; 0x21e8 <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    20c6:	69 89       	ldd	r22, Y+17	; 0x11
    20c8:	7a 89       	ldd	r23, Y+18	; 0x12
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	53 e4       	ldi	r21, 0x43	; 67
    20d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	0c f0       	brlt	.+2      	; 0x20e0 <LCD_read_address_8bit+0x2fc>
    20de:	7b c0       	rjmp	.+246    	; 0x21d6 <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    20e0:	6d 89       	ldd	r22, Y+21	; 0x15
    20e2:	7e 89       	ldd	r23, Y+22	; 0x16
    20e4:	8f 89       	ldd	r24, Y+23	; 0x17
    20e6:	98 8d       	ldd	r25, Y+24	; 0x18
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a e7       	ldi	r20, 0x7A	; 122
    20ee:	54 e4       	ldi	r21, 0x44	; 68
    20f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8c 87       	std	Y+12, r24	; 0x0c
    20fa:	9d 87       	std	Y+13, r25	; 0x0d
    20fc:	ae 87       	std	Y+14, r26	; 0x0e
    20fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2100:	6c 85       	ldd	r22, Y+12	; 0x0c
    2102:	7d 85       	ldd	r23, Y+13	; 0x0d
    2104:	8e 85       	ldd	r24, Y+14	; 0x0e
    2106:	9f 85       	ldd	r25, Y+15	; 0x0f
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a ef       	ldi	r20, 0xFA	; 250
    210e:	54 e4       	ldi	r21, 0x44	; 68
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	88 87       	std	Y+8, r24	; 0x08
    211a:	99 87       	std	Y+9, r25	; 0x09
    211c:	aa 87       	std	Y+10, r26	; 0x0a
    211e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2120:	68 85       	ldd	r22, Y+8	; 0x08
    2122:	79 85       	ldd	r23, Y+9	; 0x09
    2124:	8a 85       	ldd	r24, Y+10	; 0x0a
    2126:	9b 85       	ldd	r25, Y+11	; 0x0b
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e8       	ldi	r20, 0x80	; 128
    212e:	5f e3       	ldi	r21, 0x3F	; 63
    2130:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2134:	88 23       	and	r24, r24
    2136:	2c f4       	brge	.+10     	; 0x2142 <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9f 83       	std	Y+7, r25	; 0x07
    213e:	8e 83       	std	Y+6, r24	; 0x06
    2140:	3f c0       	rjmp	.+126    	; 0x21c0 <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    2142:	68 85       	ldd	r22, Y+8	; 0x08
    2144:	79 85       	ldd	r23, Y+9	; 0x09
    2146:	8a 85       	ldd	r24, Y+10	; 0x0a
    2148:	9b 85       	ldd	r25, Y+11	; 0x0b
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	4c f5       	brge	.+82     	; 0x21ac <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215a:	6c 85       	ldd	r22, Y+12	; 0x0c
    215c:	7d 85       	ldd	r23, Y+13	; 0x0d
    215e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2160:	9f 85       	ldd	r25, Y+15	; 0x0f
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9f 83       	std	Y+7, r25	; 0x07
    2180:	8e 83       	std	Y+6, r24	; 0x06
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <LCD_read_address_8bit+0x3be>
    2184:	88 ec       	ldi	r24, 0xC8	; 200
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9d 83       	std	Y+5, r25	; 0x05
    218a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
    218e:	9d 81       	ldd	r25, Y+5	; 0x05
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_read_address_8bit+0x3ac>
    2194:	9d 83       	std	Y+5, r25	; 0x05
    2196:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8e 81       	ldd	r24, Y+6	; 0x06
    219a:	9f 81       	ldd	r25, Y+7	; 0x07
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9f 83       	std	Y+7, r25	; 0x07
    21a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8e 81       	ldd	r24, Y+6	; 0x06
    21a4:	9f 81       	ldd	r25, Y+7	; 0x07
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	69 f7       	brne	.-38     	; 0x2184 <LCD_read_address_8bit+0x3a0>
    21aa:	24 c0       	rjmp	.+72     	; 0x21f4 <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	68 85       	ldd	r22, Y+8	; 0x08
    21ae:	79 85       	ldd	r23, Y+9	; 0x09
    21b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9f 83       	std	Y+7, r25	; 0x07
    21be:	8e 83       	std	Y+6, r24	; 0x06
    21c0:	8e 81       	ldd	r24, Y+6	; 0x06
    21c2:	9f 81       	ldd	r25, Y+7	; 0x07
    21c4:	9b 83       	std	Y+3, r25	; 0x03
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <LCD_read_address_8bit+0x3e8>
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	8a 83       	std	Y+2, r24	; 0x02
    21d4:	0f c0       	rjmp	.+30     	; 0x21f4 <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21d6:	69 89       	ldd	r22, Y+17	; 0x11
    21d8:	7a 89       	ldd	r23, Y+18	; 0x12
    21da:	8b 89       	ldd	r24, Y+19	; 0x13
    21dc:	9c 89       	ldd	r25, Y+20	; 0x14
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	88 8b       	std	Y+16, r24	; 0x10
    21e8:	88 89       	ldd	r24, Y+16	; 0x10
    21ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	8a 95       	dec	r24
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_read_address_8bit+0x40a>
    21f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <DIO_u8_get_port>
    21fa:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    2204:	8f ad       	ldd	r24, Y+63	; 0x3f
    2206:	8f 77       	andi	r24, 0x7F	; 127
    2208:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	6f ef       	ldi	r22, 0xFF	; 255
    220e:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <DIO_void_set_port_dir>
	return address;
    2212:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    2214:	ef 96       	adiw	r28, 0x3f	; 63
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	c3 56       	subi	r28, 0x63	; 99
    2234:	d0 40       	sbci	r29, 0x00	; 0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	fe 01       	movw	r30, r28
    2242:	ed 59       	subi	r30, 0x9D	; 157
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	62 e0       	ldi	r22, 0x02	; 2
    224c:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    2258:	fe 01       	movw	r30, r28
    225a:	e3 5a       	subi	r30, 0xA3	; 163
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e8       	ldi	r26, 0x80	; 128
    2264:	bf e3       	ldi	r27, 0x3F	; 63
    2266:	80 83       	st	Z, r24
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	a2 83       	std	Z+2, r26	; 0x02
    226c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    226e:	8e 01       	movw	r16, r28
    2270:	07 5a       	subi	r16, 0xA7	; 167
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	fe 01       	movw	r30, r28
    2276:	e3 5a       	subi	r30, 0xA3	; 163
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	2b ea       	ldi	r18, 0xAB	; 171
    2284:	3a ea       	ldi	r19, 0xAA	; 170
    2286:	4a e2       	ldi	r20, 0x2A	; 42
    2288:	50 e4       	ldi	r21, 0x40	; 64
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	f8 01       	movw	r30, r16
    2294:	80 83       	st	Z, r24
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	a2 83       	std	Z+2, r26	; 0x02
    229a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    229c:	fe 01       	movw	r30, r28
    229e:	e7 5a       	subi	r30, 0xA7	; 167
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	34 f4       	brge	.+12     	; 0x22c6 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    22ba:	fe 01       	movw	r30, r28
    22bc:	e8 5a       	subi	r30, 0xA8	; 168
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	80 83       	st	Z, r24
    22c4:	e0 c0       	rjmp	.+448    	; 0x2486 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    22c6:	fe 01       	movw	r30, r28
    22c8:	e7 5a       	subi	r30, 0xA7	; 167
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	0c f0       	brlt	.+2      	; 0x22e6 <LCD_write_data_4bit+0xc0>
    22e4:	c0 c0       	rjmp	.+384    	; 0x2466 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    22e6:	fe 01       	movw	r30, r28
    22e8:	e3 5a       	subi	r30, 0xA3	; 163
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a e7       	ldi	r20, 0x7A	; 122
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	fe 01       	movw	r30, r28
    2306:	ec 5a       	subi	r30, 0xAC	; 172
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 83       	st	Z, r24
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	a2 83       	std	Z+2, r26	; 0x02
    2310:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	8e 01       	movw	r16, r28
    2314:	00 5b       	subi	r16, 0xB0	; 176
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	ec 5a       	subi	r30, 0xAC	; 172
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a ef       	ldi	r20, 0xFA	; 250
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	f8 01       	movw	r30, r16
    2338:	80 83       	st	Z, r24
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	a2 83       	std	Z+2, r26	; 0x02
    233e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2340:	fe 01       	movw	r30, r28
    2342:	e0 5b       	subi	r30, 0xB0	; 176
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	44 f4       	brge	.+16     	; 0x236e <LCD_write_data_4bit+0x148>
		__ticks = 1;
    235e:	fe 01       	movw	r30, r28
    2360:	e2 5b       	subi	r30, 0xB2	; 178
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
    236c:	64 c0       	rjmp	.+200    	; 0x2436 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    236e:	fe 01       	movw	r30, r28
    2370:	e0 5b       	subi	r30, 0xB0	; 176
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	0c f0       	brlt	.+2      	; 0x238e <LCD_write_data_4bit+0x168>
    238c:	43 c0       	rjmp	.+134    	; 0x2414 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	fe 01       	movw	r30, r28
    2390:	ec 5a       	subi	r30, 0xAC	; 172
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8e 01       	movw	r16, r28
    23ae:	02 5b       	subi	r16, 0xB2	; 178
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	1f c0       	rjmp	.+62     	; 0x2404 <LCD_write_data_4bit+0x1de>
    23c6:	fe 01       	movw	r30, r28
    23c8:	e4 5b       	subi	r30, 0xB4	; 180
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	88 ec       	ldi	r24, 0xC8	; 200
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d4:	fe 01       	movw	r30, r28
    23d6:	e4 5b       	subi	r30, 0xB4	; 180
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <LCD_write_data_4bit+0x1b8>
    23e2:	fe 01       	movw	r30, r28
    23e4:	e4 5b       	subi	r30, 0xB4	; 180
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	de 01       	movw	r26, r28
    23ee:	a2 5b       	subi	r26, 0xB2	; 178
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e2 5b       	subi	r30, 0xB2	; 178
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	9c 93       	st	X, r25
    2402:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	fe 01       	movw	r30, r28
    2406:	e2 5b       	subi	r30, 0xB2	; 178
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	d1 f6       	brne	.-76     	; 0x23c6 <LCD_write_data_4bit+0x1a0>
    2412:	4b c0       	rjmp	.+150    	; 0x24aa <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2414:	8e 01       	movw	r16, r28
    2416:	02 5b       	subi	r16, 0xB2	; 178
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
    241a:	fe 01       	movw	r30, r28
    241c:	e0 5b       	subi	r30, 0xB0	; 176
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	60 81       	ld	r22, Z
    2422:	71 81       	ldd	r23, Z+1	; 0x01
    2424:	82 81       	ldd	r24, Z+2	; 0x02
    2426:	93 81       	ldd	r25, Z+3	; 0x03
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	de 01       	movw	r26, r28
    2438:	a6 5b       	subi	r26, 0xB6	; 182
    243a:	bf 4f       	sbci	r27, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	e2 5b       	subi	r30, 0xB2	; 178
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	11 96       	adiw	r26, 0x01	; 1
    2448:	9c 93       	st	X, r25
    244a:	8e 93       	st	-X, r24
    244c:	fe 01       	movw	r30, r28
    244e:	e6 5b       	subi	r30, 0xB6	; 182
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_write_data_4bit+0x230>
    245a:	fe 01       	movw	r30, r28
    245c:	e6 5b       	subi	r30, 0xB6	; 182
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
    2464:	22 c0       	rjmp	.+68     	; 0x24aa <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2466:	8e 01       	movw	r16, r28
    2468:	08 5a       	subi	r16, 0xA8	; 168
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	fe 01       	movw	r30, r28
    246e:	e7 5a       	subi	r30, 0xA7	; 167
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	f8 01       	movw	r30, r16
    2484:	80 83       	st	Z, r24
    2486:	de 01       	movw	r26, r28
    2488:	a7 5b       	subi	r26, 0xB7	; 183
    248a:	bf 4f       	sbci	r27, 0xFF	; 255
    248c:	fe 01       	movw	r30, r28
    248e:	e8 5a       	subi	r30, 0xA8	; 168
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2496:	fe 01       	movw	r30, r28
    2498:	e7 5b       	subi	r30, 0xB7	; 183
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	8a 95       	dec	r24
    24a0:	f1 f7       	brne	.-4      	; 0x249e <LCD_write_data_4bit+0x278>
    24a2:	fe 01       	movw	r30, r28
    24a4:	e7 5b       	subi	r30, 0xB7	; 183
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    24b2:	fe 01       	movw	r30, r28
    24b4:	eb 5b       	subi	r30, 0xBB	; 187
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 e8       	ldi	r26, 0x80	; 128
    24be:	bf e3       	ldi	r27, 0x3F	; 63
    24c0:	80 83       	st	Z, r24
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	a2 83       	std	Z+2, r26	; 0x02
    24c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24c8:	8e 01       	movw	r16, r28
    24ca:	0f 5b       	subi	r16, 0xBF	; 191
    24cc:	1f 4f       	sbci	r17, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	eb 5b       	subi	r30, 0xBB	; 187
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	2b ea       	ldi	r18, 0xAB	; 171
    24de:	3a ea       	ldi	r19, 0xAA	; 170
    24e0:	4a e2       	ldi	r20, 0x2A	; 42
    24e2:	50 e4       	ldi	r21, 0x40	; 64
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	f8 01       	movw	r30, r16
    24ee:	80 83       	st	Z, r24
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	a2 83       	std	Z+2, r26	; 0x02
    24f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f6:	fe 01       	movw	r30, r28
    24f8:	ef 5b       	subi	r30, 0xBF	; 191
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	34 f4       	brge	.+12     	; 0x2520 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	fe 01       	movw	r30, r28
    2518:	e0 5c       	subi	r30, 0xC0	; 192
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 83       	st	Z, r24
    251e:	9d c0       	rjmp	.+314    	; 0x265a <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    2520:	fe 01       	movw	r30, r28
    2522:	ef 5b       	subi	r30, 0xBF	; 191
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	53 e4       	ldi	r21, 0x43	; 67
    2536:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	0c f0       	brlt	.+2      	; 0x2540 <LCD_write_data_4bit+0x31a>
    253e:	7e c0       	rjmp	.+252    	; 0x263c <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    2540:	fe 01       	movw	r30, r28
    2542:	eb 5b       	subi	r30, 0xBB	; 187
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a e7       	ldi	r20, 0x7A	; 122
    2554:	54 e4       	ldi	r21, 0x44	; 68
    2556:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8c af       	std	Y+60, r24	; 0x3c
    2560:	9d af       	std	Y+61, r25	; 0x3d
    2562:	ae af       	std	Y+62, r26	; 0x3e
    2564:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2566:	6c ad       	ldd	r22, Y+60	; 0x3c
    2568:	7d ad       	ldd	r23, Y+61	; 0x3d
    256a:	8e ad       	ldd	r24, Y+62	; 0x3e
    256c:	9f ad       	ldd	r25, Y+63	; 0x3f
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a ef       	ldi	r20, 0xFA	; 250
    2574:	54 e4       	ldi	r21, 0x44	; 68
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	88 af       	std	Y+56, r24	; 0x38
    2580:	99 af       	std	Y+57, r25	; 0x39
    2582:	aa af       	std	Y+58, r26	; 0x3a
    2584:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2586:	68 ad       	ldd	r22, Y+56	; 0x38
    2588:	79 ad       	ldd	r23, Y+57	; 0x39
    258a:	8a ad       	ldd	r24, Y+58	; 0x3a
    258c:	9b ad       	ldd	r25, Y+59	; 0x3b
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e8       	ldi	r20, 0x80	; 128
    2594:	5f e3       	ldi	r21, 0x3F	; 63
    2596:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    259a:	88 23       	and	r24, r24
    259c:	2c f4       	brge	.+10     	; 0x25a8 <LCD_write_data_4bit+0x382>
		__ticks = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9f ab       	std	Y+55, r25	; 0x37
    25a4:	8e ab       	std	Y+54, r24	; 0x36
    25a6:	3f c0       	rjmp	.+126    	; 0x2626 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    25a8:	68 ad       	ldd	r22, Y+56	; 0x38
    25aa:	79 ad       	ldd	r23, Y+57	; 0x39
    25ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25bc:	18 16       	cp	r1, r24
    25be:	4c f5       	brge	.+82     	; 0x2612 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c0:	6c ad       	ldd	r22, Y+60	; 0x3c
    25c2:	7d ad       	ldd	r23, Y+61	; 0x3d
    25c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    25c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e2       	ldi	r20, 0x20	; 32
    25ce:	51 e4       	ldi	r21, 0x41	; 65
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9f ab       	std	Y+55, r25	; 0x37
    25e6:	8e ab       	std	Y+54, r24	; 0x36
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <LCD_write_data_4bit+0x3e2>
    25ea:	88 ec       	ldi	r24, 0xC8	; 200
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9d ab       	std	Y+53, r25	; 0x35
    25f0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25f2:	8c a9       	ldd	r24, Y+52	; 0x34
    25f4:	9d a9       	ldd	r25, Y+53	; 0x35
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_write_data_4bit+0x3d0>
    25fa:	9d ab       	std	Y+53, r25	; 0x35
    25fc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fe:	8e a9       	ldd	r24, Y+54	; 0x36
    2600:	9f a9       	ldd	r25, Y+55	; 0x37
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	9f ab       	std	Y+55, r25	; 0x37
    2606:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	8e a9       	ldd	r24, Y+54	; 0x36
    260a:	9f a9       	ldd	r25, Y+55	; 0x37
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	69 f7       	brne	.-38     	; 0x25ea <LCD_write_data_4bit+0x3c4>
    2610:	2d c0       	rjmp	.+90     	; 0x266c <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2612:	68 ad       	ldd	r22, Y+56	; 0x38
    2614:	79 ad       	ldd	r23, Y+57	; 0x39
    2616:	8a ad       	ldd	r24, Y+58	; 0x3a
    2618:	9b ad       	ldd	r25, Y+59	; 0x3b
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9f ab       	std	Y+55, r25	; 0x37
    2624:	8e ab       	std	Y+54, r24	; 0x36
    2626:	8e a9       	ldd	r24, Y+54	; 0x36
    2628:	9f a9       	ldd	r25, Y+55	; 0x37
    262a:	9b ab       	std	Y+51, r25	; 0x33
    262c:	8a ab       	std	Y+50, r24	; 0x32
    262e:	8a a9       	ldd	r24, Y+50	; 0x32
    2630:	9b a9       	ldd	r25, Y+51	; 0x33
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_write_data_4bit+0x40c>
    2636:	9b ab       	std	Y+51, r25	; 0x33
    2638:	8a ab       	std	Y+50, r24	; 0x32
    263a:	18 c0       	rjmp	.+48     	; 0x266c <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    263c:	fe 01       	movw	r30, r28
    263e:	ef 5b       	subi	r30, 0xBF	; 191
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	82 81       	ldd	r24, Z+2	; 0x02
    2648:	93 81       	ldd	r25, Z+3	; 0x03
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	fe 01       	movw	r30, r28
    2654:	e0 5c       	subi	r30, 0xC0	; 192
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 83       	st	Z, r24
    265a:	fe 01       	movw	r30, r28
    265c:	e0 5c       	subi	r30, 0xC0	; 192
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2664:	89 a9       	ldd	r24, Y+49	; 0x31
    2666:	8a 95       	dec	r24
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_write_data_4bit+0x440>
    266a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    266c:	fe 01       	movw	r30, r28
    266e:	ee 59       	subi	r30, 0x9E	; 158
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	84 e0       	ldi	r24, 0x04	; 4
    2674:	80 83       	st	Z, r24
    2676:	26 c0       	rjmp	.+76     	; 0x26c4 <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    2678:	fe 01       	movw	r30, r28
    267a:	ed 59       	subi	r30, 0x9D	; 157
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	fe 01       	movw	r30, r28
    2686:	ee 59       	subi	r30, 0x9E	; 158
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a9 01       	movw	r20, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <LCD_write_data_4bit+0x472>
    2694:	55 95       	asr	r21
    2696:	47 95       	ror	r20
    2698:	8a 95       	dec	r24
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <LCD_write_data_4bit+0x46e>
    269c:	ca 01       	movw	r24, r20
    269e:	98 2f       	mov	r25, r24
    26a0:	91 70       	andi	r25, 0x01	; 1
    26a2:	fe 01       	movw	r30, r28
    26a4:	ee 59       	subi	r30, 0x9E	; 158
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	60 81       	ld	r22, Z
    26ac:	49 2f       	mov	r20, r25
    26ae:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    26b2:	de 01       	movw	r26, r28
    26b4:	ae 59       	subi	r26, 0x9E	; 158
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	ee 59       	subi	r30, 0x9E	; 158
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	8c 93       	st	X, r24
    26c4:	fe 01       	movw	r30, r28
    26c6:	ee 59       	subi	r30, 0x9E	; 158
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	88 30       	cpi	r24, 0x08	; 8
    26ce:	a0 f2       	brcs	.-88     	; 0x2678 <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a0 e2       	ldi	r26, 0x20	; 32
    26de:	b1 e4       	ldi	r27, 0x41	; 65
    26e0:	8d a7       	std	Y+45, r24	; 0x2d
    26e2:	9e a7       	std	Y+46, r25	; 0x2e
    26e4:	af a7       	std	Y+47, r26	; 0x2f
    26e6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    26ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    26ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ee:	98 a9       	ldd	r25, Y+48	; 0x30
    26f0:	2b ea       	ldi	r18, 0xAB	; 171
    26f2:	3a ea       	ldi	r19, 0xAA	; 170
    26f4:	4a e2       	ldi	r20, 0x2A	; 42
    26f6:	50 e4       	ldi	r21, 0x40	; 64
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	89 a7       	std	Y+41, r24	; 0x29
    2702:	9a a7       	std	Y+42, r25	; 0x2a
    2704:	ab a7       	std	Y+43, r26	; 0x2b
    2706:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2708:	69 a5       	ldd	r22, Y+41	; 0x29
    270a:	7a a5       	ldd	r23, Y+42	; 0x2a
    270c:	8b a5       	ldd	r24, Y+43	; 0x2b
    270e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e8       	ldi	r20, 0x80	; 128
    2716:	5f e3       	ldi	r21, 0x3F	; 63
    2718:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    271c:	88 23       	and	r24, r24
    271e:	1c f4       	brge	.+6      	; 0x2726 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	88 a7       	std	Y+40, r24	; 0x28
    2724:	91 c0       	rjmp	.+290    	; 0x2848 <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    2726:	69 a5       	ldd	r22, Y+41	; 0x29
    2728:	7a a5       	ldd	r23, Y+42	; 0x2a
    272a:	8b a5       	ldd	r24, Y+43	; 0x2b
    272c:	9c a5       	ldd	r25, Y+44	; 0x2c
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	53 e4       	ldi	r21, 0x43	; 67
    2736:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	0c f0       	brlt	.+2      	; 0x2740 <LCD_write_data_4bit+0x51a>
    273e:	7b c0       	rjmp	.+246    	; 0x2836 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2740:	6d a5       	ldd	r22, Y+45	; 0x2d
    2742:	7e a5       	ldd	r23, Y+46	; 0x2e
    2744:	8f a5       	ldd	r24, Y+47	; 0x2f
    2746:	98 a9       	ldd	r25, Y+48	; 0x30
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a e7       	ldi	r20, 0x7A	; 122
    274e:	54 e4       	ldi	r21, 0x44	; 68
    2750:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8c a3       	std	Y+36, r24	; 0x24
    275a:	9d a3       	std	Y+37, r25	; 0x25
    275c:	ae a3       	std	Y+38, r26	; 0x26
    275e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	6c a1       	ldd	r22, Y+36	; 0x24
    2762:	7d a1       	ldd	r23, Y+37	; 0x25
    2764:	8e a1       	ldd	r24, Y+38	; 0x26
    2766:	9f a1       	ldd	r25, Y+39	; 0x27
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a ef       	ldi	r20, 0xFA	; 250
    276e:	54 e4       	ldi	r21, 0x44	; 68
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	88 a3       	std	Y+32, r24	; 0x20
    277a:	99 a3       	std	Y+33, r25	; 0x21
    277c:	aa a3       	std	Y+34, r26	; 0x22
    277e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2780:	68 a1       	ldd	r22, Y+32	; 0x20
    2782:	79 a1       	ldd	r23, Y+33	; 0x21
    2784:	8a a1       	ldd	r24, Y+34	; 0x22
    2786:	9b a1       	ldd	r25, Y+35	; 0x23
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9f 8f       	std	Y+31, r25	; 0x1f
    279e:	8e 8f       	std	Y+30, r24	; 0x1e
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    27a2:	68 a1       	ldd	r22, Y+32	; 0x20
    27a4:	79 a1       	ldd	r23, Y+33	; 0x21
    27a6:	8a a1       	ldd	r24, Y+34	; 0x22
    27a8:	9b a1       	ldd	r25, Y+35	; 0x23
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	57 e4       	ldi	r21, 0x47	; 71
    27b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	4c f5       	brge	.+82     	; 0x280c <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	6c a1       	ldd	r22, Y+36	; 0x24
    27bc:	7d a1       	ldd	r23, Y+37	; 0x25
    27be:	8e a1       	ldd	r24, Y+38	; 0x26
    27c0:	9f a1       	ldd	r25, Y+39	; 0x27
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9f 8f       	std	Y+31, r25	; 0x1f
    27e0:	8e 8f       	std	Y+30, r24	; 0x1e
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <LCD_write_data_4bit+0x5dc>
    27e4:	88 ec       	ldi	r24, 0xC8	; 200
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9d 8f       	std	Y+29, r25	; 0x1d
    27ea:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <LCD_write_data_4bit+0x5ca>
    27f4:	9d 8f       	std	Y+29, r25	; 0x1d
    27f6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	9f 8f       	std	Y+31, r25	; 0x1f
    2800:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2804:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	69 f7       	brne	.-38     	; 0x27e4 <LCD_write_data_4bit+0x5be>
    280a:	24 c0       	rjmp	.+72     	; 0x2854 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	68 a1       	ldd	r22, Y+32	; 0x20
    280e:	79 a1       	ldd	r23, Y+33	; 0x21
    2810:	8a a1       	ldd	r24, Y+34	; 0x22
    2812:	9b a1       	ldd	r25, Y+35	; 0x23
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9f 8f       	std	Y+31, r25	; 0x1f
    281e:	8e 8f       	std	Y+30, r24	; 0x1e
    2820:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2822:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2824:	9b 8f       	std	Y+27, r25	; 0x1b
    2826:	8a 8f       	std	Y+26, r24	; 0x1a
    2828:	8a 8d       	ldd	r24, Y+26	; 0x1a
    282a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <LCD_write_data_4bit+0x606>
    2830:	9b 8f       	std	Y+27, r25	; 0x1b
    2832:	8a 8f       	std	Y+26, r24	; 0x1a
    2834:	0f c0       	rjmp	.+30     	; 0x2854 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2836:	69 a5       	ldd	r22, Y+41	; 0x29
    2838:	7a a5       	ldd	r23, Y+42	; 0x2a
    283a:	8b a5       	ldd	r24, Y+43	; 0x2b
    283c:	9c a5       	ldd	r25, Y+44	; 0x2c
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	88 a7       	std	Y+40, r24	; 0x28
    2848:	88 a5       	ldd	r24, Y+40	; 0x28
    284a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    284c:	89 8d       	ldd	r24, Y+25	; 0x19
    284e:	8a 95       	dec	r24
    2850:	f1 f7       	brne	.-4      	; 0x284e <LCD_write_data_4bit+0x628>
    2852:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	a0 e8       	ldi	r26, 0x80	; 128
    2862:	bf e3       	ldi	r27, 0x3F	; 63
    2864:	8d 8b       	std	Y+21, r24	; 0x15
    2866:	9e 8b       	std	Y+22, r25	; 0x16
    2868:	af 8b       	std	Y+23, r26	; 0x17
    286a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    286c:	6d 89       	ldd	r22, Y+21	; 0x15
    286e:	7e 89       	ldd	r23, Y+22	; 0x16
    2870:	8f 89       	ldd	r24, Y+23	; 0x17
    2872:	98 8d       	ldd	r25, Y+24	; 0x18
    2874:	2b ea       	ldi	r18, 0xAB	; 171
    2876:	3a ea       	ldi	r19, 0xAA	; 170
    2878:	4a e2       	ldi	r20, 0x2A	; 42
    287a:	50 e4       	ldi	r21, 0x40	; 64
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	89 8b       	std	Y+17, r24	; 0x11
    2886:	9a 8b       	std	Y+18, r25	; 0x12
    2888:	ab 8b       	std	Y+19, r26	; 0x13
    288a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    288c:	69 89       	ldd	r22, Y+17	; 0x11
    288e:	7a 89       	ldd	r23, Y+18	; 0x12
    2890:	8b 89       	ldd	r24, Y+19	; 0x13
    2892:	9c 89       	ldd	r25, Y+20	; 0x14
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e8       	ldi	r20, 0x80	; 128
    289a:	5f e3       	ldi	r21, 0x3F	; 63
    289c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    28a0:	88 23       	and	r24, r24
    28a2:	1c f4       	brge	.+6      	; 0x28aa <LCD_write_data_4bit+0x684>
		__ticks = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	88 8b       	std	Y+16, r24	; 0x10
    28a8:	91 c0       	rjmp	.+290    	; 0x29cc <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    28aa:	69 89       	ldd	r22, Y+17	; 0x11
    28ac:	7a 89       	ldd	r23, Y+18	; 0x12
    28ae:	8b 89       	ldd	r24, Y+19	; 0x13
    28b0:	9c 89       	ldd	r25, Y+20	; 0x14
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	53 e4       	ldi	r21, 0x43	; 67
    28ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <LCD_write_data_4bit+0x69e>
    28c2:	7b c0       	rjmp	.+246    	; 0x29ba <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    28c4:	6d 89       	ldd	r22, Y+21	; 0x15
    28c6:	7e 89       	ldd	r23, Y+22	; 0x16
    28c8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ca:	98 8d       	ldd	r25, Y+24	; 0x18
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a e7       	ldi	r20, 0x7A	; 122
    28d2:	54 e4       	ldi	r21, 0x44	; 68
    28d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	8c 87       	std	Y+12, r24	; 0x0c
    28de:	9d 87       	std	Y+13, r25	; 0x0d
    28e0:	ae 87       	std	Y+14, r26	; 0x0e
    28e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    28e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    28e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	88 87       	std	Y+8, r24	; 0x08
    28fe:	99 87       	std	Y+9, r25	; 0x09
    2900:	aa 87       	std	Y+10, r26	; 0x0a
    2902:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2904:	68 85       	ldd	r22, Y+8	; 0x08
    2906:	79 85       	ldd	r23, Y+9	; 0x09
    2908:	8a 85       	ldd	r24, Y+10	; 0x0a
    290a:	9b 85       	ldd	r25, Y+11	; 0x0b
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9f 83       	std	Y+7, r25	; 0x07
    2922:	8e 83       	std	Y+6, r24	; 0x06
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    2926:	68 85       	ldd	r22, Y+8	; 0x08
    2928:	79 85       	ldd	r23, Y+9	; 0x09
    292a:	8a 85       	ldd	r24, Y+10	; 0x0a
    292c:	9b 85       	ldd	r25, Y+11	; 0x0b
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2940:	7d 85       	ldd	r23, Y+13	; 0x0d
    2942:	8e 85       	ldd	r24, Y+14	; 0x0e
    2944:	9f 85       	ldd	r25, Y+15	; 0x0f
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9f 83       	std	Y+7, r25	; 0x07
    2964:	8e 83       	std	Y+6, r24	; 0x06
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <LCD_write_data_4bit+0x760>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9d 83       	std	Y+5, r25	; 0x05
    296e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2970:	8c 81       	ldd	r24, Y+4	; 0x04
    2972:	9d 81       	ldd	r25, Y+5	; 0x05
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_write_data_4bit+0x74e>
    2978:	9d 83       	std	Y+5, r25	; 0x05
    297a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8e 81       	ldd	r24, Y+6	; 0x06
    297e:	9f 81       	ldd	r25, Y+7	; 0x07
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9f 83       	std	Y+7, r25	; 0x07
    2984:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8e 81       	ldd	r24, Y+6	; 0x06
    2988:	9f 81       	ldd	r25, Y+7	; 0x07
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <LCD_write_data_4bit+0x742>
    298e:	24 c0       	rjmp	.+72     	; 0x29d8 <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	68 85       	ldd	r22, Y+8	; 0x08
    2992:	79 85       	ldd	r23, Y+9	; 0x09
    2994:	8a 85       	ldd	r24, Y+10	; 0x0a
    2996:	9b 85       	ldd	r25, Y+11	; 0x0b
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9f 83       	std	Y+7, r25	; 0x07
    29a2:	8e 83       	std	Y+6, r24	; 0x06
    29a4:	8e 81       	ldd	r24, Y+6	; 0x06
    29a6:	9f 81       	ldd	r25, Y+7	; 0x07
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	9b 81       	ldd	r25, Y+3	; 0x03
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_write_data_4bit+0x78a>
    29b4:	9b 83       	std	Y+3, r25	; 0x03
    29b6:	8a 83       	std	Y+2, r24	; 0x02
    29b8:	0f c0       	rjmp	.+30     	; 0x29d8 <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ba:	69 89       	ldd	r22, Y+17	; 0x11
    29bc:	7a 89       	ldd	r23, Y+18	; 0x12
    29be:	8b 89       	ldd	r24, Y+19	; 0x13
    29c0:	9c 89       	ldd	r25, Y+20	; 0x14
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	88 8b       	std	Y+16, r24	; 0x10
    29cc:	88 89       	ldd	r24, Y+16	; 0x10
    29ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	8a 95       	dec	r24
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_write_data_4bit+0x7ac>
    29d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    29d8:	fe 01       	movw	r30, r28
    29da:	ef 59       	subi	r30, 0x9F	; 159
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	84 e0       	ldi	r24, 0x04	; 4
    29e0:	80 83       	st	Z, r24
    29e2:	27 c0       	rjmp	.+78     	; 0x2a32 <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    29e4:	fe 01       	movw	r30, r28
    29e6:	ed 59       	subi	r30, 0x9D	; 157
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	fe 01       	movw	r30, r28
    29f2:	ef 59       	subi	r30, 0x9F	; 159
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	04 97       	sbiw	r24, 0x04	; 4
    29fe:	f9 01       	movw	r30, r18
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <LCD_write_data_4bit+0x7e0>
    2a02:	f5 95       	asr	r31
    2a04:	e7 95       	ror	r30
    2a06:	8a 95       	dec	r24
    2a08:	e2 f7       	brpl	.-8      	; 0x2a02 <LCD_write_data_4bit+0x7dc>
    2a0a:	cf 01       	movw	r24, r30
    2a0c:	98 2f       	mov	r25, r24
    2a0e:	91 70       	andi	r25, 0x01	; 1
    2a10:	fe 01       	movw	r30, r28
    2a12:	ef 59       	subi	r30, 0x9F	; 159
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	60 81       	ld	r22, Z
    2a1a:	49 2f       	mov	r20, r25
    2a1c:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2a20:	de 01       	movw	r26, r28
    2a22:	af 59       	subi	r26, 0x9F	; 159
    2a24:	bf 4f       	sbci	r27, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	ef 59       	subi	r30, 0x9F	; 159
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	8c 93       	st	X, r24
    2a32:	fe 01       	movw	r30, r28
    2a34:	ef 59       	subi	r30, 0x9F	; 159
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	88 30       	cpi	r24, 0x08	; 8
    2a3c:	98 f2       	brcs	.-90     	; 0x29e4 <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2a3e:	82 e0       	ldi	r24, 0x02	; 2
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
}
    2a46:	cd 59       	subi	r28, 0x9D	; 157
    2a48:	df 4f       	sbci	r29, 0xFF	; 255
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	08 95       	ret

00002a5e <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	c3 56       	subi	r28, 0x63	; 99
    2a6c:	d0 40       	sbci	r29, 0x00	; 0
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ed 59       	subi	r30, 0x9D	; 157
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2a80:	82 e0       	ldi	r24, 0x02	; 2
    2a82:	62 e0       	ldi	r22, 0x02	; 2
    2a84:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	61 e0       	ldi	r22, 0x01	; 1
    2a8c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    2a90:	fe 01       	movw	r30, r28
    2a92:	e3 5a       	subi	r30, 0xA3	; 163
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e8       	ldi	r26, 0x80	; 128
    2a9c:	bf e3       	ldi	r27, 0x3F	; 63
    2a9e:	80 83       	st	Z, r24
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	a2 83       	std	Z+2, r26	; 0x02
    2aa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aa6:	8e 01       	movw	r16, r28
    2aa8:	07 5a       	subi	r16, 0xA7	; 167
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	fe 01       	movw	r30, r28
    2aae:	e3 5a       	subi	r30, 0xA3	; 163
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	2b ea       	ldi	r18, 0xAB	; 171
    2abc:	3a ea       	ldi	r19, 0xAA	; 170
    2abe:	4a e2       	ldi	r20, 0x2A	; 42
    2ac0:	50 e4       	ldi	r21, 0x40	; 64
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	f8 01       	movw	r30, r16
    2acc:	80 83       	st	Z, r24
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	a2 83       	std	Z+2, r26	; 0x02
    2ad2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e7 5a       	subi	r30, 0xA7	; 167
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	93 81       	ldd	r25, Z+3	; 0x03
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e8       	ldi	r20, 0x80	; 128
    2ae8:	5f e3       	ldi	r21, 0x3F	; 63
    2aea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2aee:	88 23       	and	r24, r24
    2af0:	34 f4       	brge	.+12     	; 0x2afe <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    2af2:	fe 01       	movw	r30, r28
    2af4:	e8 5a       	subi	r30, 0xA8	; 168
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	80 83       	st	Z, r24
    2afc:	e0 c0       	rjmp	.+448    	; 0x2cbe <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    2afe:	fe 01       	movw	r30, r28
    2b00:	e7 5a       	subi	r30, 0xA7	; 167
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	4f e7       	ldi	r20, 0x7F	; 127
    2b12:	53 e4       	ldi	r21, 0x43	; 67
    2b14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b18:	18 16       	cp	r1, r24
    2b1a:	0c f0       	brlt	.+2      	; 0x2b1e <LCD_write_cmd_4bit+0xc0>
    2b1c:	c0 c0       	rjmp	.+384    	; 0x2c9e <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    2b1e:	fe 01       	movw	r30, r28
    2b20:	e3 5a       	subi	r30, 0xA3	; 163
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	4a e7       	ldi	r20, 0x7A	; 122
    2b32:	54 e4       	ldi	r21, 0x44	; 68
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ec 5a       	subi	r30, 0xAC	; 172
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 83       	st	Z, r24
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	a2 83       	std	Z+2, r26	; 0x02
    2b48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	00 5b       	subi	r16, 0xB0	; 176
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	fe 01       	movw	r30, r28
    2b52:	ec 5a       	subi	r30, 0xAC	; 172
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	f8 01       	movw	r30, r16
    2b70:	80 83       	st	Z, r24
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	a2 83       	std	Z+2, r26	; 0x02
    2b76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e0 5b       	subi	r30, 0xB0	; 176
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	93 81       	ldd	r25, Z+3	; 0x03
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e8       	ldi	r20, 0x80	; 128
    2b8c:	5f e3       	ldi	r21, 0x3F	; 63
    2b8e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b92:	88 23       	and	r24, r24
    2b94:	44 f4       	brge	.+16     	; 0x2ba6 <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    2b96:	fe 01       	movw	r30, r28
    2b98:	e2 5b       	subi	r30, 0xB2	; 178
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	64 c0       	rjmp	.+200    	; 0x2c6e <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e0 5b       	subi	r30, 0xB0	; 176
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	3f ef       	ldi	r19, 0xFF	; 255
    2bb8:	4f e7       	ldi	r20, 0x7F	; 127
    2bba:	57 e4       	ldi	r21, 0x47	; 71
    2bbc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bc0:	18 16       	cp	r1, r24
    2bc2:	0c f0       	brlt	.+2      	; 0x2bc6 <LCD_write_cmd_4bit+0x168>
    2bc4:	43 c0       	rjmp	.+134    	; 0x2c4c <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	ec 5a       	subi	r30, 0xAC	; 172
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	60 81       	ld	r22, Z
    2bce:	71 81       	ldd	r23, Z+1	; 0x01
    2bd0:	82 81       	ldd	r24, Z+2	; 0x02
    2bd2:	93 81       	ldd	r25, Z+3	; 0x03
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	40 e2       	ldi	r20, 0x20	; 32
    2bda:	51 e4       	ldi	r21, 0x41	; 65
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8e 01       	movw	r16, r28
    2be6:	02 5b       	subi	r16, 0xB2	; 178
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
    2bfc:	1f c0       	rjmp	.+62     	; 0x2c3c <LCD_write_cmd_4bit+0x1de>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e4 5b       	subi	r30, 0xB4	; 180
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	88 ec       	ldi	r24, 0xC8	; 200
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e4 5b       	subi	r30, 0xB4	; 180
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_write_cmd_4bit+0x1b8>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e4 5b       	subi	r30, 0xB4	; 180
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	de 01       	movw	r26, r28
    2c26:	a2 5b       	subi	r26, 0xB2	; 178
    2c28:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e2 5b       	subi	r30, 0xB2	; 178
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	11 96       	adiw	r26, 0x01	; 1
    2c38:	9c 93       	st	X, r25
    2c3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e2 5b       	subi	r30, 0xB2	; 178
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	80 81       	ld	r24, Z
    2c44:	91 81       	ldd	r25, Z+1	; 0x01
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	d1 f6       	brne	.-76     	; 0x2bfe <LCD_write_cmd_4bit+0x1a0>
    2c4a:	4b c0       	rjmp	.+150    	; 0x2ce2 <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4c:	8e 01       	movw	r16, r28
    2c4e:	02 5b       	subi	r16, 0xB2	; 178
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
    2c52:	fe 01       	movw	r30, r28
    2c54:	e0 5b       	subi	r30, 0xB0	; 176
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	f8 01       	movw	r30, r16
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	de 01       	movw	r26, r28
    2c70:	a6 5b       	subi	r26, 0xB6	; 182
    2c72:	bf 4f       	sbci	r27, 0xFF	; 255
    2c74:	fe 01       	movw	r30, r28
    2c76:	e2 5b       	subi	r30, 0xB2	; 178
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	11 96       	adiw	r26, 0x01	; 1
    2c80:	9c 93       	st	X, r25
    2c82:	8e 93       	st	-X, r24
    2c84:	fe 01       	movw	r30, r28
    2c86:	e6 5b       	subi	r30, 0xB6	; 182
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_write_cmd_4bit+0x230>
    2c92:	fe 01       	movw	r30, r28
    2c94:	e6 5b       	subi	r30, 0xB6	; 182
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	22 c0       	rjmp	.+68     	; 0x2ce2 <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c9e:	8e 01       	movw	r16, r28
    2ca0:	08 5a       	subi	r16, 0xA8	; 168
    2ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e7 5a       	subi	r30, 0xA7	; 167
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	f8 01       	movw	r30, r16
    2cbc:	80 83       	st	Z, r24
    2cbe:	de 01       	movw	r26, r28
    2cc0:	a7 5b       	subi	r26, 0xB7	; 183
    2cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e8 5a       	subi	r30, 0xA8	; 168
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e7 5b       	subi	r30, 0xB7	; 183
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	8a 95       	dec	r24
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <LCD_write_cmd_4bit+0x278>
    2cda:	fe 01       	movw	r30, r28
    2cdc:	e7 5b       	subi	r30, 0xB7	; 183
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    2cea:	fe 01       	movw	r30, r28
    2cec:	eb 5b       	subi	r30, 0xBB	; 187
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a0 e8       	ldi	r26, 0x80	; 128
    2cf6:	bf e3       	ldi	r27, 0x3F	; 63
    2cf8:	80 83       	st	Z, r24
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	a2 83       	std	Z+2, r26	; 0x02
    2cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d00:	8e 01       	movw	r16, r28
    2d02:	0f 5b       	subi	r16, 0xBF	; 191
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	fe 01       	movw	r30, r28
    2d08:	eb 5b       	subi	r30, 0xBB	; 187
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	2b ea       	ldi	r18, 0xAB	; 171
    2d16:	3a ea       	ldi	r19, 0xAA	; 170
    2d18:	4a e2       	ldi	r20, 0x2A	; 42
    2d1a:	50 e4       	ldi	r21, 0x40	; 64
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	f8 01       	movw	r30, r16
    2d26:	80 83       	st	Z, r24
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	a2 83       	std	Z+2, r26	; 0x02
    2d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ef 5b       	subi	r30, 0xBF	; 191
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	5f e3       	ldi	r21, 0x3F	; 63
    2d44:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	34 f4       	brge	.+12     	; 0x2d58 <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	fe 01       	movw	r30, r28
    2d50:	e0 5c       	subi	r30, 0xC0	; 192
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 83       	st	Z, r24
    2d56:	9d c0       	rjmp	.+314    	; 0x2e92 <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ef 5b       	subi	r30, 0xBF	; 191
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	53 e4       	ldi	r21, 0x43	; 67
    2d6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	0c f0       	brlt	.+2      	; 0x2d78 <LCD_write_cmd_4bit+0x31a>
    2d76:	7e c0       	rjmp	.+252    	; 0x2e74 <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    2d78:	fe 01       	movw	r30, r28
    2d7a:	eb 5b       	subi	r30, 0xBB	; 187
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	60 81       	ld	r22, Z
    2d80:	71 81       	ldd	r23, Z+1	; 0x01
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	93 81       	ldd	r25, Z+3	; 0x03
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	4a e7       	ldi	r20, 0x7A	; 122
    2d8c:	54 e4       	ldi	r21, 0x44	; 68
    2d8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	8c af       	std	Y+60, r24	; 0x3c
    2d98:	9d af       	std	Y+61, r25	; 0x3d
    2d9a:	ae af       	std	Y+62, r26	; 0x3e
    2d9c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2da0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2da2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2da4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a ef       	ldi	r20, 0xFA	; 250
    2dac:	54 e4       	ldi	r21, 0x44	; 68
    2dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	88 af       	std	Y+56, r24	; 0x38
    2db8:	99 af       	std	Y+57, r25	; 0x39
    2dba:	aa af       	std	Y+58, r26	; 0x3a
    2dbc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2dbe:	68 ad       	ldd	r22, Y+56	; 0x38
    2dc0:	79 ad       	ldd	r23, Y+57	; 0x39
    2dc2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dc4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2dd2:	88 23       	and	r24, r24
    2dd4:	2c f4       	brge	.+10     	; 0x2de0 <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	9f ab       	std	Y+55, r25	; 0x37
    2ddc:	8e ab       	std	Y+54, r24	; 0x36
    2dde:	3f c0       	rjmp	.+126    	; 0x2e5e <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    2de0:	68 ad       	ldd	r22, Y+56	; 0x38
    2de2:	79 ad       	ldd	r23, Y+57	; 0x39
    2de4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2de6:	9b ad       	ldd	r25, Y+59	; 0x3b
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	57 e4       	ldi	r21, 0x47	; 71
    2df0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2df4:	18 16       	cp	r1, r24
    2df6:	4c f5       	brge	.+82     	; 0x2e4a <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2dfa:	7d ad       	ldd	r23, Y+61	; 0x3d
    2dfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e2       	ldi	r20, 0x20	; 32
    2e06:	51 e4       	ldi	r21, 0x41	; 65
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	9f ab       	std	Y+55, r25	; 0x37
    2e1e:	8e ab       	std	Y+54, r24	; 0x36
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <LCD_write_cmd_4bit+0x3e2>
    2e22:	88 ec       	ldi	r24, 0xC8	; 200
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9d ab       	std	Y+53, r25	; 0x35
    2e28:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e2a:	8c a9       	ldd	r24, Y+52	; 0x34
    2e2c:	9d a9       	ldd	r25, Y+53	; 0x35
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_write_cmd_4bit+0x3d0>
    2e32:	9d ab       	std	Y+53, r25	; 0x35
    2e34:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e36:	8e a9       	ldd	r24, Y+54	; 0x36
    2e38:	9f a9       	ldd	r25, Y+55	; 0x37
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	9f ab       	std	Y+55, r25	; 0x37
    2e3e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e40:	8e a9       	ldd	r24, Y+54	; 0x36
    2e42:	9f a9       	ldd	r25, Y+55	; 0x37
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	69 f7       	brne	.-38     	; 0x2e22 <LCD_write_cmd_4bit+0x3c4>
    2e48:	2d c0       	rjmp	.+90     	; 0x2ea4 <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4a:	68 ad       	ldd	r22, Y+56	; 0x38
    2e4c:	79 ad       	ldd	r23, Y+57	; 0x39
    2e4e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2e50:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	9f ab       	std	Y+55, r25	; 0x37
    2e5c:	8e ab       	std	Y+54, r24	; 0x36
    2e5e:	8e a9       	ldd	r24, Y+54	; 0x36
    2e60:	9f a9       	ldd	r25, Y+55	; 0x37
    2e62:	9b ab       	std	Y+51, r25	; 0x33
    2e64:	8a ab       	std	Y+50, r24	; 0x32
    2e66:	8a a9       	ldd	r24, Y+50	; 0x32
    2e68:	9b a9       	ldd	r25, Y+51	; 0x33
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_write_cmd_4bit+0x40c>
    2e6e:	9b ab       	std	Y+51, r25	; 0x33
    2e70:	8a ab       	std	Y+50, r24	; 0x32
    2e72:	18 c0       	rjmp	.+48     	; 0x2ea4 <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e74:	fe 01       	movw	r30, r28
    2e76:	ef 5b       	subi	r30, 0xBF	; 191
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e0 5c       	subi	r30, 0xC0	; 192
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 83       	st	Z, r24
    2e92:	fe 01       	movw	r30, r28
    2e94:	e0 5c       	subi	r30, 0xC0	; 192
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e9c:	89 a9       	ldd	r24, Y+49	; 0x31
    2e9e:	8a 95       	dec	r24
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <LCD_write_cmd_4bit+0x440>
    2ea2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ee 59       	subi	r30, 0x9E	; 158
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	84 e0       	ldi	r24, 0x04	; 4
    2eac:	80 83       	st	Z, r24
    2eae:	26 c0       	rjmp	.+76     	; 0x2efc <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	ed 59       	subi	r30, 0x9D	; 157
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 81       	ld	r24, Z
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ee 59       	subi	r30, 0x9E	; 158
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 2f       	mov	r24, r24
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a9 01       	movw	r20, r18
    2eca:	02 c0       	rjmp	.+4      	; 0x2ed0 <LCD_write_cmd_4bit+0x472>
    2ecc:	55 95       	asr	r21
    2ece:	47 95       	ror	r20
    2ed0:	8a 95       	dec	r24
    2ed2:	e2 f7       	brpl	.-8      	; 0x2ecc <LCD_write_cmd_4bit+0x46e>
    2ed4:	ca 01       	movw	r24, r20
    2ed6:	98 2f       	mov	r25, r24
    2ed8:	91 70       	andi	r25, 0x01	; 1
    2eda:	fe 01       	movw	r30, r28
    2edc:	ee 59       	subi	r30, 0x9E	; 158
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	82 e0       	ldi	r24, 0x02	; 2
    2ee2:	60 81       	ld	r22, Z
    2ee4:	49 2f       	mov	r20, r25
    2ee6:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2eea:	de 01       	movw	r26, r28
    2eec:	ae 59       	subi	r26, 0x9E	; 158
    2eee:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	ee 59       	subi	r30, 0x9E	; 158
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	8c 93       	st	X, r24
    2efc:	fe 01       	movw	r30, r28
    2efe:	ee 59       	subi	r30, 0x9E	; 158
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 81       	ld	r24, Z
    2f04:	88 30       	cpi	r24, 0x08	; 8
    2f06:	a0 f2       	brcs	.-88     	; 0x2eb0 <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 e2       	ldi	r26, 0x20	; 32
    2f16:	b1 e4       	ldi	r27, 0x41	; 65
    2f18:	8d a7       	std	Y+45, r24	; 0x2d
    2f1a:	9e a7       	std	Y+46, r25	; 0x2e
    2f1c:	af a7       	std	Y+47, r26	; 0x2f
    2f1e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f20:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f22:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f26:	98 a9       	ldd	r25, Y+48	; 0x30
    2f28:	2b ea       	ldi	r18, 0xAB	; 171
    2f2a:	3a ea       	ldi	r19, 0xAA	; 170
    2f2c:	4a e2       	ldi	r20, 0x2A	; 42
    2f2e:	50 e4       	ldi	r21, 0x40	; 64
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	89 a7       	std	Y+41, r24	; 0x29
    2f3a:	9a a7       	std	Y+42, r25	; 0x2a
    2f3c:	ab a7       	std	Y+43, r26	; 0x2b
    2f3e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2f40:	69 a5       	ldd	r22, Y+41	; 0x29
    2f42:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f44:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f46:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	1c f4       	brge	.+6      	; 0x2f5e <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	88 a7       	std	Y+40, r24	; 0x28
    2f5c:	91 c0       	rjmp	.+290    	; 0x3080 <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    2f5e:	69 a5       	ldd	r22, Y+41	; 0x29
    2f60:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4f e7       	ldi	r20, 0x7F	; 127
    2f6c:	53 e4       	ldi	r21, 0x43	; 67
    2f6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f72:	18 16       	cp	r1, r24
    2f74:	0c f0       	brlt	.+2      	; 0x2f78 <LCD_write_cmd_4bit+0x51a>
    2f76:	7b c0       	rjmp	.+246    	; 0x306e <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2f78:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4a e7       	ldi	r20, 0x7A	; 122
    2f86:	54 e4       	ldi	r21, 0x44	; 68
    2f88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8c a3       	std	Y+36, r24	; 0x24
    2f92:	9d a3       	std	Y+37, r25	; 0x25
    2f94:	ae a3       	std	Y+38, r26	; 0x26
    2f96:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	6c a1       	ldd	r22, Y+36	; 0x24
    2f9a:	7d a1       	ldd	r23, Y+37	; 0x25
    2f9c:	8e a1       	ldd	r24, Y+38	; 0x26
    2f9e:	9f a1       	ldd	r25, Y+39	; 0x27
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a ef       	ldi	r20, 0xFA	; 250
    2fa6:	54 e4       	ldi	r21, 0x44	; 68
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	88 a3       	std	Y+32, r24	; 0x20
    2fb2:	99 a3       	std	Y+33, r25	; 0x21
    2fb4:	aa a3       	std	Y+34, r26	; 0x22
    2fb6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2fb8:	68 a1       	ldd	r22, Y+32	; 0x20
    2fba:	79 a1       	ldd	r23, Y+33	; 0x21
    2fbc:	8a a1       	ldd	r24, Y+34	; 0x22
    2fbe:	9b a1       	ldd	r25, Y+35	; 0x23
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd6:	8e 8f       	std	Y+30, r24	; 0x1e
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    2fda:	68 a1       	ldd	r22, Y+32	; 0x20
    2fdc:	79 a1       	ldd	r23, Y+33	; 0x21
    2fde:	8a a1       	ldd	r24, Y+34	; 0x22
    2fe0:	9b a1       	ldd	r25, Y+35	; 0x23
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	6c a1       	ldd	r22, Y+36	; 0x24
    2ff4:	7d a1       	ldd	r23, Y+37	; 0x25
    2ff6:	8e a1       	ldd	r24, Y+38	; 0x26
    2ff8:	9f a1       	ldd	r25, Y+39	; 0x27
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9f 8f       	std	Y+31, r25	; 0x1f
    3018:	8e 8f       	std	Y+30, r24	; 0x1e
    301a:	0f c0       	rjmp	.+30     	; 0x303a <LCD_write_cmd_4bit+0x5dc>
    301c:	88 ec       	ldi	r24, 0xC8	; 200
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9d 8f       	std	Y+29, r25	; 0x1d
    3022:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3024:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3026:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <LCD_write_cmd_4bit+0x5ca>
    302c:	9d 8f       	std	Y+29, r25	; 0x1d
    302e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3032:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9f 8f       	std	Y+31, r25	; 0x1f
    3038:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    303c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <LCD_write_cmd_4bit+0x5be>
    3042:	24 c0       	rjmp	.+72     	; 0x308c <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	68 a1       	ldd	r22, Y+32	; 0x20
    3046:	79 a1       	ldd	r23, Y+33	; 0x21
    3048:	8a a1       	ldd	r24, Y+34	; 0x22
    304a:	9b a1       	ldd	r25, Y+35	; 0x23
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9f 8f       	std	Y+31, r25	; 0x1f
    3056:	8e 8f       	std	Y+30, r24	; 0x1e
    3058:	8e 8d       	ldd	r24, Y+30	; 0x1e
    305a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    305c:	9b 8f       	std	Y+27, r25	; 0x1b
    305e:	8a 8f       	std	Y+26, r24	; 0x1a
    3060:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3062:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <LCD_write_cmd_4bit+0x606>
    3068:	9b 8f       	std	Y+27, r25	; 0x1b
    306a:	8a 8f       	std	Y+26, r24	; 0x1a
    306c:	0f c0       	rjmp	.+30     	; 0x308c <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    306e:	69 a5       	ldd	r22, Y+41	; 0x29
    3070:	7a a5       	ldd	r23, Y+42	; 0x2a
    3072:	8b a5       	ldd	r24, Y+43	; 0x2b
    3074:	9c a5       	ldd	r25, Y+44	; 0x2c
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	88 a7       	std	Y+40, r24	; 0x28
    3080:	88 a5       	ldd	r24, Y+40	; 0x28
    3082:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3084:	89 8d       	ldd	r24, Y+25	; 0x19
    3086:	8a 95       	dec	r24
    3088:	f1 f7       	brne	.-4      	; 0x3086 <LCD_write_cmd_4bit+0x628>
    308a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	60 e0       	ldi	r22, 0x00	; 0
    3090:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a0 e8       	ldi	r26, 0x80	; 128
    309a:	bf e3       	ldi	r27, 0x3F	; 63
    309c:	8d 8b       	std	Y+21, r24	; 0x15
    309e:	9e 8b       	std	Y+22, r25	; 0x16
    30a0:	af 8b       	std	Y+23, r26	; 0x17
    30a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30a4:	6d 89       	ldd	r22, Y+21	; 0x15
    30a6:	7e 89       	ldd	r23, Y+22	; 0x16
    30a8:	8f 89       	ldd	r24, Y+23	; 0x17
    30aa:	98 8d       	ldd	r25, Y+24	; 0x18
    30ac:	2b ea       	ldi	r18, 0xAB	; 171
    30ae:	3a ea       	ldi	r19, 0xAA	; 170
    30b0:	4a e2       	ldi	r20, 0x2A	; 42
    30b2:	50 e4       	ldi	r21, 0x40	; 64
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	89 8b       	std	Y+17, r24	; 0x11
    30be:	9a 8b       	std	Y+18, r25	; 0x12
    30c0:	ab 8b       	std	Y+19, r26	; 0x13
    30c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30c4:	69 89       	ldd	r22, Y+17	; 0x11
    30c6:	7a 89       	ldd	r23, Y+18	; 0x12
    30c8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ca:	9c 89       	ldd	r25, Y+20	; 0x14
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	1c f4       	brge	.+6      	; 0x30e2 <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	88 8b       	std	Y+16, r24	; 0x10
    30e0:	91 c0       	rjmp	.+290    	; 0x3204 <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    30e2:	69 89       	ldd	r22, Y+17	; 0x11
    30e4:	7a 89       	ldd	r23, Y+18	; 0x12
    30e6:	8b 89       	ldd	r24, Y+19	; 0x13
    30e8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	53 e4       	ldi	r21, 0x43	; 67
    30f2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	0c f0       	brlt	.+2      	; 0x30fc <LCD_write_cmd_4bit+0x69e>
    30fa:	7b c0       	rjmp	.+246    	; 0x31f2 <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    30fc:	6d 89       	ldd	r22, Y+21	; 0x15
    30fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a e7       	ldi	r20, 0x7A	; 122
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8c 87       	std	Y+12, r24	; 0x0c
    3116:	9d 87       	std	Y+13, r25	; 0x0d
    3118:	ae 87       	std	Y+14, r26	; 0x0e
    311a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311c:	6c 85       	ldd	r22, Y+12	; 0x0c
    311e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3120:	8e 85       	ldd	r24, Y+14	; 0x0e
    3122:	9f 85       	ldd	r25, Y+15	; 0x0f
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	4a ef       	ldi	r20, 0xFA	; 250
    312a:	54 e4       	ldi	r21, 0x44	; 68
    312c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	88 87       	std	Y+8, r24	; 0x08
    3136:	99 87       	std	Y+9, r25	; 0x09
    3138:	aa 87       	std	Y+10, r26	; 0x0a
    313a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    313c:	68 85       	ldd	r22, Y+8	; 0x08
    313e:	79 85       	ldd	r23, Y+9	; 0x09
    3140:	8a 85       	ldd	r24, Y+10	; 0x0a
    3142:	9b 85       	ldd	r25, Y+11	; 0x0b
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	40 e8       	ldi	r20, 0x80	; 128
    314a:	5f e3       	ldi	r21, 0x3F	; 63
    314c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3150:	88 23       	and	r24, r24
    3152:	2c f4       	brge	.+10     	; 0x315e <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	9f 83       	std	Y+7, r25	; 0x07
    315a:	8e 83       	std	Y+6, r24	; 0x06
    315c:	3f c0       	rjmp	.+126    	; 0x31dc <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    315e:	68 85       	ldd	r22, Y+8	; 0x08
    3160:	79 85       	ldd	r23, Y+9	; 0x09
    3162:	8a 85       	ldd	r24, Y+10	; 0x0a
    3164:	9b 85       	ldd	r25, Y+11	; 0x0b
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	3f ef       	ldi	r19, 0xFF	; 255
    316a:	4f e7       	ldi	r20, 0x7F	; 127
    316c:	57 e4       	ldi	r21, 0x47	; 71
    316e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3172:	18 16       	cp	r1, r24
    3174:	4c f5       	brge	.+82     	; 0x31c8 <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3176:	6c 85       	ldd	r22, Y+12	; 0x0c
    3178:	7d 85       	ldd	r23, Y+13	; 0x0d
    317a:	8e 85       	ldd	r24, Y+14	; 0x0e
    317c:	9f 85       	ldd	r25, Y+15	; 0x0f
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e2       	ldi	r20, 0x20	; 32
    3184:	51 e4       	ldi	r21, 0x41	; 65
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	bc 01       	movw	r22, r24
    3190:	cd 01       	movw	r24, r26
    3192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	9f 83       	std	Y+7, r25	; 0x07
    319c:	8e 83       	std	Y+6, r24	; 0x06
    319e:	0f c0       	rjmp	.+30     	; 0x31be <LCD_write_cmd_4bit+0x760>
    31a0:	88 ec       	ldi	r24, 0xC8	; 200
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9d 83       	std	Y+5, r25	; 0x05
    31a6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31a8:	8c 81       	ldd	r24, Y+4	; 0x04
    31aa:	9d 81       	ldd	r25, Y+5	; 0x05
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_write_cmd_4bit+0x74e>
    31b0:	9d 83       	std	Y+5, r25	; 0x05
    31b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b4:	8e 81       	ldd	r24, Y+6	; 0x06
    31b6:	9f 81       	ldd	r25, Y+7	; 0x07
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	9f 83       	std	Y+7, r25	; 0x07
    31bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31be:	8e 81       	ldd	r24, Y+6	; 0x06
    31c0:	9f 81       	ldd	r25, Y+7	; 0x07
    31c2:	00 97       	sbiw	r24, 0x00	; 0
    31c4:	69 f7       	brne	.-38     	; 0x31a0 <LCD_write_cmd_4bit+0x742>
    31c6:	24 c0       	rjmp	.+72     	; 0x3210 <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c8:	68 85       	ldd	r22, Y+8	; 0x08
    31ca:	79 85       	ldd	r23, Y+9	; 0x09
    31cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	9f 83       	std	Y+7, r25	; 0x07
    31da:	8e 83       	std	Y+6, r24	; 0x06
    31dc:	8e 81       	ldd	r24, Y+6	; 0x06
    31de:	9f 81       	ldd	r25, Y+7	; 0x07
    31e0:	9b 83       	std	Y+3, r25	; 0x03
    31e2:	8a 83       	std	Y+2, r24	; 0x02
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <LCD_write_cmd_4bit+0x78a>
    31ec:	9b 83       	std	Y+3, r25	; 0x03
    31ee:	8a 83       	std	Y+2, r24	; 0x02
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31f2:	69 89       	ldd	r22, Y+17	; 0x11
    31f4:	7a 89       	ldd	r23, Y+18	; 0x12
    31f6:	8b 89       	ldd	r24, Y+19	; 0x13
    31f8:	9c 89       	ldd	r25, Y+20	; 0x14
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	88 8b       	std	Y+16, r24	; 0x10
    3204:	88 89       	ldd	r24, Y+16	; 0x10
    3206:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3208:	89 81       	ldd	r24, Y+1	; 0x01
    320a:	8a 95       	dec	r24
    320c:	f1 f7       	brne	.-4      	; 0x320a <LCD_write_cmd_4bit+0x7ac>
    320e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    3210:	fe 01       	movw	r30, r28
    3212:	ef 59       	subi	r30, 0x9F	; 159
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	84 e0       	ldi	r24, 0x04	; 4
    3218:	80 83       	st	Z, r24
    321a:	27 c0       	rjmp	.+78     	; 0x326a <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    321c:	fe 01       	movw	r30, r28
    321e:	ed 59       	subi	r30, 0x9D	; 157
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 81       	ld	r24, Z
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	fe 01       	movw	r30, r28
    322a:	ef 59       	subi	r30, 0x9F	; 159
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	80 81       	ld	r24, Z
    3230:	88 2f       	mov	r24, r24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	04 97       	sbiw	r24, 0x04	; 4
    3236:	f9 01       	movw	r30, r18
    3238:	02 c0       	rjmp	.+4      	; 0x323e <LCD_write_cmd_4bit+0x7e0>
    323a:	f5 95       	asr	r31
    323c:	e7 95       	ror	r30
    323e:	8a 95       	dec	r24
    3240:	e2 f7       	brpl	.-8      	; 0x323a <LCD_write_cmd_4bit+0x7dc>
    3242:	cf 01       	movw	r24, r30
    3244:	98 2f       	mov	r25, r24
    3246:	91 70       	andi	r25, 0x01	; 1
    3248:	fe 01       	movw	r30, r28
    324a:	ef 59       	subi	r30, 0x9F	; 159
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	60 81       	ld	r22, Z
    3252:	49 2f       	mov	r20, r25
    3254:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    3258:	de 01       	movw	r26, r28
    325a:	af 59       	subi	r26, 0x9F	; 159
    325c:	bf 4f       	sbci	r27, 0xFF	; 255
    325e:	fe 01       	movw	r30, r28
    3260:	ef 59       	subi	r30, 0x9F	; 159
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	8c 93       	st	X, r24
    326a:	fe 01       	movw	r30, r28
    326c:	ef 59       	subi	r30, 0x9F	; 159
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	88 30       	cpi	r24, 0x08	; 8
    3274:	98 f2       	brcs	.-90     	; 0x321c <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	60 e0       	ldi	r22, 0x00	; 0
    327a:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
}
    327e:	cd 59       	subi	r28, 0x9D	; 157
    3280:	df 4f       	sbci	r29, 0xFF	; 255
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	08 95       	ret

00003296 <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    3296:	0f 93       	push	r16
    3298:	1f 93       	push	r17
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	cb 5a       	subi	r28, 0xAB	; 171
    32a4:	d0 40       	sbci	r29, 0x00	; 0
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	62 e0       	ldi	r22, 0x02	; 2
    32b4:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    32b8:	82 e0       	ldi	r24, 0x02	; 2
    32ba:	61 e0       	ldi	r22, 0x01	; 1
    32bc:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    32c0:	fe 01       	movw	r30, r28
    32c2:	eb 55       	subi	r30, 0x5B	; 91
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	a0 e8       	ldi	r26, 0x80	; 128
    32cc:	bf e3       	ldi	r27, 0x3F	; 63
    32ce:	80 83       	st	Z, r24
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	a2 83       	std	Z+2, r26	; 0x02
    32d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32d6:	8e 01       	movw	r16, r28
    32d8:	0f 55       	subi	r16, 0x5F	; 95
    32da:	1f 4f       	sbci	r17, 0xFF	; 255
    32dc:	fe 01       	movw	r30, r28
    32de:	eb 55       	subi	r30, 0x5B	; 91
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	60 81       	ld	r22, Z
    32e4:	71 81       	ldd	r23, Z+1	; 0x01
    32e6:	82 81       	ldd	r24, Z+2	; 0x02
    32e8:	93 81       	ldd	r25, Z+3	; 0x03
    32ea:	2b ea       	ldi	r18, 0xAB	; 171
    32ec:	3a ea       	ldi	r19, 0xAA	; 170
    32ee:	4a e2       	ldi	r20, 0x2A	; 42
    32f0:	50 e4       	ldi	r21, 0x40	; 64
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	f8 01       	movw	r30, r16
    32fc:	80 83       	st	Z, r24
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	a2 83       	std	Z+2, r26	; 0x02
    3302:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3304:	fe 01       	movw	r30, r28
    3306:	ef 55       	subi	r30, 0x5F	; 95
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e8       	ldi	r20, 0x80	; 128
    3318:	5f e3       	ldi	r21, 0x3F	; 63
    331a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    331e:	88 23       	and	r24, r24
    3320:	34 f4       	brge	.+12     	; 0x332e <LCD_function_set_4bit+0x98>
		__ticks = 1;
    3322:	fe 01       	movw	r30, r28
    3324:	e0 56       	subi	r30, 0x60	; 96
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	80 83       	st	Z, r24
    332c:	e0 c0       	rjmp	.+448    	; 0x34ee <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    332e:	fe 01       	movw	r30, r28
    3330:	ef 55       	subi	r30, 0x5F	; 95
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	4f e7       	ldi	r20, 0x7F	; 127
    3342:	53 e4       	ldi	r21, 0x43	; 67
    3344:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3348:	18 16       	cp	r1, r24
    334a:	0c f0       	brlt	.+2      	; 0x334e <LCD_function_set_4bit+0xb8>
    334c:	c0 c0       	rjmp	.+384    	; 0x34ce <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    334e:	fe 01       	movw	r30, r28
    3350:	eb 55       	subi	r30, 0x5B	; 91
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	60 81       	ld	r22, Z
    3356:	71 81       	ldd	r23, Z+1	; 0x01
    3358:	82 81       	ldd	r24, Z+2	; 0x02
    335a:	93 81       	ldd	r25, Z+3	; 0x03
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a e7       	ldi	r20, 0x7A	; 122
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	fe 01       	movw	r30, r28
    336e:	e4 56       	subi	r30, 0x64	; 100
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	80 83       	st	Z, r24
    3374:	91 83       	std	Z+1, r25	; 0x01
    3376:	a2 83       	std	Z+2, r26	; 0x02
    3378:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337a:	8e 01       	movw	r16, r28
    337c:	08 56       	subi	r16, 0x68	; 104
    337e:	1f 4f       	sbci	r17, 0xFF	; 255
    3380:	fe 01       	movw	r30, r28
    3382:	e4 56       	subi	r30, 0x64	; 100
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	60 81       	ld	r22, Z
    3388:	71 81       	ldd	r23, Z+1	; 0x01
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	93 81       	ldd	r25, Z+3	; 0x03
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	4a ef       	ldi	r20, 0xFA	; 250
    3394:	54 e4       	ldi	r21, 0x44	; 68
    3396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	f8 01       	movw	r30, r16
    33a0:	80 83       	st	Z, r24
    33a2:	91 83       	std	Z+1, r25	; 0x01
    33a4:	a2 83       	std	Z+2, r26	; 0x02
    33a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a8:	fe 01       	movw	r30, r28
    33aa:	e8 56       	subi	r30, 0x68	; 104
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	60 81       	ld	r22, Z
    33b0:	71 81       	ldd	r23, Z+1	; 0x01
    33b2:	82 81       	ldd	r24, Z+2	; 0x02
    33b4:	93 81       	ldd	r25, Z+3	; 0x03
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e8       	ldi	r20, 0x80	; 128
    33bc:	5f e3       	ldi	r21, 0x3F	; 63
    33be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33c2:	88 23       	and	r24, r24
    33c4:	44 f4       	brge	.+16     	; 0x33d6 <LCD_function_set_4bit+0x140>
		__ticks = 1;
    33c6:	fe 01       	movw	r30, r28
    33c8:	ea 56       	subi	r30, 0x6A	; 106
    33ca:	ff 4f       	sbci	r31, 0xFF	; 255
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
    33d4:	64 c0       	rjmp	.+200    	; 0x349e <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    33d6:	fe 01       	movw	r30, r28
    33d8:	e8 56       	subi	r30, 0x68	; 104
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	60 81       	ld	r22, Z
    33de:	71 81       	ldd	r23, Z+1	; 0x01
    33e0:	82 81       	ldd	r24, Z+2	; 0x02
    33e2:	93 81       	ldd	r25, Z+3	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	3f ef       	ldi	r19, 0xFF	; 255
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	57 e4       	ldi	r21, 0x47	; 71
    33ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	0c f0       	brlt	.+2      	; 0x33f6 <LCD_function_set_4bit+0x160>
    33f4:	43 c0       	rjmp	.+134    	; 0x347c <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f6:	fe 01       	movw	r30, r28
    33f8:	e4 56       	subi	r30, 0x64	; 100
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 81       	ld	r22, Z
    33fe:	71 81       	ldd	r23, Z+1	; 0x01
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e2       	ldi	r20, 0x20	; 32
    340a:	51 e4       	ldi	r21, 0x41	; 65
    340c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	8e 01       	movw	r16, r28
    3416:	0a 56       	subi	r16, 0x6A	; 106
    3418:	1f 4f       	sbci	r17, 0xFF	; 255
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	f8 01       	movw	r30, r16
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	80 83       	st	Z, r24
    342c:	1f c0       	rjmp	.+62     	; 0x346c <LCD_function_set_4bit+0x1d6>
    342e:	fe 01       	movw	r30, r28
    3430:	ec 56       	subi	r30, 0x6C	; 108
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	88 ec       	ldi	r24, 0xC8	; 200
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	91 83       	std	Z+1, r25	; 0x01
    343a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    343c:	fe 01       	movw	r30, r28
    343e:	ec 56       	subi	r30, 0x6C	; 108
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	91 81       	ldd	r25, Z+1	; 0x01
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <LCD_function_set_4bit+0x1b0>
    344a:	fe 01       	movw	r30, r28
    344c:	ec 56       	subi	r30, 0x6C	; 108
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	91 83       	std	Z+1, r25	; 0x01
    3452:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3454:	de 01       	movw	r26, r28
    3456:	aa 56       	subi	r26, 0x6A	; 106
    3458:	bf 4f       	sbci	r27, 0xFF	; 255
    345a:	fe 01       	movw	r30, r28
    345c:	ea 56       	subi	r30, 0x6A	; 106
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	11 96       	adiw	r26, 0x01	; 1
    3468:	9c 93       	st	X, r25
    346a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346c:	fe 01       	movw	r30, r28
    346e:	ea 56       	subi	r30, 0x6A	; 106
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	80 81       	ld	r24, Z
    3474:	91 81       	ldd	r25, Z+1	; 0x01
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	d1 f6       	brne	.-76     	; 0x342e <LCD_function_set_4bit+0x198>
    347a:	4b c0       	rjmp	.+150    	; 0x3512 <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	8e 01       	movw	r16, r28
    347e:	0a 56       	subi	r16, 0x6A	; 106
    3480:	1f 4f       	sbci	r17, 0xFF	; 255
    3482:	fe 01       	movw	r30, r28
    3484:	e8 56       	subi	r30, 0x68	; 104
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	f8 01       	movw	r30, r16
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	80 83       	st	Z, r24
    349e:	de 01       	movw	r26, r28
    34a0:	ae 56       	subi	r26, 0x6E	; 110
    34a2:	bf 4f       	sbci	r27, 0xFF	; 255
    34a4:	fe 01       	movw	r30, r28
    34a6:	ea 56       	subi	r30, 0x6A	; 106
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 81       	ld	r24, Z
    34ac:	91 81       	ldd	r25, Z+1	; 0x01
    34ae:	11 96       	adiw	r26, 0x01	; 1
    34b0:	9c 93       	st	X, r25
    34b2:	8e 93       	st	-X, r24
    34b4:	fe 01       	movw	r30, r28
    34b6:	ee 56       	subi	r30, 0x6E	; 110
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <LCD_function_set_4bit+0x228>
    34c2:	fe 01       	movw	r30, r28
    34c4:	ee 56       	subi	r30, 0x6E	; 110
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	80 83       	st	Z, r24
    34cc:	22 c0       	rjmp	.+68     	; 0x3512 <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34ce:	8e 01       	movw	r16, r28
    34d0:	00 56       	subi	r16, 0x60	; 96
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	fe 01       	movw	r30, r28
    34d6:	ef 55       	subi	r30, 0x5F	; 95
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	60 81       	ld	r22, Z
    34dc:	71 81       	ldd	r23, Z+1	; 0x01
    34de:	82 81       	ldd	r24, Z+2	; 0x02
    34e0:	93 81       	ldd	r25, Z+3	; 0x03
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	f8 01       	movw	r30, r16
    34ec:	80 83       	st	Z, r24
    34ee:	de 01       	movw	r26, r28
    34f0:	af 56       	subi	r26, 0x6F	; 111
    34f2:	bf 4f       	sbci	r27, 0xFF	; 255
    34f4:	fe 01       	movw	r30, r28
    34f6:	e0 56       	subi	r30, 0x60	; 96
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	80 81       	ld	r24, Z
    34fc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34fe:	fe 01       	movw	r30, r28
    3500:	ef 56       	subi	r30, 0x6F	; 111
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 81       	ld	r24, Z
    3506:	8a 95       	dec	r24
    3508:	f1 f7       	brne	.-4      	; 0x3506 <LCD_function_set_4bit+0x270>
    350a:	fe 01       	movw	r30, r28
    350c:	ef 56       	subi	r30, 0x6F	; 111
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3512:	82 e0       	ldi	r24, 0x02	; 2
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    351a:	fe 01       	movw	r30, r28
    351c:	e3 57       	subi	r30, 0x73	; 115
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	a0 e8       	ldi	r26, 0x80	; 128
    3526:	bf e3       	ldi	r27, 0x3F	; 63
    3528:	80 83       	st	Z, r24
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	a2 83       	std	Z+2, r26	; 0x02
    352e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3530:	8e 01       	movw	r16, r28
    3532:	07 57       	subi	r16, 0x77	; 119
    3534:	1f 4f       	sbci	r17, 0xFF	; 255
    3536:	fe 01       	movw	r30, r28
    3538:	e3 57       	subi	r30, 0x73	; 115
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	60 81       	ld	r22, Z
    353e:	71 81       	ldd	r23, Z+1	; 0x01
    3540:	82 81       	ldd	r24, Z+2	; 0x02
    3542:	93 81       	ldd	r25, Z+3	; 0x03
    3544:	2b ea       	ldi	r18, 0xAB	; 171
    3546:	3a ea       	ldi	r19, 0xAA	; 170
    3548:	4a e2       	ldi	r20, 0x2A	; 42
    354a:	50 e4       	ldi	r21, 0x40	; 64
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	f8 01       	movw	r30, r16
    3556:	80 83       	st	Z, r24
    3558:	91 83       	std	Z+1, r25	; 0x01
    355a:	a2 83       	std	Z+2, r26	; 0x02
    355c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    355e:	fe 01       	movw	r30, r28
    3560:	e7 57       	subi	r30, 0x77	; 119
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	60 81       	ld	r22, Z
    3566:	71 81       	ldd	r23, Z+1	; 0x01
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e8       	ldi	r20, 0x80	; 128
    3572:	5f e3       	ldi	r21, 0x3F	; 63
    3574:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3578:	88 23       	and	r24, r24
    357a:	34 f4       	brge	.+12     	; 0x3588 <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    357c:	fe 01       	movw	r30, r28
    357e:	e8 57       	subi	r30, 0x78	; 120
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	80 83       	st	Z, r24
    3586:	e0 c0       	rjmp	.+448    	; 0x3748 <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    3588:	fe 01       	movw	r30, r28
    358a:	e7 57       	subi	r30, 0x77	; 119
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	60 81       	ld	r22, Z
    3590:	71 81       	ldd	r23, Z+1	; 0x01
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	4f e7       	ldi	r20, 0x7F	; 127
    359c:	53 e4       	ldi	r21, 0x43	; 67
    359e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35a2:	18 16       	cp	r1, r24
    35a4:	0c f0       	brlt	.+2      	; 0x35a8 <LCD_function_set_4bit+0x312>
    35a6:	c0 c0       	rjmp	.+384    	; 0x3728 <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    35a8:	fe 01       	movw	r30, r28
    35aa:	e3 57       	subi	r30, 0x73	; 115
    35ac:	ff 4f       	sbci	r31, 0xFF	; 255
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	4a e7       	ldi	r20, 0x7A	; 122
    35bc:	54 e4       	ldi	r21, 0x44	; 68
    35be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	fe 01       	movw	r30, r28
    35c8:	ec 57       	subi	r30, 0x7C	; 124
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	80 83       	st	Z, r24
    35ce:	91 83       	std	Z+1, r25	; 0x01
    35d0:	a2 83       	std	Z+2, r26	; 0x02
    35d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d4:	8e 01       	movw	r16, r28
    35d6:	00 58       	subi	r16, 0x80	; 128
    35d8:	1f 4f       	sbci	r17, 0xFF	; 255
    35da:	fe 01       	movw	r30, r28
    35dc:	ec 57       	subi	r30, 0x7C	; 124
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	60 81       	ld	r22, Z
    35e2:	71 81       	ldd	r23, Z+1	; 0x01
    35e4:	82 81       	ldd	r24, Z+2	; 0x02
    35e6:	93 81       	ldd	r25, Z+3	; 0x03
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	4a ef       	ldi	r20, 0xFA	; 250
    35ee:	54 e4       	ldi	r21, 0x44	; 68
    35f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	f8 01       	movw	r30, r16
    35fa:	80 83       	st	Z, r24
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	a2 83       	std	Z+2, r26	; 0x02
    3600:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3602:	fe 01       	movw	r30, r28
    3604:	e0 58       	subi	r30, 0x80	; 128
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	60 81       	ld	r22, Z
    360a:	71 81       	ldd	r23, Z+1	; 0x01
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	93 81       	ldd	r25, Z+3	; 0x03
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	40 e8       	ldi	r20, 0x80	; 128
    3616:	5f e3       	ldi	r21, 0x3F	; 63
    3618:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    361c:	88 23       	and	r24, r24
    361e:	44 f4       	brge	.+16     	; 0x3630 <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    3620:	fe 01       	movw	r30, r28
    3622:	e2 58       	subi	r30, 0x82	; 130
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	91 83       	std	Z+1, r25	; 0x01
    362c:	80 83       	st	Z, r24
    362e:	64 c0       	rjmp	.+200    	; 0x36f8 <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    3630:	fe 01       	movw	r30, r28
    3632:	e0 58       	subi	r30, 0x80	; 128
    3634:	ff 4f       	sbci	r31, 0xFF	; 255
    3636:	60 81       	ld	r22, Z
    3638:	71 81       	ldd	r23, Z+1	; 0x01
    363a:	82 81       	ldd	r24, Z+2	; 0x02
    363c:	93 81       	ldd	r25, Z+3	; 0x03
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	3f ef       	ldi	r19, 0xFF	; 255
    3642:	4f e7       	ldi	r20, 0x7F	; 127
    3644:	57 e4       	ldi	r21, 0x47	; 71
    3646:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    364a:	18 16       	cp	r1, r24
    364c:	0c f0       	brlt	.+2      	; 0x3650 <LCD_function_set_4bit+0x3ba>
    364e:	43 c0       	rjmp	.+134    	; 0x36d6 <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	fe 01       	movw	r30, r28
    3652:	ec 57       	subi	r30, 0x7C	; 124
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	60 81       	ld	r22, Z
    3658:	71 81       	ldd	r23, Z+1	; 0x01
    365a:	82 81       	ldd	r24, Z+2	; 0x02
    365c:	93 81       	ldd	r25, Z+3	; 0x03
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e2       	ldi	r20, 0x20	; 32
    3664:	51 e4       	ldi	r21, 0x41	; 65
    3666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	8e 01       	movw	r16, r28
    3670:	02 58       	subi	r16, 0x82	; 130
    3672:	1f 4f       	sbci	r17, 0xFF	; 255
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	f8 01       	movw	r30, r16
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	80 83       	st	Z, r24
    3686:	1f c0       	rjmp	.+62     	; 0x36c6 <LCD_function_set_4bit+0x430>
    3688:	fe 01       	movw	r30, r28
    368a:	e4 58       	subi	r30, 0x84	; 132
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	88 ec       	ldi	r24, 0xC8	; 200
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3696:	fe 01       	movw	r30, r28
    3698:	e4 58       	subi	r30, 0x84	; 132
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	80 81       	ld	r24, Z
    369e:	91 81       	ldd	r25, Z+1	; 0x01
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <LCD_function_set_4bit+0x40a>
    36a4:	fe 01       	movw	r30, r28
    36a6:	e4 58       	subi	r30, 0x84	; 132
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ae:	de 01       	movw	r26, r28
    36b0:	a2 58       	subi	r26, 0x82	; 130
    36b2:	bf 4f       	sbci	r27, 0xFF	; 255
    36b4:	fe 01       	movw	r30, r28
    36b6:	e2 58       	subi	r30, 0x82	; 130
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	80 81       	ld	r24, Z
    36bc:	91 81       	ldd	r25, Z+1	; 0x01
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	11 96       	adiw	r26, 0x01	; 1
    36c2:	9c 93       	st	X, r25
    36c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c6:	fe 01       	movw	r30, r28
    36c8:	e2 58       	subi	r30, 0x82	; 130
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	80 81       	ld	r24, Z
    36ce:	91 81       	ldd	r25, Z+1	; 0x01
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	d1 f6       	brne	.-76     	; 0x3688 <LCD_function_set_4bit+0x3f2>
    36d4:	4b c0       	rjmp	.+150    	; 0x376c <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d6:	8e 01       	movw	r16, r28
    36d8:	02 58       	subi	r16, 0x82	; 130
    36da:	1f 4f       	sbci	r17, 0xFF	; 255
    36dc:	fe 01       	movw	r30, r28
    36de:	e0 58       	subi	r30, 0x80	; 128
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	f8 01       	movw	r30, r16
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	80 83       	st	Z, r24
    36f8:	de 01       	movw	r26, r28
    36fa:	a6 58       	subi	r26, 0x86	; 134
    36fc:	bf 4f       	sbci	r27, 0xFF	; 255
    36fe:	fe 01       	movw	r30, r28
    3700:	e2 58       	subi	r30, 0x82	; 130
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 81       	ld	r24, Z
    3706:	91 81       	ldd	r25, Z+1	; 0x01
    3708:	11 96       	adiw	r26, 0x01	; 1
    370a:	9c 93       	st	X, r25
    370c:	8e 93       	st	-X, r24
    370e:	fe 01       	movw	r30, r28
    3710:	e6 58       	subi	r30, 0x86	; 134
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	80 81       	ld	r24, Z
    3716:	91 81       	ldd	r25, Z+1	; 0x01
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	f1 f7       	brne	.-4      	; 0x3718 <LCD_function_set_4bit+0x482>
    371c:	fe 01       	movw	r30, r28
    371e:	e6 58       	subi	r30, 0x86	; 134
    3720:	ff 4f       	sbci	r31, 0xFF	; 255
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	80 83       	st	Z, r24
    3726:	22 c0       	rjmp	.+68     	; 0x376c <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3728:	8e 01       	movw	r16, r28
    372a:	08 57       	subi	r16, 0x78	; 120
    372c:	1f 4f       	sbci	r17, 0xFF	; 255
    372e:	fe 01       	movw	r30, r28
    3730:	e7 57       	subi	r30, 0x77	; 119
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	60 81       	ld	r22, Z
    3736:	71 81       	ldd	r23, Z+1	; 0x01
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	f8 01       	movw	r30, r16
    3746:	80 83       	st	Z, r24
    3748:	de 01       	movw	r26, r28
    374a:	a7 58       	subi	r26, 0x87	; 135
    374c:	bf 4f       	sbci	r27, 0xFF	; 255
    374e:	fe 01       	movw	r30, r28
    3750:	e8 57       	subi	r30, 0x78	; 120
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3758:	fe 01       	movw	r30, r28
    375a:	e7 58       	subi	r30, 0x87	; 135
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	80 81       	ld	r24, Z
    3760:	8a 95       	dec	r24
    3762:	f1 f7       	brne	.-4      	; 0x3760 <LCD_function_set_4bit+0x4ca>
    3764:	fe 01       	movw	r30, r28
    3766:	e7 58       	subi	r30, 0x87	; 135
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    376c:	fe 01       	movw	r30, r28
    376e:	e5 55       	subi	r30, 0x55	; 85
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	10 82       	st	Z, r1
    3774:	23 c0       	rjmp	.+70     	; 0x37bc <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    3776:	fe 01       	movw	r30, r28
    3778:	e5 55       	subi	r30, 0x55	; 85
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 81       	ld	r24, Z
    377e:	48 2f       	mov	r20, r24
    3780:	4c 5f       	subi	r20, 0xFC	; 252
    3782:	fe 01       	movw	r30, r28
    3784:	e5 55       	subi	r30, 0x55	; 85
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	80 81       	ld	r24, Z
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	02 c0       	rjmp	.+4      	; 0x3798 <LCD_function_set_4bit+0x502>
    3794:	95 95       	asr	r25
    3796:	87 95       	ror	r24
    3798:	2a 95       	dec	r18
    379a:	e2 f7       	brpl	.-8      	; 0x3794 <LCD_function_set_4bit+0x4fe>
    379c:	98 2f       	mov	r25, r24
    379e:	91 70       	andi	r25, 0x01	; 1
    37a0:	82 e0       	ldi	r24, 0x02	; 2
    37a2:	64 2f       	mov	r22, r20
    37a4:	49 2f       	mov	r20, r25
    37a6:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    37aa:	de 01       	movw	r26, r28
    37ac:	a5 55       	subi	r26, 0x55	; 85
    37ae:	bf 4f       	sbci	r27, 0xFF	; 255
    37b0:	fe 01       	movw	r30, r28
    37b2:	e5 55       	subi	r30, 0x55	; 85
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	8f 5f       	subi	r24, 0xFF	; 255
    37ba:	8c 93       	st	X, r24
    37bc:	fe 01       	movw	r30, r28
    37be:	e5 55       	subi	r30, 0x55	; 85
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 81       	ld	r24, Z
    37c4:	84 30       	cpi	r24, 0x04	; 4
    37c6:	b8 f2       	brcs	.-82     	; 0x3776 <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    37c8:	82 e0       	ldi	r24, 0x02	; 2
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    37d0:	fe 01       	movw	r30, r28
    37d2:	eb 58       	subi	r30, 0x8B	; 139
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	a0 e2       	ldi	r26, 0x20	; 32
    37dc:	b1 e4       	ldi	r27, 0x41	; 65
    37de:	80 83       	st	Z, r24
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	a2 83       	std	Z+2, r26	; 0x02
    37e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37e6:	8e 01       	movw	r16, r28
    37e8:	0f 58       	subi	r16, 0x8F	; 143
    37ea:	1f 4f       	sbci	r17, 0xFF	; 255
    37ec:	fe 01       	movw	r30, r28
    37ee:	eb 58       	subi	r30, 0x8B	; 139
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	60 81       	ld	r22, Z
    37f4:	71 81       	ldd	r23, Z+1	; 0x01
    37f6:	82 81       	ldd	r24, Z+2	; 0x02
    37f8:	93 81       	ldd	r25, Z+3	; 0x03
    37fa:	2b ea       	ldi	r18, 0xAB	; 171
    37fc:	3a ea       	ldi	r19, 0xAA	; 170
    37fe:	4a e2       	ldi	r20, 0x2A	; 42
    3800:	50 e4       	ldi	r21, 0x40	; 64
    3802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	f8 01       	movw	r30, r16
    380c:	80 83       	st	Z, r24
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	a2 83       	std	Z+2, r26	; 0x02
    3812:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3814:	fe 01       	movw	r30, r28
    3816:	ef 58       	subi	r30, 0x8F	; 143
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	60 81       	ld	r22, Z
    381c:	71 81       	ldd	r23, Z+1	; 0x01
    381e:	82 81       	ldd	r24, Z+2	; 0x02
    3820:	93 81       	ldd	r25, Z+3	; 0x03
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e8       	ldi	r20, 0x80	; 128
    3828:	5f e3       	ldi	r21, 0x3F	; 63
    382a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    382e:	88 23       	and	r24, r24
    3830:	34 f4       	brge	.+12     	; 0x383e <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    3832:	fe 01       	movw	r30, r28
    3834:	e0 59       	subi	r30, 0x90	; 144
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	80 83       	st	Z, r24
    383c:	e0 c0       	rjmp	.+448    	; 0x39fe <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    383e:	fe 01       	movw	r30, r28
    3840:	ef 58       	subi	r30, 0x8F	; 143
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	82 81       	ldd	r24, Z+2	; 0x02
    384a:	93 81       	ldd	r25, Z+3	; 0x03
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	4f e7       	ldi	r20, 0x7F	; 127
    3852:	53 e4       	ldi	r21, 0x43	; 67
    3854:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3858:	18 16       	cp	r1, r24
    385a:	0c f0       	brlt	.+2      	; 0x385e <LCD_function_set_4bit+0x5c8>
    385c:	c0 c0       	rjmp	.+384    	; 0x39de <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    385e:	fe 01       	movw	r30, r28
    3860:	eb 58       	subi	r30, 0x8B	; 139
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	60 81       	ld	r22, Z
    3866:	71 81       	ldd	r23, Z+1	; 0x01
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	4a e7       	ldi	r20, 0x7A	; 122
    3872:	54 e4       	ldi	r21, 0x44	; 68
    3874:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	fe 01       	movw	r30, r28
    387e:	e4 59       	subi	r30, 0x94	; 148
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 83       	st	Z, r24
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	a2 83       	std	Z+2, r26	; 0x02
    3888:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    388a:	8e 01       	movw	r16, r28
    388c:	08 59       	subi	r16, 0x98	; 152
    388e:	1f 4f       	sbci	r17, 0xFF	; 255
    3890:	fe 01       	movw	r30, r28
    3892:	e4 59       	subi	r30, 0x94	; 148
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	60 81       	ld	r22, Z
    3898:	71 81       	ldd	r23, Z+1	; 0x01
    389a:	82 81       	ldd	r24, Z+2	; 0x02
    389c:	93 81       	ldd	r25, Z+3	; 0x03
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	4a ef       	ldi	r20, 0xFA	; 250
    38a4:	54 e4       	ldi	r21, 0x44	; 68
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	f8 01       	movw	r30, r16
    38b0:	80 83       	st	Z, r24
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	a2 83       	std	Z+2, r26	; 0x02
    38b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38b8:	fe 01       	movw	r30, r28
    38ba:	e8 59       	subi	r30, 0x98	; 152
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	60 81       	ld	r22, Z
    38c0:	71 81       	ldd	r23, Z+1	; 0x01
    38c2:	82 81       	ldd	r24, Z+2	; 0x02
    38c4:	93 81       	ldd	r25, Z+3	; 0x03
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e8       	ldi	r20, 0x80	; 128
    38cc:	5f e3       	ldi	r21, 0x3F	; 63
    38ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    38d2:	88 23       	and	r24, r24
    38d4:	44 f4       	brge	.+16     	; 0x38e6 <LCD_function_set_4bit+0x650>
		__ticks = 1;
    38d6:	fe 01       	movw	r30, r28
    38d8:	ea 59       	subi	r30, 0x9A	; 154
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	91 83       	std	Z+1, r25	; 0x01
    38e2:	80 83       	st	Z, r24
    38e4:	64 c0       	rjmp	.+200    	; 0x39ae <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    38e6:	fe 01       	movw	r30, r28
    38e8:	e8 59       	subi	r30, 0x98	; 152
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	60 81       	ld	r22, Z
    38ee:	71 81       	ldd	r23, Z+1	; 0x01
    38f0:	82 81       	ldd	r24, Z+2	; 0x02
    38f2:	93 81       	ldd	r25, Z+3	; 0x03
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	3f ef       	ldi	r19, 0xFF	; 255
    38f8:	4f e7       	ldi	r20, 0x7F	; 127
    38fa:	57 e4       	ldi	r21, 0x47	; 71
    38fc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3900:	18 16       	cp	r1, r24
    3902:	0c f0       	brlt	.+2      	; 0x3906 <LCD_function_set_4bit+0x670>
    3904:	43 c0       	rjmp	.+134    	; 0x398c <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3906:	fe 01       	movw	r30, r28
    3908:	e4 59       	subi	r30, 0x94	; 148
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	93 81       	ldd	r25, Z+3	; 0x03
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e2       	ldi	r20, 0x20	; 32
    391a:	51 e4       	ldi	r21, 0x41	; 65
    391c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	8e 01       	movw	r16, r28
    3926:	0a 59       	subi	r16, 0x9A	; 154
    3928:	1f 4f       	sbci	r17, 0xFF	; 255
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	f8 01       	movw	r30, r16
    3938:	91 83       	std	Z+1, r25	; 0x01
    393a:	80 83       	st	Z, r24
    393c:	1f c0       	rjmp	.+62     	; 0x397c <LCD_function_set_4bit+0x6e6>
    393e:	fe 01       	movw	r30, r28
    3940:	ec 59       	subi	r30, 0x9C	; 156
    3942:	ff 4f       	sbci	r31, 0xFF	; 255
    3944:	88 ec       	ldi	r24, 0xC8	; 200
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    394c:	fe 01       	movw	r30, r28
    394e:	ec 59       	subi	r30, 0x9C	; 156
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	80 81       	ld	r24, Z
    3954:	91 81       	ldd	r25, Z+1	; 0x01
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	f1 f7       	brne	.-4      	; 0x3956 <LCD_function_set_4bit+0x6c0>
    395a:	fe 01       	movw	r30, r28
    395c:	ec 59       	subi	r30, 0x9C	; 156
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	91 83       	std	Z+1, r25	; 0x01
    3962:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3964:	de 01       	movw	r26, r28
    3966:	aa 59       	subi	r26, 0x9A	; 154
    3968:	bf 4f       	sbci	r27, 0xFF	; 255
    396a:	fe 01       	movw	r30, r28
    396c:	ea 59       	subi	r30, 0x9A	; 154
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	11 96       	adiw	r26, 0x01	; 1
    3978:	9c 93       	st	X, r25
    397a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397c:	fe 01       	movw	r30, r28
    397e:	ea 59       	subi	r30, 0x9A	; 154
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	d1 f6       	brne	.-76     	; 0x393e <LCD_function_set_4bit+0x6a8>
    398a:	4b c0       	rjmp	.+150    	; 0x3a22 <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398c:	8e 01       	movw	r16, r28
    398e:	0a 59       	subi	r16, 0x9A	; 154
    3990:	1f 4f       	sbci	r17, 0xFF	; 255
    3992:	fe 01       	movw	r30, r28
    3994:	e8 59       	subi	r30, 0x98	; 152
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	60 81       	ld	r22, Z
    399a:	71 81       	ldd	r23, Z+1	; 0x01
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	93 81       	ldd	r25, Z+3	; 0x03
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	f8 01       	movw	r30, r16
    39aa:	91 83       	std	Z+1, r25	; 0x01
    39ac:	80 83       	st	Z, r24
    39ae:	de 01       	movw	r26, r28
    39b0:	ae 59       	subi	r26, 0x9E	; 158
    39b2:	bf 4f       	sbci	r27, 0xFF	; 255
    39b4:	fe 01       	movw	r30, r28
    39b6:	ea 59       	subi	r30, 0x9A	; 154
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	80 81       	ld	r24, Z
    39bc:	91 81       	ldd	r25, Z+1	; 0x01
    39be:	11 96       	adiw	r26, 0x01	; 1
    39c0:	9c 93       	st	X, r25
    39c2:	8e 93       	st	-X, r24
    39c4:	fe 01       	movw	r30, r28
    39c6:	ee 59       	subi	r30, 0x9E	; 158
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 81       	ld	r24, Z
    39cc:	91 81       	ldd	r25, Z+1	; 0x01
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <LCD_function_set_4bit+0x738>
    39d2:	fe 01       	movw	r30, r28
    39d4:	ee 59       	subi	r30, 0x9E	; 158
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	91 83       	std	Z+1, r25	; 0x01
    39da:	80 83       	st	Z, r24
    39dc:	22 c0       	rjmp	.+68     	; 0x3a22 <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39de:	8e 01       	movw	r16, r28
    39e0:	00 59       	subi	r16, 0x90	; 144
    39e2:	1f 4f       	sbci	r17, 0xFF	; 255
    39e4:	fe 01       	movw	r30, r28
    39e6:	ef 58       	subi	r30, 0x8F	; 143
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	60 81       	ld	r22, Z
    39ec:	71 81       	ldd	r23, Z+1	; 0x01
    39ee:	82 81       	ldd	r24, Z+2	; 0x02
    39f0:	93 81       	ldd	r25, Z+3	; 0x03
    39f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	f8 01       	movw	r30, r16
    39fc:	80 83       	st	Z, r24
    39fe:	de 01       	movw	r26, r28
    3a00:	af 59       	subi	r26, 0x9F	; 159
    3a02:	bf 4f       	sbci	r27, 0xFF	; 255
    3a04:	fe 01       	movw	r30, r28
    3a06:	e0 59       	subi	r30, 0x90	; 144
    3a08:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0a:	80 81       	ld	r24, Z
    3a0c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ef 59       	subi	r30, 0x9F	; 159
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	8a 95       	dec	r24
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <LCD_function_set_4bit+0x780>
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	ef 59       	subi	r30, 0x9F	; 159
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3a22:	82 e0       	ldi	r24, 0x02	; 2
    3a24:	60 e0       	ldi	r22, 0x00	; 0
    3a26:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	e3 5a       	subi	r30, 0xA3	; 163
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	a0 e8       	ldi	r26, 0x80	; 128
    3a36:	bf e3       	ldi	r27, 0x3F	; 63
    3a38:	80 83       	st	Z, r24
    3a3a:	91 83       	std	Z+1, r25	; 0x01
    3a3c:	a2 83       	std	Z+2, r26	; 0x02
    3a3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a40:	8e 01       	movw	r16, r28
    3a42:	07 5a       	subi	r16, 0xA7	; 167
    3a44:	1f 4f       	sbci	r17, 0xFF	; 255
    3a46:	fe 01       	movw	r30, r28
    3a48:	e3 5a       	subi	r30, 0xA3	; 163
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	60 81       	ld	r22, Z
    3a4e:	71 81       	ldd	r23, Z+1	; 0x01
    3a50:	82 81       	ldd	r24, Z+2	; 0x02
    3a52:	93 81       	ldd	r25, Z+3	; 0x03
    3a54:	2b ea       	ldi	r18, 0xAB	; 171
    3a56:	3a ea       	ldi	r19, 0xAA	; 170
    3a58:	4a e2       	ldi	r20, 0x2A	; 42
    3a5a:	50 e4       	ldi	r21, 0x40	; 64
    3a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	f8 01       	movw	r30, r16
    3a66:	80 83       	st	Z, r24
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	a2 83       	std	Z+2, r26	; 0x02
    3a6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e7 5a       	subi	r30, 0xA7	; 167
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	60 81       	ld	r22, Z
    3a76:	71 81       	ldd	r23, Z+1	; 0x01
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	93 81       	ldd	r25, Z+3	; 0x03
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	40 e8       	ldi	r20, 0x80	; 128
    3a82:	5f e3       	ldi	r21, 0x3F	; 63
    3a84:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a88:	88 23       	and	r24, r24
    3a8a:	34 f4       	brge	.+12     	; 0x3a98 <LCD_function_set_4bit+0x802>
		__ticks = 1;
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e8 5a       	subi	r30, 0xA8	; 168
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	80 83       	st	Z, r24
    3a96:	e0 c0       	rjmp	.+448    	; 0x3c58 <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e7 5a       	subi	r30, 0xA7	; 167
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	4f e7       	ldi	r20, 0x7F	; 127
    3aac:	53 e4       	ldi	r21, 0x43	; 67
    3aae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ab2:	18 16       	cp	r1, r24
    3ab4:	0c f0       	brlt	.+2      	; 0x3ab8 <LCD_function_set_4bit+0x822>
    3ab6:	c0 c0       	rjmp	.+384    	; 0x3c38 <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e3 5a       	subi	r30, 0xA3	; 163
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	82 81       	ldd	r24, Z+2	; 0x02
    3ac4:	93 81       	ldd	r25, Z+3	; 0x03
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	4a e7       	ldi	r20, 0x7A	; 122
    3acc:	54 e4       	ldi	r21, 0x44	; 68
    3ace:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	ec 5a       	subi	r30, 0xAC	; 172
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	80 83       	st	Z, r24
    3ade:	91 83       	std	Z+1, r25	; 0x01
    3ae0:	a2 83       	std	Z+2, r26	; 0x02
    3ae2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae4:	8e 01       	movw	r16, r28
    3ae6:	00 5b       	subi	r16, 0xB0	; 176
    3ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aea:	fe 01       	movw	r30, r28
    3aec:	ec 5a       	subi	r30, 0xAC	; 172
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	60 81       	ld	r22, Z
    3af2:	71 81       	ldd	r23, Z+1	; 0x01
    3af4:	82 81       	ldd	r24, Z+2	; 0x02
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	4a ef       	ldi	r20, 0xFA	; 250
    3afe:	54 e4       	ldi	r21, 0x44	; 68
    3b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	f8 01       	movw	r30, r16
    3b0a:	80 83       	st	Z, r24
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	a2 83       	std	Z+2, r26	; 0x02
    3b10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b12:	fe 01       	movw	r30, r28
    3b14:	e0 5b       	subi	r30, 0xB0	; 176
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	60 81       	ld	r22, Z
    3b1a:	71 81       	ldd	r23, Z+1	; 0x01
    3b1c:	82 81       	ldd	r24, Z+2	; 0x02
    3b1e:	93 81       	ldd	r25, Z+3	; 0x03
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e8       	ldi	r20, 0x80	; 128
    3b26:	5f e3       	ldi	r21, 0x3F	; 63
    3b28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b2c:	88 23       	and	r24, r24
    3b2e:	44 f4       	brge	.+16     	; 0x3b40 <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    3b30:	fe 01       	movw	r30, r28
    3b32:	e2 5b       	subi	r30, 0xB2	; 178
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
    3b3e:	64 c0       	rjmp	.+200    	; 0x3c08 <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    3b40:	fe 01       	movw	r30, r28
    3b42:	e0 5b       	subi	r30, 0xB0	; 176
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	60 81       	ld	r22, Z
    3b48:	71 81       	ldd	r23, Z+1	; 0x01
    3b4a:	82 81       	ldd	r24, Z+2	; 0x02
    3b4c:	93 81       	ldd	r25, Z+3	; 0x03
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	3f ef       	ldi	r19, 0xFF	; 255
    3b52:	4f e7       	ldi	r20, 0x7F	; 127
    3b54:	57 e4       	ldi	r21, 0x47	; 71
    3b56:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b5a:	18 16       	cp	r1, r24
    3b5c:	0c f0       	brlt	.+2      	; 0x3b60 <LCD_function_set_4bit+0x8ca>
    3b5e:	43 c0       	rjmp	.+134    	; 0x3be6 <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b60:	fe 01       	movw	r30, r28
    3b62:	ec 5a       	subi	r30, 0xAC	; 172
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	60 81       	ld	r22, Z
    3b68:	71 81       	ldd	r23, Z+1	; 0x01
    3b6a:	82 81       	ldd	r24, Z+2	; 0x02
    3b6c:	93 81       	ldd	r25, Z+3	; 0x03
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	8e 01       	movw	r16, r28
    3b80:	02 5b       	subi	r16, 0xB2	; 178
    3b82:	1f 4f       	sbci	r17, 0xFF	; 255
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	f8 01       	movw	r30, r16
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
    3b96:	1f c0       	rjmp	.+62     	; 0x3bd6 <LCD_function_set_4bit+0x940>
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e4 5b       	subi	r30, 0xB4	; 180
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	88 ec       	ldi	r24, 0xC8	; 200
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	e4 5b       	subi	r30, 0xB4	; 180
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	f1 f7       	brne	.-4      	; 0x3bb0 <LCD_function_set_4bit+0x91a>
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e4 5b       	subi	r30, 0xB4	; 180
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	91 83       	std	Z+1, r25	; 0x01
    3bbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	de 01       	movw	r26, r28
    3bc0:	a2 5b       	subi	r26, 0xB2	; 178
    3bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e2 5b       	subi	r30, 0xB2	; 178
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	80 81       	ld	r24, Z
    3bcc:	91 81       	ldd	r25, Z+1	; 0x01
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	11 96       	adiw	r26, 0x01	; 1
    3bd2:	9c 93       	st	X, r25
    3bd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e2 5b       	subi	r30, 0xB2	; 178
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	d1 f6       	brne	.-76     	; 0x3b98 <LCD_function_set_4bit+0x902>
    3be4:	4b c0       	rjmp	.+150    	; 0x3c7c <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be6:	8e 01       	movw	r16, r28
    3be8:	02 5b       	subi	r16, 0xB2	; 178
    3bea:	1f 4f       	sbci	r17, 0xFF	; 255
    3bec:	fe 01       	movw	r30, r28
    3bee:	e0 5b       	subi	r30, 0xB0	; 176
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	60 81       	ld	r22, Z
    3bf4:	71 81       	ldd	r23, Z+1	; 0x01
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	f8 01       	movw	r30, r16
    3c04:	91 83       	std	Z+1, r25	; 0x01
    3c06:	80 83       	st	Z, r24
    3c08:	de 01       	movw	r26, r28
    3c0a:	a6 5b       	subi	r26, 0xB6	; 182
    3c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e2 5b       	subi	r30, 0xB2	; 178
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 81       	ld	r24, Z
    3c16:	91 81       	ldd	r25, Z+1	; 0x01
    3c18:	11 96       	adiw	r26, 0x01	; 1
    3c1a:	9c 93       	st	X, r25
    3c1c:	8e 93       	st	-X, r24
    3c1e:	fe 01       	movw	r30, r28
    3c20:	e6 5b       	subi	r30, 0xB6	; 182
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	80 81       	ld	r24, Z
    3c26:	91 81       	ldd	r25, Z+1	; 0x01
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <LCD_function_set_4bit+0x992>
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e6 5b       	subi	r30, 0xB6	; 182
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	91 83       	std	Z+1, r25	; 0x01
    3c34:	80 83       	st	Z, r24
    3c36:	22 c0       	rjmp	.+68     	; 0x3c7c <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3c38:	8e 01       	movw	r16, r28
    3c3a:	08 5a       	subi	r16, 0xA8	; 168
    3c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e7 5a       	subi	r30, 0xA7	; 167
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	60 81       	ld	r22, Z
    3c46:	71 81       	ldd	r23, Z+1	; 0x01
    3c48:	82 81       	ldd	r24, Z+2	; 0x02
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	80 83       	st	Z, r24
    3c58:	de 01       	movw	r26, r28
    3c5a:	a7 5b       	subi	r26, 0xB7	; 183
    3c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e8 5a       	subi	r30, 0xA8	; 168
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	80 81       	ld	r24, Z
    3c66:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e7 5b       	subi	r30, 0xB7	; 183
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	80 81       	ld	r24, Z
    3c70:	8a 95       	dec	r24
    3c72:	f1 f7       	brne	.-4      	; 0x3c70 <LCD_function_set_4bit+0x9da>
    3c74:	fe 01       	movw	r30, r28
    3c76:	e7 5b       	subi	r30, 0xB7	; 183
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	e6 55       	subi	r30, 0x56	; 86
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	10 82       	st	Z, r1
    3c84:	23 c0       	rjmp	.+70     	; 0x3ccc <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    3c86:	fe 01       	movw	r30, r28
    3c88:	e6 55       	subi	r30, 0x56	; 86
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 81       	ld	r24, Z
    3c8e:	48 2f       	mov	r20, r24
    3c90:	4c 5f       	subi	r20, 0xFC	; 252
    3c92:	fe 01       	movw	r30, r28
    3c94:	e6 55       	subi	r30, 0x56	; 86
    3c96:	ff 4f       	sbci	r31, 0xFF	; 255
    3c98:	80 81       	ld	r24, Z
    3c9a:	28 2f       	mov	r18, r24
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	02 c0       	rjmp	.+4      	; 0x3ca8 <LCD_function_set_4bit+0xa12>
    3ca4:	95 95       	asr	r25
    3ca6:	87 95       	ror	r24
    3ca8:	2a 95       	dec	r18
    3caa:	e2 f7       	brpl	.-8      	; 0x3ca4 <LCD_function_set_4bit+0xa0e>
    3cac:	98 2f       	mov	r25, r24
    3cae:	91 70       	andi	r25, 0x01	; 1
    3cb0:	82 e0       	ldi	r24, 0x02	; 2
    3cb2:	64 2f       	mov	r22, r20
    3cb4:	49 2f       	mov	r20, r25
    3cb6:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    3cba:	de 01       	movw	r26, r28
    3cbc:	a6 55       	subi	r26, 0x56	; 86
    3cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	e6 55       	subi	r30, 0x56	; 86
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	80 81       	ld	r24, Z
    3cc8:	8f 5f       	subi	r24, 0xFF	; 255
    3cca:	8c 93       	st	X, r24
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e6 55       	subi	r30, 0x56	; 86
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	80 81       	ld	r24, Z
    3cd4:	84 30       	cpi	r24, 0x04	; 4
    3cd6:	b8 f2       	brcs	.-82     	; 0x3c86 <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	eb 5b       	subi	r30, 0xBB	; 187
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	a0 e2       	ldi	r26, 0x20	; 32
    3cec:	b1 e4       	ldi	r27, 0x41	; 65
    3cee:	80 83       	st	Z, r24
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	a2 83       	std	Z+2, r26	; 0x02
    3cf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cf6:	8e 01       	movw	r16, r28
    3cf8:	0f 5b       	subi	r16, 0xBF	; 191
    3cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	eb 5b       	subi	r30, 0xBB	; 187
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	60 81       	ld	r22, Z
    3d04:	71 81       	ldd	r23, Z+1	; 0x01
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	93 81       	ldd	r25, Z+3	; 0x03
    3d0a:	2b ea       	ldi	r18, 0xAB	; 171
    3d0c:	3a ea       	ldi	r19, 0xAA	; 170
    3d0e:	4a e2       	ldi	r20, 0x2A	; 42
    3d10:	50 e4       	ldi	r21, 0x40	; 64
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	f8 01       	movw	r30, r16
    3d1c:	80 83       	st	Z, r24
    3d1e:	91 83       	std	Z+1, r25	; 0x01
    3d20:	a2 83       	std	Z+2, r26	; 0x02
    3d22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d24:	fe 01       	movw	r30, r28
    3d26:	ef 5b       	subi	r30, 0xBF	; 191
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	60 81       	ld	r22, Z
    3d2c:	71 81       	ldd	r23, Z+1	; 0x01
    3d2e:	82 81       	ldd	r24, Z+2	; 0x02
    3d30:	93 81       	ldd	r25, Z+3	; 0x03
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e8       	ldi	r20, 0x80	; 128
    3d38:	5f e3       	ldi	r21, 0x3F	; 63
    3d3a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d3e:	88 23       	and	r24, r24
    3d40:	34 f4       	brge	.+12     	; 0x3d4e <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	fe 01       	movw	r30, r28
    3d46:	e0 5c       	subi	r30, 0xC0	; 192
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	80 83       	st	Z, r24
    3d4c:	9d c0       	rjmp	.+314    	; 0x3e88 <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    3d4e:	fe 01       	movw	r30, r28
    3d50:	ef 5b       	subi	r30, 0xBF	; 191
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	60 81       	ld	r22, Z
    3d56:	71 81       	ldd	r23, Z+1	; 0x01
    3d58:	82 81       	ldd	r24, Z+2	; 0x02
    3d5a:	93 81       	ldd	r25, Z+3	; 0x03
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	4f e7       	ldi	r20, 0x7F	; 127
    3d62:	53 e4       	ldi	r21, 0x43	; 67
    3d64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d68:	18 16       	cp	r1, r24
    3d6a:	0c f0       	brlt	.+2      	; 0x3d6e <LCD_function_set_4bit+0xad8>
    3d6c:	7e c0       	rjmp	.+252    	; 0x3e6a <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    3d6e:	fe 01       	movw	r30, r28
    3d70:	eb 5b       	subi	r30, 0xBB	; 187
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	60 81       	ld	r22, Z
    3d76:	71 81       	ldd	r23, Z+1	; 0x01
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	93 81       	ldd	r25, Z+3	; 0x03
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	4a e7       	ldi	r20, 0x7A	; 122
    3d82:	54 e4       	ldi	r21, 0x44	; 68
    3d84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	8c af       	std	Y+60, r24	; 0x3c
    3d8e:	9d af       	std	Y+61, r25	; 0x3d
    3d90:	ae af       	std	Y+62, r26	; 0x3e
    3d92:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d94:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d96:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	4a ef       	ldi	r20, 0xFA	; 250
    3da2:	54 e4       	ldi	r21, 0x44	; 68
    3da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	88 af       	std	Y+56, r24	; 0x38
    3dae:	99 af       	std	Y+57, r25	; 0x39
    3db0:	aa af       	std	Y+58, r26	; 0x3a
    3db2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3db4:	68 ad       	ldd	r22, Y+56	; 0x38
    3db6:	79 ad       	ldd	r23, Y+57	; 0x39
    3db8:	8a ad       	ldd	r24, Y+58	; 0x3a
    3dba:	9b ad       	ldd	r25, Y+59	; 0x3b
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	40 e8       	ldi	r20, 0x80	; 128
    3dc2:	5f e3       	ldi	r21, 0x3F	; 63
    3dc4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3dc8:	88 23       	and	r24, r24
    3dca:	2c f4       	brge	.+10     	; 0x3dd6 <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	9f ab       	std	Y+55, r25	; 0x37
    3dd2:	8e ab       	std	Y+54, r24	; 0x36
    3dd4:	3f c0       	rjmp	.+126    	; 0x3e54 <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    3dd6:	68 ad       	ldd	r22, Y+56	; 0x38
    3dd8:	79 ad       	ldd	r23, Y+57	; 0x39
    3dda:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ddc:	9b ad       	ldd	r25, Y+59	; 0x3b
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	3f ef       	ldi	r19, 0xFF	; 255
    3de2:	4f e7       	ldi	r20, 0x7F	; 127
    3de4:	57 e4       	ldi	r21, 0x47	; 71
    3de6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3dea:	18 16       	cp	r1, r24
    3dec:	4c f5       	brge	.+82     	; 0x3e40 <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dee:	6c ad       	ldd	r22, Y+60	; 0x3c
    3df0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3df2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3df4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e2       	ldi	r20, 0x20	; 32
    3dfc:	51 e4       	ldi	r21, 0x41	; 65
    3dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	9f ab       	std	Y+55, r25	; 0x37
    3e14:	8e ab       	std	Y+54, r24	; 0x36
    3e16:	0f c0       	rjmp	.+30     	; 0x3e36 <LCD_function_set_4bit+0xba0>
    3e18:	88 ec       	ldi	r24, 0xC8	; 200
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	9d ab       	std	Y+53, r25	; 0x35
    3e1e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e20:	8c a9       	ldd	r24, Y+52	; 0x34
    3e22:	9d a9       	ldd	r25, Y+53	; 0x35
    3e24:	01 97       	sbiw	r24, 0x01	; 1
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <LCD_function_set_4bit+0xb8e>
    3e28:	9d ab       	std	Y+53, r25	; 0x35
    3e2a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2c:	8e a9       	ldd	r24, Y+54	; 0x36
    3e2e:	9f a9       	ldd	r25, Y+55	; 0x37
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	9f ab       	std	Y+55, r25	; 0x37
    3e34:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e36:	8e a9       	ldd	r24, Y+54	; 0x36
    3e38:	9f a9       	ldd	r25, Y+55	; 0x37
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	69 f7       	brne	.-38     	; 0x3e18 <LCD_function_set_4bit+0xb82>
    3e3e:	2d c0       	rjmp	.+90     	; 0x3e9a <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e40:	68 ad       	ldd	r22, Y+56	; 0x38
    3e42:	79 ad       	ldd	r23, Y+57	; 0x39
    3e44:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e46:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	9f ab       	std	Y+55, r25	; 0x37
    3e52:	8e ab       	std	Y+54, r24	; 0x36
    3e54:	8e a9       	ldd	r24, Y+54	; 0x36
    3e56:	9f a9       	ldd	r25, Y+55	; 0x37
    3e58:	9b ab       	std	Y+51, r25	; 0x33
    3e5a:	8a ab       	std	Y+50, r24	; 0x32
    3e5c:	8a a9       	ldd	r24, Y+50	; 0x32
    3e5e:	9b a9       	ldd	r25, Y+51	; 0x33
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	f1 f7       	brne	.-4      	; 0x3e60 <LCD_function_set_4bit+0xbca>
    3e64:	9b ab       	std	Y+51, r25	; 0x33
    3e66:	8a ab       	std	Y+50, r24	; 0x32
    3e68:	18 c0       	rjmp	.+48     	; 0x3e9a <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	ef 5b       	subi	r30, 0xBF	; 191
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	60 81       	ld	r22, Z
    3e72:	71 81       	ldd	r23, Z+1	; 0x01
    3e74:	82 81       	ldd	r24, Z+2	; 0x02
    3e76:	93 81       	ldd	r25, Z+3	; 0x03
    3e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	cb 01       	movw	r24, r22
    3e80:	fe 01       	movw	r30, r28
    3e82:	e0 5c       	subi	r30, 0xC0	; 192
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	80 83       	st	Z, r24
    3e88:	fe 01       	movw	r30, r28
    3e8a:	e0 5c       	subi	r30, 0xC0	; 192
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	80 81       	ld	r24, Z
    3e90:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e92:	89 a9       	ldd	r24, Y+49	; 0x31
    3e94:	8a 95       	dec	r24
    3e96:	f1 f7       	brne	.-4      	; 0x3e94 <LCD_function_set_4bit+0xbfe>
    3e98:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3e9a:	82 e0       	ldi	r24, 0x02	; 2
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	a0 e8       	ldi	r26, 0x80	; 128
    3ea8:	bf e3       	ldi	r27, 0x3F	; 63
    3eaa:	8d a7       	std	Y+45, r24	; 0x2d
    3eac:	9e a7       	std	Y+46, r25	; 0x2e
    3eae:	af a7       	std	Y+47, r26	; 0x2f
    3eb0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3eb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    3eb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    3eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    3eba:	2b ea       	ldi	r18, 0xAB	; 171
    3ebc:	3a ea       	ldi	r19, 0xAA	; 170
    3ebe:	4a e2       	ldi	r20, 0x2A	; 42
    3ec0:	50 e4       	ldi	r21, 0x40	; 64
    3ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	89 a7       	std	Y+41, r24	; 0x29
    3ecc:	9a a7       	std	Y+42, r25	; 0x2a
    3ece:	ab a7       	std	Y+43, r26	; 0x2b
    3ed0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3ed2:	69 a5       	ldd	r22, Y+41	; 0x29
    3ed4:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ed6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ed8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e8       	ldi	r20, 0x80	; 128
    3ee0:	5f e3       	ldi	r21, 0x3F	; 63
    3ee2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ee6:	88 23       	and	r24, r24
    3ee8:	1c f4       	brge	.+6      	; 0x3ef0 <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	88 a7       	std	Y+40, r24	; 0x28
    3eee:	91 c0       	rjmp	.+290    	; 0x4012 <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    3ef0:	69 a5       	ldd	r22, Y+41	; 0x29
    3ef2:	7a a5       	ldd	r23, Y+42	; 0x2a
    3ef4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ef6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	4f e7       	ldi	r20, 0x7F	; 127
    3efe:	53 e4       	ldi	r21, 0x43	; 67
    3f00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f04:	18 16       	cp	r1, r24
    3f06:	0c f0       	brlt	.+2      	; 0x3f0a <LCD_function_set_4bit+0xc74>
    3f08:	7b c0       	rjmp	.+246    	; 0x4000 <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    3f0a:	6d a5       	ldd	r22, Y+45	; 0x2d
    3f0c:	7e a5       	ldd	r23, Y+46	; 0x2e
    3f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f10:	98 a9       	ldd	r25, Y+48	; 0x30
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	4a e7       	ldi	r20, 0x7A	; 122
    3f18:	54 e4       	ldi	r21, 0x44	; 68
    3f1a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	8c a3       	std	Y+36, r24	; 0x24
    3f24:	9d a3       	std	Y+37, r25	; 0x25
    3f26:	ae a3       	std	Y+38, r26	; 0x26
    3f28:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2a:	6c a1       	ldd	r22, Y+36	; 0x24
    3f2c:	7d a1       	ldd	r23, Y+37	; 0x25
    3f2e:	8e a1       	ldd	r24, Y+38	; 0x26
    3f30:	9f a1       	ldd	r25, Y+39	; 0x27
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	4a ef       	ldi	r20, 0xFA	; 250
    3f38:	54 e4       	ldi	r21, 0x44	; 68
    3f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	88 a3       	std	Y+32, r24	; 0x20
    3f44:	99 a3       	std	Y+33, r25	; 0x21
    3f46:	aa a3       	std	Y+34, r26	; 0x22
    3f48:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3f4a:	68 a1       	ldd	r22, Y+32	; 0x20
    3f4c:	79 a1       	ldd	r23, Y+33	; 0x21
    3f4e:	8a a1       	ldd	r24, Y+34	; 0x22
    3f50:	9b a1       	ldd	r25, Y+35	; 0x23
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	40 e8       	ldi	r20, 0x80	; 128
    3f58:	5f e3       	ldi	r21, 0x3F	; 63
    3f5a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f5e:	88 23       	and	r24, r24
    3f60:	2c f4       	brge	.+10     	; 0x3f6c <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	9f 8f       	std	Y+31, r25	; 0x1f
    3f68:	8e 8f       	std	Y+30, r24	; 0x1e
    3f6a:	3f c0       	rjmp	.+126    	; 0x3fea <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    3f6c:	68 a1       	ldd	r22, Y+32	; 0x20
    3f6e:	79 a1       	ldd	r23, Y+33	; 0x21
    3f70:	8a a1       	ldd	r24, Y+34	; 0x22
    3f72:	9b a1       	ldd	r25, Y+35	; 0x23
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	3f ef       	ldi	r19, 0xFF	; 255
    3f78:	4f e7       	ldi	r20, 0x7F	; 127
    3f7a:	57 e4       	ldi	r21, 0x47	; 71
    3f7c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f80:	18 16       	cp	r1, r24
    3f82:	4c f5       	brge	.+82     	; 0x3fd6 <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f84:	6c a1       	ldd	r22, Y+36	; 0x24
    3f86:	7d a1       	ldd	r23, Y+37	; 0x25
    3f88:	8e a1       	ldd	r24, Y+38	; 0x26
    3f8a:	9f a1       	ldd	r25, Y+39	; 0x27
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	40 e2       	ldi	r20, 0x20	; 32
    3f92:	51 e4       	ldi	r21, 0x41	; 65
    3f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	bc 01       	movw	r22, r24
    3f9e:	cd 01       	movw	r24, r26
    3fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	9f 8f       	std	Y+31, r25	; 0x1f
    3faa:	8e 8f       	std	Y+30, r24	; 0x1e
    3fac:	0f c0       	rjmp	.+30     	; 0x3fcc <LCD_function_set_4bit+0xd36>
    3fae:	88 ec       	ldi	r24, 0xC8	; 200
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	9d 8f       	std	Y+29, r25	; 0x1d
    3fb4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fb6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3fb8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	f1 f7       	brne	.-4      	; 0x3fba <LCD_function_set_4bit+0xd24>
    3fbe:	9d 8f       	std	Y+29, r25	; 0x1d
    3fc0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fc4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	9f 8f       	std	Y+31, r25	; 0x1f
    3fca:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3fd0:	00 97       	sbiw	r24, 0x00	; 0
    3fd2:	69 f7       	brne	.-38     	; 0x3fae <LCD_function_set_4bit+0xd18>
    3fd4:	24 c0       	rjmp	.+72     	; 0x401e <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd6:	68 a1       	ldd	r22, Y+32	; 0x20
    3fd8:	79 a1       	ldd	r23, Y+33	; 0x21
    3fda:	8a a1       	ldd	r24, Y+34	; 0x22
    3fdc:	9b a1       	ldd	r25, Y+35	; 0x23
    3fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	9f 8f       	std	Y+31, r25	; 0x1f
    3fe8:	8e 8f       	std	Y+30, r24	; 0x1e
    3fea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3fec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3fee:	9b 8f       	std	Y+27, r25	; 0x1b
    3ff0:	8a 8f       	std	Y+26, r24	; 0x1a
    3ff2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ff4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	f1 f7       	brne	.-4      	; 0x3ff6 <LCD_function_set_4bit+0xd60>
    3ffa:	9b 8f       	std	Y+27, r25	; 0x1b
    3ffc:	8a 8f       	std	Y+26, r24	; 0x1a
    3ffe:	0f c0       	rjmp	.+30     	; 0x401e <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4000:	69 a5       	ldd	r22, Y+41	; 0x29
    4002:	7a a5       	ldd	r23, Y+42	; 0x2a
    4004:	8b a5       	ldd	r24, Y+43	; 0x2b
    4006:	9c a5       	ldd	r25, Y+44	; 0x2c
    4008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400c:	dc 01       	movw	r26, r24
    400e:	cb 01       	movw	r24, r22
    4010:	88 a7       	std	Y+40, r24	; 0x28
    4012:	88 a5       	ldd	r24, Y+40	; 0x28
    4014:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4016:	89 8d       	ldd	r24, Y+25	; 0x19
    4018:	8a 95       	dec	r24
    401a:	f1 f7       	brne	.-4      	; 0x4018 <LCD_function_set_4bit+0xd82>
    401c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    401e:	fe 01       	movw	r30, r28
    4020:	e7 55       	subi	r30, 0x57	; 87
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	10 82       	st	Z, r1
    4026:	23 c0       	rjmp	.+70     	; 0x406e <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    4028:	fe 01       	movw	r30, r28
    402a:	e7 55       	subi	r30, 0x57	; 87
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	80 81       	ld	r24, Z
    4030:	48 2f       	mov	r20, r24
    4032:	4c 5f       	subi	r20, 0xFC	; 252
    4034:	fe 01       	movw	r30, r28
    4036:	e7 55       	subi	r30, 0x57	; 87
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	28 2f       	mov	r18, r24
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	88 e0       	ldi	r24, 0x08	; 8
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	02 c0       	rjmp	.+4      	; 0x404a <LCD_function_set_4bit+0xdb4>
    4046:	95 95       	asr	r25
    4048:	87 95       	ror	r24
    404a:	2a 95       	dec	r18
    404c:	e2 f7       	brpl	.-8      	; 0x4046 <LCD_function_set_4bit+0xdb0>
    404e:	98 2f       	mov	r25, r24
    4050:	91 70       	andi	r25, 0x01	; 1
    4052:	82 e0       	ldi	r24, 0x02	; 2
    4054:	64 2f       	mov	r22, r20
    4056:	49 2f       	mov	r20, r25
    4058:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    405c:	de 01       	movw	r26, r28
    405e:	a7 55       	subi	r26, 0x57	; 87
    4060:	bf 4f       	sbci	r27, 0xFF	; 255
    4062:	fe 01       	movw	r30, r28
    4064:	e7 55       	subi	r30, 0x57	; 87
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 81       	ld	r24, Z
    406a:	8f 5f       	subi	r24, 0xFF	; 255
    406c:	8c 93       	st	X, r24
    406e:	fe 01       	movw	r30, r28
    4070:	e7 55       	subi	r30, 0x57	; 87
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	80 81       	ld	r24, Z
    4076:	84 30       	cpi	r24, 0x04	; 4
    4078:	b8 f2       	brcs	.-82     	; 0x4028 <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    407a:	82 e0       	ldi	r24, 0x02	; 2
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	a0 e2       	ldi	r26, 0x20	; 32
    4088:	b1 e4       	ldi	r27, 0x41	; 65
    408a:	8d 8b       	std	Y+21, r24	; 0x15
    408c:	9e 8b       	std	Y+22, r25	; 0x16
    408e:	af 8b       	std	Y+23, r26	; 0x17
    4090:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4092:	6d 89       	ldd	r22, Y+21	; 0x15
    4094:	7e 89       	ldd	r23, Y+22	; 0x16
    4096:	8f 89       	ldd	r24, Y+23	; 0x17
    4098:	98 8d       	ldd	r25, Y+24	; 0x18
    409a:	2b ea       	ldi	r18, 0xAB	; 171
    409c:	3a ea       	ldi	r19, 0xAA	; 170
    409e:	4a e2       	ldi	r20, 0x2A	; 42
    40a0:	50 e4       	ldi	r21, 0x40	; 64
    40a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	89 8b       	std	Y+17, r24	; 0x11
    40ac:	9a 8b       	std	Y+18, r25	; 0x12
    40ae:	ab 8b       	std	Y+19, r26	; 0x13
    40b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    40b2:	69 89       	ldd	r22, Y+17	; 0x11
    40b4:	7a 89       	ldd	r23, Y+18	; 0x12
    40b6:	8b 89       	ldd	r24, Y+19	; 0x13
    40b8:	9c 89       	ldd	r25, Y+20	; 0x14
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 e8       	ldi	r20, 0x80	; 128
    40c0:	5f e3       	ldi	r21, 0x3F	; 63
    40c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    40c6:	88 23       	and	r24, r24
    40c8:	1c f4       	brge	.+6      	; 0x40d0 <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	88 8b       	std	Y+16, r24	; 0x10
    40ce:	91 c0       	rjmp	.+290    	; 0x41f2 <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    40d0:	69 89       	ldd	r22, Y+17	; 0x11
    40d2:	7a 89       	ldd	r23, Y+18	; 0x12
    40d4:	8b 89       	ldd	r24, Y+19	; 0x13
    40d6:	9c 89       	ldd	r25, Y+20	; 0x14
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	4f e7       	ldi	r20, 0x7F	; 127
    40de:	53 e4       	ldi	r21, 0x43	; 67
    40e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    40e4:	18 16       	cp	r1, r24
    40e6:	0c f0       	brlt	.+2      	; 0x40ea <LCD_function_set_4bit+0xe54>
    40e8:	7b c0       	rjmp	.+246    	; 0x41e0 <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    40ea:	6d 89       	ldd	r22, Y+21	; 0x15
    40ec:	7e 89       	ldd	r23, Y+22	; 0x16
    40ee:	8f 89       	ldd	r24, Y+23	; 0x17
    40f0:	98 8d       	ldd	r25, Y+24	; 0x18
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	4a e7       	ldi	r20, 0x7A	; 122
    40f8:	54 e4       	ldi	r21, 0x44	; 68
    40fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	8c 87       	std	Y+12, r24	; 0x0c
    4104:	9d 87       	std	Y+13, r25	; 0x0d
    4106:	ae 87       	std	Y+14, r26	; 0x0e
    4108:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410a:	6c 85       	ldd	r22, Y+12	; 0x0c
    410c:	7d 85       	ldd	r23, Y+13	; 0x0d
    410e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4110:	9f 85       	ldd	r25, Y+15	; 0x0f
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	4a ef       	ldi	r20, 0xFA	; 250
    4118:	54 e4       	ldi	r21, 0x44	; 68
    411a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	88 87       	std	Y+8, r24	; 0x08
    4124:	99 87       	std	Y+9, r25	; 0x09
    4126:	aa 87       	std	Y+10, r26	; 0x0a
    4128:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    412a:	68 85       	ldd	r22, Y+8	; 0x08
    412c:	79 85       	ldd	r23, Y+9	; 0x09
    412e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4130:	9b 85       	ldd	r25, Y+11	; 0x0b
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e8       	ldi	r20, 0x80	; 128
    4138:	5f e3       	ldi	r21, 0x3F	; 63
    413a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    413e:	88 23       	and	r24, r24
    4140:	2c f4       	brge	.+10     	; 0x414c <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	9f 83       	std	Y+7, r25	; 0x07
    4148:	8e 83       	std	Y+6, r24	; 0x06
    414a:	3f c0       	rjmp	.+126    	; 0x41ca <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    414c:	68 85       	ldd	r22, Y+8	; 0x08
    414e:	79 85       	ldd	r23, Y+9	; 0x09
    4150:	8a 85       	ldd	r24, Y+10	; 0x0a
    4152:	9b 85       	ldd	r25, Y+11	; 0x0b
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	3f ef       	ldi	r19, 0xFF	; 255
    4158:	4f e7       	ldi	r20, 0x7F	; 127
    415a:	57 e4       	ldi	r21, 0x47	; 71
    415c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4160:	18 16       	cp	r1, r24
    4162:	4c f5       	brge	.+82     	; 0x41b6 <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4164:	6c 85       	ldd	r22, Y+12	; 0x0c
    4166:	7d 85       	ldd	r23, Y+13	; 0x0d
    4168:	8e 85       	ldd	r24, Y+14	; 0x0e
    416a:	9f 85       	ldd	r25, Y+15	; 0x0f
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e2       	ldi	r20, 0x20	; 32
    4172:	51 e4       	ldi	r21, 0x41	; 65
    4174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	9f 83       	std	Y+7, r25	; 0x07
    418a:	8e 83       	std	Y+6, r24	; 0x06
    418c:	0f c0       	rjmp	.+30     	; 0x41ac <LCD_function_set_4bit+0xf16>
    418e:	88 ec       	ldi	r24, 0xC8	; 200
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	9d 83       	std	Y+5, r25	; 0x05
    4194:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4196:	8c 81       	ldd	r24, Y+4	; 0x04
    4198:	9d 81       	ldd	r25, Y+5	; 0x05
    419a:	01 97       	sbiw	r24, 0x01	; 1
    419c:	f1 f7       	brne	.-4      	; 0x419a <LCD_function_set_4bit+0xf04>
    419e:	9d 83       	std	Y+5, r25	; 0x05
    41a0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a2:	8e 81       	ldd	r24, Y+6	; 0x06
    41a4:	9f 81       	ldd	r25, Y+7	; 0x07
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	9f 83       	std	Y+7, r25	; 0x07
    41aa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ac:	8e 81       	ldd	r24, Y+6	; 0x06
    41ae:	9f 81       	ldd	r25, Y+7	; 0x07
    41b0:	00 97       	sbiw	r24, 0x00	; 0
    41b2:	69 f7       	brne	.-38     	; 0x418e <LCD_function_set_4bit+0xef8>
    41b4:	24 c0       	rjmp	.+72     	; 0x41fe <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b6:	68 85       	ldd	r22, Y+8	; 0x08
    41b8:	79 85       	ldd	r23, Y+9	; 0x09
    41ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    41bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    41be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	9f 83       	std	Y+7, r25	; 0x07
    41c8:	8e 83       	std	Y+6, r24	; 0x06
    41ca:	8e 81       	ldd	r24, Y+6	; 0x06
    41cc:	9f 81       	ldd	r25, Y+7	; 0x07
    41ce:	9b 83       	std	Y+3, r25	; 0x03
    41d0:	8a 83       	std	Y+2, r24	; 0x02
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	9b 81       	ldd	r25, Y+3	; 0x03
    41d6:	01 97       	sbiw	r24, 0x01	; 1
    41d8:	f1 f7       	brne	.-4      	; 0x41d6 <LCD_function_set_4bit+0xf40>
    41da:	9b 83       	std	Y+3, r25	; 0x03
    41dc:	8a 83       	std	Y+2, r24	; 0x02
    41de:	0f c0       	rjmp	.+30     	; 0x41fe <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    41e0:	69 89       	ldd	r22, Y+17	; 0x11
    41e2:	7a 89       	ldd	r23, Y+18	; 0x12
    41e4:	8b 89       	ldd	r24, Y+19	; 0x13
    41e6:	9c 89       	ldd	r25, Y+20	; 0x14
    41e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ec:	dc 01       	movw	r26, r24
    41ee:	cb 01       	movw	r24, r22
    41f0:	88 8b       	std	Y+16, r24	; 0x10
    41f2:	88 89       	ldd	r24, Y+16	; 0x10
    41f4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	8a 95       	dec	r24
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <LCD_function_set_4bit+0xf62>
    41fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    41fe:	c5 55       	subi	r28, 0x55	; 85
    4200:	df 4f       	sbci	r29, 0xFF	; 255
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	1f 91       	pop	r17
    4212:	0f 91       	pop	r16
    4214:	08 95       	ret

00004216 <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
    4222:	c1 56       	subi	r28, 0x61	; 97
    4224:	d0 40       	sbci	r29, 0x00	; 0
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    4230:	82 e0       	ldi	r24, 0x02	; 2
    4232:	67 e0       	ldi	r22, 0x07	; 7
    4234:	40 e0       	ldi	r20, 0x00	; 0
    4236:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    423a:	82 e0       	ldi	r24, 0x02	; 2
    423c:	66 e0       	ldi	r22, 0x06	; 6
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    4244:	82 e0       	ldi	r24, 0x02	; 2
    4246:	65 e0       	ldi	r22, 0x05	; 5
    4248:	40 e0       	ldi	r20, 0x00	; 0
    424a:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	64 e0       	ldi	r22, 0x04	; 4
    4252:	40 e0       	ldi	r20, 0x00	; 0
    4254:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	62 e0       	ldi	r22, 0x02	; 2
    425c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    4260:	82 e0       	ldi	r24, 0x02	; 2
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    4268:	fe 01       	movw	r30, r28
    426a:	e3 5a       	subi	r30, 0xA3	; 163
    426c:	ff 4f       	sbci	r31, 0xFF	; 255
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	a0 e8       	ldi	r26, 0x80	; 128
    4274:	bf e3       	ldi	r27, 0x3F	; 63
    4276:	80 83       	st	Z, r24
    4278:	91 83       	std	Z+1, r25	; 0x01
    427a:	a2 83       	std	Z+2, r26	; 0x02
    427c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    427e:	8e 01       	movw	r16, r28
    4280:	07 5a       	subi	r16, 0xA7	; 167
    4282:	1f 4f       	sbci	r17, 0xFF	; 255
    4284:	fe 01       	movw	r30, r28
    4286:	e3 5a       	subi	r30, 0xA3	; 163
    4288:	ff 4f       	sbci	r31, 0xFF	; 255
    428a:	60 81       	ld	r22, Z
    428c:	71 81       	ldd	r23, Z+1	; 0x01
    428e:	82 81       	ldd	r24, Z+2	; 0x02
    4290:	93 81       	ldd	r25, Z+3	; 0x03
    4292:	2b ea       	ldi	r18, 0xAB	; 171
    4294:	3a ea       	ldi	r19, 0xAA	; 170
    4296:	4a e2       	ldi	r20, 0x2A	; 42
    4298:	50 e4       	ldi	r21, 0x40	; 64
    429a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	f8 01       	movw	r30, r16
    42a4:	80 83       	st	Z, r24
    42a6:	91 83       	std	Z+1, r25	; 0x01
    42a8:	a2 83       	std	Z+2, r26	; 0x02
    42aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ac:	fe 01       	movw	r30, r28
    42ae:	e7 5a       	subi	r30, 0xA7	; 167
    42b0:	ff 4f       	sbci	r31, 0xFF	; 255
    42b2:	60 81       	ld	r22, Z
    42b4:	71 81       	ldd	r23, Z+1	; 0x01
    42b6:	82 81       	ldd	r24, Z+2	; 0x02
    42b8:	93 81       	ldd	r25, Z+3	; 0x03
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	40 e8       	ldi	r20, 0x80	; 128
    42c0:	5f e3       	ldi	r21, 0x3F	; 63
    42c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    42c6:	88 23       	and	r24, r24
    42c8:	34 f4       	brge	.+12     	; 0x42d6 <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    42ca:	fe 01       	movw	r30, r28
    42cc:	e8 5a       	subi	r30, 0xA8	; 168
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	80 83       	st	Z, r24
    42d4:	e0 c0       	rjmp	.+448    	; 0x4496 <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    42d6:	fe 01       	movw	r30, r28
    42d8:	e7 5a       	subi	r30, 0xA7	; 167
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	60 81       	ld	r22, Z
    42de:	71 81       	ldd	r23, Z+1	; 0x01
    42e0:	82 81       	ldd	r24, Z+2	; 0x02
    42e2:	93 81       	ldd	r25, Z+3	; 0x03
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	4f e7       	ldi	r20, 0x7F	; 127
    42ea:	53 e4       	ldi	r21, 0x43	; 67
    42ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42f0:	18 16       	cp	r1, r24
    42f2:	0c f0       	brlt	.+2      	; 0x42f6 <LCD_read_data_4bit+0xe0>
    42f4:	c0 c0       	rjmp	.+384    	; 0x4476 <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    42f6:	fe 01       	movw	r30, r28
    42f8:	e3 5a       	subi	r30, 0xA3	; 163
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	4a e7       	ldi	r20, 0x7A	; 122
    430a:	54 e4       	ldi	r21, 0x44	; 68
    430c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	fe 01       	movw	r30, r28
    4316:	ec 5a       	subi	r30, 0xAC	; 172
    4318:	ff 4f       	sbci	r31, 0xFF	; 255
    431a:	80 83       	st	Z, r24
    431c:	91 83       	std	Z+1, r25	; 0x01
    431e:	a2 83       	std	Z+2, r26	; 0x02
    4320:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4322:	8e 01       	movw	r16, r28
    4324:	00 5b       	subi	r16, 0xB0	; 176
    4326:	1f 4f       	sbci	r17, 0xFF	; 255
    4328:	fe 01       	movw	r30, r28
    432a:	ec 5a       	subi	r30, 0xAC	; 172
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	60 81       	ld	r22, Z
    4330:	71 81       	ldd	r23, Z+1	; 0x01
    4332:	82 81       	ldd	r24, Z+2	; 0x02
    4334:	93 81       	ldd	r25, Z+3	; 0x03
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	4a ef       	ldi	r20, 0xFA	; 250
    433c:	54 e4       	ldi	r21, 0x44	; 68
    433e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	f8 01       	movw	r30, r16
    4348:	80 83       	st	Z, r24
    434a:	91 83       	std	Z+1, r25	; 0x01
    434c:	a2 83       	std	Z+2, r26	; 0x02
    434e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4350:	fe 01       	movw	r30, r28
    4352:	e0 5b       	subi	r30, 0xB0	; 176
    4354:	ff 4f       	sbci	r31, 0xFF	; 255
    4356:	60 81       	ld	r22, Z
    4358:	71 81       	ldd	r23, Z+1	; 0x01
    435a:	82 81       	ldd	r24, Z+2	; 0x02
    435c:	93 81       	ldd	r25, Z+3	; 0x03
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	40 e8       	ldi	r20, 0x80	; 128
    4364:	5f e3       	ldi	r21, 0x3F	; 63
    4366:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    436a:	88 23       	and	r24, r24
    436c:	44 f4       	brge	.+16     	; 0x437e <LCD_read_data_4bit+0x168>
		__ticks = 1;
    436e:	fe 01       	movw	r30, r28
    4370:	e2 5b       	subi	r30, 0xB2	; 178
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	91 83       	std	Z+1, r25	; 0x01
    437a:	80 83       	st	Z, r24
    437c:	64 c0       	rjmp	.+200    	; 0x4446 <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    437e:	fe 01       	movw	r30, r28
    4380:	e0 5b       	subi	r30, 0xB0	; 176
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	60 81       	ld	r22, Z
    4386:	71 81       	ldd	r23, Z+1	; 0x01
    4388:	82 81       	ldd	r24, Z+2	; 0x02
    438a:	93 81       	ldd	r25, Z+3	; 0x03
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	3f ef       	ldi	r19, 0xFF	; 255
    4390:	4f e7       	ldi	r20, 0x7F	; 127
    4392:	57 e4       	ldi	r21, 0x47	; 71
    4394:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4398:	18 16       	cp	r1, r24
    439a:	0c f0       	brlt	.+2      	; 0x439e <LCD_read_data_4bit+0x188>
    439c:	43 c0       	rjmp	.+134    	; 0x4424 <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439e:	fe 01       	movw	r30, r28
    43a0:	ec 5a       	subi	r30, 0xAC	; 172
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	60 81       	ld	r22, Z
    43a6:	71 81       	ldd	r23, Z+1	; 0x01
    43a8:	82 81       	ldd	r24, Z+2	; 0x02
    43aa:	93 81       	ldd	r25, Z+3	; 0x03
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	40 e2       	ldi	r20, 0x20	; 32
    43b2:	51 e4       	ldi	r21, 0x41	; 65
    43b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	8e 01       	movw	r16, r28
    43be:	02 5b       	subi	r16, 0xB2	; 178
    43c0:	1f 4f       	sbci	r17, 0xFF	; 255
    43c2:	bc 01       	movw	r22, r24
    43c4:	cd 01       	movw	r24, r26
    43c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	f8 01       	movw	r30, r16
    43d0:	91 83       	std	Z+1, r25	; 0x01
    43d2:	80 83       	st	Z, r24
    43d4:	1f c0       	rjmp	.+62     	; 0x4414 <LCD_read_data_4bit+0x1fe>
    43d6:	fe 01       	movw	r30, r28
    43d8:	e4 5b       	subi	r30, 0xB4	; 180
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	88 ec       	ldi	r24, 0xC8	; 200
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	91 83       	std	Z+1, r25	; 0x01
    43e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43e4:	fe 01       	movw	r30, r28
    43e6:	e4 5b       	subi	r30, 0xB4	; 180
    43e8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ea:	80 81       	ld	r24, Z
    43ec:	91 81       	ldd	r25, Z+1	; 0x01
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	f1 f7       	brne	.-4      	; 0x43ee <LCD_read_data_4bit+0x1d8>
    43f2:	fe 01       	movw	r30, r28
    43f4:	e4 5b       	subi	r30, 0xB4	; 180
    43f6:	ff 4f       	sbci	r31, 0xFF	; 255
    43f8:	91 83       	std	Z+1, r25	; 0x01
    43fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43fc:	de 01       	movw	r26, r28
    43fe:	a2 5b       	subi	r26, 0xB2	; 178
    4400:	bf 4f       	sbci	r27, 0xFF	; 255
    4402:	fe 01       	movw	r30, r28
    4404:	e2 5b       	subi	r30, 0xB2	; 178
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	80 81       	ld	r24, Z
    440a:	91 81       	ldd	r25, Z+1	; 0x01
    440c:	01 97       	sbiw	r24, 0x01	; 1
    440e:	11 96       	adiw	r26, 0x01	; 1
    4410:	9c 93       	st	X, r25
    4412:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4414:	fe 01       	movw	r30, r28
    4416:	e2 5b       	subi	r30, 0xB2	; 178
    4418:	ff 4f       	sbci	r31, 0xFF	; 255
    441a:	80 81       	ld	r24, Z
    441c:	91 81       	ldd	r25, Z+1	; 0x01
    441e:	00 97       	sbiw	r24, 0x00	; 0
    4420:	d1 f6       	brne	.-76     	; 0x43d6 <LCD_read_data_4bit+0x1c0>
    4422:	4b c0       	rjmp	.+150    	; 0x44ba <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4424:	8e 01       	movw	r16, r28
    4426:	02 5b       	subi	r16, 0xB2	; 178
    4428:	1f 4f       	sbci	r17, 0xFF	; 255
    442a:	fe 01       	movw	r30, r28
    442c:	e0 5b       	subi	r30, 0xB0	; 176
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	60 81       	ld	r22, Z
    4432:	71 81       	ldd	r23, Z+1	; 0x01
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	f8 01       	movw	r30, r16
    4442:	91 83       	std	Z+1, r25	; 0x01
    4444:	80 83       	st	Z, r24
    4446:	de 01       	movw	r26, r28
    4448:	a6 5b       	subi	r26, 0xB6	; 182
    444a:	bf 4f       	sbci	r27, 0xFF	; 255
    444c:	fe 01       	movw	r30, r28
    444e:	e2 5b       	subi	r30, 0xB2	; 178
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	80 81       	ld	r24, Z
    4454:	91 81       	ldd	r25, Z+1	; 0x01
    4456:	11 96       	adiw	r26, 0x01	; 1
    4458:	9c 93       	st	X, r25
    445a:	8e 93       	st	-X, r24
    445c:	fe 01       	movw	r30, r28
    445e:	e6 5b       	subi	r30, 0xB6	; 182
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	80 81       	ld	r24, Z
    4464:	91 81       	ldd	r25, Z+1	; 0x01
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	f1 f7       	brne	.-4      	; 0x4466 <LCD_read_data_4bit+0x250>
    446a:	fe 01       	movw	r30, r28
    446c:	e6 5b       	subi	r30, 0xB6	; 182
    446e:	ff 4f       	sbci	r31, 0xFF	; 255
    4470:	91 83       	std	Z+1, r25	; 0x01
    4472:	80 83       	st	Z, r24
    4474:	22 c0       	rjmp	.+68     	; 0x44ba <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4476:	8e 01       	movw	r16, r28
    4478:	08 5a       	subi	r16, 0xA8	; 168
    447a:	1f 4f       	sbci	r17, 0xFF	; 255
    447c:	fe 01       	movw	r30, r28
    447e:	e7 5a       	subi	r30, 0xA7	; 167
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	60 81       	ld	r22, Z
    4484:	71 81       	ldd	r23, Z+1	; 0x01
    4486:	82 81       	ldd	r24, Z+2	; 0x02
    4488:	93 81       	ldd	r25, Z+3	; 0x03
    448a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	f8 01       	movw	r30, r16
    4494:	80 83       	st	Z, r24
    4496:	de 01       	movw	r26, r28
    4498:	a7 5b       	subi	r26, 0xB7	; 183
    449a:	bf 4f       	sbci	r27, 0xFF	; 255
    449c:	fe 01       	movw	r30, r28
    449e:	e8 5a       	subi	r30, 0xA8	; 168
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 81       	ld	r24, Z
    44a4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44a6:	fe 01       	movw	r30, r28
    44a8:	e7 5b       	subi	r30, 0xB7	; 183
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	80 81       	ld	r24, Z
    44ae:	8a 95       	dec	r24
    44b0:	f1 f7       	brne	.-4      	; 0x44ae <LCD_read_data_4bit+0x298>
    44b2:	fe 01       	movw	r30, r28
    44b4:	e7 5b       	subi	r30, 0xB7	; 183
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    44ba:	82 e0       	ldi	r24, 0x02	; 2
    44bc:	60 e0       	ldi	r22, 0x00	; 0
    44be:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    44c2:	fe 01       	movw	r30, r28
    44c4:	eb 5b       	subi	r30, 0xBB	; 187
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	a0 e8       	ldi	r26, 0x80	; 128
    44ce:	bf e3       	ldi	r27, 0x3F	; 63
    44d0:	80 83       	st	Z, r24
    44d2:	91 83       	std	Z+1, r25	; 0x01
    44d4:	a2 83       	std	Z+2, r26	; 0x02
    44d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    44d8:	8e 01       	movw	r16, r28
    44da:	0f 5b       	subi	r16, 0xBF	; 191
    44dc:	1f 4f       	sbci	r17, 0xFF	; 255
    44de:	fe 01       	movw	r30, r28
    44e0:	eb 5b       	subi	r30, 0xBB	; 187
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	2b ea       	ldi	r18, 0xAB	; 171
    44ee:	3a ea       	ldi	r19, 0xAA	; 170
    44f0:	4a e2       	ldi	r20, 0x2A	; 42
    44f2:	50 e4       	ldi	r21, 0x40	; 64
    44f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	f8 01       	movw	r30, r16
    44fe:	80 83       	st	Z, r24
    4500:	91 83       	std	Z+1, r25	; 0x01
    4502:	a2 83       	std	Z+2, r26	; 0x02
    4504:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4506:	fe 01       	movw	r30, r28
    4508:	ef 5b       	subi	r30, 0xBF	; 191
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	60 81       	ld	r22, Z
    450e:	71 81       	ldd	r23, Z+1	; 0x01
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	93 81       	ldd	r25, Z+3	; 0x03
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e8       	ldi	r20, 0x80	; 128
    451a:	5f e3       	ldi	r21, 0x3F	; 63
    451c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4520:	88 23       	and	r24, r24
    4522:	34 f4       	brge	.+12     	; 0x4530 <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	fe 01       	movw	r30, r28
    4528:	e0 5c       	subi	r30, 0xC0	; 192
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	80 83       	st	Z, r24
    452e:	9d c0       	rjmp	.+314    	; 0x466a <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    4530:	fe 01       	movw	r30, r28
    4532:	ef 5b       	subi	r30, 0xBF	; 191
    4534:	ff 4f       	sbci	r31, 0xFF	; 255
    4536:	60 81       	ld	r22, Z
    4538:	71 81       	ldd	r23, Z+1	; 0x01
    453a:	82 81       	ldd	r24, Z+2	; 0x02
    453c:	93 81       	ldd	r25, Z+3	; 0x03
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	4f e7       	ldi	r20, 0x7F	; 127
    4544:	53 e4       	ldi	r21, 0x43	; 67
    4546:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    454a:	18 16       	cp	r1, r24
    454c:	0c f0       	brlt	.+2      	; 0x4550 <LCD_read_data_4bit+0x33a>
    454e:	7e c0       	rjmp	.+252    	; 0x464c <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    4550:	fe 01       	movw	r30, r28
    4552:	eb 5b       	subi	r30, 0xBB	; 187
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	60 81       	ld	r22, Z
    4558:	71 81       	ldd	r23, Z+1	; 0x01
    455a:	82 81       	ldd	r24, Z+2	; 0x02
    455c:	93 81       	ldd	r25, Z+3	; 0x03
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	4a e7       	ldi	r20, 0x7A	; 122
    4564:	54 e4       	ldi	r21, 0x44	; 68
    4566:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	8c af       	std	Y+60, r24	; 0x3c
    4570:	9d af       	std	Y+61, r25	; 0x3d
    4572:	ae af       	std	Y+62, r26	; 0x3e
    4574:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4576:	6c ad       	ldd	r22, Y+60	; 0x3c
    4578:	7d ad       	ldd	r23, Y+61	; 0x3d
    457a:	8e ad       	ldd	r24, Y+62	; 0x3e
    457c:	9f ad       	ldd	r25, Y+63	; 0x3f
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	4a ef       	ldi	r20, 0xFA	; 250
    4584:	54 e4       	ldi	r21, 0x44	; 68
    4586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	88 af       	std	Y+56, r24	; 0x38
    4590:	99 af       	std	Y+57, r25	; 0x39
    4592:	aa af       	std	Y+58, r26	; 0x3a
    4594:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4596:	68 ad       	ldd	r22, Y+56	; 0x38
    4598:	79 ad       	ldd	r23, Y+57	; 0x39
    459a:	8a ad       	ldd	r24, Y+58	; 0x3a
    459c:	9b ad       	ldd	r25, Y+59	; 0x3b
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	40 e8       	ldi	r20, 0x80	; 128
    45a4:	5f e3       	ldi	r21, 0x3F	; 63
    45a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    45aa:	88 23       	and	r24, r24
    45ac:	2c f4       	brge	.+10     	; 0x45b8 <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	9f ab       	std	Y+55, r25	; 0x37
    45b4:	8e ab       	std	Y+54, r24	; 0x36
    45b6:	3f c0       	rjmp	.+126    	; 0x4636 <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    45b8:	68 ad       	ldd	r22, Y+56	; 0x38
    45ba:	79 ad       	ldd	r23, Y+57	; 0x39
    45bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    45be:	9b ad       	ldd	r25, Y+59	; 0x3b
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	3f ef       	ldi	r19, 0xFF	; 255
    45c4:	4f e7       	ldi	r20, 0x7F	; 127
    45c6:	57 e4       	ldi	r21, 0x47	; 71
    45c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    45cc:	18 16       	cp	r1, r24
    45ce:	4c f5       	brge	.+82     	; 0x4622 <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    45d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    45d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    45d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	40 e2       	ldi	r20, 0x20	; 32
    45de:	51 e4       	ldi	r21, 0x41	; 65
    45e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	bc 01       	movw	r22, r24
    45ea:	cd 01       	movw	r24, r26
    45ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	9f ab       	std	Y+55, r25	; 0x37
    45f6:	8e ab       	std	Y+54, r24	; 0x36
    45f8:	0f c0       	rjmp	.+30     	; 0x4618 <LCD_read_data_4bit+0x402>
    45fa:	88 ec       	ldi	r24, 0xC8	; 200
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	9d ab       	std	Y+53, r25	; 0x35
    4600:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4602:	8c a9       	ldd	r24, Y+52	; 0x34
    4604:	9d a9       	ldd	r25, Y+53	; 0x35
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	f1 f7       	brne	.-4      	; 0x4606 <LCD_read_data_4bit+0x3f0>
    460a:	9d ab       	std	Y+53, r25	; 0x35
    460c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    460e:	8e a9       	ldd	r24, Y+54	; 0x36
    4610:	9f a9       	ldd	r25, Y+55	; 0x37
    4612:	01 97       	sbiw	r24, 0x01	; 1
    4614:	9f ab       	std	Y+55, r25	; 0x37
    4616:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4618:	8e a9       	ldd	r24, Y+54	; 0x36
    461a:	9f a9       	ldd	r25, Y+55	; 0x37
    461c:	00 97       	sbiw	r24, 0x00	; 0
    461e:	69 f7       	brne	.-38     	; 0x45fa <LCD_read_data_4bit+0x3e4>
    4620:	2d c0       	rjmp	.+90     	; 0x467c <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4622:	68 ad       	ldd	r22, Y+56	; 0x38
    4624:	79 ad       	ldd	r23, Y+57	; 0x39
    4626:	8a ad       	ldd	r24, Y+58	; 0x3a
    4628:	9b ad       	ldd	r25, Y+59	; 0x3b
    462a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462e:	dc 01       	movw	r26, r24
    4630:	cb 01       	movw	r24, r22
    4632:	9f ab       	std	Y+55, r25	; 0x37
    4634:	8e ab       	std	Y+54, r24	; 0x36
    4636:	8e a9       	ldd	r24, Y+54	; 0x36
    4638:	9f a9       	ldd	r25, Y+55	; 0x37
    463a:	9b ab       	std	Y+51, r25	; 0x33
    463c:	8a ab       	std	Y+50, r24	; 0x32
    463e:	8a a9       	ldd	r24, Y+50	; 0x32
    4640:	9b a9       	ldd	r25, Y+51	; 0x33
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	f1 f7       	brne	.-4      	; 0x4642 <LCD_read_data_4bit+0x42c>
    4646:	9b ab       	std	Y+51, r25	; 0x33
    4648:	8a ab       	std	Y+50, r24	; 0x32
    464a:	18 c0       	rjmp	.+48     	; 0x467c <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    464c:	fe 01       	movw	r30, r28
    464e:	ef 5b       	subi	r30, 0xBF	; 191
    4650:	ff 4f       	sbci	r31, 0xFF	; 255
    4652:	60 81       	ld	r22, Z
    4654:	71 81       	ldd	r23, Z+1	; 0x01
    4656:	82 81       	ldd	r24, Z+2	; 0x02
    4658:	93 81       	ldd	r25, Z+3	; 0x03
    465a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465e:	dc 01       	movw	r26, r24
    4660:	cb 01       	movw	r24, r22
    4662:	fe 01       	movw	r30, r28
    4664:	e0 5c       	subi	r30, 0xC0	; 192
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	80 83       	st	Z, r24
    466a:	fe 01       	movw	r30, r28
    466c:	e0 5c       	subi	r30, 0xC0	; 192
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	80 81       	ld	r24, Z
    4672:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4674:	89 a9       	ldd	r24, Y+49	; 0x31
    4676:	8a 95       	dec	r24
    4678:	f1 f7       	brne	.-4      	; 0x4676 <LCD_read_data_4bit+0x460>
    467a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    467c:	82 e0       	ldi	r24, 0x02	; 2
    467e:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <DIO_u8_get_port>
    4682:	fe 01       	movw	r30, r28
    4684:	ef 59       	subi	r30, 0x9F	; 159
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	82 95       	swap	r24
    468a:	80 7f       	andi	r24, 0xF0	; 240
    468c:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    468e:	82 e0       	ldi	r24, 0x02	; 2
    4690:	60 e0       	ldi	r22, 0x00	; 0
    4692:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	a0 e2       	ldi	r26, 0x20	; 32
    469c:	b1 e4       	ldi	r27, 0x41	; 65
    469e:	8d a7       	std	Y+45, r24	; 0x2d
    46a0:	9e a7       	std	Y+46, r25	; 0x2e
    46a2:	af a7       	std	Y+47, r26	; 0x2f
    46a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    46a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    46a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    46aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    46ac:	98 a9       	ldd	r25, Y+48	; 0x30
    46ae:	2b ea       	ldi	r18, 0xAB	; 171
    46b0:	3a ea       	ldi	r19, 0xAA	; 170
    46b2:	4a e2       	ldi	r20, 0x2A	; 42
    46b4:	50 e4       	ldi	r21, 0x40	; 64
    46b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ba:	dc 01       	movw	r26, r24
    46bc:	cb 01       	movw	r24, r22
    46be:	89 a7       	std	Y+41, r24	; 0x29
    46c0:	9a a7       	std	Y+42, r25	; 0x2a
    46c2:	ab a7       	std	Y+43, r26	; 0x2b
    46c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    46c6:	69 a5       	ldd	r22, Y+41	; 0x29
    46c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    46ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    46cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	40 e8       	ldi	r20, 0x80	; 128
    46d4:	5f e3       	ldi	r21, 0x3F	; 63
    46d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    46da:	88 23       	and	r24, r24
    46dc:	1c f4       	brge	.+6      	; 0x46e4 <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	88 a7       	std	Y+40, r24	; 0x28
    46e2:	91 c0       	rjmp	.+290    	; 0x4806 <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    46e4:	69 a5       	ldd	r22, Y+41	; 0x29
    46e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    46e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    46ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	4f e7       	ldi	r20, 0x7F	; 127
    46f2:	53 e4       	ldi	r21, 0x43	; 67
    46f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    46f8:	18 16       	cp	r1, r24
    46fa:	0c f0       	brlt	.+2      	; 0x46fe <LCD_read_data_4bit+0x4e8>
    46fc:	7b c0       	rjmp	.+246    	; 0x47f4 <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    46fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    4700:	7e a5       	ldd	r23, Y+46	; 0x2e
    4702:	8f a5       	ldd	r24, Y+47	; 0x2f
    4704:	98 a9       	ldd	r25, Y+48	; 0x30
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	4a e7       	ldi	r20, 0x7A	; 122
    470c:	54 e4       	ldi	r21, 0x44	; 68
    470e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4712:	dc 01       	movw	r26, r24
    4714:	cb 01       	movw	r24, r22
    4716:	8c a3       	std	Y+36, r24	; 0x24
    4718:	9d a3       	std	Y+37, r25	; 0x25
    471a:	ae a3       	std	Y+38, r26	; 0x26
    471c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    471e:	6c a1       	ldd	r22, Y+36	; 0x24
    4720:	7d a1       	ldd	r23, Y+37	; 0x25
    4722:	8e a1       	ldd	r24, Y+38	; 0x26
    4724:	9f a1       	ldd	r25, Y+39	; 0x27
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	4a ef       	ldi	r20, 0xFA	; 250
    472c:	54 e4       	ldi	r21, 0x44	; 68
    472e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	88 a3       	std	Y+32, r24	; 0x20
    4738:	99 a3       	std	Y+33, r25	; 0x21
    473a:	aa a3       	std	Y+34, r26	; 0x22
    473c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    473e:	68 a1       	ldd	r22, Y+32	; 0x20
    4740:	79 a1       	ldd	r23, Y+33	; 0x21
    4742:	8a a1       	ldd	r24, Y+34	; 0x22
    4744:	9b a1       	ldd	r25, Y+35	; 0x23
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e8       	ldi	r20, 0x80	; 128
    474c:	5f e3       	ldi	r21, 0x3F	; 63
    474e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4752:	88 23       	and	r24, r24
    4754:	2c f4       	brge	.+10     	; 0x4760 <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	9f 8f       	std	Y+31, r25	; 0x1f
    475c:	8e 8f       	std	Y+30, r24	; 0x1e
    475e:	3f c0       	rjmp	.+126    	; 0x47de <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    4760:	68 a1       	ldd	r22, Y+32	; 0x20
    4762:	79 a1       	ldd	r23, Y+33	; 0x21
    4764:	8a a1       	ldd	r24, Y+34	; 0x22
    4766:	9b a1       	ldd	r25, Y+35	; 0x23
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	3f ef       	ldi	r19, 0xFF	; 255
    476c:	4f e7       	ldi	r20, 0x7F	; 127
    476e:	57 e4       	ldi	r21, 0x47	; 71
    4770:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4774:	18 16       	cp	r1, r24
    4776:	4c f5       	brge	.+82     	; 0x47ca <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4778:	6c a1       	ldd	r22, Y+36	; 0x24
    477a:	7d a1       	ldd	r23, Y+37	; 0x25
    477c:	8e a1       	ldd	r24, Y+38	; 0x26
    477e:	9f a1       	ldd	r25, Y+39	; 0x27
    4780:	20 e0       	ldi	r18, 0x00	; 0
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	40 e2       	ldi	r20, 0x20	; 32
    4786:	51 e4       	ldi	r21, 0x41	; 65
    4788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478c:	dc 01       	movw	r26, r24
    478e:	cb 01       	movw	r24, r22
    4790:	bc 01       	movw	r22, r24
    4792:	cd 01       	movw	r24, r26
    4794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	9f 8f       	std	Y+31, r25	; 0x1f
    479e:	8e 8f       	std	Y+30, r24	; 0x1e
    47a0:	0f c0       	rjmp	.+30     	; 0x47c0 <LCD_read_data_4bit+0x5aa>
    47a2:	88 ec       	ldi	r24, 0xC8	; 200
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	9d 8f       	std	Y+29, r25	; 0x1d
    47a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    47aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    47ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    47ae:	01 97       	sbiw	r24, 0x01	; 1
    47b0:	f1 f7       	brne	.-4      	; 0x47ae <LCD_read_data_4bit+0x598>
    47b2:	9d 8f       	std	Y+29, r25	; 0x1d
    47b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    47ba:	01 97       	sbiw	r24, 0x01	; 1
    47bc:	9f 8f       	std	Y+31, r25	; 0x1f
    47be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    47c4:	00 97       	sbiw	r24, 0x00	; 0
    47c6:	69 f7       	brne	.-38     	; 0x47a2 <LCD_read_data_4bit+0x58c>
    47c8:	24 c0       	rjmp	.+72     	; 0x4812 <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ca:	68 a1       	ldd	r22, Y+32	; 0x20
    47cc:	79 a1       	ldd	r23, Y+33	; 0x21
    47ce:	8a a1       	ldd	r24, Y+34	; 0x22
    47d0:	9b a1       	ldd	r25, Y+35	; 0x23
    47d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	9f 8f       	std	Y+31, r25	; 0x1f
    47dc:	8e 8f       	std	Y+30, r24	; 0x1e
    47de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    47e2:	9b 8f       	std	Y+27, r25	; 0x1b
    47e4:	8a 8f       	std	Y+26, r24	; 0x1a
    47e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    47e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	f1 f7       	brne	.-4      	; 0x47ea <LCD_read_data_4bit+0x5d4>
    47ee:	9b 8f       	std	Y+27, r25	; 0x1b
    47f0:	8a 8f       	std	Y+26, r24	; 0x1a
    47f2:	0f c0       	rjmp	.+30     	; 0x4812 <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    47f4:	69 a5       	ldd	r22, Y+41	; 0x29
    47f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    47f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    47fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    47fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	88 a7       	std	Y+40, r24	; 0x28
    4806:	88 a5       	ldd	r24, Y+40	; 0x28
    4808:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    480a:	89 8d       	ldd	r24, Y+25	; 0x19
    480c:	8a 95       	dec	r24
    480e:	f1 f7       	brne	.-4      	; 0x480c <LCD_read_data_4bit+0x5f6>
    4810:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    4812:	82 e0       	ldi	r24, 0x02	; 2
    4814:	60 e0       	ldi	r22, 0x00	; 0
    4816:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <DIO_void_set_pin>
    481a:	80 e0       	ldi	r24, 0x00	; 0
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	a0 e8       	ldi	r26, 0x80	; 128
    4820:	bf e3       	ldi	r27, 0x3F	; 63
    4822:	8d 8b       	std	Y+21, r24	; 0x15
    4824:	9e 8b       	std	Y+22, r25	; 0x16
    4826:	af 8b       	std	Y+23, r26	; 0x17
    4828:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    482a:	6d 89       	ldd	r22, Y+21	; 0x15
    482c:	7e 89       	ldd	r23, Y+22	; 0x16
    482e:	8f 89       	ldd	r24, Y+23	; 0x17
    4830:	98 8d       	ldd	r25, Y+24	; 0x18
    4832:	2b ea       	ldi	r18, 0xAB	; 171
    4834:	3a ea       	ldi	r19, 0xAA	; 170
    4836:	4a e2       	ldi	r20, 0x2A	; 42
    4838:	50 e4       	ldi	r21, 0x40	; 64
    483a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	89 8b       	std	Y+17, r24	; 0x11
    4844:	9a 8b       	std	Y+18, r25	; 0x12
    4846:	ab 8b       	std	Y+19, r26	; 0x13
    4848:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    484a:	69 89       	ldd	r22, Y+17	; 0x11
    484c:	7a 89       	ldd	r23, Y+18	; 0x12
    484e:	8b 89       	ldd	r24, Y+19	; 0x13
    4850:	9c 89       	ldd	r25, Y+20	; 0x14
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	40 e8       	ldi	r20, 0x80	; 128
    4858:	5f e3       	ldi	r21, 0x3F	; 63
    485a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    485e:	88 23       	and	r24, r24
    4860:	1c f4       	brge	.+6      	; 0x4868 <LCD_read_data_4bit+0x652>
		__ticks = 1;
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	88 8b       	std	Y+16, r24	; 0x10
    4866:	91 c0       	rjmp	.+290    	; 0x498a <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    4868:	69 89       	ldd	r22, Y+17	; 0x11
    486a:	7a 89       	ldd	r23, Y+18	; 0x12
    486c:	8b 89       	ldd	r24, Y+19	; 0x13
    486e:	9c 89       	ldd	r25, Y+20	; 0x14
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	4f e7       	ldi	r20, 0x7F	; 127
    4876:	53 e4       	ldi	r21, 0x43	; 67
    4878:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    487c:	18 16       	cp	r1, r24
    487e:	0c f0       	brlt	.+2      	; 0x4882 <LCD_read_data_4bit+0x66c>
    4880:	7b c0       	rjmp	.+246    	; 0x4978 <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    4882:	6d 89       	ldd	r22, Y+21	; 0x15
    4884:	7e 89       	ldd	r23, Y+22	; 0x16
    4886:	8f 89       	ldd	r24, Y+23	; 0x17
    4888:	98 8d       	ldd	r25, Y+24	; 0x18
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	4a e7       	ldi	r20, 0x7A	; 122
    4890:	54 e4       	ldi	r21, 0x44	; 68
    4892:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4896:	dc 01       	movw	r26, r24
    4898:	cb 01       	movw	r24, r22
    489a:	8c 87       	std	Y+12, r24	; 0x0c
    489c:	9d 87       	std	Y+13, r25	; 0x0d
    489e:	ae 87       	std	Y+14, r26	; 0x0e
    48a0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    48a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    48a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    48a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	30 e0       	ldi	r19, 0x00	; 0
    48ae:	4a ef       	ldi	r20, 0xFA	; 250
    48b0:	54 e4       	ldi	r21, 0x44	; 68
    48b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	88 87       	std	Y+8, r24	; 0x08
    48bc:	99 87       	std	Y+9, r25	; 0x09
    48be:	aa 87       	std	Y+10, r26	; 0x0a
    48c0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    48c2:	68 85       	ldd	r22, Y+8	; 0x08
    48c4:	79 85       	ldd	r23, Y+9	; 0x09
    48c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    48c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	40 e8       	ldi	r20, 0x80	; 128
    48d0:	5f e3       	ldi	r21, 0x3F	; 63
    48d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48d6:	88 23       	and	r24, r24
    48d8:	2c f4       	brge	.+10     	; 0x48e4 <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	9f 83       	std	Y+7, r25	; 0x07
    48e0:	8e 83       	std	Y+6, r24	; 0x06
    48e2:	3f c0       	rjmp	.+126    	; 0x4962 <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    48e4:	68 85       	ldd	r22, Y+8	; 0x08
    48e6:	79 85       	ldd	r23, Y+9	; 0x09
    48e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    48ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	3f ef       	ldi	r19, 0xFF	; 255
    48f0:	4f e7       	ldi	r20, 0x7F	; 127
    48f2:	57 e4       	ldi	r21, 0x47	; 71
    48f4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48f8:	18 16       	cp	r1, r24
    48fa:	4c f5       	brge	.+82     	; 0x494e <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    48fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    4900:	8e 85       	ldd	r24, Y+14	; 0x0e
    4902:	9f 85       	ldd	r25, Y+15	; 0x0f
    4904:	20 e0       	ldi	r18, 0x00	; 0
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	40 e2       	ldi	r20, 0x20	; 32
    490a:	51 e4       	ldi	r21, 0x41	; 65
    490c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4910:	dc 01       	movw	r26, r24
    4912:	cb 01       	movw	r24, r22
    4914:	bc 01       	movw	r22, r24
    4916:	cd 01       	movw	r24, r26
    4918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491c:	dc 01       	movw	r26, r24
    491e:	cb 01       	movw	r24, r22
    4920:	9f 83       	std	Y+7, r25	; 0x07
    4922:	8e 83       	std	Y+6, r24	; 0x06
    4924:	0f c0       	rjmp	.+30     	; 0x4944 <LCD_read_data_4bit+0x72e>
    4926:	88 ec       	ldi	r24, 0xC8	; 200
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	9d 83       	std	Y+5, r25	; 0x05
    492c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    492e:	8c 81       	ldd	r24, Y+4	; 0x04
    4930:	9d 81       	ldd	r25, Y+5	; 0x05
    4932:	01 97       	sbiw	r24, 0x01	; 1
    4934:	f1 f7       	brne	.-4      	; 0x4932 <LCD_read_data_4bit+0x71c>
    4936:	9d 83       	std	Y+5, r25	; 0x05
    4938:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    493a:	8e 81       	ldd	r24, Y+6	; 0x06
    493c:	9f 81       	ldd	r25, Y+7	; 0x07
    493e:	01 97       	sbiw	r24, 0x01	; 1
    4940:	9f 83       	std	Y+7, r25	; 0x07
    4942:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4944:	8e 81       	ldd	r24, Y+6	; 0x06
    4946:	9f 81       	ldd	r25, Y+7	; 0x07
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	69 f7       	brne	.-38     	; 0x4926 <LCD_read_data_4bit+0x710>
    494c:	24 c0       	rjmp	.+72     	; 0x4996 <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494e:	68 85       	ldd	r22, Y+8	; 0x08
    4950:	79 85       	ldd	r23, Y+9	; 0x09
    4952:	8a 85       	ldd	r24, Y+10	; 0x0a
    4954:	9b 85       	ldd	r25, Y+11	; 0x0b
    4956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	9f 83       	std	Y+7, r25	; 0x07
    4960:	8e 83       	std	Y+6, r24	; 0x06
    4962:	8e 81       	ldd	r24, Y+6	; 0x06
    4964:	9f 81       	ldd	r25, Y+7	; 0x07
    4966:	9b 83       	std	Y+3, r25	; 0x03
    4968:	8a 83       	std	Y+2, r24	; 0x02
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	9b 81       	ldd	r25, Y+3	; 0x03
    496e:	01 97       	sbiw	r24, 0x01	; 1
    4970:	f1 f7       	brne	.-4      	; 0x496e <LCD_read_data_4bit+0x758>
    4972:	9b 83       	std	Y+3, r25	; 0x03
    4974:	8a 83       	std	Y+2, r24	; 0x02
    4976:	0f c0       	rjmp	.+30     	; 0x4996 <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4978:	69 89       	ldd	r22, Y+17	; 0x11
    497a:	7a 89       	ldd	r23, Y+18	; 0x12
    497c:	8b 89       	ldd	r24, Y+19	; 0x13
    497e:	9c 89       	ldd	r25, Y+20	; 0x14
    4980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	88 8b       	std	Y+16, r24	; 0x10
    498a:	88 89       	ldd	r24, Y+16	; 0x10
    498c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    498e:	89 81       	ldd	r24, Y+1	; 0x01
    4990:	8a 95       	dec	r24
    4992:	f1 f7       	brne	.-4      	; 0x4990 <LCD_read_data_4bit+0x77a>
    4994:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    4996:	82 e0       	ldi	r24, 0x02	; 2
    4998:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <DIO_u8_get_port>
    499c:	98 2f       	mov	r25, r24
    499e:	de 01       	movw	r26, r28
    49a0:	af 59       	subi	r26, 0x9F	; 159
    49a2:	bf 4f       	sbci	r27, 0xFF	; 255
    49a4:	fe 01       	movw	r30, r28
    49a6:	ef 59       	subi	r30, 0x9F	; 159
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	80 81       	ld	r24, Z
    49ac:	89 2b       	or	r24, r25
    49ae:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    49b0:	82 e0       	ldi	r24, 0x02	; 2
    49b2:	60 e0       	ldi	r22, 0x00	; 0
    49b4:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    49b8:	de 01       	movw	r26, r28
    49ba:	af 59       	subi	r26, 0x9F	; 159
    49bc:	bf 4f       	sbci	r27, 0xFF	; 255
    49be:	fe 01       	movw	r30, r28
    49c0:	ef 59       	subi	r30, 0x9F	; 159
    49c2:	ff 4f       	sbci	r31, 0xFF	; 255
    49c4:	80 81       	ld	r24, Z
    49c6:	8f 77       	andi	r24, 0x7F	; 127
    49c8:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    49ca:	82 e0       	ldi	r24, 0x02	; 2
    49cc:	67 e0       	ldi	r22, 0x07	; 7
    49ce:	4f ef       	ldi	r20, 0xFF	; 255
    49d0:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    49d4:	82 e0       	ldi	r24, 0x02	; 2
    49d6:	66 e0       	ldi	r22, 0x06	; 6
    49d8:	4f ef       	ldi	r20, 0xFF	; 255
    49da:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    49de:	82 e0       	ldi	r24, 0x02	; 2
    49e0:	65 e0       	ldi	r22, 0x05	; 5
    49e2:	4f ef       	ldi	r20, 0xFF	; 255
    49e4:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    49e8:	82 e0       	ldi	r24, 0x02	; 2
    49ea:	64 e0       	ldi	r22, 0x04	; 4
    49ec:	4f ef       	ldi	r20, 0xFF	; 255
    49ee:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    49f2:	fe 01       	movw	r30, r28
    49f4:	ef 59       	subi	r30, 0x9F	; 159
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	80 81       	ld	r24, Z
}
    49fa:	cf 59       	subi	r28, 0x9F	; 159
    49fc:	df 4f       	sbci	r29, 0xFF	; 255
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	f8 94       	cli
    4a02:	de bf       	out	0x3e, r29	; 62
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	cd bf       	out	0x3d, r28	; 61
    4a08:	cf 91       	pop	r28
    4a0a:	df 91       	pop	r29
    4a0c:	1f 91       	pop	r17
    4a0e:	0f 91       	pop	r16
    4a10:	08 95       	ret

00004a12 <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    4a12:	0f 93       	push	r16
    4a14:	1f 93       	push	r17
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62
    4a1e:	cc 54       	subi	r28, 0x4C	; 76
    4a20:	d0 40       	sbci	r29, 0x00	; 0
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	f8 94       	cli
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    4a2c:	82 e0       	ldi	r24, 0x02	; 2
    4a2e:	67 e0       	ldi	r22, 0x07	; 7
    4a30:	4f ef       	ldi	r20, 0xFF	; 255
    4a32:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    4a36:	82 e0       	ldi	r24, 0x02	; 2
    4a38:	66 e0       	ldi	r22, 0x06	; 6
    4a3a:	4f ef       	ldi	r20, 0xFF	; 255
    4a3c:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4a40:	82 e0       	ldi	r24, 0x02	; 2
    4a42:	65 e0       	ldi	r22, 0x05	; 5
    4a44:	4f ef       	ldi	r20, 0xFF	; 255
    4a46:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    4a4a:	82 e0       	ldi	r24, 0x02	; 2
    4a4c:	64 e0       	ldi	r22, 0x04	; 4
    4a4e:	4f ef       	ldi	r20, 0xFF	; 255
    4a50:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    4a54:	82 e0       	ldi	r24, 0x02	; 2
    4a56:	60 e0       	ldi	r22, 0x00	; 0
    4a58:	4f ef       	ldi	r20, 0xFF	; 255
    4a5a:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    4a5e:	82 e0       	ldi	r24, 0x02	; 2
    4a60:	61 e0       	ldi	r22, 0x01	; 1
    4a62:	4f ef       	ldi	r20, 0xFF	; 255
    4a64:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    4a68:	82 e0       	ldi	r24, 0x02	; 2
    4a6a:	62 e0       	ldi	r22, 0x02	; 2
    4a6c:	4f ef       	ldi	r20, 0xFF	; 255
    4a6e:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <DIO_void_set_pin_dir>
    4a72:	fe 01       	movw	r30, r28
    4a74:	e7 5b       	subi	r30, 0xB7	; 183
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	80 e0       	ldi	r24, 0x00	; 0
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	a8 e4       	ldi	r26, 0x48	; 72
    4a7e:	b2 e4       	ldi	r27, 0x42	; 66
    4a80:	80 83       	st	Z, r24
    4a82:	91 83       	std	Z+1, r25	; 0x01
    4a84:	a2 83       	std	Z+2, r26	; 0x02
    4a86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a88:	8e 01       	movw	r16, r28
    4a8a:	0b 5b       	subi	r16, 0xBB	; 187
    4a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e7 5b       	subi	r30, 0xB7	; 183
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	60 81       	ld	r22, Z
    4a96:	71 81       	ldd	r23, Z+1	; 0x01
    4a98:	82 81       	ldd	r24, Z+2	; 0x02
    4a9a:	93 81       	ldd	r25, Z+3	; 0x03
    4a9c:	20 e0       	ldi	r18, 0x00	; 0
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	4a ef       	ldi	r20, 0xFA	; 250
    4aa2:	54 e4       	ldi	r21, 0x44	; 68
    4aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	cb 01       	movw	r24, r22
    4aac:	f8 01       	movw	r30, r16
    4aae:	80 83       	st	Z, r24
    4ab0:	91 83       	std	Z+1, r25	; 0x01
    4ab2:	a2 83       	std	Z+2, r26	; 0x02
    4ab4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	eb 5b       	subi	r30, 0xBB	; 187
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	60 81       	ld	r22, Z
    4abe:	71 81       	ldd	r23, Z+1	; 0x01
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	40 e8       	ldi	r20, 0x80	; 128
    4aca:	5f e3       	ldi	r21, 0x3F	; 63
    4acc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4ad0:	88 23       	and	r24, r24
    4ad2:	44 f4       	brge	.+16     	; 0x4ae4 <LCD_init+0xd2>
		__ticks = 1;
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	ed 5b       	subi	r30, 0xBD	; 189
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	91 83       	std	Z+1, r25	; 0x01
    4ae0:	80 83       	st	Z, r24
    4ae2:	64 c0       	rjmp	.+200    	; 0x4bac <LCD_init+0x19a>
	else if (__tmp > 65535)
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	eb 5b       	subi	r30, 0xBB	; 187
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	60 81       	ld	r22, Z
    4aec:	71 81       	ldd	r23, Z+1	; 0x01
    4aee:	82 81       	ldd	r24, Z+2	; 0x02
    4af0:	93 81       	ldd	r25, Z+3	; 0x03
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	3f ef       	ldi	r19, 0xFF	; 255
    4af6:	4f e7       	ldi	r20, 0x7F	; 127
    4af8:	57 e4       	ldi	r21, 0x47	; 71
    4afa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4afe:	18 16       	cp	r1, r24
    4b00:	0c f0       	brlt	.+2      	; 0x4b04 <LCD_init+0xf2>
    4b02:	43 c0       	rjmp	.+134    	; 0x4b8a <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b04:	fe 01       	movw	r30, r28
    4b06:	e7 5b       	subi	r30, 0xB7	; 183
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	60 81       	ld	r22, Z
    4b0c:	71 81       	ldd	r23, Z+1	; 0x01
    4b0e:	82 81       	ldd	r24, Z+2	; 0x02
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e2       	ldi	r20, 0x20	; 32
    4b18:	51 e4       	ldi	r21, 0x41	; 65
    4b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	8e 01       	movw	r16, r28
    4b24:	0d 5b       	subi	r16, 0xBD	; 189
    4b26:	1f 4f       	sbci	r17, 0xFF	; 255
    4b28:	bc 01       	movw	r22, r24
    4b2a:	cd 01       	movw	r24, r26
    4b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	f8 01       	movw	r30, r16
    4b36:	91 83       	std	Z+1, r25	; 0x01
    4b38:	80 83       	st	Z, r24
    4b3a:	1f c0       	rjmp	.+62     	; 0x4b7a <LCD_init+0x168>
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	ef 5b       	subi	r30, 0xBF	; 191
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	88 ec       	ldi	r24, 0xC8	; 200
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	ef 5b       	subi	r30, 0xBF	; 191
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	80 81       	ld	r24, Z
    4b52:	91 81       	ldd	r25, Z+1	; 0x01
    4b54:	01 97       	sbiw	r24, 0x01	; 1
    4b56:	f1 f7       	brne	.-4      	; 0x4b54 <LCD_init+0x142>
    4b58:	fe 01       	movw	r30, r28
    4b5a:	ef 5b       	subi	r30, 0xBF	; 191
    4b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5e:	91 83       	std	Z+1, r25	; 0x01
    4b60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b62:	de 01       	movw	r26, r28
    4b64:	ad 5b       	subi	r26, 0xBD	; 189
    4b66:	bf 4f       	sbci	r27, 0xFF	; 255
    4b68:	fe 01       	movw	r30, r28
    4b6a:	ed 5b       	subi	r30, 0xBD	; 189
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	80 81       	ld	r24, Z
    4b70:	91 81       	ldd	r25, Z+1	; 0x01
    4b72:	01 97       	sbiw	r24, 0x01	; 1
    4b74:	11 96       	adiw	r26, 0x01	; 1
    4b76:	9c 93       	st	X, r25
    4b78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	ed 5b       	subi	r30, 0xBD	; 189
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	80 81       	ld	r24, Z
    4b82:	91 81       	ldd	r25, Z+1	; 0x01
    4b84:	00 97       	sbiw	r24, 0x00	; 0
    4b86:	d1 f6       	brne	.-76     	; 0x4b3c <LCD_init+0x12a>
    4b88:	24 c0       	rjmp	.+72     	; 0x4bd2 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b8a:	8e 01       	movw	r16, r28
    4b8c:	0d 5b       	subi	r16, 0xBD	; 189
    4b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b90:	fe 01       	movw	r30, r28
    4b92:	eb 5b       	subi	r30, 0xBB	; 187
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	60 81       	ld	r22, Z
    4b98:	71 81       	ldd	r23, Z+1	; 0x01
    4b9a:	82 81       	ldd	r24, Z+2	; 0x02
    4b9c:	93 81       	ldd	r25, Z+3	; 0x03
    4b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	f8 01       	movw	r30, r16
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
    4bac:	fe 01       	movw	r30, r28
    4bae:	ed 5b       	subi	r30, 0xBD	; 189
    4bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb2:	80 81       	ld	r24, Z
    4bb4:	91 81       	ldd	r25, Z+1	; 0x01
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	ff 96       	adiw	r30, 0x3f	; 63
    4bba:	91 83       	std	Z+1, r25	; 0x01
    4bbc:	80 83       	st	Z, r24
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	ff 96       	adiw	r30, 0x3f	; 63
    4bc2:	80 81       	ld	r24, Z
    4bc4:	91 81       	ldd	r25, Z+1	; 0x01
    4bc6:	01 97       	sbiw	r24, 0x01	; 1
    4bc8:	f1 f7       	brne	.-4      	; 0x4bc6 <LCD_init+0x1b4>
    4bca:	fe 01       	movw	r30, r28
    4bcc:	ff 96       	adiw	r30, 0x3f	; 63
    4bce:	91 83       	std	Z+1, r25	; 0x01
    4bd0:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    4bd2:	0e 94 4b 19 	call	0x3296	; 0x3296 <LCD_function_set_4bit>
    4bd6:	80 e0       	ldi	r24, 0x00	; 0
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	a8 e4       	ldi	r26, 0x48	; 72
    4bdc:	b2 e4       	ldi	r27, 0x42	; 66
    4bde:	8b af       	std	Y+59, r24	; 0x3b
    4be0:	9c af       	std	Y+60, r25	; 0x3c
    4be2:	ad af       	std	Y+61, r26	; 0x3d
    4be4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4be6:	6b ad       	ldd	r22, Y+59	; 0x3b
    4be8:	7c ad       	ldd	r23, Y+60	; 0x3c
    4bea:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bec:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bee:	2b ea       	ldi	r18, 0xAB	; 171
    4bf0:	3a ea       	ldi	r19, 0xAA	; 170
    4bf2:	4a e2       	ldi	r20, 0x2A	; 42
    4bf4:	50 e4       	ldi	r21, 0x40	; 64
    4bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	8f ab       	std	Y+55, r24	; 0x37
    4c00:	98 af       	std	Y+56, r25	; 0x38
    4c02:	a9 af       	std	Y+57, r26	; 0x39
    4c04:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4c06:	6f a9       	ldd	r22, Y+55	; 0x37
    4c08:	78 ad       	ldd	r23, Y+56	; 0x38
    4c0a:	89 ad       	ldd	r24, Y+57	; 0x39
    4c0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c0e:	20 e0       	ldi	r18, 0x00	; 0
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	40 e8       	ldi	r20, 0x80	; 128
    4c14:	5f e3       	ldi	r21, 0x3F	; 63
    4c16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c1a:	88 23       	and	r24, r24
    4c1c:	1c f4       	brge	.+6      	; 0x4c24 <LCD_init+0x212>
		__ticks = 1;
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	8e ab       	std	Y+54, r24	; 0x36
    4c22:	91 c0       	rjmp	.+290    	; 0x4d46 <LCD_init+0x334>
	else if (__tmp > 255)
    4c24:	6f a9       	ldd	r22, Y+55	; 0x37
    4c26:	78 ad       	ldd	r23, Y+56	; 0x38
    4c28:	89 ad       	ldd	r24, Y+57	; 0x39
    4c2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c2c:	20 e0       	ldi	r18, 0x00	; 0
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
    4c30:	4f e7       	ldi	r20, 0x7F	; 127
    4c32:	53 e4       	ldi	r21, 0x43	; 67
    4c34:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c38:	18 16       	cp	r1, r24
    4c3a:	0c f0       	brlt	.+2      	; 0x4c3e <LCD_init+0x22c>
    4c3c:	7b c0       	rjmp	.+246    	; 0x4d34 <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    4c3e:	6b ad       	ldd	r22, Y+59	; 0x3b
    4c40:	7c ad       	ldd	r23, Y+60	; 0x3c
    4c42:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c44:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c46:	20 e0       	ldi	r18, 0x00	; 0
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	4a e7       	ldi	r20, 0x7A	; 122
    4c4c:	54 e4       	ldi	r21, 0x44	; 68
    4c4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c52:	dc 01       	movw	r26, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	8a ab       	std	Y+50, r24	; 0x32
    4c58:	9b ab       	std	Y+51, r25	; 0x33
    4c5a:	ac ab       	std	Y+52, r26	; 0x34
    4c5c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c5e:	6a a9       	ldd	r22, Y+50	; 0x32
    4c60:	7b a9       	ldd	r23, Y+51	; 0x33
    4c62:	8c a9       	ldd	r24, Y+52	; 0x34
    4c64:	9d a9       	ldd	r25, Y+53	; 0x35
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	4a ef       	ldi	r20, 0xFA	; 250
    4c6c:	54 e4       	ldi	r21, 0x44	; 68
    4c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c72:	dc 01       	movw	r26, r24
    4c74:	cb 01       	movw	r24, r22
    4c76:	8e a7       	std	Y+46, r24	; 0x2e
    4c78:	9f a7       	std	Y+47, r25	; 0x2f
    4c7a:	a8 ab       	std	Y+48, r26	; 0x30
    4c7c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    4c7e:	6e a5       	ldd	r22, Y+46	; 0x2e
    4c80:	7f a5       	ldd	r23, Y+47	; 0x2f
    4c82:	88 a9       	ldd	r24, Y+48	; 0x30
    4c84:	99 a9       	ldd	r25, Y+49	; 0x31
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	40 e8       	ldi	r20, 0x80	; 128
    4c8c:	5f e3       	ldi	r21, 0x3F	; 63
    4c8e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c92:	88 23       	and	r24, r24
    4c94:	2c f4       	brge	.+10     	; 0x4ca0 <LCD_init+0x28e>
		__ticks = 1;
    4c96:	81 e0       	ldi	r24, 0x01	; 1
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	9d a7       	std	Y+45, r25	; 0x2d
    4c9c:	8c a7       	std	Y+44, r24	; 0x2c
    4c9e:	3f c0       	rjmp	.+126    	; 0x4d1e <LCD_init+0x30c>
	else if (__tmp > 65535)
    4ca0:	6e a5       	ldd	r22, Y+46	; 0x2e
    4ca2:	7f a5       	ldd	r23, Y+47	; 0x2f
    4ca4:	88 a9       	ldd	r24, Y+48	; 0x30
    4ca6:	99 a9       	ldd	r25, Y+49	; 0x31
    4ca8:	20 e0       	ldi	r18, 0x00	; 0
    4caa:	3f ef       	ldi	r19, 0xFF	; 255
    4cac:	4f e7       	ldi	r20, 0x7F	; 127
    4cae:	57 e4       	ldi	r21, 0x47	; 71
    4cb0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4cb4:	18 16       	cp	r1, r24
    4cb6:	4c f5       	brge	.+82     	; 0x4d0a <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cb8:	6a a9       	ldd	r22, Y+50	; 0x32
    4cba:	7b a9       	ldd	r23, Y+51	; 0x33
    4cbc:	8c a9       	ldd	r24, Y+52	; 0x34
    4cbe:	9d a9       	ldd	r25, Y+53	; 0x35
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	40 e2       	ldi	r20, 0x20	; 32
    4cc6:	51 e4       	ldi	r21, 0x41	; 65
    4cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ccc:	dc 01       	movw	r26, r24
    4cce:	cb 01       	movw	r24, r22
    4cd0:	bc 01       	movw	r22, r24
    4cd2:	cd 01       	movw	r24, r26
    4cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	9d a7       	std	Y+45, r25	; 0x2d
    4cde:	8c a7       	std	Y+44, r24	; 0x2c
    4ce0:	0f c0       	rjmp	.+30     	; 0x4d00 <LCD_init+0x2ee>
    4ce2:	88 ec       	ldi	r24, 0xC8	; 200
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	9b a7       	std	Y+43, r25	; 0x2b
    4ce8:	8a a7       	std	Y+42, r24	; 0x2a
    4cea:	8a a5       	ldd	r24, Y+42	; 0x2a
    4cec:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cee:	01 97       	sbiw	r24, 0x01	; 1
    4cf0:	f1 f7       	brne	.-4      	; 0x4cee <LCD_init+0x2dc>
    4cf2:	9b a7       	std	Y+43, r25	; 0x2b
    4cf4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cf6:	8c a5       	ldd	r24, Y+44	; 0x2c
    4cf8:	9d a5       	ldd	r25, Y+45	; 0x2d
    4cfa:	01 97       	sbiw	r24, 0x01	; 1
    4cfc:	9d a7       	std	Y+45, r25	; 0x2d
    4cfe:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d00:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d02:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d04:	00 97       	sbiw	r24, 0x00	; 0
    4d06:	69 f7       	brne	.-38     	; 0x4ce2 <LCD_init+0x2d0>
    4d08:	24 c0       	rjmp	.+72     	; 0x4d52 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d0a:	6e a5       	ldd	r22, Y+46	; 0x2e
    4d0c:	7f a5       	ldd	r23, Y+47	; 0x2f
    4d0e:	88 a9       	ldd	r24, Y+48	; 0x30
    4d10:	99 a9       	ldd	r25, Y+49	; 0x31
    4d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d16:	dc 01       	movw	r26, r24
    4d18:	cb 01       	movw	r24, r22
    4d1a:	9d a7       	std	Y+45, r25	; 0x2d
    4d1c:	8c a7       	std	Y+44, r24	; 0x2c
    4d1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4d20:	9d a5       	ldd	r25, Y+45	; 0x2d
    4d22:	99 a7       	std	Y+41, r25	; 0x29
    4d24:	88 a7       	std	Y+40, r24	; 0x28
    4d26:	88 a5       	ldd	r24, Y+40	; 0x28
    4d28:	99 a5       	ldd	r25, Y+41	; 0x29
    4d2a:	01 97       	sbiw	r24, 0x01	; 1
    4d2c:	f1 f7       	brne	.-4      	; 0x4d2a <LCD_init+0x318>
    4d2e:	99 a7       	std	Y+41, r25	; 0x29
    4d30:	88 a7       	std	Y+40, r24	; 0x28
    4d32:	0f c0       	rjmp	.+30     	; 0x4d52 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d34:	6f a9       	ldd	r22, Y+55	; 0x37
    4d36:	78 ad       	ldd	r23, Y+56	; 0x38
    4d38:	89 ad       	ldd	r24, Y+57	; 0x39
    4d3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d40:	dc 01       	movw	r26, r24
    4d42:	cb 01       	movw	r24, r22
    4d44:	8e ab       	std	Y+54, r24	; 0x36
    4d46:	8e a9       	ldd	r24, Y+54	; 0x36
    4d48:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d4a:	8f a1       	ldd	r24, Y+39	; 0x27
    4d4c:	8a 95       	dec	r24
    4d4e:	f1 f7       	brne	.-4      	; 0x4d4c <LCD_init+0x33a>
    4d50:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    4d52:	8c e0       	ldi	r24, 0x0C	; 12
    4d54:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_write_cmd_4bit>
    4d58:	80 e0       	ldi	r24, 0x00	; 0
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	a8 e4       	ldi	r26, 0x48	; 72
    4d5e:	b2 e4       	ldi	r27, 0x42	; 66
    4d60:	8b a3       	std	Y+35, r24	; 0x23
    4d62:	9c a3       	std	Y+36, r25	; 0x24
    4d64:	ad a3       	std	Y+37, r26	; 0x25
    4d66:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4d68:	6b a1       	ldd	r22, Y+35	; 0x23
    4d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d70:	2b ea       	ldi	r18, 0xAB	; 171
    4d72:	3a ea       	ldi	r19, 0xAA	; 170
    4d74:	4a e2       	ldi	r20, 0x2A	; 42
    4d76:	50 e4       	ldi	r21, 0x40	; 64
    4d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	8f 8f       	std	Y+31, r24	; 0x1f
    4d82:	98 a3       	std	Y+32, r25	; 0x20
    4d84:	a9 a3       	std	Y+33, r26	; 0x21
    4d86:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    4d88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4d8a:	78 a1       	ldd	r23, Y+32	; 0x20
    4d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    4d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    4d90:	20 e0       	ldi	r18, 0x00	; 0
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	40 e8       	ldi	r20, 0x80	; 128
    4d96:	5f e3       	ldi	r21, 0x3F	; 63
    4d98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4d9c:	88 23       	and	r24, r24
    4d9e:	1c f4       	brge	.+6      	; 0x4da6 <LCD_init+0x394>
		__ticks = 1;
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	8e 8f       	std	Y+30, r24	; 0x1e
    4da4:	91 c0       	rjmp	.+290    	; 0x4ec8 <LCD_init+0x4b6>
	else if (__tmp > 255)
    4da6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4da8:	78 a1       	ldd	r23, Y+32	; 0x20
    4daa:	89 a1       	ldd	r24, Y+33	; 0x21
    4dac:	9a a1       	ldd	r25, Y+34	; 0x22
    4dae:	20 e0       	ldi	r18, 0x00	; 0
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	4f e7       	ldi	r20, 0x7F	; 127
    4db4:	53 e4       	ldi	r21, 0x43	; 67
    4db6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4dba:	18 16       	cp	r1, r24
    4dbc:	0c f0       	brlt	.+2      	; 0x4dc0 <LCD_init+0x3ae>
    4dbe:	7b c0       	rjmp	.+246    	; 0x4eb6 <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    4dc0:	6b a1       	ldd	r22, Y+35	; 0x23
    4dc2:	7c a1       	ldd	r23, Y+36	; 0x24
    4dc4:	8d a1       	ldd	r24, Y+37	; 0x25
    4dc6:	9e a1       	ldd	r25, Y+38	; 0x26
    4dc8:	20 e0       	ldi	r18, 0x00	; 0
    4dca:	30 e0       	ldi	r19, 0x00	; 0
    4dcc:	4a e7       	ldi	r20, 0x7A	; 122
    4dce:	54 e4       	ldi	r21, 0x44	; 68
    4dd0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	8a 8f       	std	Y+26, r24	; 0x1a
    4dda:	9b 8f       	std	Y+27, r25	; 0x1b
    4ddc:	ac 8f       	std	Y+28, r26	; 0x1c
    4dde:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4de0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4de2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4de4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4de6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	4a ef       	ldi	r20, 0xFA	; 250
    4dee:	54 e4       	ldi	r21, 0x44	; 68
    4df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df4:	dc 01       	movw	r26, r24
    4df6:	cb 01       	movw	r24, r22
    4df8:	8e 8b       	std	Y+22, r24	; 0x16
    4dfa:	9f 8b       	std	Y+23, r25	; 0x17
    4dfc:	a8 8f       	std	Y+24, r26	; 0x18
    4dfe:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4e00:	6e 89       	ldd	r22, Y+22	; 0x16
    4e02:	7f 89       	ldd	r23, Y+23	; 0x17
    4e04:	88 8d       	ldd	r24, Y+24	; 0x18
    4e06:	99 8d       	ldd	r25, Y+25	; 0x19
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    4e0c:	40 e8       	ldi	r20, 0x80	; 128
    4e0e:	5f e3       	ldi	r21, 0x3F	; 63
    4e10:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e14:	88 23       	and	r24, r24
    4e16:	2c f4       	brge	.+10     	; 0x4e22 <LCD_init+0x410>
		__ticks = 1;
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	9d 8b       	std	Y+21, r25	; 0x15
    4e1e:	8c 8b       	std	Y+20, r24	; 0x14
    4e20:	3f c0       	rjmp	.+126    	; 0x4ea0 <LCD_init+0x48e>
	else if (__tmp > 65535)
    4e22:	6e 89       	ldd	r22, Y+22	; 0x16
    4e24:	7f 89       	ldd	r23, Y+23	; 0x17
    4e26:	88 8d       	ldd	r24, Y+24	; 0x18
    4e28:	99 8d       	ldd	r25, Y+25	; 0x19
    4e2a:	20 e0       	ldi	r18, 0x00	; 0
    4e2c:	3f ef       	ldi	r19, 0xFF	; 255
    4e2e:	4f e7       	ldi	r20, 0x7F	; 127
    4e30:	57 e4       	ldi	r21, 0x47	; 71
    4e32:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4e36:	18 16       	cp	r1, r24
    4e38:	4c f5       	brge	.+82     	; 0x4e8c <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e3a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4e3c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4e3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4e42:	20 e0       	ldi	r18, 0x00	; 0
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	40 e2       	ldi	r20, 0x20	; 32
    4e48:	51 e4       	ldi	r21, 0x41	; 65
    4e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4e:	dc 01       	movw	r26, r24
    4e50:	cb 01       	movw	r24, r22
    4e52:	bc 01       	movw	r22, r24
    4e54:	cd 01       	movw	r24, r26
    4e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e5a:	dc 01       	movw	r26, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	9d 8b       	std	Y+21, r25	; 0x15
    4e60:	8c 8b       	std	Y+20, r24	; 0x14
    4e62:	0f c0       	rjmp	.+30     	; 0x4e82 <LCD_init+0x470>
    4e64:	88 ec       	ldi	r24, 0xC8	; 200
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	9b 8b       	std	Y+19, r25	; 0x13
    4e6a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e6c:	8a 89       	ldd	r24, Y+18	; 0x12
    4e6e:	9b 89       	ldd	r25, Y+19	; 0x13
    4e70:	01 97       	sbiw	r24, 0x01	; 1
    4e72:	f1 f7       	brne	.-4      	; 0x4e70 <LCD_init+0x45e>
    4e74:	9b 8b       	std	Y+19, r25	; 0x13
    4e76:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e78:	8c 89       	ldd	r24, Y+20	; 0x14
    4e7a:	9d 89       	ldd	r25, Y+21	; 0x15
    4e7c:	01 97       	sbiw	r24, 0x01	; 1
    4e7e:	9d 8b       	std	Y+21, r25	; 0x15
    4e80:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e82:	8c 89       	ldd	r24, Y+20	; 0x14
    4e84:	9d 89       	ldd	r25, Y+21	; 0x15
    4e86:	00 97       	sbiw	r24, 0x00	; 0
    4e88:	69 f7       	brne	.-38     	; 0x4e64 <LCD_init+0x452>
    4e8a:	24 c0       	rjmp	.+72     	; 0x4ed4 <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e8c:	6e 89       	ldd	r22, Y+22	; 0x16
    4e8e:	7f 89       	ldd	r23, Y+23	; 0x17
    4e90:	88 8d       	ldd	r24, Y+24	; 0x18
    4e92:	99 8d       	ldd	r25, Y+25	; 0x19
    4e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e98:	dc 01       	movw	r26, r24
    4e9a:	cb 01       	movw	r24, r22
    4e9c:	9d 8b       	std	Y+21, r25	; 0x15
    4e9e:	8c 8b       	std	Y+20, r24	; 0x14
    4ea0:	8c 89       	ldd	r24, Y+20	; 0x14
    4ea2:	9d 89       	ldd	r25, Y+21	; 0x15
    4ea4:	99 8b       	std	Y+17, r25	; 0x11
    4ea6:	88 8b       	std	Y+16, r24	; 0x10
    4ea8:	88 89       	ldd	r24, Y+16	; 0x10
    4eaa:	99 89       	ldd	r25, Y+17	; 0x11
    4eac:	01 97       	sbiw	r24, 0x01	; 1
    4eae:	f1 f7       	brne	.-4      	; 0x4eac <LCD_init+0x49a>
    4eb0:	99 8b       	std	Y+17, r25	; 0x11
    4eb2:	88 8b       	std	Y+16, r24	; 0x10
    4eb4:	0f c0       	rjmp	.+30     	; 0x4ed4 <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4eb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4eb8:	78 a1       	ldd	r23, Y+32	; 0x20
    4eba:	89 a1       	ldd	r24, Y+33	; 0x21
    4ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    4ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	8e 8f       	std	Y+30, r24	; 0x1e
    4ec8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4eca:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ece:	8a 95       	dec	r24
    4ed0:	f1 f7       	brne	.-4      	; 0x4ece <LCD_init+0x4bc>
    4ed2:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_write_cmd_4bit>
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	a0 e0       	ldi	r26, 0x00	; 0
    4ee0:	b0 e4       	ldi	r27, 0x40	; 64
    4ee2:	8b 87       	std	Y+11, r24	; 0x0b
    4ee4:	9c 87       	std	Y+12, r25	; 0x0c
    4ee6:	ad 87       	std	Y+13, r26	; 0x0d
    4ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ef2:	20 e0       	ldi	r18, 0x00	; 0
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	4a ef       	ldi	r20, 0xFA	; 250
    4ef8:	54 e4       	ldi	r21, 0x44	; 68
    4efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4efe:	dc 01       	movw	r26, r24
    4f00:	cb 01       	movw	r24, r22
    4f02:	8f 83       	std	Y+7, r24	; 0x07
    4f04:	98 87       	std	Y+8, r25	; 0x08
    4f06:	a9 87       	std	Y+9, r26	; 0x09
    4f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f0c:	78 85       	ldd	r23, Y+8	; 0x08
    4f0e:	89 85       	ldd	r24, Y+9	; 0x09
    4f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f12:	20 e0       	ldi	r18, 0x00	; 0
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	40 e8       	ldi	r20, 0x80	; 128
    4f18:	5f e3       	ldi	r21, 0x3F	; 63
    4f1a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f1e:	88 23       	and	r24, r24
    4f20:	2c f4       	brge	.+10     	; 0x4f2c <LCD_init+0x51a>
		__ticks = 1;
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	9e 83       	std	Y+6, r25	; 0x06
    4f28:	8d 83       	std	Y+5, r24	; 0x05
    4f2a:	3f c0       	rjmp	.+126    	; 0x4faa <LCD_init+0x598>
	else if (__tmp > 65535)
    4f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f2e:	78 85       	ldd	r23, Y+8	; 0x08
    4f30:	89 85       	ldd	r24, Y+9	; 0x09
    4f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f34:	20 e0       	ldi	r18, 0x00	; 0
    4f36:	3f ef       	ldi	r19, 0xFF	; 255
    4f38:	4f e7       	ldi	r20, 0x7F	; 127
    4f3a:	57 e4       	ldi	r21, 0x47	; 71
    4f3c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4f40:	18 16       	cp	r1, r24
    4f42:	4c f5       	brge	.+82     	; 0x4f96 <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	40 e2       	ldi	r20, 0x20	; 32
    4f52:	51 e4       	ldi	r21, 0x41	; 65
    4f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	bc 01       	movw	r22, r24
    4f5e:	cd 01       	movw	r24, r26
    4f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f64:	dc 01       	movw	r26, r24
    4f66:	cb 01       	movw	r24, r22
    4f68:	9e 83       	std	Y+6, r25	; 0x06
    4f6a:	8d 83       	std	Y+5, r24	; 0x05
    4f6c:	0f c0       	rjmp	.+30     	; 0x4f8c <LCD_init+0x57a>
    4f6e:	88 ec       	ldi	r24, 0xC8	; 200
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	9c 83       	std	Y+4, r25	; 0x04
    4f74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4f76:	8b 81       	ldd	r24, Y+3	; 0x03
    4f78:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7a:	01 97       	sbiw	r24, 0x01	; 1
    4f7c:	f1 f7       	brne	.-4      	; 0x4f7a <LCD_init+0x568>
    4f7e:	9c 83       	std	Y+4, r25	; 0x04
    4f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f82:	8d 81       	ldd	r24, Y+5	; 0x05
    4f84:	9e 81       	ldd	r25, Y+6	; 0x06
    4f86:	01 97       	sbiw	r24, 0x01	; 1
    4f88:	9e 83       	std	Y+6, r25	; 0x06
    4f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f90:	00 97       	sbiw	r24, 0x00	; 0
    4f92:	69 f7       	brne	.-38     	; 0x4f6e <LCD_init+0x55c>
    4f94:	14 c0       	rjmp	.+40     	; 0x4fbe <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f96:	6f 81       	ldd	r22, Y+7	; 0x07
    4f98:	78 85       	ldd	r23, Y+8	; 0x08
    4f9a:	89 85       	ldd	r24, Y+9	; 0x09
    4f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	9e 83       	std	Y+6, r25	; 0x06
    4fa8:	8d 83       	std	Y+5, r24	; 0x05
    4faa:	8d 81       	ldd	r24, Y+5	; 0x05
    4fac:	9e 81       	ldd	r25, Y+6	; 0x06
    4fae:	9a 83       	std	Y+2, r25	; 0x02
    4fb0:	89 83       	std	Y+1, r24	; 0x01
    4fb2:	89 81       	ldd	r24, Y+1	; 0x01
    4fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb6:	01 97       	sbiw	r24, 0x01	; 1
    4fb8:	f1 f7       	brne	.-4      	; 0x4fb6 <LCD_init+0x5a4>
    4fba:	9a 83       	std	Y+2, r25	; 0x02
    4fbc:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    4fbe:	c4 5b       	subi	r28, 0xB4	; 180
    4fc0:	df 4f       	sbci	r29, 0xFF	; 255
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	cf 91       	pop	r28
    4fce:	df 91       	pop	r29
    4fd0:	1f 91       	pop	r17
    4fd2:	0f 91       	pop	r16
    4fd4:	08 95       	ret

00004fd6 <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    4fd6:	df 93       	push	r29
    4fd8:	cf 93       	push	r28
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
    4fde:	6b 97       	sbiw	r28, 0x1b	; 27
    4fe0:	0f b6       	in	r0, 0x3f	; 63
    4fe2:	f8 94       	cli
    4fe4:	de bf       	out	0x3e, r29	; 62
    4fe6:	0f be       	out	0x3f, r0	; 63
    4fe8:	cd bf       	out	0x3d, r28	; 61
    4fea:	8a 8f       	std	Y+26, r24	; 0x1a
    4fec:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    4fee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4ff0:	88 2f       	mov	r24, r24
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	02 96       	adiw	r24, 0x02	; 2
    4ff6:	00 24       	eor	r0, r0
    4ff8:	96 95       	lsr	r25
    4ffa:	87 95       	ror	r24
    4ffc:	07 94       	ror	r0
    4ffe:	96 95       	lsr	r25
    5000:	87 95       	ror	r24
    5002:	07 94       	ror	r0
    5004:	98 2f       	mov	r25, r24
    5006:	80 2d       	mov	r24, r0
    5008:	98 2f       	mov	r25, r24
    500a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    500c:	89 0f       	add	r24, r25
    500e:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    5010:	89 8d       	ldd	r24, Y+25	; 0x19
    5012:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_write_cmd_4bit>
    5016:	80 e0       	ldi	r24, 0x00	; 0
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	a8 e4       	ldi	r26, 0x48	; 72
    501c:	b2 e4       	ldi	r27, 0x42	; 66
    501e:	8d 8b       	std	Y+21, r24	; 0x15
    5020:	9e 8b       	std	Y+22, r25	; 0x16
    5022:	af 8b       	std	Y+23, r26	; 0x17
    5024:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5026:	6d 89       	ldd	r22, Y+21	; 0x15
    5028:	7e 89       	ldd	r23, Y+22	; 0x16
    502a:	8f 89       	ldd	r24, Y+23	; 0x17
    502c:	98 8d       	ldd	r25, Y+24	; 0x18
    502e:	2b ea       	ldi	r18, 0xAB	; 171
    5030:	3a ea       	ldi	r19, 0xAA	; 170
    5032:	4a e2       	ldi	r20, 0x2A	; 42
    5034:	50 e4       	ldi	r21, 0x40	; 64
    5036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    503a:	dc 01       	movw	r26, r24
    503c:	cb 01       	movw	r24, r22
    503e:	89 8b       	std	Y+17, r24	; 0x11
    5040:	9a 8b       	std	Y+18, r25	; 0x12
    5042:	ab 8b       	std	Y+19, r26	; 0x13
    5044:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5046:	69 89       	ldd	r22, Y+17	; 0x11
    5048:	7a 89       	ldd	r23, Y+18	; 0x12
    504a:	8b 89       	ldd	r24, Y+19	; 0x13
    504c:	9c 89       	ldd	r25, Y+20	; 0x14
    504e:	20 e0       	ldi	r18, 0x00	; 0
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	40 e8       	ldi	r20, 0x80	; 128
    5054:	5f e3       	ldi	r21, 0x3F	; 63
    5056:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    505a:	88 23       	and	r24, r24
    505c:	1c f4       	brge	.+6      	; 0x5064 <LCD_set_cursor+0x8e>
		__ticks = 1;
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	88 8b       	std	Y+16, r24	; 0x10
    5062:	91 c0       	rjmp	.+290    	; 0x5186 <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    5064:	69 89       	ldd	r22, Y+17	; 0x11
    5066:	7a 89       	ldd	r23, Y+18	; 0x12
    5068:	8b 89       	ldd	r24, Y+19	; 0x13
    506a:	9c 89       	ldd	r25, Y+20	; 0x14
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	4f e7       	ldi	r20, 0x7F	; 127
    5072:	53 e4       	ldi	r21, 0x43	; 67
    5074:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5078:	18 16       	cp	r1, r24
    507a:	0c f0       	brlt	.+2      	; 0x507e <LCD_set_cursor+0xa8>
    507c:	7b c0       	rjmp	.+246    	; 0x5174 <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    507e:	6d 89       	ldd	r22, Y+21	; 0x15
    5080:	7e 89       	ldd	r23, Y+22	; 0x16
    5082:	8f 89       	ldd	r24, Y+23	; 0x17
    5084:	98 8d       	ldd	r25, Y+24	; 0x18
    5086:	20 e0       	ldi	r18, 0x00	; 0
    5088:	30 e0       	ldi	r19, 0x00	; 0
    508a:	4a e7       	ldi	r20, 0x7A	; 122
    508c:	54 e4       	ldi	r21, 0x44	; 68
    508e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5092:	dc 01       	movw	r26, r24
    5094:	cb 01       	movw	r24, r22
    5096:	8c 87       	std	Y+12, r24	; 0x0c
    5098:	9d 87       	std	Y+13, r25	; 0x0d
    509a:	ae 87       	std	Y+14, r26	; 0x0e
    509c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    509e:	6c 85       	ldd	r22, Y+12	; 0x0c
    50a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    50a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    50a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	30 e0       	ldi	r19, 0x00	; 0
    50aa:	4a ef       	ldi	r20, 0xFA	; 250
    50ac:	54 e4       	ldi	r21, 0x44	; 68
    50ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50b2:	dc 01       	movw	r26, r24
    50b4:	cb 01       	movw	r24, r22
    50b6:	88 87       	std	Y+8, r24	; 0x08
    50b8:	99 87       	std	Y+9, r25	; 0x09
    50ba:	aa 87       	std	Y+10, r26	; 0x0a
    50bc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    50be:	68 85       	ldd	r22, Y+8	; 0x08
    50c0:	79 85       	ldd	r23, Y+9	; 0x09
    50c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    50c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    50c6:	20 e0       	ldi	r18, 0x00	; 0
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	40 e8       	ldi	r20, 0x80	; 128
    50cc:	5f e3       	ldi	r21, 0x3F	; 63
    50ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    50d2:	88 23       	and	r24, r24
    50d4:	2c f4       	brge	.+10     	; 0x50e0 <LCD_set_cursor+0x10a>
		__ticks = 1;
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	9f 83       	std	Y+7, r25	; 0x07
    50dc:	8e 83       	std	Y+6, r24	; 0x06
    50de:	3f c0       	rjmp	.+126    	; 0x515e <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    50e0:	68 85       	ldd	r22, Y+8	; 0x08
    50e2:	79 85       	ldd	r23, Y+9	; 0x09
    50e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    50e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	3f ef       	ldi	r19, 0xFF	; 255
    50ec:	4f e7       	ldi	r20, 0x7F	; 127
    50ee:	57 e4       	ldi	r21, 0x47	; 71
    50f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    50f4:	18 16       	cp	r1, r24
    50f6:	4c f5       	brge	.+82     	; 0x514a <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    50fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    50fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    50fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	40 e2       	ldi	r20, 0x20	; 32
    5106:	51 e4       	ldi	r21, 0x41	; 65
    5108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    510c:	dc 01       	movw	r26, r24
    510e:	cb 01       	movw	r24, r22
    5110:	bc 01       	movw	r22, r24
    5112:	cd 01       	movw	r24, r26
    5114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	9f 83       	std	Y+7, r25	; 0x07
    511e:	8e 83       	std	Y+6, r24	; 0x06
    5120:	0f c0       	rjmp	.+30     	; 0x5140 <LCD_set_cursor+0x16a>
    5122:	88 ec       	ldi	r24, 0xC8	; 200
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	9d 83       	std	Y+5, r25	; 0x05
    5128:	8c 83       	std	Y+4, r24	; 0x04
    512a:	8c 81       	ldd	r24, Y+4	; 0x04
    512c:	9d 81       	ldd	r25, Y+5	; 0x05
    512e:	01 97       	sbiw	r24, 0x01	; 1
    5130:	f1 f7       	brne	.-4      	; 0x512e <LCD_set_cursor+0x158>
    5132:	9d 83       	std	Y+5, r25	; 0x05
    5134:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5136:	8e 81       	ldd	r24, Y+6	; 0x06
    5138:	9f 81       	ldd	r25, Y+7	; 0x07
    513a:	01 97       	sbiw	r24, 0x01	; 1
    513c:	9f 83       	std	Y+7, r25	; 0x07
    513e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5140:	8e 81       	ldd	r24, Y+6	; 0x06
    5142:	9f 81       	ldd	r25, Y+7	; 0x07
    5144:	00 97       	sbiw	r24, 0x00	; 0
    5146:	69 f7       	brne	.-38     	; 0x5122 <LCD_set_cursor+0x14c>
    5148:	24 c0       	rjmp	.+72     	; 0x5192 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    514a:	68 85       	ldd	r22, Y+8	; 0x08
    514c:	79 85       	ldd	r23, Y+9	; 0x09
    514e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5150:	9b 85       	ldd	r25, Y+11	; 0x0b
    5152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5156:	dc 01       	movw	r26, r24
    5158:	cb 01       	movw	r24, r22
    515a:	9f 83       	std	Y+7, r25	; 0x07
    515c:	8e 83       	std	Y+6, r24	; 0x06
    515e:	8e 81       	ldd	r24, Y+6	; 0x06
    5160:	9f 81       	ldd	r25, Y+7	; 0x07
    5162:	9b 83       	std	Y+3, r25	; 0x03
    5164:	8a 83       	std	Y+2, r24	; 0x02
    5166:	8a 81       	ldd	r24, Y+2	; 0x02
    5168:	9b 81       	ldd	r25, Y+3	; 0x03
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	f1 f7       	brne	.-4      	; 0x516a <LCD_set_cursor+0x194>
    516e:	9b 83       	std	Y+3, r25	; 0x03
    5170:	8a 83       	std	Y+2, r24	; 0x02
    5172:	0f c0       	rjmp	.+30     	; 0x5192 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5174:	69 89       	ldd	r22, Y+17	; 0x11
    5176:	7a 89       	ldd	r23, Y+18	; 0x12
    5178:	8b 89       	ldd	r24, Y+19	; 0x13
    517a:	9c 89       	ldd	r25, Y+20	; 0x14
    517c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	88 8b       	std	Y+16, r24	; 0x10
    5186:	88 89       	ldd	r24, Y+16	; 0x10
    5188:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    518a:	89 81       	ldd	r24, Y+1	; 0x01
    518c:	8a 95       	dec	r24
    518e:	f1 f7       	brne	.-4      	; 0x518c <LCD_set_cursor+0x1b6>
    5190:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    5192:	6b 96       	adiw	r28, 0x1b	; 27
    5194:	0f b6       	in	r0, 0x3f	; 63
    5196:	f8 94       	cli
    5198:	de bf       	out	0x3e, r29	; 62
    519a:	0f be       	out	0x3f, r0	; 63
    519c:	cd bf       	out	0x3d, r28	; 61
    519e:	cf 91       	pop	r28
    51a0:	df 91       	pop	r29
    51a2:	08 95       	ret

000051a4 <LCD_clear>:

void LCD_clear(void){
    51a4:	df 93       	push	r29
    51a6:	cf 93       	push	r28
    51a8:	cd b7       	in	r28, 0x3d	; 61
    51aa:	de b7       	in	r29, 0x3e	; 62
    51ac:	6c 97       	sbiw	r28, 0x1c	; 28
    51ae:	0f b6       	in	r0, 0x3f	; 63
    51b0:	f8 94       	cli
    51b2:	de bf       	out	0x3e, r29	; 62
    51b4:	0f be       	out	0x3f, r0	; 63
    51b6:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_write_cmd_4bit>
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	a0 e0       	ldi	r26, 0x00	; 0
    51c4:	b0 e4       	ldi	r27, 0x40	; 64
    51c6:	89 8f       	std	Y+25, r24	; 0x19
    51c8:	9a 8f       	std	Y+26, r25	; 0x1a
    51ca:	ab 8f       	std	Y+27, r26	; 0x1b
    51cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51ce:	69 8d       	ldd	r22, Y+25	; 0x19
    51d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	4a ef       	ldi	r20, 0xFA	; 250
    51dc:	54 e4       	ldi	r21, 0x44	; 68
    51de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51e2:	dc 01       	movw	r26, r24
    51e4:	cb 01       	movw	r24, r22
    51e6:	8d 8b       	std	Y+21, r24	; 0x15
    51e8:	9e 8b       	std	Y+22, r25	; 0x16
    51ea:	af 8b       	std	Y+23, r26	; 0x17
    51ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51ee:	6d 89       	ldd	r22, Y+21	; 0x15
    51f0:	7e 89       	ldd	r23, Y+22	; 0x16
    51f2:	8f 89       	ldd	r24, Y+23	; 0x17
    51f4:	98 8d       	ldd	r25, Y+24	; 0x18
    51f6:	20 e0       	ldi	r18, 0x00	; 0
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	40 e8       	ldi	r20, 0x80	; 128
    51fc:	5f e3       	ldi	r21, 0x3F	; 63
    51fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5202:	88 23       	and	r24, r24
    5204:	2c f4       	brge	.+10     	; 0x5210 <LCD_clear+0x6c>
		__ticks = 1;
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	9c 8b       	std	Y+20, r25	; 0x14
    520c:	8b 8b       	std	Y+19, r24	; 0x13
    520e:	3f c0       	rjmp	.+126    	; 0x528e <LCD_clear+0xea>
	else if (__tmp > 65535)
    5210:	6d 89       	ldd	r22, Y+21	; 0x15
    5212:	7e 89       	ldd	r23, Y+22	; 0x16
    5214:	8f 89       	ldd	r24, Y+23	; 0x17
    5216:	98 8d       	ldd	r25, Y+24	; 0x18
    5218:	20 e0       	ldi	r18, 0x00	; 0
    521a:	3f ef       	ldi	r19, 0xFF	; 255
    521c:	4f e7       	ldi	r20, 0x7F	; 127
    521e:	57 e4       	ldi	r21, 0x47	; 71
    5220:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5224:	18 16       	cp	r1, r24
    5226:	4c f5       	brge	.+82     	; 0x527a <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5228:	69 8d       	ldd	r22, Y+25	; 0x19
    522a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    522c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    522e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	40 e2       	ldi	r20, 0x20	; 32
    5236:	51 e4       	ldi	r21, 0x41	; 65
    5238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	bc 01       	movw	r22, r24
    5242:	cd 01       	movw	r24, r26
    5244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	9c 8b       	std	Y+20, r25	; 0x14
    524e:	8b 8b       	std	Y+19, r24	; 0x13
    5250:	0f c0       	rjmp	.+30     	; 0x5270 <LCD_clear+0xcc>
    5252:	88 ec       	ldi	r24, 0xC8	; 200
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	9a 8b       	std	Y+18, r25	; 0x12
    5258:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    525a:	89 89       	ldd	r24, Y+17	; 0x11
    525c:	9a 89       	ldd	r25, Y+18	; 0x12
    525e:	01 97       	sbiw	r24, 0x01	; 1
    5260:	f1 f7       	brne	.-4      	; 0x525e <LCD_clear+0xba>
    5262:	9a 8b       	std	Y+18, r25	; 0x12
    5264:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5266:	8b 89       	ldd	r24, Y+19	; 0x13
    5268:	9c 89       	ldd	r25, Y+20	; 0x14
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	9c 8b       	std	Y+20, r25	; 0x14
    526e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5270:	8b 89       	ldd	r24, Y+19	; 0x13
    5272:	9c 89       	ldd	r25, Y+20	; 0x14
    5274:	00 97       	sbiw	r24, 0x00	; 0
    5276:	69 f7       	brne	.-38     	; 0x5252 <LCD_clear+0xae>
    5278:	14 c0       	rjmp	.+40     	; 0x52a2 <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    527a:	6d 89       	ldd	r22, Y+21	; 0x15
    527c:	7e 89       	ldd	r23, Y+22	; 0x16
    527e:	8f 89       	ldd	r24, Y+23	; 0x17
    5280:	98 8d       	ldd	r25, Y+24	; 0x18
    5282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	9c 8b       	std	Y+20, r25	; 0x14
    528c:	8b 8b       	std	Y+19, r24	; 0x13
    528e:	8b 89       	ldd	r24, Y+19	; 0x13
    5290:	9c 89       	ldd	r25, Y+20	; 0x14
    5292:	98 8b       	std	Y+16, r25	; 0x10
    5294:	8f 87       	std	Y+15, r24	; 0x0f
    5296:	8f 85       	ldd	r24, Y+15	; 0x0f
    5298:	98 89       	ldd	r25, Y+16	; 0x10
    529a:	01 97       	sbiw	r24, 0x01	; 1
    529c:	f1 f7       	brne	.-4      	; 0x529a <LCD_clear+0xf6>
    529e:	98 8b       	std	Y+16, r25	; 0x10
    52a0:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    52a2:	82 e0       	ldi	r24, 0x02	; 2
    52a4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_write_cmd_4bit>
    52a8:	80 e0       	ldi	r24, 0x00	; 0
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	a0 e0       	ldi	r26, 0x00	; 0
    52ae:	b0 e4       	ldi	r27, 0x40	; 64
    52b0:	8b 87       	std	Y+11, r24	; 0x0b
    52b2:	9c 87       	std	Y+12, r25	; 0x0c
    52b4:	ad 87       	std	Y+13, r26	; 0x0d
    52b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    52ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    52bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    52be:	9e 85       	ldd	r25, Y+14	; 0x0e
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	4a ef       	ldi	r20, 0xFA	; 250
    52c6:	54 e4       	ldi	r21, 0x44	; 68
    52c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52cc:	dc 01       	movw	r26, r24
    52ce:	cb 01       	movw	r24, r22
    52d0:	8f 83       	std	Y+7, r24	; 0x07
    52d2:	98 87       	std	Y+8, r25	; 0x08
    52d4:	a9 87       	std	Y+9, r26	; 0x09
    52d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52d8:	6f 81       	ldd	r22, Y+7	; 0x07
    52da:	78 85       	ldd	r23, Y+8	; 0x08
    52dc:	89 85       	ldd	r24, Y+9	; 0x09
    52de:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	40 e8       	ldi	r20, 0x80	; 128
    52e6:	5f e3       	ldi	r21, 0x3F	; 63
    52e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    52ec:	88 23       	and	r24, r24
    52ee:	2c f4       	brge	.+10     	; 0x52fa <LCD_clear+0x156>
		__ticks = 1;
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	9e 83       	std	Y+6, r25	; 0x06
    52f6:	8d 83       	std	Y+5, r24	; 0x05
    52f8:	3f c0       	rjmp	.+126    	; 0x5378 <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    52fa:	6f 81       	ldd	r22, Y+7	; 0x07
    52fc:	78 85       	ldd	r23, Y+8	; 0x08
    52fe:	89 85       	ldd	r24, Y+9	; 0x09
    5300:	9a 85       	ldd	r25, Y+10	; 0x0a
    5302:	20 e0       	ldi	r18, 0x00	; 0
    5304:	3f ef       	ldi	r19, 0xFF	; 255
    5306:	4f e7       	ldi	r20, 0x7F	; 127
    5308:	57 e4       	ldi	r21, 0x47	; 71
    530a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    530e:	18 16       	cp	r1, r24
    5310:	4c f5       	brge	.+82     	; 0x5364 <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5312:	6b 85       	ldd	r22, Y+11	; 0x0b
    5314:	7c 85       	ldd	r23, Y+12	; 0x0c
    5316:	8d 85       	ldd	r24, Y+13	; 0x0d
    5318:	9e 85       	ldd	r25, Y+14	; 0x0e
    531a:	20 e0       	ldi	r18, 0x00	; 0
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	40 e2       	ldi	r20, 0x20	; 32
    5320:	51 e4       	ldi	r21, 0x41	; 65
    5322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5326:	dc 01       	movw	r26, r24
    5328:	cb 01       	movw	r24, r22
    532a:	bc 01       	movw	r22, r24
    532c:	cd 01       	movw	r24, r26
    532e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5332:	dc 01       	movw	r26, r24
    5334:	cb 01       	movw	r24, r22
    5336:	9e 83       	std	Y+6, r25	; 0x06
    5338:	8d 83       	std	Y+5, r24	; 0x05
    533a:	0f c0       	rjmp	.+30     	; 0x535a <LCD_clear+0x1b6>
    533c:	88 ec       	ldi	r24, 0xC8	; 200
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	9c 83       	std	Y+4, r25	; 0x04
    5342:	8b 83       	std	Y+3, r24	; 0x03
    5344:	8b 81       	ldd	r24, Y+3	; 0x03
    5346:	9c 81       	ldd	r25, Y+4	; 0x04
    5348:	01 97       	sbiw	r24, 0x01	; 1
    534a:	f1 f7       	brne	.-4      	; 0x5348 <LCD_clear+0x1a4>
    534c:	9c 83       	std	Y+4, r25	; 0x04
    534e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5350:	8d 81       	ldd	r24, Y+5	; 0x05
    5352:	9e 81       	ldd	r25, Y+6	; 0x06
    5354:	01 97       	sbiw	r24, 0x01	; 1
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    535a:	8d 81       	ldd	r24, Y+5	; 0x05
    535c:	9e 81       	ldd	r25, Y+6	; 0x06
    535e:	00 97       	sbiw	r24, 0x00	; 0
    5360:	69 f7       	brne	.-38     	; 0x533c <LCD_clear+0x198>
    5362:	14 c0       	rjmp	.+40     	; 0x538c <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5364:	6f 81       	ldd	r22, Y+7	; 0x07
    5366:	78 85       	ldd	r23, Y+8	; 0x08
    5368:	89 85       	ldd	r24, Y+9	; 0x09
    536a:	9a 85       	ldd	r25, Y+10	; 0x0a
    536c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5370:	dc 01       	movw	r26, r24
    5372:	cb 01       	movw	r24, r22
    5374:	9e 83       	std	Y+6, r25	; 0x06
    5376:	8d 83       	std	Y+5, r24	; 0x05
    5378:	8d 81       	ldd	r24, Y+5	; 0x05
    537a:	9e 81       	ldd	r25, Y+6	; 0x06
    537c:	9a 83       	std	Y+2, r25	; 0x02
    537e:	89 83       	std	Y+1, r24	; 0x01
    5380:	89 81       	ldd	r24, Y+1	; 0x01
    5382:	9a 81       	ldd	r25, Y+2	; 0x02
    5384:	01 97       	sbiw	r24, 0x01	; 1
    5386:	f1 f7       	brne	.-4      	; 0x5384 <LCD_clear+0x1e0>
    5388:	9a 83       	std	Y+2, r25	; 0x02
    538a:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    538c:	6c 96       	adiw	r28, 0x1c	; 28
    538e:	0f b6       	in	r0, 0x3f	; 63
    5390:	f8 94       	cli
    5392:	de bf       	out	0x3e, r29	; 62
    5394:	0f be       	out	0x3f, r0	; 63
    5396:	cd bf       	out	0x3d, r28	; 61
    5398:	cf 91       	pop	r28
    539a:	df 91       	pop	r29
    539c:	08 95       	ret

0000539e <LCD_off>:

void LCD_off(void ){
    539e:	df 93       	push	r29
    53a0:	cf 93       	push	r28
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    53a6:	2e 97       	sbiw	r28, 0x0e	; 14
    53a8:	0f b6       	in	r0, 0x3f	; 63
    53aa:	f8 94       	cli
    53ac:	de bf       	out	0x3e, r29	; 62
    53ae:	0f be       	out	0x3f, r0	; 63
    53b0:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    53b2:	88 e0       	ldi	r24, 0x08	; 8
    53b4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_write_cmd_4bit>
    53b8:	80 e0       	ldi	r24, 0x00	; 0
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	a8 e4       	ldi	r26, 0x48	; 72
    53be:	b2 e4       	ldi	r27, 0x42	; 66
    53c0:	8b 87       	std	Y+11, r24	; 0x0b
    53c2:	9c 87       	std	Y+12, r25	; 0x0c
    53c4:	ad 87       	std	Y+13, r26	; 0x0d
    53c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    53cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    53ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	30 e0       	ldi	r19, 0x00	; 0
    53d4:	4a ef       	ldi	r20, 0xFA	; 250
    53d6:	54 e4       	ldi	r21, 0x44	; 68
    53d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53dc:	dc 01       	movw	r26, r24
    53de:	cb 01       	movw	r24, r22
    53e0:	8f 83       	std	Y+7, r24	; 0x07
    53e2:	98 87       	std	Y+8, r25	; 0x08
    53e4:	a9 87       	std	Y+9, r26	; 0x09
    53e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53e8:	6f 81       	ldd	r22, Y+7	; 0x07
    53ea:	78 85       	ldd	r23, Y+8	; 0x08
    53ec:	89 85       	ldd	r24, Y+9	; 0x09
    53ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f0:	20 e0       	ldi	r18, 0x00	; 0
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	40 e8       	ldi	r20, 0x80	; 128
    53f6:	5f e3       	ldi	r21, 0x3F	; 63
    53f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    53fc:	88 23       	and	r24, r24
    53fe:	2c f4       	brge	.+10     	; 0x540a <LCD_off+0x6c>
		__ticks = 1;
    5400:	81 e0       	ldi	r24, 0x01	; 1
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	9e 83       	std	Y+6, r25	; 0x06
    5406:	8d 83       	std	Y+5, r24	; 0x05
    5408:	3f c0       	rjmp	.+126    	; 0x5488 <LCD_off+0xea>
	else if (__tmp > 65535)
    540a:	6f 81       	ldd	r22, Y+7	; 0x07
    540c:	78 85       	ldd	r23, Y+8	; 0x08
    540e:	89 85       	ldd	r24, Y+9	; 0x09
    5410:	9a 85       	ldd	r25, Y+10	; 0x0a
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	3f ef       	ldi	r19, 0xFF	; 255
    5416:	4f e7       	ldi	r20, 0x7F	; 127
    5418:	57 e4       	ldi	r21, 0x47	; 71
    541a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    541e:	18 16       	cp	r1, r24
    5420:	4c f5       	brge	.+82     	; 0x5474 <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5422:	6b 85       	ldd	r22, Y+11	; 0x0b
    5424:	7c 85       	ldd	r23, Y+12	; 0x0c
    5426:	8d 85       	ldd	r24, Y+13	; 0x0d
    5428:	9e 85       	ldd	r25, Y+14	; 0x0e
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	40 e2       	ldi	r20, 0x20	; 32
    5430:	51 e4       	ldi	r21, 0x41	; 65
    5432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	bc 01       	movw	r22, r24
    543c:	cd 01       	movw	r24, r26
    543e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	9e 83       	std	Y+6, r25	; 0x06
    5448:	8d 83       	std	Y+5, r24	; 0x05
    544a:	0f c0       	rjmp	.+30     	; 0x546a <LCD_off+0xcc>
    544c:	88 ec       	ldi	r24, 0xC8	; 200
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	9c 83       	std	Y+4, r25	; 0x04
    5452:	8b 83       	std	Y+3, r24	; 0x03
    5454:	8b 81       	ldd	r24, Y+3	; 0x03
    5456:	9c 81       	ldd	r25, Y+4	; 0x04
    5458:	01 97       	sbiw	r24, 0x01	; 1
    545a:	f1 f7       	brne	.-4      	; 0x5458 <LCD_off+0xba>
    545c:	9c 83       	std	Y+4, r25	; 0x04
    545e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5460:	8d 81       	ldd	r24, Y+5	; 0x05
    5462:	9e 81       	ldd	r25, Y+6	; 0x06
    5464:	01 97       	sbiw	r24, 0x01	; 1
    5466:	9e 83       	std	Y+6, r25	; 0x06
    5468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    546a:	8d 81       	ldd	r24, Y+5	; 0x05
    546c:	9e 81       	ldd	r25, Y+6	; 0x06
    546e:	00 97       	sbiw	r24, 0x00	; 0
    5470:	69 f7       	brne	.-38     	; 0x544c <LCD_off+0xae>
    5472:	14 c0       	rjmp	.+40     	; 0x549c <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5474:	6f 81       	ldd	r22, Y+7	; 0x07
    5476:	78 85       	ldd	r23, Y+8	; 0x08
    5478:	89 85       	ldd	r24, Y+9	; 0x09
    547a:	9a 85       	ldd	r25, Y+10	; 0x0a
    547c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	9e 83       	std	Y+6, r25	; 0x06
    5486:	8d 83       	std	Y+5, r24	; 0x05
    5488:	8d 81       	ldd	r24, Y+5	; 0x05
    548a:	9e 81       	ldd	r25, Y+6	; 0x06
    548c:	9a 83       	std	Y+2, r25	; 0x02
    548e:	89 83       	std	Y+1, r24	; 0x01
    5490:	89 81       	ldd	r24, Y+1	; 0x01
    5492:	9a 81       	ldd	r25, Y+2	; 0x02
    5494:	01 97       	sbiw	r24, 0x01	; 1
    5496:	f1 f7       	brne	.-4      	; 0x5494 <LCD_off+0xf6>
    5498:	9a 83       	std	Y+2, r25	; 0x02
    549a:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    549c:	2e 96       	adiw	r28, 0x0e	; 14
    549e:	0f b6       	in	r0, 0x3f	; 63
    54a0:	f8 94       	cli
    54a2:	de bf       	out	0x3e, r29	; 62
    54a4:	0f be       	out	0x3f, r0	; 63
    54a6:	cd bf       	out	0x3d, r28	; 61
    54a8:	cf 91       	pop	r28
    54aa:	df 91       	pop	r29
    54ac:	08 95       	ret

000054ae <LCD_on>:

void LCD_on(void ){
    54ae:	df 93       	push	r29
    54b0:	cf 93       	push	r28
    54b2:	cd b7       	in	r28, 0x3d	; 61
    54b4:	de b7       	in	r29, 0x3e	; 62
    54b6:	68 97       	sbiw	r28, 0x18	; 24
    54b8:	0f b6       	in	r0, 0x3f	; 63
    54ba:	f8 94       	cli
    54bc:	de bf       	out	0x3e, r29	; 62
    54be:	0f be       	out	0x3f, r0	; 63
    54c0:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    54c2:	8c e0       	ldi	r24, 0x0C	; 12
    54c4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <LCD_write_cmd_4bit>
    54c8:	80 e0       	ldi	r24, 0x00	; 0
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	a8 e4       	ldi	r26, 0x48	; 72
    54ce:	b2 e4       	ldi	r27, 0x42	; 66
    54d0:	8d 8b       	std	Y+21, r24	; 0x15
    54d2:	9e 8b       	std	Y+22, r25	; 0x16
    54d4:	af 8b       	std	Y+23, r26	; 0x17
    54d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    54d8:	6d 89       	ldd	r22, Y+21	; 0x15
    54da:	7e 89       	ldd	r23, Y+22	; 0x16
    54dc:	8f 89       	ldd	r24, Y+23	; 0x17
    54de:	98 8d       	ldd	r25, Y+24	; 0x18
    54e0:	2b ea       	ldi	r18, 0xAB	; 171
    54e2:	3a ea       	ldi	r19, 0xAA	; 170
    54e4:	4a e2       	ldi	r20, 0x2A	; 42
    54e6:	50 e4       	ldi	r21, 0x40	; 64
    54e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ec:	dc 01       	movw	r26, r24
    54ee:	cb 01       	movw	r24, r22
    54f0:	89 8b       	std	Y+17, r24	; 0x11
    54f2:	9a 8b       	std	Y+18, r25	; 0x12
    54f4:	ab 8b       	std	Y+19, r26	; 0x13
    54f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    54f8:	69 89       	ldd	r22, Y+17	; 0x11
    54fa:	7a 89       	ldd	r23, Y+18	; 0x12
    54fc:	8b 89       	ldd	r24, Y+19	; 0x13
    54fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	40 e8       	ldi	r20, 0x80	; 128
    5506:	5f e3       	ldi	r21, 0x3F	; 63
    5508:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    550c:	88 23       	and	r24, r24
    550e:	1c f4       	brge	.+6      	; 0x5516 <LCD_on+0x68>
		__ticks = 1;
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	88 8b       	std	Y+16, r24	; 0x10
    5514:	91 c0       	rjmp	.+290    	; 0x5638 <LCD_on+0x18a>
	else if (__tmp > 255)
    5516:	69 89       	ldd	r22, Y+17	; 0x11
    5518:	7a 89       	ldd	r23, Y+18	; 0x12
    551a:	8b 89       	ldd	r24, Y+19	; 0x13
    551c:	9c 89       	ldd	r25, Y+20	; 0x14
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	4f e7       	ldi	r20, 0x7F	; 127
    5524:	53 e4       	ldi	r21, 0x43	; 67
    5526:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    552a:	18 16       	cp	r1, r24
    552c:	0c f0       	brlt	.+2      	; 0x5530 <LCD_on+0x82>
    552e:	7b c0       	rjmp	.+246    	; 0x5626 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    5530:	6d 89       	ldd	r22, Y+21	; 0x15
    5532:	7e 89       	ldd	r23, Y+22	; 0x16
    5534:	8f 89       	ldd	r24, Y+23	; 0x17
    5536:	98 8d       	ldd	r25, Y+24	; 0x18
    5538:	20 e0       	ldi	r18, 0x00	; 0
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	4a e7       	ldi	r20, 0x7A	; 122
    553e:	54 e4       	ldi	r21, 0x44	; 68
    5540:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	8c 87       	std	Y+12, r24	; 0x0c
    554a:	9d 87       	std	Y+13, r25	; 0x0d
    554c:	ae 87       	std	Y+14, r26	; 0x0e
    554e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5550:	6c 85       	ldd	r22, Y+12	; 0x0c
    5552:	7d 85       	ldd	r23, Y+13	; 0x0d
    5554:	8e 85       	ldd	r24, Y+14	; 0x0e
    5556:	9f 85       	ldd	r25, Y+15	; 0x0f
    5558:	20 e0       	ldi	r18, 0x00	; 0
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	4a ef       	ldi	r20, 0xFA	; 250
    555e:	54 e4       	ldi	r21, 0x44	; 68
    5560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5564:	dc 01       	movw	r26, r24
    5566:	cb 01       	movw	r24, r22
    5568:	88 87       	std	Y+8, r24	; 0x08
    556a:	99 87       	std	Y+9, r25	; 0x09
    556c:	aa 87       	std	Y+10, r26	; 0x0a
    556e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5570:	68 85       	ldd	r22, Y+8	; 0x08
    5572:	79 85       	ldd	r23, Y+9	; 0x09
    5574:	8a 85       	ldd	r24, Y+10	; 0x0a
    5576:	9b 85       	ldd	r25, Y+11	; 0x0b
    5578:	20 e0       	ldi	r18, 0x00	; 0
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	40 e8       	ldi	r20, 0x80	; 128
    557e:	5f e3       	ldi	r21, 0x3F	; 63
    5580:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5584:	88 23       	and	r24, r24
    5586:	2c f4       	brge	.+10     	; 0x5592 <LCD_on+0xe4>
		__ticks = 1;
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	9f 83       	std	Y+7, r25	; 0x07
    558e:	8e 83       	std	Y+6, r24	; 0x06
    5590:	3f c0       	rjmp	.+126    	; 0x5610 <LCD_on+0x162>
	else if (__tmp > 65535)
    5592:	68 85       	ldd	r22, Y+8	; 0x08
    5594:	79 85       	ldd	r23, Y+9	; 0x09
    5596:	8a 85       	ldd	r24, Y+10	; 0x0a
    5598:	9b 85       	ldd	r25, Y+11	; 0x0b
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	3f ef       	ldi	r19, 0xFF	; 255
    559e:	4f e7       	ldi	r20, 0x7F	; 127
    55a0:	57 e4       	ldi	r21, 0x47	; 71
    55a2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    55a6:	18 16       	cp	r1, r24
    55a8:	4c f5       	brge	.+82     	; 0x55fc <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    55ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    55ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    55b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	40 e2       	ldi	r20, 0x20	; 32
    55b8:	51 e4       	ldi	r21, 0x41	; 65
    55ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55be:	dc 01       	movw	r26, r24
    55c0:	cb 01       	movw	r24, r22
    55c2:	bc 01       	movw	r22, r24
    55c4:	cd 01       	movw	r24, r26
    55c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ca:	dc 01       	movw	r26, r24
    55cc:	cb 01       	movw	r24, r22
    55ce:	9f 83       	std	Y+7, r25	; 0x07
    55d0:	8e 83       	std	Y+6, r24	; 0x06
    55d2:	0f c0       	rjmp	.+30     	; 0x55f2 <LCD_on+0x144>
    55d4:	88 ec       	ldi	r24, 0xC8	; 200
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	9d 83       	std	Y+5, r25	; 0x05
    55da:	8c 83       	std	Y+4, r24	; 0x04
    55dc:	8c 81       	ldd	r24, Y+4	; 0x04
    55de:	9d 81       	ldd	r25, Y+5	; 0x05
    55e0:	01 97       	sbiw	r24, 0x01	; 1
    55e2:	f1 f7       	brne	.-4      	; 0x55e0 <LCD_on+0x132>
    55e4:	9d 83       	std	Y+5, r25	; 0x05
    55e6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55e8:	8e 81       	ldd	r24, Y+6	; 0x06
    55ea:	9f 81       	ldd	r25, Y+7	; 0x07
    55ec:	01 97       	sbiw	r24, 0x01	; 1
    55ee:	9f 83       	std	Y+7, r25	; 0x07
    55f0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f2:	8e 81       	ldd	r24, Y+6	; 0x06
    55f4:	9f 81       	ldd	r25, Y+7	; 0x07
    55f6:	00 97       	sbiw	r24, 0x00	; 0
    55f8:	69 f7       	brne	.-38     	; 0x55d4 <LCD_on+0x126>
    55fa:	24 c0       	rjmp	.+72     	; 0x5644 <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55fc:	68 85       	ldd	r22, Y+8	; 0x08
    55fe:	79 85       	ldd	r23, Y+9	; 0x09
    5600:	8a 85       	ldd	r24, Y+10	; 0x0a
    5602:	9b 85       	ldd	r25, Y+11	; 0x0b
    5604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5608:	dc 01       	movw	r26, r24
    560a:	cb 01       	movw	r24, r22
    560c:	9f 83       	std	Y+7, r25	; 0x07
    560e:	8e 83       	std	Y+6, r24	; 0x06
    5610:	8e 81       	ldd	r24, Y+6	; 0x06
    5612:	9f 81       	ldd	r25, Y+7	; 0x07
    5614:	9b 83       	std	Y+3, r25	; 0x03
    5616:	8a 83       	std	Y+2, r24	; 0x02
    5618:	8a 81       	ldd	r24, Y+2	; 0x02
    561a:	9b 81       	ldd	r25, Y+3	; 0x03
    561c:	01 97       	sbiw	r24, 0x01	; 1
    561e:	f1 f7       	brne	.-4      	; 0x561c <LCD_on+0x16e>
    5620:	9b 83       	std	Y+3, r25	; 0x03
    5622:	8a 83       	std	Y+2, r24	; 0x02
    5624:	0f c0       	rjmp	.+30     	; 0x5644 <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5626:	69 89       	ldd	r22, Y+17	; 0x11
    5628:	7a 89       	ldd	r23, Y+18	; 0x12
    562a:	8b 89       	ldd	r24, Y+19	; 0x13
    562c:	9c 89       	ldd	r25, Y+20	; 0x14
    562e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5632:	dc 01       	movw	r26, r24
    5634:	cb 01       	movw	r24, r22
    5636:	88 8b       	std	Y+16, r24	; 0x10
    5638:	88 89       	ldd	r24, Y+16	; 0x10
    563a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	8a 95       	dec	r24
    5640:	f1 f7       	brne	.-4      	; 0x563e <LCD_on+0x190>
    5642:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    5644:	68 96       	adiw	r28, 0x18	; 24
    5646:	0f b6       	in	r0, 0x3f	; 63
    5648:	f8 94       	cli
    564a:	de bf       	out	0x3e, r29	; 62
    564c:	0f be       	out	0x3f, r0	; 63
    564e:	cd bf       	out	0x3d, r28	; 61
    5650:	cf 91       	pop	r28
    5652:	df 91       	pop	r29
    5654:	08 95       	ret

00005656 <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    5656:	df 93       	push	r29
    5658:	cf 93       	push	r28
    565a:	00 d0       	rcall	.+0      	; 0x565c <LCD_create_char+0x6>
    565c:	0f 92       	push	r0
    565e:	cd b7       	in	r28, 0x3d	; 61
    5660:	de b7       	in	r29, 0x3e	; 62
    5662:	9a 83       	std	Y+2, r25	; 0x02
    5664:	89 83       	std	Y+1, r24	; 0x01
    5666:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    5668:	0f 90       	pop	r0
    566a:	0f 90       	pop	r0
    566c:	0f 90       	pop	r0
    566e:	cf 91       	pop	r28
    5670:	df 91       	pop	r29
    5672:	08 95       	ret

00005674 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    5674:	df 93       	push	r29
    5676:	cf 93       	push	r28
    5678:	cd b7       	in	r28, 0x3d	; 61
    567a:	de b7       	in	r29, 0x3e	; 62
    567c:	69 97       	sbiw	r28, 0x19	; 25
    567e:	0f b6       	in	r0, 0x3f	; 63
    5680:	f8 94       	cli
    5682:	de bf       	out	0x3e, r29	; 62
    5684:	0f be       	out	0x3f, r0	; 63
    5686:	cd bf       	out	0x3d, r28	; 61
    5688:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    568a:	89 8d       	ldd	r24, Y+25	; 0x19
    568c:	0e 94 13 11 	call	0x2226	; 0x2226 <LCD_write_data_4bit>
    5690:	80 e0       	ldi	r24, 0x00	; 0
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	a8 e4       	ldi	r26, 0x48	; 72
    5696:	b2 e4       	ldi	r27, 0x42	; 66
    5698:	8d 8b       	std	Y+21, r24	; 0x15
    569a:	9e 8b       	std	Y+22, r25	; 0x16
    569c:	af 8b       	std	Y+23, r26	; 0x17
    569e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    56a0:	6d 89       	ldd	r22, Y+21	; 0x15
    56a2:	7e 89       	ldd	r23, Y+22	; 0x16
    56a4:	8f 89       	ldd	r24, Y+23	; 0x17
    56a6:	98 8d       	ldd	r25, Y+24	; 0x18
    56a8:	2b ea       	ldi	r18, 0xAB	; 171
    56aa:	3a ea       	ldi	r19, 0xAA	; 170
    56ac:	4a e2       	ldi	r20, 0x2A	; 42
    56ae:	50 e4       	ldi	r21, 0x40	; 64
    56b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56b4:	dc 01       	movw	r26, r24
    56b6:	cb 01       	movw	r24, r22
    56b8:	89 8b       	std	Y+17, r24	; 0x11
    56ba:	9a 8b       	std	Y+18, r25	; 0x12
    56bc:	ab 8b       	std	Y+19, r26	; 0x13
    56be:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    56c0:	69 89       	ldd	r22, Y+17	; 0x11
    56c2:	7a 89       	ldd	r23, Y+18	; 0x12
    56c4:	8b 89       	ldd	r24, Y+19	; 0x13
    56c6:	9c 89       	ldd	r25, Y+20	; 0x14
    56c8:	20 e0       	ldi	r18, 0x00	; 0
    56ca:	30 e0       	ldi	r19, 0x00	; 0
    56cc:	40 e8       	ldi	r20, 0x80	; 128
    56ce:	5f e3       	ldi	r21, 0x3F	; 63
    56d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    56d4:	88 23       	and	r24, r24
    56d6:	1c f4       	brge	.+6      	; 0x56de <LCD_write_char+0x6a>
		__ticks = 1;
    56d8:	81 e0       	ldi	r24, 0x01	; 1
    56da:	88 8b       	std	Y+16, r24	; 0x10
    56dc:	91 c0       	rjmp	.+290    	; 0x5800 <LCD_write_char+0x18c>
	else if (__tmp > 255)
    56de:	69 89       	ldd	r22, Y+17	; 0x11
    56e0:	7a 89       	ldd	r23, Y+18	; 0x12
    56e2:	8b 89       	ldd	r24, Y+19	; 0x13
    56e4:	9c 89       	ldd	r25, Y+20	; 0x14
    56e6:	20 e0       	ldi	r18, 0x00	; 0
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	4f e7       	ldi	r20, 0x7F	; 127
    56ec:	53 e4       	ldi	r21, 0x43	; 67
    56ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    56f2:	18 16       	cp	r1, r24
    56f4:	0c f0       	brlt	.+2      	; 0x56f8 <LCD_write_char+0x84>
    56f6:	7b c0       	rjmp	.+246    	; 0x57ee <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    56f8:	6d 89       	ldd	r22, Y+21	; 0x15
    56fa:	7e 89       	ldd	r23, Y+22	; 0x16
    56fc:	8f 89       	ldd	r24, Y+23	; 0x17
    56fe:	98 8d       	ldd	r25, Y+24	; 0x18
    5700:	20 e0       	ldi	r18, 0x00	; 0
    5702:	30 e0       	ldi	r19, 0x00	; 0
    5704:	4a e7       	ldi	r20, 0x7A	; 122
    5706:	54 e4       	ldi	r21, 0x44	; 68
    5708:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    570c:	dc 01       	movw	r26, r24
    570e:	cb 01       	movw	r24, r22
    5710:	8c 87       	std	Y+12, r24	; 0x0c
    5712:	9d 87       	std	Y+13, r25	; 0x0d
    5714:	ae 87       	std	Y+14, r26	; 0x0e
    5716:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5718:	6c 85       	ldd	r22, Y+12	; 0x0c
    571a:	7d 85       	ldd	r23, Y+13	; 0x0d
    571c:	8e 85       	ldd	r24, Y+14	; 0x0e
    571e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5720:	20 e0       	ldi	r18, 0x00	; 0
    5722:	30 e0       	ldi	r19, 0x00	; 0
    5724:	4a ef       	ldi	r20, 0xFA	; 250
    5726:	54 e4       	ldi	r21, 0x44	; 68
    5728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572c:	dc 01       	movw	r26, r24
    572e:	cb 01       	movw	r24, r22
    5730:	88 87       	std	Y+8, r24	; 0x08
    5732:	99 87       	std	Y+9, r25	; 0x09
    5734:	aa 87       	std	Y+10, r26	; 0x0a
    5736:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5738:	68 85       	ldd	r22, Y+8	; 0x08
    573a:	79 85       	ldd	r23, Y+9	; 0x09
    573c:	8a 85       	ldd	r24, Y+10	; 0x0a
    573e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5740:	20 e0       	ldi	r18, 0x00	; 0
    5742:	30 e0       	ldi	r19, 0x00	; 0
    5744:	40 e8       	ldi	r20, 0x80	; 128
    5746:	5f e3       	ldi	r21, 0x3F	; 63
    5748:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    574c:	88 23       	and	r24, r24
    574e:	2c f4       	brge	.+10     	; 0x575a <LCD_write_char+0xe6>
		__ticks = 1;
    5750:	81 e0       	ldi	r24, 0x01	; 1
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	9f 83       	std	Y+7, r25	; 0x07
    5756:	8e 83       	std	Y+6, r24	; 0x06
    5758:	3f c0       	rjmp	.+126    	; 0x57d8 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    575a:	68 85       	ldd	r22, Y+8	; 0x08
    575c:	79 85       	ldd	r23, Y+9	; 0x09
    575e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5760:	9b 85       	ldd	r25, Y+11	; 0x0b
    5762:	20 e0       	ldi	r18, 0x00	; 0
    5764:	3f ef       	ldi	r19, 0xFF	; 255
    5766:	4f e7       	ldi	r20, 0x7F	; 127
    5768:	57 e4       	ldi	r21, 0x47	; 71
    576a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    576e:	18 16       	cp	r1, r24
    5770:	4c f5       	brge	.+82     	; 0x57c4 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5772:	6c 85       	ldd	r22, Y+12	; 0x0c
    5774:	7d 85       	ldd	r23, Y+13	; 0x0d
    5776:	8e 85       	ldd	r24, Y+14	; 0x0e
    5778:	9f 85       	ldd	r25, Y+15	; 0x0f
    577a:	20 e0       	ldi	r18, 0x00	; 0
    577c:	30 e0       	ldi	r19, 0x00	; 0
    577e:	40 e2       	ldi	r20, 0x20	; 32
    5780:	51 e4       	ldi	r21, 0x41	; 65
    5782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5786:	dc 01       	movw	r26, r24
    5788:	cb 01       	movw	r24, r22
    578a:	bc 01       	movw	r22, r24
    578c:	cd 01       	movw	r24, r26
    578e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	9f 83       	std	Y+7, r25	; 0x07
    5798:	8e 83       	std	Y+6, r24	; 0x06
    579a:	0f c0       	rjmp	.+30     	; 0x57ba <LCD_write_char+0x146>
    579c:	88 ec       	ldi	r24, 0xC8	; 200
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	9d 83       	std	Y+5, r25	; 0x05
    57a2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    57a4:	8c 81       	ldd	r24, Y+4	; 0x04
    57a6:	9d 81       	ldd	r25, Y+5	; 0x05
    57a8:	01 97       	sbiw	r24, 0x01	; 1
    57aa:	f1 f7       	brne	.-4      	; 0x57a8 <LCD_write_char+0x134>
    57ac:	9d 83       	std	Y+5, r25	; 0x05
    57ae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57b0:	8e 81       	ldd	r24, Y+6	; 0x06
    57b2:	9f 81       	ldd	r25, Y+7	; 0x07
    57b4:	01 97       	sbiw	r24, 0x01	; 1
    57b6:	9f 83       	std	Y+7, r25	; 0x07
    57b8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ba:	8e 81       	ldd	r24, Y+6	; 0x06
    57bc:	9f 81       	ldd	r25, Y+7	; 0x07
    57be:	00 97       	sbiw	r24, 0x00	; 0
    57c0:	69 f7       	brne	.-38     	; 0x579c <LCD_write_char+0x128>
    57c2:	24 c0       	rjmp	.+72     	; 0x580c <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57c4:	68 85       	ldd	r22, Y+8	; 0x08
    57c6:	79 85       	ldd	r23, Y+9	; 0x09
    57c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    57ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    57cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d0:	dc 01       	movw	r26, r24
    57d2:	cb 01       	movw	r24, r22
    57d4:	9f 83       	std	Y+7, r25	; 0x07
    57d6:	8e 83       	std	Y+6, r24	; 0x06
    57d8:	8e 81       	ldd	r24, Y+6	; 0x06
    57da:	9f 81       	ldd	r25, Y+7	; 0x07
    57dc:	9b 83       	std	Y+3, r25	; 0x03
    57de:	8a 83       	std	Y+2, r24	; 0x02
    57e0:	8a 81       	ldd	r24, Y+2	; 0x02
    57e2:	9b 81       	ldd	r25, Y+3	; 0x03
    57e4:	01 97       	sbiw	r24, 0x01	; 1
    57e6:	f1 f7       	brne	.-4      	; 0x57e4 <LCD_write_char+0x170>
    57e8:	9b 83       	std	Y+3, r25	; 0x03
    57ea:	8a 83       	std	Y+2, r24	; 0x02
    57ec:	0f c0       	rjmp	.+30     	; 0x580c <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    57ee:	69 89       	ldd	r22, Y+17	; 0x11
    57f0:	7a 89       	ldd	r23, Y+18	; 0x12
    57f2:	8b 89       	ldd	r24, Y+19	; 0x13
    57f4:	9c 89       	ldd	r25, Y+20	; 0x14
    57f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	88 8b       	std	Y+16, r24	; 0x10
    5800:	88 89       	ldd	r24, Y+16	; 0x10
    5802:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5804:	89 81       	ldd	r24, Y+1	; 0x01
    5806:	8a 95       	dec	r24
    5808:	f1 f7       	brne	.-4      	; 0x5806 <LCD_write_char+0x192>
    580a:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    580c:	69 96       	adiw	r28, 0x19	; 25
    580e:	0f b6       	in	r0, 0x3f	; 63
    5810:	f8 94       	cli
    5812:	de bf       	out	0x3e, r29	; 62
    5814:	0f be       	out	0x3f, r0	; 63
    5816:	cd bf       	out	0x3d, r28	; 61
    5818:	cf 91       	pop	r28
    581a:	df 91       	pop	r29
    581c:	08 95       	ret

0000581e <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    581e:	df 93       	push	r29
    5820:	cf 93       	push	r28
    5822:	00 d0       	rcall	.+0      	; 0x5824 <LCD_write_str+0x6>
    5824:	0f 92       	push	r0
    5826:	cd b7       	in	r28, 0x3d	; 61
    5828:	de b7       	in	r29, 0x3e	; 62
    582a:	9b 83       	std	Y+3, r25	; 0x03
    582c:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    582e:	19 82       	std	Y+1, r1	; 0x01
    5830:	0e c0       	rjmp	.+28     	; 0x584e <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	28 2f       	mov	r18, r24
    5836:	30 e0       	ldi	r19, 0x00	; 0
    5838:	8a 81       	ldd	r24, Y+2	; 0x02
    583a:	9b 81       	ldd	r25, Y+3	; 0x03
    583c:	fc 01       	movw	r30, r24
    583e:	e2 0f       	add	r30, r18
    5840:	f3 1f       	adc	r31, r19
    5842:	80 81       	ld	r24, Z
    5844:	0e 94 3a 2b 	call	0x5674	; 0x5674 <LCD_write_char>
		// Increment the string index
		i++;
    5848:	89 81       	ldd	r24, Y+1	; 0x01
    584a:	8f 5f       	subi	r24, 0xFF	; 255
    584c:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    584e:	89 81       	ldd	r24, Y+1	; 0x01
    5850:	28 2f       	mov	r18, r24
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	8a 81       	ldd	r24, Y+2	; 0x02
    5856:	9b 81       	ldd	r25, Y+3	; 0x03
    5858:	fc 01       	movw	r30, r24
    585a:	e2 0f       	add	r30, r18
    585c:	f3 1f       	adc	r31, r19
    585e:	80 81       	ld	r24, Z
    5860:	88 23       	and	r24, r24
    5862:	39 f7       	brne	.-50     	; 0x5832 <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    5864:	0f 90       	pop	r0
    5866:	0f 90       	pop	r0
    5868:	0f 90       	pop	r0
    586a:	cf 91       	pop	r28
    586c:	df 91       	pop	r29
    586e:	08 95       	ret

00005870 <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    5870:	0f 93       	push	r16
    5872:	1f 93       	push	r17
    5874:	df 93       	push	r29
    5876:	cf 93       	push	r28
    5878:	cd b7       	in	r28, 0x3d	; 61
    587a:	de b7       	in	r29, 0x3e	; 62
    587c:	60 97       	sbiw	r28, 0x10	; 16
    587e:	0f b6       	in	r0, 0x3f	; 63
    5880:	f8 94       	cli
    5882:	de bf       	out	0x3e, r29	; 62
    5884:	0f be       	out	0x3f, r0	; 63
    5886:	cd bf       	out	0x3d, r28	; 61
    5888:	6d 87       	std	Y+13, r22	; 0x0d
    588a:	7e 87       	std	Y+14, r23	; 0x0e
    588c:	8f 87       	std	Y+15, r24	; 0x0f
    588e:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    5890:	8d 85       	ldd	r24, Y+13	; 0x0d
    5892:	9e 85       	ldd	r25, Y+14	; 0x0e
    5894:	af 85       	ldd	r26, Y+15	; 0x0f
    5896:	b8 89       	ldd	r27, Y+16	; 0x10
    5898:	00 97       	sbiw	r24, 0x00	; 0
    589a:	a1 05       	cpc	r26, r1
    589c:	b1 05       	cpc	r27, r1
    589e:	21 f4       	brne	.+8      	; 0x58a8 <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    58a0:	80 e3       	ldi	r24, 0x30	; 48
    58a2:	0e 94 3a 2b 	call	0x5674	; 0x5674 <LCD_write_char>
    58a6:	18 c0       	rjmp	.+48     	; 0x58d8 <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    58a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    58aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    58ac:	af 85       	ldd	r26, Y+15	; 0x0f
    58ae:	b8 89       	ldd	r27, Y+16	; 0x10
    58b0:	bb 23       	and	r27, r27
    58b2:	94 f4       	brge	.+36     	; 0x58d8 <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    58b4:	8d e2       	ldi	r24, 0x2D	; 45
    58b6:	0e 94 3a 2b 	call	0x5674	; 0x5674 <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    58ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    58bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    58be:	af 85       	ldd	r26, Y+15	; 0x0f
    58c0:	b8 89       	ldd	r27, Y+16	; 0x10
    58c2:	b0 95       	com	r27
    58c4:	a0 95       	com	r26
    58c6:	90 95       	com	r25
    58c8:	81 95       	neg	r24
    58ca:	9f 4f       	sbci	r25, 0xFF	; 255
    58cc:	af 4f       	sbci	r26, 0xFF	; 255
    58ce:	bf 4f       	sbci	r27, 0xFF	; 255
    58d0:	8d 87       	std	Y+13, r24	; 0x0d
    58d2:	9e 87       	std	Y+14, r25	; 0x0e
    58d4:	af 87       	std	Y+15, r26	; 0x0f
    58d6:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    58d8:	1a 82       	std	Y+2, r1	; 0x02
    58da:	2d c0       	rjmp	.+90     	; 0x5936 <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    58dc:	8a 81       	ldd	r24, Y+2	; 0x02
    58de:	08 2f       	mov	r16, r24
    58e0:	10 e0       	ldi	r17, 0x00	; 0
    58e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    58e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    58e6:	af 85       	ldd	r26, Y+15	; 0x0f
    58e8:	b8 89       	ldd	r27, Y+16	; 0x10
    58ea:	2a e0       	ldi	r18, 0x0A	; 10
    58ec:	30 e0       	ldi	r19, 0x00	; 0
    58ee:	40 e0       	ldi	r20, 0x00	; 0
    58f0:	50 e0       	ldi	r21, 0x00	; 0
    58f2:	bc 01       	movw	r22, r24
    58f4:	cd 01       	movw	r24, r26
    58f6:	0e 94 11 32 	call	0x6422	; 0x6422 <__divmodsi4>
    58fa:	dc 01       	movw	r26, r24
    58fc:	cb 01       	movw	r24, r22
    58fe:	28 2f       	mov	r18, r24
    5900:	ce 01       	movw	r24, r28
    5902:	03 96       	adiw	r24, 0x03	; 3
    5904:	fc 01       	movw	r30, r24
    5906:	e0 0f       	add	r30, r16
    5908:	f1 1f       	adc	r31, r17
    590a:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    590c:	8d 85       	ldd	r24, Y+13	; 0x0d
    590e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5910:	af 85       	ldd	r26, Y+15	; 0x0f
    5912:	b8 89       	ldd	r27, Y+16	; 0x10
    5914:	2a e0       	ldi	r18, 0x0A	; 10
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	40 e0       	ldi	r20, 0x00	; 0
    591a:	50 e0       	ldi	r21, 0x00	; 0
    591c:	bc 01       	movw	r22, r24
    591e:	cd 01       	movw	r24, r26
    5920:	0e 94 11 32 	call	0x6422	; 0x6422 <__divmodsi4>
    5924:	da 01       	movw	r26, r20
    5926:	c9 01       	movw	r24, r18
    5928:	8d 87       	std	Y+13, r24	; 0x0d
    592a:	9e 87       	std	Y+14, r25	; 0x0e
    592c:	af 87       	std	Y+15, r26	; 0x0f
    592e:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    5930:	8a 81       	ldd	r24, Y+2	; 0x02
    5932:	8f 5f       	subi	r24, 0xFF	; 255
    5934:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    5936:	8a 81       	ldd	r24, Y+2	; 0x02
    5938:	8b 30       	cpi	r24, 0x0B	; 11
    593a:	40 f4       	brcc	.+16     	; 0x594c <LCD_write_s32_number+0xdc>
    593c:	8d 85       	ldd	r24, Y+13	; 0x0d
    593e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5940:	af 85       	ldd	r26, Y+15	; 0x0f
    5942:	b8 89       	ldd	r27, Y+16	; 0x10
    5944:	00 97       	sbiw	r24, 0x00	; 0
    5946:	a1 05       	cpc	r26, r1
    5948:	b1 05       	cpc	r27, r1
    594a:	41 f6       	brne	.-112    	; 0x58dc <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    594c:	81 e0       	ldi	r24, 0x01	; 1
    594e:	89 83       	std	Y+1, r24	; 0x01
    5950:	14 c0       	rjmp	.+40     	; 0x597a <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    5952:	8a 81       	ldd	r24, Y+2	; 0x02
    5954:	28 2f       	mov	r18, r24
    5956:	30 e0       	ldi	r19, 0x00	; 0
    5958:	89 81       	ldd	r24, Y+1	; 0x01
    595a:	88 2f       	mov	r24, r24
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	28 1b       	sub	r18, r24
    5960:	39 0b       	sbc	r19, r25
    5962:	ce 01       	movw	r24, r28
    5964:	03 96       	adiw	r24, 0x03	; 3
    5966:	fc 01       	movw	r30, r24
    5968:	e2 0f       	add	r30, r18
    596a:	f3 1f       	adc	r31, r19
    596c:	80 81       	ld	r24, Z
    596e:	80 5d       	subi	r24, 0xD0	; 208
    5970:	0e 94 3a 2b 	call	0x5674	; 0x5674 <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    5974:	89 81       	ldd	r24, Y+1	; 0x01
    5976:	8f 5f       	subi	r24, 0xFF	; 255
    5978:	89 83       	std	Y+1, r24	; 0x01
    597a:	89 81       	ldd	r24, Y+1	; 0x01
    597c:	28 2f       	mov	r18, r24
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	8a 81       	ldd	r24, Y+2	; 0x02
    5982:	88 2f       	mov	r24, r24
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	01 96       	adiw	r24, 0x01	; 1
    5988:	28 17       	cp	r18, r24
    598a:	39 07       	cpc	r19, r25
    598c:	14 f3       	brlt	.-60     	; 0x5952 <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    598e:	60 96       	adiw	r28, 0x10	; 16
    5990:	0f b6       	in	r0, 0x3f	; 63
    5992:	f8 94       	cli
    5994:	de bf       	out	0x3e, r29	; 62
    5996:	0f be       	out	0x3f, r0	; 63
    5998:	cd bf       	out	0x3d, r28	; 61
    599a:	cf 91       	pop	r28
    599c:	df 91       	pop	r29
    599e:	1f 91       	pop	r17
    59a0:	0f 91       	pop	r16
    59a2:	08 95       	ret

000059a4 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    59a4:	ef 92       	push	r14
    59a6:	ff 92       	push	r15
    59a8:	0f 93       	push	r16
    59aa:	1f 93       	push	r17
    59ac:	df 93       	push	r29
    59ae:	cf 93       	push	r28
    59b0:	cd b7       	in	r28, 0x3d	; 61
    59b2:	de b7       	in	r29, 0x3e	; 62
    59b4:	2d 97       	sbiw	r28, 0x0d	; 13
    59b6:	0f b6       	in	r0, 0x3f	; 63
    59b8:	f8 94       	cli
    59ba:	de bf       	out	0x3e, r29	; 62
    59bc:	0f be       	out	0x3f, r0	; 63
    59be:	cd bf       	out	0x3d, r28	; 61
    59c0:	69 87       	std	Y+9, r22	; 0x09
    59c2:	7a 87       	std	Y+10, r23	; 0x0a
    59c4:	8b 87       	std	Y+11, r24	; 0x0b
    59c6:	9c 87       	std	Y+12, r25	; 0x0c
    59c8:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    59ca:	69 85       	ldd	r22, Y+9	; 0x09
    59cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    59ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    59d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    59d2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    59d6:	dc 01       	movw	r26, r24
    59d8:	cb 01       	movw	r24, r22
    59da:	8d 83       	std	Y+5, r24	; 0x05
    59dc:	9e 83       	std	Y+6, r25	; 0x06
    59de:	af 83       	std	Y+7, r26	; 0x07
    59e0:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    59e2:	6d 81       	ldd	r22, Y+5	; 0x05
    59e4:	7e 81       	ldd	r23, Y+6	; 0x06
    59e6:	8f 81       	ldd	r24, Y+7	; 0x07
    59e8:	98 85       	ldd	r25, Y+8	; 0x08
    59ea:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    59ee:	9b 01       	movw	r18, r22
    59f0:	ac 01       	movw	r20, r24
    59f2:	69 85       	ldd	r22, Y+9	; 0x09
    59f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    59f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    59f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    59fa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    59fe:	dc 01       	movw	r26, r24
    5a00:	cb 01       	movw	r24, r22
    5a02:	7c 01       	movw	r14, r24
    5a04:	8d 01       	movw	r16, r26
    5a06:	8a e0       	ldi	r24, 0x0A	; 10
    5a08:	6d 85       	ldd	r22, Y+13	; 0x0d
    5a0a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_pow>
    5a0e:	dc 01       	movw	r26, r24
    5a10:	cb 01       	movw	r24, r22
    5a12:	bc 01       	movw	r22, r24
    5a14:	cd 01       	movw	r24, r26
    5a16:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    5a1a:	9b 01       	movw	r18, r22
    5a1c:	ac 01       	movw	r20, r24
    5a1e:	c8 01       	movw	r24, r16
    5a20:	b7 01       	movw	r22, r14
    5a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a26:	dc 01       	movw	r26, r24
    5a28:	cb 01       	movw	r24, r22
    5a2a:	bc 01       	movw	r22, r24
    5a2c:	cd 01       	movw	r24, r26
    5a2e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    5a32:	dc 01       	movw	r26, r24
    5a34:	cb 01       	movw	r24, r22
    5a36:	89 83       	std	Y+1, r24	; 0x01
    5a38:	9a 83       	std	Y+2, r25	; 0x02
    5a3a:	ab 83       	std	Y+3, r26	; 0x03
    5a3c:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    5a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a40:	9e 81       	ldd	r25, Y+6	; 0x06
    5a42:	af 81       	ldd	r26, Y+7	; 0x07
    5a44:	b8 85       	ldd	r27, Y+8	; 0x08
    5a46:	bc 01       	movw	r22, r24
    5a48:	cd 01       	movw	r24, r26
    5a4a:	0e 94 38 2c 	call	0x5870	; 0x5870 <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    5a4e:	8e e2       	ldi	r24, 0x2E	; 46
    5a50:	0e 94 3a 2b 	call	0x5674	; 0x5674 <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    5a54:	89 81       	ldd	r24, Y+1	; 0x01
    5a56:	9a 81       	ldd	r25, Y+2	; 0x02
    5a58:	ab 81       	ldd	r26, Y+3	; 0x03
    5a5a:	bc 81       	ldd	r27, Y+4	; 0x04
    5a5c:	8f 77       	andi	r24, 0x7F	; 127
    5a5e:	bc 01       	movw	r22, r24
    5a60:	cd 01       	movw	r24, r26
    5a62:	0e 94 38 2c 	call	0x5870	; 0x5870 <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    5a66:	2d 96       	adiw	r28, 0x0d	; 13
    5a68:	0f b6       	in	r0, 0x3f	; 63
    5a6a:	f8 94       	cli
    5a6c:	de bf       	out	0x3e, r29	; 62
    5a6e:	0f be       	out	0x3f, r0	; 63
    5a70:	cd bf       	out	0x3d, r28	; 61
    5a72:	cf 91       	pop	r28
    5a74:	df 91       	pop	r29
    5a76:	1f 91       	pop	r17
    5a78:	0f 91       	pop	r16
    5a7a:	ff 90       	pop	r15
    5a7c:	ef 90       	pop	r14
    5a7e:	08 95       	ret

00005a80 <EEPROM_write_data>:

//Global variables

/* Implementing of the driver functions */
// EEPROM write data on specific location
void EEPROM_write_data(u16 copy_u16_write_add, u8 copy_u8_write_data){
    5a80:	df 93       	push	r29
    5a82:	cf 93       	push	r28
    5a84:	00 d0       	rcall	.+0      	; 0x5a86 <EEPROM_write_data+0x6>
    5a86:	0f 92       	push	r0
    5a88:	cd b7       	in	r28, 0x3d	; 61
    5a8a:	de b7       	in	r29, 0x3e	; 62
    5a8c:	9a 83       	std	Y+2, r25	; 0x02
    5a8e:	89 83       	std	Y+1, r24	; 0x01
    5a90:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 *
	 */
	if(copy_u16_write_add <= EEPROM_max_add){
    5a92:	89 81       	ldd	r24, Y+1	; 0x01
    5a94:	9a 81       	ldd	r25, Y+2	; 0x02
    5a96:	24 e0       	ldi	r18, 0x04	; 4
    5a98:	80 30       	cpi	r24, 0x00	; 0
    5a9a:	92 07       	cpc	r25, r18
    5a9c:	10 f5       	brcc	.+68     	; 0x5ae2 <EEPROM_write_data+0x62>
		while(get_bit(EEPROM_EECR, EEPROM_EEWE) != 0);
    5a9e:	ec e3       	ldi	r30, 0x3C	; 60
    5aa0:	f0 e0       	ldi	r31, 0x00	; 0
    5aa2:	80 81       	ld	r24, Z
    5aa4:	86 95       	lsr	r24
    5aa6:	88 2f       	mov	r24, r24
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	81 70       	andi	r24, 0x01	; 1
    5aac:	90 70       	andi	r25, 0x00	; 0
    5aae:	88 23       	and	r24, r24
    5ab0:	b1 f7       	brne	.-20     	; 0x5a9e <EEPROM_write_data+0x1e>
		EEPROM_EEAR = copy_u16_write_add;
    5ab2:	ee e3       	ldi	r30, 0x3E	; 62
    5ab4:	f0 e0       	ldi	r31, 0x00	; 0
    5ab6:	89 81       	ldd	r24, Y+1	; 0x01
    5ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    5aba:	91 83       	std	Z+1, r25	; 0x01
    5abc:	80 83       	st	Z, r24
		EEPROM_EEDR = copy_u8_write_data;
    5abe:	ed e3       	ldi	r30, 0x3D	; 61
    5ac0:	f0 e0       	ldi	r31, 0x00	; 0
    5ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac4:	80 83       	st	Z, r24
		set_bit(EEPROM_EECR, EEPROM_EEMWE);
    5ac6:	ac e3       	ldi	r26, 0x3C	; 60
    5ac8:	b0 e0       	ldi	r27, 0x00	; 0
    5aca:	ec e3       	ldi	r30, 0x3C	; 60
    5acc:	f0 e0       	ldi	r31, 0x00	; 0
    5ace:	80 81       	ld	r24, Z
    5ad0:	84 60       	ori	r24, 0x04	; 4
    5ad2:	8c 93       	st	X, r24
		set_bit(EEPROM_EECR, EEPROM_EEWE);
    5ad4:	ac e3       	ldi	r26, 0x3C	; 60
    5ad6:	b0 e0       	ldi	r27, 0x00	; 0
    5ad8:	ec e3       	ldi	r30, 0x3C	; 60
    5ada:	f0 e0       	ldi	r31, 0x00	; 0
    5adc:	80 81       	ld	r24, Z
    5ade:	82 60       	ori	r24, 0x02	; 2
    5ae0:	8c 93       	st	X, r24
	}
	else{

	}
}
    5ae2:	0f 90       	pop	r0
    5ae4:	0f 90       	pop	r0
    5ae6:	0f 90       	pop	r0
    5ae8:	cf 91       	pop	r28
    5aea:	df 91       	pop	r29
    5aec:	08 95       	ret

00005aee <EEPROM_read_data>:


// EEPROM read data from specific location
u8 EEPROM_read_data(u16 copy_u16_read_add){
    5aee:	df 93       	push	r29
    5af0:	cf 93       	push	r28
    5af2:	00 d0       	rcall	.+0      	; 0x5af4 <EEPROM_read_data+0x6>
    5af4:	0f 92       	push	r0
    5af6:	cd b7       	in	r28, 0x3d	; 61
    5af8:	de b7       	in	r29, 0x3e	; 62
    5afa:	9b 83       	std	Y+3, r25	; 0x03
    5afc:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *
	 */
	u8 EEPROM_read_data = 0;
    5afe:	19 82       	std	Y+1, r1	; 0x01
	while(get_bit(EEPROM_EECR, EEPROM_EEWE) != 0);
    5b00:	ec e3       	ldi	r30, 0x3C	; 60
    5b02:	f0 e0       	ldi	r31, 0x00	; 0
    5b04:	80 81       	ld	r24, Z
    5b06:	86 95       	lsr	r24
    5b08:	88 2f       	mov	r24, r24
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	81 70       	andi	r24, 0x01	; 1
    5b0e:	90 70       	andi	r25, 0x00	; 0
    5b10:	88 23       	and	r24, r24
    5b12:	b1 f7       	brne	.-20     	; 0x5b00 <EEPROM_read_data+0x12>
	EEPROM_EEAR |= copy_u16_read_add;
    5b14:	ae e3       	ldi	r26, 0x3E	; 62
    5b16:	b0 e0       	ldi	r27, 0x00	; 0
    5b18:	ee e3       	ldi	r30, 0x3E	; 62
    5b1a:	f0 e0       	ldi	r31, 0x00	; 0
    5b1c:	20 81       	ld	r18, Z
    5b1e:	31 81       	ldd	r19, Z+1	; 0x01
    5b20:	8a 81       	ldd	r24, Y+2	; 0x02
    5b22:	9b 81       	ldd	r25, Y+3	; 0x03
    5b24:	82 2b       	or	r24, r18
    5b26:	93 2b       	or	r25, r19
    5b28:	11 96       	adiw	r26, 0x01	; 1
    5b2a:	9c 93       	st	X, r25
    5b2c:	8e 93       	st	-X, r24
	set_bit(EEPROM_EECR, EEPROM_EERE);
    5b2e:	ac e3       	ldi	r26, 0x3C	; 60
    5b30:	b0 e0       	ldi	r27, 0x00	; 0
    5b32:	ec e3       	ldi	r30, 0x3C	; 60
    5b34:	f0 e0       	ldi	r31, 0x00	; 0
    5b36:	80 81       	ld	r24, Z
    5b38:	81 60       	ori	r24, 0x01	; 1
    5b3a:	8c 93       	st	X, r24
	EEPROM_read_data = EEPROM_EEDR;
    5b3c:	ed e3       	ldi	r30, 0x3D	; 61
    5b3e:	f0 e0       	ldi	r31, 0x00	; 0
    5b40:	80 81       	ld	r24, Z
    5b42:	89 83       	std	Y+1, r24	; 0x01
	return EEPROM_read_data;
    5b44:	89 81       	ldd	r24, Y+1	; 0x01
}
    5b46:	0f 90       	pop	r0
    5b48:	0f 90       	pop	r0
    5b4a:	0f 90       	pop	r0
    5b4c:	cf 91       	pop	r28
    5b4e:	df 91       	pop	r29
    5b50:	08 95       	ret

00005b52 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    5b52:	df 93       	push	r29
    5b54:	cf 93       	push	r28
    5b56:	00 d0       	rcall	.+0      	; 0x5b58 <DIO_void_set_port_dir+0x6>
    5b58:	cd b7       	in	r28, 0x3d	; 61
    5b5a:	de b7       	in	r29, 0x3e	; 62
    5b5c:	89 83       	std	Y+1, r24	; 0x01
    5b5e:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    5b60:	89 81       	ldd	r24, Y+1	; 0x01
    5b62:	88 2f       	mov	r24, r24
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	88 0f       	add	r24, r24
    5b68:	99 1f       	adc	r25, r25
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	e7 55       	subi	r30, 0x57	; 87
    5b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    5b70:	01 90       	ld	r0, Z+
    5b72:	f0 81       	ld	r31, Z
    5b74:	e0 2d       	mov	r30, r0
    5b76:	8a 81       	ldd	r24, Y+2	; 0x02
    5b78:	80 83       	st	Z, r24
}
    5b7a:	0f 90       	pop	r0
    5b7c:	0f 90       	pop	r0
    5b7e:	cf 91       	pop	r28
    5b80:	df 91       	pop	r29
    5b82:	08 95       	ret

00005b84 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    5b84:	df 93       	push	r29
    5b86:	cf 93       	push	r28
    5b88:	0f 92       	push	r0
    5b8a:	cd b7       	in	r28, 0x3d	; 61
    5b8c:	de b7       	in	r29, 0x3e	; 62
    5b8e:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    5b90:	89 81       	ldd	r24, Y+1	; 0x01
    5b92:	88 2f       	mov	r24, r24
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	88 0f       	add	r24, r24
    5b98:	99 1f       	adc	r25, r25
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	e7 55       	subi	r30, 0x57	; 87
    5b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    5ba0:	01 90       	ld	r0, Z+
    5ba2:	f0 81       	ld	r31, Z
    5ba4:	e0 2d       	mov	r30, r0
    5ba6:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    5ba8:	89 81       	ldd	r24, Y+1	; 0x01
    5baa:	88 2f       	mov	r24, r24
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	88 0f       	add	r24, r24
    5bb0:	99 1f       	adc	r25, r25
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	ef 54       	subi	r30, 0x4F	; 79
    5bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    5bb8:	01 90       	ld	r0, Z+
    5bba:	f0 81       	ld	r31, Z
    5bbc:	e0 2d       	mov	r30, r0
    5bbe:	8f ef       	ldi	r24, 0xFF	; 255
    5bc0:	80 83       	st	Z, r24
}
    5bc2:	0f 90       	pop	r0
    5bc4:	cf 91       	pop	r28
    5bc6:	df 91       	pop	r29
    5bc8:	08 95       	ret

00005bca <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    5bca:	df 93       	push	r29
    5bcc:	cf 93       	push	r28
    5bce:	00 d0       	rcall	.+0      	; 0x5bd0 <DIO_void_set_pin_dir+0x6>
    5bd0:	0f 92       	push	r0
    5bd2:	cd b7       	in	r28, 0x3d	; 61
    5bd4:	de b7       	in	r29, 0x3e	; 62
    5bd6:	89 83       	std	Y+1, r24	; 0x01
    5bd8:	6a 83       	std	Y+2, r22	; 0x02
    5bda:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    5bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    5bde:	88 23       	and	r24, r24
    5be0:	29 f1       	breq	.+74     	; 0x5c2c <DIO_void_set_pin_dir+0x62>
    5be2:	89 81       	ldd	r24, Y+1	; 0x01
    5be4:	88 2f       	mov	r24, r24
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	88 0f       	add	r24, r24
    5bea:	99 1f       	adc	r25, r25
    5bec:	fc 01       	movw	r30, r24
    5bee:	e7 55       	subi	r30, 0x57	; 87
    5bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    5bf2:	a0 81       	ld	r26, Z
    5bf4:	b1 81       	ldd	r27, Z+1	; 0x01
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	88 2f       	mov	r24, r24
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	88 0f       	add	r24, r24
    5bfe:	99 1f       	adc	r25, r25
    5c00:	fc 01       	movw	r30, r24
    5c02:	e7 55       	subi	r30, 0x57	; 87
    5c04:	fe 4f       	sbci	r31, 0xFE	; 254
    5c06:	01 90       	ld	r0, Z+
    5c08:	f0 81       	ld	r31, Z
    5c0a:	e0 2d       	mov	r30, r0
    5c0c:	80 81       	ld	r24, Z
    5c0e:	48 2f       	mov	r20, r24
    5c10:	8a 81       	ldd	r24, Y+2	; 0x02
    5c12:	28 2f       	mov	r18, r24
    5c14:	30 e0       	ldi	r19, 0x00	; 0
    5c16:	81 e0       	ldi	r24, 0x01	; 1
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	02 2e       	mov	r0, r18
    5c1c:	02 c0       	rjmp	.+4      	; 0x5c22 <DIO_void_set_pin_dir+0x58>
    5c1e:	88 0f       	add	r24, r24
    5c20:	99 1f       	adc	r25, r25
    5c22:	0a 94       	dec	r0
    5c24:	e2 f7       	brpl	.-8      	; 0x5c1e <DIO_void_set_pin_dir+0x54>
    5c26:	84 2b       	or	r24, r20
    5c28:	8c 93       	st	X, r24
    5c2a:	25 c0       	rjmp	.+74     	; 0x5c76 <DIO_void_set_pin_dir+0xac>
    5c2c:	89 81       	ldd	r24, Y+1	; 0x01
    5c2e:	88 2f       	mov	r24, r24
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	88 0f       	add	r24, r24
    5c34:	99 1f       	adc	r25, r25
    5c36:	fc 01       	movw	r30, r24
    5c38:	e7 55       	subi	r30, 0x57	; 87
    5c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c3c:	a0 81       	ld	r26, Z
    5c3e:	b1 81       	ldd	r27, Z+1	; 0x01
    5c40:	89 81       	ldd	r24, Y+1	; 0x01
    5c42:	88 2f       	mov	r24, r24
    5c44:	90 e0       	ldi	r25, 0x00	; 0
    5c46:	88 0f       	add	r24, r24
    5c48:	99 1f       	adc	r25, r25
    5c4a:	fc 01       	movw	r30, r24
    5c4c:	e7 55       	subi	r30, 0x57	; 87
    5c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c50:	01 90       	ld	r0, Z+
    5c52:	f0 81       	ld	r31, Z
    5c54:	e0 2d       	mov	r30, r0
    5c56:	80 81       	ld	r24, Z
    5c58:	48 2f       	mov	r20, r24
    5c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5c:	28 2f       	mov	r18, r24
    5c5e:	30 e0       	ldi	r19, 0x00	; 0
    5c60:	81 e0       	ldi	r24, 0x01	; 1
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	02 2e       	mov	r0, r18
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <DIO_void_set_pin_dir+0xa2>
    5c68:	88 0f       	add	r24, r24
    5c6a:	99 1f       	adc	r25, r25
    5c6c:	0a 94       	dec	r0
    5c6e:	e2 f7       	brpl	.-8      	; 0x5c68 <DIO_void_set_pin_dir+0x9e>
    5c70:	80 95       	com	r24
    5c72:	84 23       	and	r24, r20
    5c74:	8c 93       	st	X, r24
}
    5c76:	0f 90       	pop	r0
    5c78:	0f 90       	pop	r0
    5c7a:	0f 90       	pop	r0
    5c7c:	cf 91       	pop	r28
    5c7e:	df 91       	pop	r29
    5c80:	08 95       	ret

00005c82 <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5c82:	df 93       	push	r29
    5c84:	cf 93       	push	r28
    5c86:	00 d0       	rcall	.+0      	; 0x5c88 <DIO_void_set_pin_in_pullUP+0x6>
    5c88:	cd b7       	in	r28, 0x3d	; 61
    5c8a:	de b7       	in	r29, 0x3e	; 62
    5c8c:	89 83       	std	Y+1, r24	; 0x01
    5c8e:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5c90:	89 81       	ldd	r24, Y+1	; 0x01
    5c92:	88 2f       	mov	r24, r24
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	88 0f       	add	r24, r24
    5c98:	99 1f       	adc	r25, r25
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	e7 55       	subi	r30, 0x57	; 87
    5c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    5ca0:	a0 81       	ld	r26, Z
    5ca2:	b1 81       	ldd	r27, Z+1	; 0x01
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	88 2f       	mov	r24, r24
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	88 0f       	add	r24, r24
    5cac:	99 1f       	adc	r25, r25
    5cae:	fc 01       	movw	r30, r24
    5cb0:	e7 55       	subi	r30, 0x57	; 87
    5cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    5cb4:	01 90       	ld	r0, Z+
    5cb6:	f0 81       	ld	r31, Z
    5cb8:	e0 2d       	mov	r30, r0
    5cba:	80 81       	ld	r24, Z
    5cbc:	48 2f       	mov	r20, r24
    5cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc0:	28 2f       	mov	r18, r24
    5cc2:	30 e0       	ldi	r19, 0x00	; 0
    5cc4:	81 e0       	ldi	r24, 0x01	; 1
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	02 c0       	rjmp	.+4      	; 0x5cce <DIO_void_set_pin_in_pullUP+0x4c>
    5cca:	88 0f       	add	r24, r24
    5ccc:	99 1f       	adc	r25, r25
    5cce:	2a 95       	dec	r18
    5cd0:	e2 f7       	brpl	.-8      	; 0x5cca <DIO_void_set_pin_in_pullUP+0x48>
    5cd2:	80 95       	com	r24
    5cd4:	84 23       	and	r24, r20
    5cd6:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5cd8:	89 81       	ldd	r24, Y+1	; 0x01
    5cda:	88 2f       	mov	r24, r24
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	88 0f       	add	r24, r24
    5ce0:	99 1f       	adc	r25, r25
    5ce2:	fc 01       	movw	r30, r24
    5ce4:	ef 54       	subi	r30, 0x4F	; 79
    5ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    5ce8:	a0 81       	ld	r26, Z
    5cea:	b1 81       	ldd	r27, Z+1	; 0x01
    5cec:	89 81       	ldd	r24, Y+1	; 0x01
    5cee:	88 2f       	mov	r24, r24
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	88 0f       	add	r24, r24
    5cf4:	99 1f       	adc	r25, r25
    5cf6:	fc 01       	movw	r30, r24
    5cf8:	ef 54       	subi	r30, 0x4F	; 79
    5cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    5cfc:	01 90       	ld	r0, Z+
    5cfe:	f0 81       	ld	r31, Z
    5d00:	e0 2d       	mov	r30, r0
    5d02:	80 81       	ld	r24, Z
    5d04:	48 2f       	mov	r20, r24
    5d06:	8a 81       	ldd	r24, Y+2	; 0x02
    5d08:	28 2f       	mov	r18, r24
    5d0a:	30 e0       	ldi	r19, 0x00	; 0
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	02 2e       	mov	r0, r18
    5d12:	02 c0       	rjmp	.+4      	; 0x5d18 <DIO_void_set_pin_in_pullUP+0x96>
    5d14:	88 0f       	add	r24, r24
    5d16:	99 1f       	adc	r25, r25
    5d18:	0a 94       	dec	r0
    5d1a:	e2 f7       	brpl	.-8      	; 0x5d14 <DIO_void_set_pin_in_pullUP+0x92>
    5d1c:	84 2b       	or	r24, r20
    5d1e:	8c 93       	st	X, r24
}
    5d20:	0f 90       	pop	r0
    5d22:	0f 90       	pop	r0
    5d24:	cf 91       	pop	r28
    5d26:	df 91       	pop	r29
    5d28:	08 95       	ret

00005d2a <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    5d2a:	df 93       	push	r29
    5d2c:	cf 93       	push	r28
    5d2e:	0f 92       	push	r0
    5d30:	cd b7       	in	r28, 0x3d	; 61
    5d32:	de b7       	in	r29, 0x3e	; 62
    5d34:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    5d36:	89 81       	ldd	r24, Y+1	; 0x01
    5d38:	88 2f       	mov	r24, r24
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	88 0f       	add	r24, r24
    5d3e:	99 1f       	adc	r25, r25
    5d40:	fc 01       	movw	r30, r24
    5d42:	ef 54       	subi	r30, 0x4F	; 79
    5d44:	fe 4f       	sbci	r31, 0xFE	; 254
    5d46:	01 90       	ld	r0, Z+
    5d48:	f0 81       	ld	r31, Z
    5d4a:	e0 2d       	mov	r30, r0
    5d4c:	8f ef       	ldi	r24, 0xFF	; 255
    5d4e:	80 83       	st	Z, r24
}
    5d50:	0f 90       	pop	r0
    5d52:	cf 91       	pop	r28
    5d54:	df 91       	pop	r29
    5d56:	08 95       	ret

00005d58 <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    5d58:	df 93       	push	r29
    5d5a:	cf 93       	push	r28
    5d5c:	0f 92       	push	r0
    5d5e:	cd b7       	in	r28, 0x3d	; 61
    5d60:	de b7       	in	r29, 0x3e	; 62
    5d62:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    5d64:	89 81       	ldd	r24, Y+1	; 0x01
    5d66:	88 2f       	mov	r24, r24
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	88 0f       	add	r24, r24
    5d6c:	99 1f       	adc	r25, r25
    5d6e:	fc 01       	movw	r30, r24
    5d70:	ef 54       	subi	r30, 0x4F	; 79
    5d72:	fe 4f       	sbci	r31, 0xFE	; 254
    5d74:	01 90       	ld	r0, Z+
    5d76:	f0 81       	ld	r31, Z
    5d78:	e0 2d       	mov	r30, r0
    5d7a:	10 82       	st	Z, r1
}
    5d7c:	0f 90       	pop	r0
    5d7e:	cf 91       	pop	r28
    5d80:	df 91       	pop	r29
    5d82:	08 95       	ret

00005d84 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    5d84:	df 93       	push	r29
    5d86:	cf 93       	push	r28
    5d88:	0f 92       	push	r0
    5d8a:	cd b7       	in	r28, 0x3d	; 61
    5d8c:	de b7       	in	r29, 0x3e	; 62
    5d8e:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    5d90:	89 81       	ldd	r24, Y+1	; 0x01
    5d92:	88 2f       	mov	r24, r24
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	88 0f       	add	r24, r24
    5d98:	99 1f       	adc	r25, r25
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	ef 54       	subi	r30, 0x4F	; 79
    5d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    5da0:	a0 81       	ld	r26, Z
    5da2:	b1 81       	ldd	r27, Z+1	; 0x01
    5da4:	89 81       	ldd	r24, Y+1	; 0x01
    5da6:	88 2f       	mov	r24, r24
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	88 0f       	add	r24, r24
    5dac:	99 1f       	adc	r25, r25
    5dae:	fc 01       	movw	r30, r24
    5db0:	ef 54       	subi	r30, 0x4F	; 79
    5db2:	fe 4f       	sbci	r31, 0xFE	; 254
    5db4:	01 90       	ld	r0, Z+
    5db6:	f0 81       	ld	r31, Z
    5db8:	e0 2d       	mov	r30, r0
    5dba:	80 81       	ld	r24, Z
    5dbc:	80 95       	com	r24
    5dbe:	8c 93       	st	X, r24
}
    5dc0:	0f 90       	pop	r0
    5dc2:	cf 91       	pop	r28
    5dc4:	df 91       	pop	r29
    5dc6:	08 95       	ret

00005dc8 <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    5dc8:	df 93       	push	r29
    5dca:	cf 93       	push	r28
    5dcc:	00 d0       	rcall	.+0      	; 0x5dce <DIO_void_assign_port+0x6>
    5dce:	cd b7       	in	r28, 0x3d	; 61
    5dd0:	de b7       	in	r29, 0x3e	; 62
    5dd2:	89 83       	std	Y+1, r24	; 0x01
    5dd4:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    5dd6:	89 81       	ldd	r24, Y+1	; 0x01
    5dd8:	88 2f       	mov	r24, r24
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	88 0f       	add	r24, r24
    5dde:	99 1f       	adc	r25, r25
    5de0:	fc 01       	movw	r30, r24
    5de2:	ef 54       	subi	r30, 0x4F	; 79
    5de4:	fe 4f       	sbci	r31, 0xFE	; 254
    5de6:	01 90       	ld	r0, Z+
    5de8:	f0 81       	ld	r31, Z
    5dea:	e0 2d       	mov	r30, r0
    5dec:	8a 81       	ldd	r24, Y+2	; 0x02
    5dee:	80 83       	st	Z, r24
}
    5df0:	0f 90       	pop	r0
    5df2:	0f 90       	pop	r0
    5df4:	cf 91       	pop	r28
    5df6:	df 91       	pop	r29
    5df8:	08 95       	ret

00005dfa <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5dfa:	df 93       	push	r29
    5dfc:	cf 93       	push	r28
    5dfe:	00 d0       	rcall	.+0      	; 0x5e00 <DIO_void_set_pin+0x6>
    5e00:	cd b7       	in	r28, 0x3d	; 61
    5e02:	de b7       	in	r29, 0x3e	; 62
    5e04:	89 83       	std	Y+1, r24	; 0x01
    5e06:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5e08:	89 81       	ldd	r24, Y+1	; 0x01
    5e0a:	88 2f       	mov	r24, r24
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	88 0f       	add	r24, r24
    5e10:	99 1f       	adc	r25, r25
    5e12:	fc 01       	movw	r30, r24
    5e14:	ef 54       	subi	r30, 0x4F	; 79
    5e16:	fe 4f       	sbci	r31, 0xFE	; 254
    5e18:	a0 81       	ld	r26, Z
    5e1a:	b1 81       	ldd	r27, Z+1	; 0x01
    5e1c:	89 81       	ldd	r24, Y+1	; 0x01
    5e1e:	88 2f       	mov	r24, r24
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	88 0f       	add	r24, r24
    5e24:	99 1f       	adc	r25, r25
    5e26:	fc 01       	movw	r30, r24
    5e28:	ef 54       	subi	r30, 0x4F	; 79
    5e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    5e2c:	01 90       	ld	r0, Z+
    5e2e:	f0 81       	ld	r31, Z
    5e30:	e0 2d       	mov	r30, r0
    5e32:	80 81       	ld	r24, Z
    5e34:	48 2f       	mov	r20, r24
    5e36:	8a 81       	ldd	r24, Y+2	; 0x02
    5e38:	28 2f       	mov	r18, r24
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	81 e0       	ldi	r24, 0x01	; 1
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	02 2e       	mov	r0, r18
    5e42:	02 c0       	rjmp	.+4      	; 0x5e48 <DIO_void_set_pin+0x4e>
    5e44:	88 0f       	add	r24, r24
    5e46:	99 1f       	adc	r25, r25
    5e48:	0a 94       	dec	r0
    5e4a:	e2 f7       	brpl	.-8      	; 0x5e44 <DIO_void_set_pin+0x4a>
    5e4c:	84 2b       	or	r24, r20
    5e4e:	8c 93       	st	X, r24
}
    5e50:	0f 90       	pop	r0
    5e52:	0f 90       	pop	r0
    5e54:	cf 91       	pop	r28
    5e56:	df 91       	pop	r29
    5e58:	08 95       	ret

00005e5a <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5e5a:	df 93       	push	r29
    5e5c:	cf 93       	push	r28
    5e5e:	00 d0       	rcall	.+0      	; 0x5e60 <DIO_void_clear_pin+0x6>
    5e60:	cd b7       	in	r28, 0x3d	; 61
    5e62:	de b7       	in	r29, 0x3e	; 62
    5e64:	89 83       	std	Y+1, r24	; 0x01
    5e66:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5e68:	89 81       	ldd	r24, Y+1	; 0x01
    5e6a:	88 2f       	mov	r24, r24
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
    5e6e:	88 0f       	add	r24, r24
    5e70:	99 1f       	adc	r25, r25
    5e72:	fc 01       	movw	r30, r24
    5e74:	ef 54       	subi	r30, 0x4F	; 79
    5e76:	fe 4f       	sbci	r31, 0xFE	; 254
    5e78:	a0 81       	ld	r26, Z
    5e7a:	b1 81       	ldd	r27, Z+1	; 0x01
    5e7c:	89 81       	ldd	r24, Y+1	; 0x01
    5e7e:	88 2f       	mov	r24, r24
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	88 0f       	add	r24, r24
    5e84:	99 1f       	adc	r25, r25
    5e86:	fc 01       	movw	r30, r24
    5e88:	ef 54       	subi	r30, 0x4F	; 79
    5e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    5e8c:	01 90       	ld	r0, Z+
    5e8e:	f0 81       	ld	r31, Z
    5e90:	e0 2d       	mov	r30, r0
    5e92:	80 81       	ld	r24, Z
    5e94:	48 2f       	mov	r20, r24
    5e96:	8a 81       	ldd	r24, Y+2	; 0x02
    5e98:	28 2f       	mov	r18, r24
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	81 e0       	ldi	r24, 0x01	; 1
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	02 2e       	mov	r0, r18
    5ea2:	02 c0       	rjmp	.+4      	; 0x5ea8 <DIO_void_clear_pin+0x4e>
    5ea4:	88 0f       	add	r24, r24
    5ea6:	99 1f       	adc	r25, r25
    5ea8:	0a 94       	dec	r0
    5eaa:	e2 f7       	brpl	.-8      	; 0x5ea4 <DIO_void_clear_pin+0x4a>
    5eac:	80 95       	com	r24
    5eae:	84 23       	and	r24, r20
    5eb0:	8c 93       	st	X, r24
}
    5eb2:	0f 90       	pop	r0
    5eb4:	0f 90       	pop	r0
    5eb6:	cf 91       	pop	r28
    5eb8:	df 91       	pop	r29
    5eba:	08 95       	ret

00005ebc <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    5ebc:	df 93       	push	r29
    5ebe:	cf 93       	push	r28
    5ec0:	00 d0       	rcall	.+0      	; 0x5ec2 <DIO_void_toggle_pin+0x6>
    5ec2:	cd b7       	in	r28, 0x3d	; 61
    5ec4:	de b7       	in	r29, 0x3e	; 62
    5ec6:	89 83       	std	Y+1, r24	; 0x01
    5ec8:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    5eca:	89 81       	ldd	r24, Y+1	; 0x01
    5ecc:	88 2f       	mov	r24, r24
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	88 0f       	add	r24, r24
    5ed2:	99 1f       	adc	r25, r25
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	ef 54       	subi	r30, 0x4F	; 79
    5ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    5eda:	a0 81       	ld	r26, Z
    5edc:	b1 81       	ldd	r27, Z+1	; 0x01
    5ede:	89 81       	ldd	r24, Y+1	; 0x01
    5ee0:	88 2f       	mov	r24, r24
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	88 0f       	add	r24, r24
    5ee6:	99 1f       	adc	r25, r25
    5ee8:	fc 01       	movw	r30, r24
    5eea:	ef 54       	subi	r30, 0x4F	; 79
    5eec:	fe 4f       	sbci	r31, 0xFE	; 254
    5eee:	01 90       	ld	r0, Z+
    5ef0:	f0 81       	ld	r31, Z
    5ef2:	e0 2d       	mov	r30, r0
    5ef4:	80 81       	ld	r24, Z
    5ef6:	48 2f       	mov	r20, r24
    5ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    5efa:	28 2f       	mov	r18, r24
    5efc:	30 e0       	ldi	r19, 0x00	; 0
    5efe:	81 e0       	ldi	r24, 0x01	; 1
    5f00:	90 e0       	ldi	r25, 0x00	; 0
    5f02:	02 2e       	mov	r0, r18
    5f04:	02 c0       	rjmp	.+4      	; 0x5f0a <DIO_void_toggle_pin+0x4e>
    5f06:	88 0f       	add	r24, r24
    5f08:	99 1f       	adc	r25, r25
    5f0a:	0a 94       	dec	r0
    5f0c:	e2 f7       	brpl	.-8      	; 0x5f06 <DIO_void_toggle_pin+0x4a>
    5f0e:	84 27       	eor	r24, r20
    5f10:	8c 93       	st	X, r24
}
    5f12:	0f 90       	pop	r0
    5f14:	0f 90       	pop	r0
    5f16:	cf 91       	pop	r28
    5f18:	df 91       	pop	r29
    5f1a:	08 95       	ret

00005f1c <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    5f1c:	df 93       	push	r29
    5f1e:	cf 93       	push	r28
    5f20:	00 d0       	rcall	.+0      	; 0x5f22 <DIO_void_assign_pin+0x6>
    5f22:	0f 92       	push	r0
    5f24:	cd b7       	in	r28, 0x3d	; 61
    5f26:	de b7       	in	r29, 0x3e	; 62
    5f28:	89 83       	std	Y+1, r24	; 0x01
    5f2a:	6a 83       	std	Y+2, r22	; 0x02
    5f2c:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    5f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    5f30:	88 23       	and	r24, r24
    5f32:	29 f1       	breq	.+74     	; 0x5f7e <DIO_void_assign_pin+0x62>
    5f34:	89 81       	ldd	r24, Y+1	; 0x01
    5f36:	88 2f       	mov	r24, r24
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	88 0f       	add	r24, r24
    5f3c:	99 1f       	adc	r25, r25
    5f3e:	fc 01       	movw	r30, r24
    5f40:	ef 54       	subi	r30, 0x4F	; 79
    5f42:	fe 4f       	sbci	r31, 0xFE	; 254
    5f44:	a0 81       	ld	r26, Z
    5f46:	b1 81       	ldd	r27, Z+1	; 0x01
    5f48:	89 81       	ldd	r24, Y+1	; 0x01
    5f4a:	88 2f       	mov	r24, r24
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	88 0f       	add	r24, r24
    5f50:	99 1f       	adc	r25, r25
    5f52:	fc 01       	movw	r30, r24
    5f54:	ef 54       	subi	r30, 0x4F	; 79
    5f56:	fe 4f       	sbci	r31, 0xFE	; 254
    5f58:	01 90       	ld	r0, Z+
    5f5a:	f0 81       	ld	r31, Z
    5f5c:	e0 2d       	mov	r30, r0
    5f5e:	80 81       	ld	r24, Z
    5f60:	48 2f       	mov	r20, r24
    5f62:	8a 81       	ldd	r24, Y+2	; 0x02
    5f64:	28 2f       	mov	r18, r24
    5f66:	30 e0       	ldi	r19, 0x00	; 0
    5f68:	81 e0       	ldi	r24, 0x01	; 1
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	02 2e       	mov	r0, r18
    5f6e:	02 c0       	rjmp	.+4      	; 0x5f74 <DIO_void_assign_pin+0x58>
    5f70:	88 0f       	add	r24, r24
    5f72:	99 1f       	adc	r25, r25
    5f74:	0a 94       	dec	r0
    5f76:	e2 f7       	brpl	.-8      	; 0x5f70 <DIO_void_assign_pin+0x54>
    5f78:	84 2b       	or	r24, r20
    5f7a:	8c 93       	st	X, r24
    5f7c:	25 c0       	rjmp	.+74     	; 0x5fc8 <DIO_void_assign_pin+0xac>
    5f7e:	89 81       	ldd	r24, Y+1	; 0x01
    5f80:	88 2f       	mov	r24, r24
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	88 0f       	add	r24, r24
    5f86:	99 1f       	adc	r25, r25
    5f88:	fc 01       	movw	r30, r24
    5f8a:	ef 54       	subi	r30, 0x4F	; 79
    5f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f8e:	a0 81       	ld	r26, Z
    5f90:	b1 81       	ldd	r27, Z+1	; 0x01
    5f92:	89 81       	ldd	r24, Y+1	; 0x01
    5f94:	88 2f       	mov	r24, r24
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	88 0f       	add	r24, r24
    5f9a:	99 1f       	adc	r25, r25
    5f9c:	fc 01       	movw	r30, r24
    5f9e:	ef 54       	subi	r30, 0x4F	; 79
    5fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    5fa2:	01 90       	ld	r0, Z+
    5fa4:	f0 81       	ld	r31, Z
    5fa6:	e0 2d       	mov	r30, r0
    5fa8:	80 81       	ld	r24, Z
    5faa:	48 2f       	mov	r20, r24
    5fac:	8a 81       	ldd	r24, Y+2	; 0x02
    5fae:	28 2f       	mov	r18, r24
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	81 e0       	ldi	r24, 0x01	; 1
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	02 2e       	mov	r0, r18
    5fb8:	02 c0       	rjmp	.+4      	; 0x5fbe <DIO_void_assign_pin+0xa2>
    5fba:	88 0f       	add	r24, r24
    5fbc:	99 1f       	adc	r25, r25
    5fbe:	0a 94       	dec	r0
    5fc0:	e2 f7       	brpl	.-8      	; 0x5fba <DIO_void_assign_pin+0x9e>
    5fc2:	80 95       	com	r24
    5fc4:	84 23       	and	r24, r20
    5fc6:	8c 93       	st	X, r24
}
    5fc8:	0f 90       	pop	r0
    5fca:	0f 90       	pop	r0
    5fcc:	0f 90       	pop	r0
    5fce:	cf 91       	pop	r28
    5fd0:	df 91       	pop	r29
    5fd2:	08 95       	ret

00005fd4 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    5fd4:	df 93       	push	r29
    5fd6:	cf 93       	push	r28
    5fd8:	0f 92       	push	r0
    5fda:	cd b7       	in	r28, 0x3d	; 61
    5fdc:	de b7       	in	r29, 0x3e	; 62
    5fde:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    5fe0:	89 81       	ldd	r24, Y+1	; 0x01
    5fe2:	88 2f       	mov	r24, r24
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	88 0f       	add	r24, r24
    5fe8:	99 1f       	adc	r25, r25
    5fea:	fc 01       	movw	r30, r24
    5fec:	ef 55       	subi	r30, 0x5F	; 95
    5fee:	fe 4f       	sbci	r31, 0xFE	; 254
    5ff0:	01 90       	ld	r0, Z+
    5ff2:	f0 81       	ld	r31, Z
    5ff4:	e0 2d       	mov	r30, r0
    5ff6:	80 81       	ld	r24, Z
}
    5ff8:	0f 90       	pop	r0
    5ffa:	cf 91       	pop	r28
    5ffc:	df 91       	pop	r29
    5ffe:	08 95       	ret

00006000 <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    6000:	df 93       	push	r29
    6002:	cf 93       	push	r28
    6004:	00 d0       	rcall	.+0      	; 0x6006 <DIO_u8_get_pin+0x6>
    6006:	cd b7       	in	r28, 0x3d	; 61
    6008:	de b7       	in	r29, 0x3e	; 62
    600a:	89 83       	std	Y+1, r24	; 0x01
    600c:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    600e:	89 81       	ldd	r24, Y+1	; 0x01
    6010:	88 2f       	mov	r24, r24
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	88 0f       	add	r24, r24
    6016:	99 1f       	adc	r25, r25
    6018:	fc 01       	movw	r30, r24
    601a:	ef 55       	subi	r30, 0x5F	; 95
    601c:	fe 4f       	sbci	r31, 0xFE	; 254
    601e:	01 90       	ld	r0, Z+
    6020:	f0 81       	ld	r31, Z
    6022:	e0 2d       	mov	r30, r0
    6024:	80 81       	ld	r24, Z
    6026:	28 2f       	mov	r18, r24
    6028:	30 e0       	ldi	r19, 0x00	; 0
    602a:	8a 81       	ldd	r24, Y+2	; 0x02
    602c:	88 2f       	mov	r24, r24
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	a9 01       	movw	r20, r18
    6032:	02 c0       	rjmp	.+4      	; 0x6038 <DIO_u8_get_pin+0x38>
    6034:	55 95       	asr	r21
    6036:	47 95       	ror	r20
    6038:	8a 95       	dec	r24
    603a:	e2 f7       	brpl	.-8      	; 0x6034 <DIO_u8_get_pin+0x34>
    603c:	ca 01       	movw	r24, r20
    603e:	81 70       	andi	r24, 0x01	; 1
}
    6040:	0f 90       	pop	r0
    6042:	0f 90       	pop	r0
    6044:	cf 91       	pop	r28
    6046:	df 91       	pop	r29
    6048:	08 95       	ret

0000604a <A_DC_sensor_voidInit>:
f64 max_current = A_DC_sensor_Val_flour;


/* Implementing of the driver functions */
// Initiate the sensor through a given ADC channel
void A_DC_sensor_voidInit(u8 copy_u8_ADC_ch){
    604a:	df 93       	push	r29
    604c:	cf 93       	push	r28
    604e:	0f 92       	push	r0
    6050:	cd b7       	in	r28, 0x3d	; 61
    6052:	de b7       	in	r29, 0x3e	; 62
    6054:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	if((copy_u8_ADC_ch == Amp_A0_1) || (copy_u8_ADC_ch == Amp_A2_3)){
    6056:	89 81       	ldd	r24, Y+1	; 0x01
    6058:	8b 30       	cpi	r24, 0x0B	; 11
    605a:	19 f0       	breq	.+6      	; 0x6062 <A_DC_sensor_voidInit+0x18>
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	8f 30       	cpi	r24, 0x0F	; 15
    6060:	51 f4       	brne	.+20     	; 0x6076 <A_DC_sensor_voidInit+0x2c>
		A_DC_sensor_config.MUX = copy_u8_ADC_ch;
    6062:	89 81       	ldd	r24, Y+1	; 0x01
    6064:	8f 71       	andi	r24, 0x1F	; 31
    6066:	98 2f       	mov	r25, r24
    6068:	9f 71       	andi	r25, 0x1F	; 31
    606a:	80 91 b9 01 	lds	r24, 0x01B9
    606e:	80 7e       	andi	r24, 0xE0	; 224
    6070:	89 2b       	or	r24, r25
    6072:	80 93 b9 01 	sts	0x01B9, r24
	}
	else{

	}
	ADC_void_init();
    6076:	0e 94 b3 30 	call	0x6166	; 0x6166 <ADC_void_init>
	max_current = ((Volt_ref*Volt_ref)/Res_ref);
    607a:	80 e0       	ldi	r24, 0x00	; 0
    607c:	90 e0       	ldi	r25, 0x00	; 0
    607e:	aa ef       	ldi	r26, 0xFA	; 250
    6080:	b3 e4       	ldi	r27, 0x43	; 67
    6082:	80 93 c3 01 	sts	0x01C3, r24
    6086:	90 93 c4 01 	sts	0x01C4, r25
    608a:	a0 93 c5 01 	sts	0x01C5, r26
    608e:	b0 93 c6 01 	sts	0x01C6, r27
}
    6092:	0f 90       	pop	r0
    6094:	cf 91       	pop	r28
    6096:	df 91       	pop	r29
    6098:	08 95       	ret

0000609a <A_DC_sensor_voidClcAmps>:

// Calculate the current data and return it
f64 A_DC_sensor_voidClcAmps(void ){
    609a:	df 93       	push	r29
    609c:	cf 93       	push	r28
    609e:	cd b7       	in	r28, 0x3d	; 61
    60a0:	de b7       	in	r29, 0x3e	; 62
    60a2:	29 97       	sbiw	r28, 0x09	; 9
    60a4:	0f b6       	in	r0, 0x3f	; 63
    60a6:	f8 94       	cli
    60a8:	de bf       	out	0x3e, r29	; 62
    60aa:	0f be       	out	0x3f, r0	; 63
    60ac:	cd bf       	out	0x3d, r28	; 61
	/*
	 *
	 */
	u16 currentAccumulator = A_DC_sensor_Val_flour;
    60ae:	1f 82       	std	Y+7, r1	; 0x07
    60b0:	1e 82       	std	Y+6, r1	; 0x06
	u16 current_ADC_data = A_DC_sensor_Val_flour;
    60b2:	19 86       	std	Y+9, r1	; 0x09
    60b4:	18 86       	std	Y+8, r1	; 0x08
	ADC_void_config(&A_DC_sensor_config);
    60b6:	89 eb       	ldi	r24, 0xB9	; 185
    60b8:	91 e0       	ldi	r25, 0x01	; 1
    60ba:	0e 94 d6 30 	call	0x61ac	; 0x61ac <ADC_void_config>
	for(u8 acc_counter= A_DC_sensor_Val_flour; acc_counter < A_DC_sensor_Acc; acc_counter++){
    60be:	19 82       	std	Y+1, r1	; 0x01
    60c0:	0f c0       	rjmp	.+30     	; 0x60e0 <A_DC_sensor_voidClcAmps+0x46>
		ADC_void_read_data(&current_ADC_data);
    60c2:	ce 01       	movw	r24, r28
    60c4:	08 96       	adiw	r24, 0x08	; 8
    60c6:	0e 94 68 31 	call	0x62d0	; 0x62d0 <ADC_void_read_data>
		currentAccumulator+= current_ADC_data;
    60ca:	28 85       	ldd	r18, Y+8	; 0x08
    60cc:	39 85       	ldd	r19, Y+9	; 0x09
    60ce:	8e 81       	ldd	r24, Y+6	; 0x06
    60d0:	9f 81       	ldd	r25, Y+7	; 0x07
    60d2:	82 0f       	add	r24, r18
    60d4:	93 1f       	adc	r25, r19
    60d6:	9f 83       	std	Y+7, r25	; 0x07
    60d8:	8e 83       	std	Y+6, r24	; 0x06
	 *
	 */
	u16 currentAccumulator = A_DC_sensor_Val_flour;
	u16 current_ADC_data = A_DC_sensor_Val_flour;
	ADC_void_config(&A_DC_sensor_config);
	for(u8 acc_counter= A_DC_sensor_Val_flour; acc_counter < A_DC_sensor_Acc; acc_counter++){
    60da:	89 81       	ldd	r24, Y+1	; 0x01
    60dc:	8f 5f       	subi	r24, 0xFF	; 255
    60de:	89 83       	std	Y+1, r24	; 0x01
    60e0:	89 81       	ldd	r24, Y+1	; 0x01
    60e2:	8a 30       	cpi	r24, 0x0A	; 10
    60e4:	70 f3       	brcs	.-36     	; 0x60c2 <A_DC_sensor_voidClcAmps+0x28>
		ADC_void_read_data(&current_ADC_data);
		currentAccumulator+= current_ADC_data;
	}
	current_ADC_data = currentAccumulator/A_DC_sensor_Acc;
    60e6:	8e 81       	ldd	r24, Y+6	; 0x06
    60e8:	9f 81       	ldd	r25, Y+7	; 0x07
    60ea:	2a e0       	ldi	r18, 0x0A	; 10
    60ec:	30 e0       	ldi	r19, 0x00	; 0
    60ee:	b9 01       	movw	r22, r18
    60f0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__udivmodhi4>
    60f4:	cb 01       	movw	r24, r22
    60f6:	99 87       	std	Y+9, r25	; 0x09
    60f8:	88 87       	std	Y+8, r24	; 0x08
	f64 current_data = (current_ADC_data*max_current)/A_DC_sensor_ADC_max;
    60fa:	88 85       	ldd	r24, Y+8	; 0x08
    60fc:	99 85       	ldd	r25, Y+9	; 0x09
    60fe:	cc 01       	movw	r24, r24
    6100:	a0 e0       	ldi	r26, 0x00	; 0
    6102:	b0 e0       	ldi	r27, 0x00	; 0
    6104:	bc 01       	movw	r22, r24
    6106:	cd 01       	movw	r24, r26
    6108:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    610c:	dc 01       	movw	r26, r24
    610e:	cb 01       	movw	r24, r22
    6110:	20 91 c3 01 	lds	r18, 0x01C3
    6114:	30 91 c4 01 	lds	r19, 0x01C4
    6118:	40 91 c5 01 	lds	r20, 0x01C5
    611c:	50 91 c6 01 	lds	r21, 0x01C6
    6120:	bc 01       	movw	r22, r24
    6122:	cd 01       	movw	r24, r26
    6124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6128:	dc 01       	movw	r26, r24
    612a:	cb 01       	movw	r24, r22
    612c:	bc 01       	movw	r22, r24
    612e:	cd 01       	movw	r24, r26
    6130:	20 e0       	ldi	r18, 0x00	; 0
    6132:	30 e0       	ldi	r19, 0x00	; 0
    6134:	40 e8       	ldi	r20, 0x80	; 128
    6136:	54 e4       	ldi	r21, 0x44	; 68
    6138:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    613c:	dc 01       	movw	r26, r24
    613e:	cb 01       	movw	r24, r22
    6140:	8a 83       	std	Y+2, r24	; 0x02
    6142:	9b 83       	std	Y+3, r25	; 0x03
    6144:	ac 83       	std	Y+4, r26	; 0x04
    6146:	bd 83       	std	Y+5, r27	; 0x05
	return current_data;
    6148:	8a 81       	ldd	r24, Y+2	; 0x02
    614a:	9b 81       	ldd	r25, Y+3	; 0x03
    614c:	ac 81       	ldd	r26, Y+4	; 0x04
    614e:	bd 81       	ldd	r27, Y+5	; 0x05
}
    6150:	bc 01       	movw	r22, r24
    6152:	cd 01       	movw	r24, r26
    6154:	29 96       	adiw	r28, 0x09	; 9
    6156:	0f b6       	in	r0, 0x3f	; 63
    6158:	f8 94       	cli
    615a:	de bf       	out	0x3e, r29	; 62
    615c:	0f be       	out	0x3f, r0	; 63
    615e:	cd bf       	out	0x3d, r28	; 61
    6160:	cf 91       	pop	r28
    6162:	df 91       	pop	r29
    6164:	08 95       	ret

00006166 <ADC_void_init>:

//Global variables
static void (*callback_functions_address)(u16 )= NULL;

/* Implementing of the driver functions */
void ADC_void_init(void ){
    6166:	df 93       	push	r29
    6168:	cf 93       	push	r28
    616a:	cd b7       	in	r28, 0x3d	; 61
    616c:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Assign the value of the left adjust bit
	agn_bit(ADC_ADMUX, ADC_ADLAR_pin, ADC_ADLAR);
    616e:	a7 e2       	ldi	r26, 0x27	; 39
    6170:	b0 e0       	ldi	r27, 0x00	; 0
    6172:	e7 e2       	ldi	r30, 0x27	; 39
    6174:	f0 e0       	ldi	r31, 0x00	; 0
    6176:	80 81       	ld	r24, Z
    6178:	8f 7d       	andi	r24, 0xDF	; 223
    617a:	8c 93       	st	X, r24

	// Assign the values of the reference selection regesters
	agn_bit(ADC_ADMUX, ADC_REFS0_pin, ADC_REFS0);
    617c:	a7 e2       	ldi	r26, 0x27	; 39
    617e:	b0 e0       	ldi	r27, 0x00	; 0
    6180:	e7 e2       	ldi	r30, 0x27	; 39
    6182:	f0 e0       	ldi	r31, 0x00	; 0
    6184:	80 81       	ld	r24, Z
    6186:	80 64       	ori	r24, 0x40	; 64
    6188:	8c 93       	st	X, r24
	agn_bit(ADC_ADMUX, ADC_REFS1_pin, ADC_REFS1);
    618a:	a7 e2       	ldi	r26, 0x27	; 39
    618c:	b0 e0       	ldi	r27, 0x00	; 0
    618e:	e7 e2       	ldi	r30, 0x27	; 39
    6190:	f0 e0       	ldi	r31, 0x00	; 0
    6192:	80 81       	ld	r24, Z
    6194:	8f 77       	andi	r24, 0x7F	; 127
    6196:	8c 93       	st	X, r24

	// Assign the value of the enable bit
	agn_bit(ADC_ADCSRA, ADC_ADEN_pin, ADC_ADEN);
    6198:	a6 e2       	ldi	r26, 0x26	; 38
    619a:	b0 e0       	ldi	r27, 0x00	; 0
    619c:	e6 e2       	ldi	r30, 0x26	; 38
    619e:	f0 e0       	ldi	r31, 0x00	; 0
    61a0:	80 81       	ld	r24, Z
    61a2:	80 68       	ori	r24, 0x80	; 128
    61a4:	8c 93       	st	X, r24
}
    61a6:	cf 91       	pop	r28
    61a8:	df 91       	pop	r29
    61aa:	08 95       	ret

000061ac <ADC_void_config>:


void ADC_void_config(ADC_config_struct* ptr_config){
    61ac:	df 93       	push	r29
    61ae:	cf 93       	push	r28
    61b0:	00 d0       	rcall	.+0      	; 0x61b2 <ADC_void_config+0x6>
    61b2:	cd b7       	in	r28, 0x3d	; 61
    61b4:	de b7       	in	r29, 0x3e	; 62
    61b6:	9a 83       	std	Y+2, r25	; 0x02
    61b8:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_config>> Pointer to ADC configurations Struct.
	 *	
	 *	Function does not return any values, Hence it needs to be called every time you need to reconfigure the ADC.
	 */
	// Configure the analog channel and gain selection bits
	ADC_ADMUX &= ADC_MUX_clear;
    61ba:	a7 e2       	ldi	r26, 0x27	; 39
    61bc:	b0 e0       	ldi	r27, 0x00	; 0
    61be:	e7 e2       	ldi	r30, 0x27	; 39
    61c0:	f0 e0       	ldi	r31, 0x00	; 0
    61c2:	80 81       	ld	r24, Z
    61c4:	80 7e       	andi	r24, 0xE0	; 224
    61c6:	8c 93       	st	X, r24
	ADC_ADMUX |= ptr_config -> MUX;
    61c8:	a7 e2       	ldi	r26, 0x27	; 39
    61ca:	b0 e0       	ldi	r27, 0x00	; 0
    61cc:	e7 e2       	ldi	r30, 0x27	; 39
    61ce:	f0 e0       	ldi	r31, 0x00	; 0
    61d0:	90 81       	ld	r25, Z
    61d2:	e9 81       	ldd	r30, Y+1	; 0x01
    61d4:	fa 81       	ldd	r31, Y+2	; 0x02
    61d6:	80 81       	ld	r24, Z
    61d8:	8f 71       	andi	r24, 0x1F	; 31
    61da:	89 2b       	or	r24, r25
    61dc:	8c 93       	st	X, r24

	// Configure the ADC prescaler select bits
	ADC_ADCSRA &= ADC_ADPS_clear;
    61de:	a6 e2       	ldi	r26, 0x26	; 38
    61e0:	b0 e0       	ldi	r27, 0x00	; 0
    61e2:	e6 e2       	ldi	r30, 0x26	; 38
    61e4:	f0 e0       	ldi	r31, 0x00	; 0
    61e6:	80 81       	ld	r24, Z
    61e8:	88 7f       	andi	r24, 0xF8	; 248
    61ea:	8c 93       	st	X, r24
	ADC_ADCSRA |= ptr_config -> ADPS;
    61ec:	a6 e2       	ldi	r26, 0x26	; 38
    61ee:	b0 e0       	ldi	r27, 0x00	; 0
    61f0:	e6 e2       	ldi	r30, 0x26	; 38
    61f2:	f0 e0       	ldi	r31, 0x00	; 0
    61f4:	90 81       	ld	r25, Z
    61f6:	e9 81       	ldd	r30, Y+1	; 0x01
    61f8:	fa 81       	ldd	r31, Y+2	; 0x02
    61fa:	80 81       	ld	r24, Z
    61fc:	82 95       	swap	r24
    61fe:	86 95       	lsr	r24
    6200:	87 70       	andi	r24, 0x07	; 7
    6202:	89 2b       	or	r24, r25
    6204:	8c 93       	st	X, r24

	// Configure the ADC auto trigger source bits
	ADC_SFIOR &= ADC_ADTS_clear;
    6206:	a0 e5       	ldi	r26, 0x50	; 80
    6208:	b0 e0       	ldi	r27, 0x00	; 0
    620a:	e0 e5       	ldi	r30, 0x50	; 80
    620c:	f0 e0       	ldi	r31, 0x00	; 0
    620e:	80 81       	ld	r24, Z
    6210:	8f 71       	andi	r24, 0x1F	; 31
    6212:	8c 93       	st	X, r24
	ADC_SFIOR |= ptr_config -> ADTS;
    6214:	a0 e5       	ldi	r26, 0x50	; 80
    6216:	b0 e0       	ldi	r27, 0x00	; 0
    6218:	e0 e5       	ldi	r30, 0x50	; 80
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	90 81       	ld	r25, Z
    621e:	e9 81       	ldd	r30, Y+1	; 0x01
    6220:	fa 81       	ldd	r31, Y+2	; 0x02
    6222:	81 81       	ldd	r24, Z+1	; 0x01
    6224:	86 95       	lsr	r24
    6226:	87 70       	andi	r24, 0x07	; 7
    6228:	89 2b       	or	r24, r25
    622a:	8c 93       	st	X, r24

	// Configure the ADC auto trigger enable bit
	agn_bit(ADC_ADCSRA, ADC_ADATE_pin, ptr_config -> ADATE);
    622c:	e9 81       	ldd	r30, Y+1	; 0x01
    622e:	fa 81       	ldd	r31, Y+2	; 0x02
    6230:	81 81       	ldd	r24, Z+1	; 0x01
    6232:	81 70       	andi	r24, 0x01	; 1
    6234:	88 23       	and	r24, r24
    6236:	41 f0       	breq	.+16     	; 0x6248 <ADC_void_config+0x9c>
    6238:	a6 e2       	ldi	r26, 0x26	; 38
    623a:	b0 e0       	ldi	r27, 0x00	; 0
    623c:	e6 e2       	ldi	r30, 0x26	; 38
    623e:	f0 e0       	ldi	r31, 0x00	; 0
    6240:	80 81       	ld	r24, Z
    6242:	80 62       	ori	r24, 0x20	; 32
    6244:	8c 93       	st	X, r24
    6246:	07 c0       	rjmp	.+14     	; 0x6256 <ADC_void_config+0xaa>
    6248:	a6 e2       	ldi	r26, 0x26	; 38
    624a:	b0 e0       	ldi	r27, 0x00	; 0
    624c:	e6 e2       	ldi	r30, 0x26	; 38
    624e:	f0 e0       	ldi	r31, 0x00	; 0
    6250:	80 81       	ld	r24, Z
    6252:	8f 7d       	andi	r24, 0xDF	; 223
    6254:	8c 93       	st	X, r24

	// Configure the ADC interrupt enable bit
	agn_bit(ADC_ADCSRA, ADC_ADIE_pin, ptr_config -> ADIE);
    6256:	e9 81       	ldd	r30, Y+1	; 0x01
    6258:	fa 81       	ldd	r31, Y+2	; 0x02
    625a:	81 81       	ldd	r24, Z+1	; 0x01
    625c:	80 71       	andi	r24, 0x10	; 16
    625e:	88 23       	and	r24, r24
    6260:	41 f0       	breq	.+16     	; 0x6272 <ADC_void_config+0xc6>
    6262:	a6 e2       	ldi	r26, 0x26	; 38
    6264:	b0 e0       	ldi	r27, 0x00	; 0
    6266:	e6 e2       	ldi	r30, 0x26	; 38
    6268:	f0 e0       	ldi	r31, 0x00	; 0
    626a:	80 81       	ld	r24, Z
    626c:	88 60       	ori	r24, 0x08	; 8
    626e:	8c 93       	st	X, r24
    6270:	07 c0       	rjmp	.+14     	; 0x6280 <ADC_void_config+0xd4>
    6272:	a6 e2       	ldi	r26, 0x26	; 38
    6274:	b0 e0       	ldi	r27, 0x00	; 0
    6276:	e6 e2       	ldi	r30, 0x26	; 38
    6278:	f0 e0       	ldi	r31, 0x00	; 0
    627a:	80 81       	ld	r24, Z
    627c:	87 7f       	andi	r24, 0xF7	; 247
    627e:	8c 93       	st	X, r24

	// Configure the Global interupt bit
	agn_bit(ADC_SREG, ADC_Global_INT, ptr_config -> ADIE);
    6280:	e9 81       	ldd	r30, Y+1	; 0x01
    6282:	fa 81       	ldd	r31, Y+2	; 0x02
    6284:	81 81       	ldd	r24, Z+1	; 0x01
    6286:	80 71       	andi	r24, 0x10	; 16
    6288:	88 23       	and	r24, r24
    628a:	41 f0       	breq	.+16     	; 0x629c <ADC_void_config+0xf0>
    628c:	af e5       	ldi	r26, 0x5F	; 95
    628e:	b0 e0       	ldi	r27, 0x00	; 0
    6290:	ef e5       	ldi	r30, 0x5F	; 95
    6292:	f0 e0       	ldi	r31, 0x00	; 0
    6294:	80 81       	ld	r24, Z
    6296:	80 68       	ori	r24, 0x80	; 128
    6298:	8c 93       	st	X, r24
    629a:	07 c0       	rjmp	.+14     	; 0x62aa <ADC_void_config+0xfe>
    629c:	af e5       	ldi	r26, 0x5F	; 95
    629e:	b0 e0       	ldi	r27, 0x00	; 0
    62a0:	ef e5       	ldi	r30, 0x5F	; 95
    62a2:	f0 e0       	ldi	r31, 0x00	; 0
    62a4:	80 81       	ld	r24, Z
    62a6:	8f 77       	andi	r24, 0x7F	; 127
    62a8:	8c 93       	st	X, r24
}
    62aa:	0f 90       	pop	r0
    62ac:	0f 90       	pop	r0
    62ae:	cf 91       	pop	r28
    62b0:	df 91       	pop	r29
    62b2:	08 95       	ret

000062b4 <ADC_void_start_conv>:

void ADC_void_start_conv(void){
    62b4:	df 93       	push	r29
    62b6:	cf 93       	push	r28
    62b8:	cd b7       	in	r28, 0x3d	; 61
    62ba:	de b7       	in	r29, 0x3e	; 62
	 *	No inputs to the function.
	 *
	 *	No return from the function.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    62bc:	a6 e2       	ldi	r26, 0x26	; 38
    62be:	b0 e0       	ldi	r27, 0x00	; 0
    62c0:	e6 e2       	ldi	r30, 0x26	; 38
    62c2:	f0 e0       	ldi	r31, 0x00	; 0
    62c4:	80 81       	ld	r24, Z
    62c6:	80 64       	ori	r24, 0x40	; 64
    62c8:	8c 93       	st	X, r24
}
    62ca:	cf 91       	pop	r28
    62cc:	df 91       	pop	r29
    62ce:	08 95       	ret

000062d0 <ADC_void_read_data>:

void ADC_void_read_data(u16* ptr_result){
    62d0:	df 93       	push	r29
    62d2:	cf 93       	push	r28
    62d4:	00 d0       	rcall	.+0      	; 0x62d6 <ADC_void_read_data+0x6>
    62d6:	cd b7       	in	r28, 0x3d	; 61
    62d8:	de b7       	in	r29, 0x3e	; 62
    62da:	9a 83       	std	Y+2, r25	; 0x02
    62dc:	89 83       	std	Y+1, r24	; 0x01
	 *		ptr_result>> pointer to the ADC value container variable.
	 *	
	 *	Function does not retuen any data, Hence it needs to be called when a value update is needed.
	 */
	// Enable ADC start conversion bit
	agn_bit(ADC_ADCSRA, ADC_ADSC_pin, ADC_ADSC);
    62de:	a6 e2       	ldi	r26, 0x26	; 38
    62e0:	b0 e0       	ldi	r27, 0x00	; 0
    62e2:	e6 e2       	ldi	r30, 0x26	; 38
    62e4:	f0 e0       	ldi	r31, 0x00	; 0
    62e6:	80 81       	ld	r24, Z
    62e8:	80 64       	ori	r24, 0x40	; 64
    62ea:	8c 93       	st	X, r24

	// Polling on the ADC interrupt flag bit
	while(get_bit(ADC_ADCSRA, ADC_ADIF_pin) == 0);
    62ec:	e6 e2       	ldi	r30, 0x26	; 38
    62ee:	f0 e0       	ldi	r31, 0x00	; 0
    62f0:	80 81       	ld	r24, Z
    62f2:	82 95       	swap	r24
    62f4:	8f 70       	andi	r24, 0x0F	; 15
    62f6:	88 2f       	mov	r24, r24
    62f8:	90 e0       	ldi	r25, 0x00	; 0
    62fa:	81 70       	andi	r24, 0x01	; 1
    62fc:	90 70       	andi	r25, 0x00	; 0
    62fe:	00 97       	sbiw	r24, 0x00	; 0
    6300:	a9 f3       	breq	.-22     	; 0x62ec <ADC_void_read_data+0x1c>

	// Resit the ADC interrupt flag bit
	set_bit(ADC_ADCSRA, ADC_ADIF_pin);
    6302:	a6 e2       	ldi	r26, 0x26	; 38
    6304:	b0 e0       	ldi	r27, 0x00	; 0
    6306:	e6 e2       	ldi	r30, 0x26	; 38
    6308:	f0 e0       	ldi	r31, 0x00	; 0
    630a:	80 81       	ld	r24, Z
    630c:	80 61       	ori	r24, 0x10	; 16
    630e:	8c 93       	st	X, r24

	// Return the digital value
	*(ptr_result)= ADC_ADCD_16bit;
    6310:	e4 e2       	ldi	r30, 0x24	; 36
    6312:	f0 e0       	ldi	r31, 0x00	; 0
    6314:	80 81       	ld	r24, Z
    6316:	91 81       	ldd	r25, Z+1	; 0x01
    6318:	e9 81       	ldd	r30, Y+1	; 0x01
    631a:	fa 81       	ldd	r31, Y+2	; 0x02
    631c:	91 83       	std	Z+1, r25	; 0x01
    631e:	80 83       	st	Z, r24
}
    6320:	0f 90       	pop	r0
    6322:	0f 90       	pop	r0
    6324:	cf 91       	pop	r28
    6326:	df 91       	pop	r29
    6328:	08 95       	ret

0000632a <ADC_void_INIT_callback>:


void ADC_void_INIT_callback(void (*ptr_callback_function)(u16 ) ){
    632a:	df 93       	push	r29
    632c:	cf 93       	push	r28
    632e:	00 d0       	rcall	.+0      	; 0x6330 <ADC_void_INIT_callback+0x6>
    6330:	cd b7       	in	r28, 0x3d	; 61
    6332:	de b7       	in	r29, 0x3e	; 62
    6334:	9a 83       	std	Y+2, r25	; 0x02
    6336:	89 83       	std	Y+1, r24	; 0x01
	 *	Inputs::
	 *		ptr_callback_function>> pointer to the callback function.
	 *
	 *	Function does not return any value and anly called when addressing the callback function.
	 */
	callback_functions_address= ptr_callback_function;
    6338:	89 81       	ldd	r24, Y+1	; 0x01
    633a:	9a 81       	ldd	r25, Y+2	; 0x02
    633c:	90 93 c8 01 	sts	0x01C8, r25
    6340:	80 93 c7 01 	sts	0x01C7, r24
}
    6344:	0f 90       	pop	r0
    6346:	0f 90       	pop	r0
    6348:	cf 91       	pop	r28
    634a:	df 91       	pop	r29
    634c:	08 95       	ret

0000634e <__vector_16>:

void __vector_16(void){
    634e:	1f 92       	push	r1
    6350:	0f 92       	push	r0
    6352:	0f b6       	in	r0, 0x3f	; 63
    6354:	0f 92       	push	r0
    6356:	11 24       	eor	r1, r1
    6358:	2f 93       	push	r18
    635a:	3f 93       	push	r19
    635c:	4f 93       	push	r20
    635e:	5f 93       	push	r21
    6360:	6f 93       	push	r22
    6362:	7f 93       	push	r23
    6364:	8f 93       	push	r24
    6366:	9f 93       	push	r25
    6368:	af 93       	push	r26
    636a:	bf 93       	push	r27
    636c:	ef 93       	push	r30
    636e:	ff 93       	push	r31
    6370:	df 93       	push	r29
    6372:	cf 93       	push	r28
    6374:	cd b7       	in	r28, 0x3d	; 61
    6376:	de b7       	in	r29, 0x3e	; 62
	/*
	 *	ADC flag ISR
	 */
	if(callback_functions_address != NULL){
    6378:	80 91 c7 01 	lds	r24, 0x01C7
    637c:	90 91 c8 01 	lds	r25, 0x01C8
    6380:	00 97       	sbiw	r24, 0x00	; 0
    6382:	49 f0       	breq	.+18     	; 0x6396 <__vector_16+0x48>
		callback_functions_address(ADC_ADCD_16bit);
    6384:	e0 91 c7 01 	lds	r30, 0x01C7
    6388:	f0 91 c8 01 	lds	r31, 0x01C8
    638c:	a4 e2       	ldi	r26, 0x24	; 36
    638e:	b0 e0       	ldi	r27, 0x00	; 0
    6390:	8d 91       	ld	r24, X+
    6392:	9c 91       	ld	r25, X
    6394:	09 95       	icall
	}
}
    6396:	cf 91       	pop	r28
    6398:	df 91       	pop	r29
    639a:	ff 91       	pop	r31
    639c:	ef 91       	pop	r30
    639e:	bf 91       	pop	r27
    63a0:	af 91       	pop	r26
    63a2:	9f 91       	pop	r25
    63a4:	8f 91       	pop	r24
    63a6:	7f 91       	pop	r23
    63a8:	6f 91       	pop	r22
    63aa:	5f 91       	pop	r21
    63ac:	4f 91       	pop	r20
    63ae:	3f 91       	pop	r19
    63b0:	2f 91       	pop	r18
    63b2:	0f 90       	pop	r0
    63b4:	0f be       	out	0x3f, r0	; 63
    63b6:	0f 90       	pop	r0
    63b8:	1f 90       	pop	r1
    63ba:	18 95       	reti

000063bc <__mulsi3>:
    63bc:	62 9f       	mul	r22, r18
    63be:	d0 01       	movw	r26, r0
    63c0:	73 9f       	mul	r23, r19
    63c2:	f0 01       	movw	r30, r0
    63c4:	82 9f       	mul	r24, r18
    63c6:	e0 0d       	add	r30, r0
    63c8:	f1 1d       	adc	r31, r1
    63ca:	64 9f       	mul	r22, r20
    63cc:	e0 0d       	add	r30, r0
    63ce:	f1 1d       	adc	r31, r1
    63d0:	92 9f       	mul	r25, r18
    63d2:	f0 0d       	add	r31, r0
    63d4:	83 9f       	mul	r24, r19
    63d6:	f0 0d       	add	r31, r0
    63d8:	74 9f       	mul	r23, r20
    63da:	f0 0d       	add	r31, r0
    63dc:	65 9f       	mul	r22, r21
    63de:	f0 0d       	add	r31, r0
    63e0:	99 27       	eor	r25, r25
    63e2:	72 9f       	mul	r23, r18
    63e4:	b0 0d       	add	r27, r0
    63e6:	e1 1d       	adc	r30, r1
    63e8:	f9 1f       	adc	r31, r25
    63ea:	63 9f       	mul	r22, r19
    63ec:	b0 0d       	add	r27, r0
    63ee:	e1 1d       	adc	r30, r1
    63f0:	f9 1f       	adc	r31, r25
    63f2:	bd 01       	movw	r22, r26
    63f4:	cf 01       	movw	r24, r30
    63f6:	11 24       	eor	r1, r1
    63f8:	08 95       	ret

000063fa <__udivmodhi4>:
    63fa:	aa 1b       	sub	r26, r26
    63fc:	bb 1b       	sub	r27, r27
    63fe:	51 e1       	ldi	r21, 0x11	; 17
    6400:	07 c0       	rjmp	.+14     	; 0x6410 <__udivmodhi4_ep>

00006402 <__udivmodhi4_loop>:
    6402:	aa 1f       	adc	r26, r26
    6404:	bb 1f       	adc	r27, r27
    6406:	a6 17       	cp	r26, r22
    6408:	b7 07       	cpc	r27, r23
    640a:	10 f0       	brcs	.+4      	; 0x6410 <__udivmodhi4_ep>
    640c:	a6 1b       	sub	r26, r22
    640e:	b7 0b       	sbc	r27, r23

00006410 <__udivmodhi4_ep>:
    6410:	88 1f       	adc	r24, r24
    6412:	99 1f       	adc	r25, r25
    6414:	5a 95       	dec	r21
    6416:	a9 f7       	brne	.-22     	; 0x6402 <__udivmodhi4_loop>
    6418:	80 95       	com	r24
    641a:	90 95       	com	r25
    641c:	bc 01       	movw	r22, r24
    641e:	cd 01       	movw	r24, r26
    6420:	08 95       	ret

00006422 <__divmodsi4>:
    6422:	97 fb       	bst	r25, 7
    6424:	09 2e       	mov	r0, r25
    6426:	05 26       	eor	r0, r21
    6428:	0e d0       	rcall	.+28     	; 0x6446 <__divmodsi4_neg1>
    642a:	57 fd       	sbrc	r21, 7
    642c:	04 d0       	rcall	.+8      	; 0x6436 <__divmodsi4_neg2>
    642e:	14 d0       	rcall	.+40     	; 0x6458 <__udivmodsi4>
    6430:	0a d0       	rcall	.+20     	; 0x6446 <__divmodsi4_neg1>
    6432:	00 1c       	adc	r0, r0
    6434:	38 f4       	brcc	.+14     	; 0x6444 <__divmodsi4_exit>

00006436 <__divmodsi4_neg2>:
    6436:	50 95       	com	r21
    6438:	40 95       	com	r20
    643a:	30 95       	com	r19
    643c:	21 95       	neg	r18
    643e:	3f 4f       	sbci	r19, 0xFF	; 255
    6440:	4f 4f       	sbci	r20, 0xFF	; 255
    6442:	5f 4f       	sbci	r21, 0xFF	; 255

00006444 <__divmodsi4_exit>:
    6444:	08 95       	ret

00006446 <__divmodsi4_neg1>:
    6446:	f6 f7       	brtc	.-4      	; 0x6444 <__divmodsi4_exit>
    6448:	90 95       	com	r25
    644a:	80 95       	com	r24
    644c:	70 95       	com	r23
    644e:	61 95       	neg	r22
    6450:	7f 4f       	sbci	r23, 0xFF	; 255
    6452:	8f 4f       	sbci	r24, 0xFF	; 255
    6454:	9f 4f       	sbci	r25, 0xFF	; 255
    6456:	08 95       	ret

00006458 <__udivmodsi4>:
    6458:	a1 e2       	ldi	r26, 0x21	; 33
    645a:	1a 2e       	mov	r1, r26
    645c:	aa 1b       	sub	r26, r26
    645e:	bb 1b       	sub	r27, r27
    6460:	fd 01       	movw	r30, r26
    6462:	0d c0       	rjmp	.+26     	; 0x647e <__udivmodsi4_ep>

00006464 <__udivmodsi4_loop>:
    6464:	aa 1f       	adc	r26, r26
    6466:	bb 1f       	adc	r27, r27
    6468:	ee 1f       	adc	r30, r30
    646a:	ff 1f       	adc	r31, r31
    646c:	a2 17       	cp	r26, r18
    646e:	b3 07       	cpc	r27, r19
    6470:	e4 07       	cpc	r30, r20
    6472:	f5 07       	cpc	r31, r21
    6474:	20 f0       	brcs	.+8      	; 0x647e <__udivmodsi4_ep>
    6476:	a2 1b       	sub	r26, r18
    6478:	b3 0b       	sbc	r27, r19
    647a:	e4 0b       	sbc	r30, r20
    647c:	f5 0b       	sbc	r31, r21

0000647e <__udivmodsi4_ep>:
    647e:	66 1f       	adc	r22, r22
    6480:	77 1f       	adc	r23, r23
    6482:	88 1f       	adc	r24, r24
    6484:	99 1f       	adc	r25, r25
    6486:	1a 94       	dec	r1
    6488:	69 f7       	brne	.-38     	; 0x6464 <__udivmodsi4_loop>
    648a:	60 95       	com	r22
    648c:	70 95       	com	r23
    648e:	80 95       	com	r24
    6490:	90 95       	com	r25
    6492:	9b 01       	movw	r18, r22
    6494:	ac 01       	movw	r20, r24
    6496:	bd 01       	movw	r22, r26
    6498:	cf 01       	movw	r24, r30
    649a:	08 95       	ret

0000649c <__prologue_saves__>:
    649c:	2f 92       	push	r2
    649e:	3f 92       	push	r3
    64a0:	4f 92       	push	r4
    64a2:	5f 92       	push	r5
    64a4:	6f 92       	push	r6
    64a6:	7f 92       	push	r7
    64a8:	8f 92       	push	r8
    64aa:	9f 92       	push	r9
    64ac:	af 92       	push	r10
    64ae:	bf 92       	push	r11
    64b0:	cf 92       	push	r12
    64b2:	df 92       	push	r13
    64b4:	ef 92       	push	r14
    64b6:	ff 92       	push	r15
    64b8:	0f 93       	push	r16
    64ba:	1f 93       	push	r17
    64bc:	cf 93       	push	r28
    64be:	df 93       	push	r29
    64c0:	cd b7       	in	r28, 0x3d	; 61
    64c2:	de b7       	in	r29, 0x3e	; 62
    64c4:	ca 1b       	sub	r28, r26
    64c6:	db 0b       	sbc	r29, r27
    64c8:	0f b6       	in	r0, 0x3f	; 63
    64ca:	f8 94       	cli
    64cc:	de bf       	out	0x3e, r29	; 62
    64ce:	0f be       	out	0x3f, r0	; 63
    64d0:	cd bf       	out	0x3d, r28	; 61
    64d2:	09 94       	ijmp

000064d4 <__epilogue_restores__>:
    64d4:	2a 88       	ldd	r2, Y+18	; 0x12
    64d6:	39 88       	ldd	r3, Y+17	; 0x11
    64d8:	48 88       	ldd	r4, Y+16	; 0x10
    64da:	5f 84       	ldd	r5, Y+15	; 0x0f
    64dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    64de:	7d 84       	ldd	r7, Y+13	; 0x0d
    64e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    64e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    64e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    64e6:	b9 84       	ldd	r11, Y+9	; 0x09
    64e8:	c8 84       	ldd	r12, Y+8	; 0x08
    64ea:	df 80       	ldd	r13, Y+7	; 0x07
    64ec:	ee 80       	ldd	r14, Y+6	; 0x06
    64ee:	fd 80       	ldd	r15, Y+5	; 0x05
    64f0:	0c 81       	ldd	r16, Y+4	; 0x04
    64f2:	1b 81       	ldd	r17, Y+3	; 0x03
    64f4:	aa 81       	ldd	r26, Y+2	; 0x02
    64f6:	b9 81       	ldd	r27, Y+1	; 0x01
    64f8:	ce 0f       	add	r28, r30
    64fa:	d1 1d       	adc	r29, r1
    64fc:	0f b6       	in	r0, 0x3f	; 63
    64fe:	f8 94       	cli
    6500:	de bf       	out	0x3e, r29	; 62
    6502:	0f be       	out	0x3f, r0	; 63
    6504:	cd bf       	out	0x3d, r28	; 61
    6506:	ed 01       	movw	r28, r26
    6508:	08 95       	ret

0000650a <_exit>:
    650a:	f8 94       	cli

0000650c <__stop_program>:
    650c:	ff cf       	rjmp	.-2      	; 0x650c <__stop_program>
