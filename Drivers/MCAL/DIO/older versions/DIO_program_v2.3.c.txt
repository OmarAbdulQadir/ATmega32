/*******************************************************************/
/***               Date: 2/5/2023	Day: Tuesday                 ***/
/***    Digital I/O driver for the microcontroller ATMega 32     ***/
/***     Created By: Omar Abdul Qadir	 Version= 2.3            ***/
/*******************************************************************/
/***         Note: All the data in the file is readable,         ***/
/***     And any editing will affect the controller's behavior,  ***/
/***          So It's not recommended to edit any data,          ***/
/***   Unless you are sure of what is the effect on behaviors.   ***/
/*******************************************************************/

//Standard libraries Section
#include "../../../LIB/BIT_MATH.h"
#include "../../../LIB/STD_TYPES.h"

//Private libraries Section
#include "DIO_register.h"
#include "DIO_interface.h"
#include "DIO_private.h"


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 port_id_copy, u8 port_dir_copy)
{
	/* Function set given port to a given direction
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
			port_dir_copy>> port direction in Dec, Hex or binary
							Ex: 0b00001111
							0: for input pin
							1: for output pin
		
		Function does not return any output, yet it affects the 
		PORT Direction Register DDRx							   */
	if(port_dir_copy){
		DDRx_VAL(port_id_copy) = PORT_OUT;
	}
	else{
		DDRx_VAL(port_id_copy) = INPUT;
		PORTx_VAL(port_id_copy) = LOW;
	}
}


void DIO_void_set_port_in_pullUp(u8 port_id_copy)
{
	/* Function set given port to be input pull up
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
		
		Function does not return any output, yet it affects the 
		PORT Direction Register DDRx							   */
	DDRx_VAL(port_id_copy) = INPUT;
	PORTx_VAL(port_id_copy) = PORT_MAX;
}


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 port_id_copy, u8 pin_num_copy, u8 pin_dir_copy)
{
	/* Function set given pin to a given direction
	Inputs::
		port_id_copy>> port indicator as folloing (0, PORTA)
												  (1, PORTB)
												  (2, PORTC)
												  (3, PORTD)
		pin_num_copy>> pin number that needed to be set 0-7
		pin_dir_copy>> pin direction set as folloing
					   0: for input pin
					   1: for output pin
	
	Function does not return any output, yet it affects the 
	pin in the PORT Direction Register DDRx						   */	
	if(pin_dir_copy)
		agn_bit(DDRx_VAL(port_id_copy), pin_num_copy, pin_dir_copy);
	else
		agn_bit(DDRx_VAL(port_id_copy), pin_num_copy, pin_dir_copy);
		clr_bit(PORTx_VAL(port_id_copy), pin_num_copy);
}


void DIO_void_set_pin_in_pullUP(u8 port_id_copy, u8 pin_num_copy)
{
	/* Function set given pin to be input pull up
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
		
		Function does not return any output, yet it affects the 
		pin in the PORT Direction Register DDRx					   */
	clr_bit(DDRx_VAL(port_id_copy), pin_num_copy);
	set_bit(PORTx_VAL(port_id_copy), pin_num_copy);
}


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 port_id_copy)
{
	/* Function set given port to high
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
		
		Function does not return any output, yet it affects the 
		PORT output Register PORTx							       */
	PORTx_VAL(port_id_copy) = PORT_MAX;
}


void DIO_void_clear_port(u8 port_id_copy)
{
	/* Function set given port to LOW
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
		
		Function does not return any output, yet it affects the 
		PORT output Register PORTx							       */
	PORTx_VAL(port_id_copy) = LOW;
}


void DIO_void_toggle_port(u8 port_id_copy)
{
	/* Function toggle all pins of given port
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
		
		Function does not return any output, yet it affects the 
		PORT output Register PORTx							       */
	PORTx_VAL(port_id_copy) ^= PORT_MAX;
}


void DIO_void_assign_port(u8 port_id_copy, u8 port_val)
{
		/* Function assign value to given port
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
		
		Function does not return any output, yet it affects the 
		PORT output Register PORTx							       */
	PORTx_VAL(port_id_copy) = port_val;
}


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 port_id_copy, u8 pin_num_copy)
{
	/* Function set given pin to high
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
			pin_num_copy>> pin number that needed to be set 0-7
		
		Function does not return any output, yet it affects 
		given pin of the PORT output Register PORTx				   */
	set_bit(PORTx_VAL(port_id_copy), pin_num_copy);
}


void DIO_void_clear_pin(u8 port_id_copy, u8 pin_num_copy)
{
	/* Function set given pin to LOW
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
			pin_num_copy>> pin number that needed to be set 0-7
		
		Function does not return any output, yet it affects 
		given pin of the PORT output Register PORTx				   */
	clr_bit(PORTx_VAL(port_id_copy), pin_num_copy);
}


void DIO_void_toggle_pin(u8 port_id_copy, u8 pin_num_copy)
{
	/* Function toggle given pin
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
			pin_num_copy>> pin number that needed to be set 0-7
		
		Function does not return any output, yet it affects 
		given pin of the PORT output Register PORTx				   */
	tgl_bit(PORTx_VAL(port_id_copy), pin_num_copy);
}


void DIO_void_assign_pin(u8 port_id_copy, u8 pin_num_copy, u8 pin_val)
{
	/* Function assign value to given pin
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
			pin_num_copy>> pin number that needed to be set 0-7
		
		Function does not return any output, yet it affects 
		given pin of the PORT output Register PORTx				   */
	agn_bit(PORTx_VAL(port_id_copy), pin_num_copy, pin_val);
}


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 port_id_copy)
{
	/* Function gets the value of a given port
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
		
		outputs::
			port_val_copy>> copy of the register PINx value
							size: 1 Byte - u8
		
		Function does not affect any regester it only gets
		from the value in the input regester PINx of the 
		given port                                                 */
	u8 port_val_copy = PINx_VAL(port_id_copy);
	return port_val_copy;
}


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 port_id_copy, u8 pin_num_copy)
{
	/* Function gets the value of a given pin
		Inputs::
			port_id_copy>> port indicator as folloing (0, PORTA)
													  (1, PORTB)
													  (2, PORTC)
													  (3, PORTD)
			pin_num_copy>> pin number that needed to be set 0-7
		
		outputs::
			pin_val_copy>> copy of the register PINx value
							size: 1 Byte - u8
							values: 0 for LOW, 1 for HIGH
		
		Function does not affect any regester it only gets the pin
		value from the value in the input regester PINx of the 
		given port                                                 */
	u8 pin_val_copy = get_bit(PINx_VAL(port_id_copy), pin_num_copy);
	return pin_val_copy;
}
