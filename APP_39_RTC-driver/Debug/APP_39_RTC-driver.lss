
APP_39_RTC-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00006798  0000682c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001ca  008001ca  00006996  2**0
                  ALLOC
  3 .stab         00004b48  00000000  00000000  00006998  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174e  00000000  00000000  0000b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000cc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000cdce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000cfbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000f3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00010741  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001191c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00011adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00011dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001279d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5a 30 	jmp	0x60b4	; 0x60b4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f7 e6       	ldi	r31, 0x67	; 103
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <main>
      8a:	0c 94 ca 33 	jmp	0x6794	; 0x6794 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 93 33 	jmp	0x6726	; 0x6726 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e9       	ldi	r26, 0x96	; 150
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 af 33 	jmp	0x675e	; 0x675e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9f 33 	jmp	0x673e	; 0x673e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9f 33 	jmp	0x673e	; 0x673e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 93 33 	jmp	0x6726	; 0x6726 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e9       	ldi	r24, 0x96	; 150
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 af 33 	jmp	0x675e	; 0x675e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 33 	jmp	0x6736	; 0x6736 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e9       	ldi	r22, 0x96	; 150
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b7 33 	jmp	0x676e	; 0x676e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9f 33 	jmp	0x673e	; 0x673e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9f 33 	jmp	0x673e	; 0x673e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9f 33 	jmp	0x673e	; 0x673e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9c 33 	jmp	0x6738	; 0x6738 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 b8 33 	jmp	0x6770	; 0x6770 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a3 33 	jmp	0x6746	; 0x6746 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 bf 33 	jmp	0x677e	; 0x677e <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e2 56       	subi	r30, 0x62	; 98
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <main>:
typedef struct{

}dateTime;
*/

int main(void){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	e0 97       	sbiw	r28, 0x30	; 48
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
	// setup section
	I2C_void_master_init(100);
     e0c:	84 e6       	ldi	r24, 0x64	; 100
     e0e:	0e 94 14 2a 	call	0x5428	; 0x5428 <I2C_void_master_init>
	u8 RTC_frame[] = {0xD0, 0x00, 254, 0xD1, 7, 255};
     e12:	ce 01       	movw	r24, r28
     e14:	42 96       	adiw	r24, 0x12	; 18
     e16:	98 a7       	std	Y+40, r25	; 0x28
     e18:	8f a3       	std	Y+39, r24	; 0x27
     e1a:	e4 ec       	ldi	r30, 0xC4	; 196
     e1c:	f1 e0       	ldi	r31, 0x01	; 1
     e1e:	fa a7       	std	Y+42, r31	; 0x2a
     e20:	e9 a7       	std	Y+41, r30	; 0x29
     e22:	f6 e0       	ldi	r31, 0x06	; 6
     e24:	fb a7       	std	Y+43, r31	; 0x2b
     e26:	e9 a5       	ldd	r30, Y+41	; 0x29
     e28:	fa a5       	ldd	r31, Y+42	; 0x2a
     e2a:	00 80       	ld	r0, Z
     e2c:	89 a5       	ldd	r24, Y+41	; 0x29
     e2e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	9a a7       	std	Y+42, r25	; 0x2a
     e34:	89 a7       	std	Y+41, r24	; 0x29
     e36:	ef a1       	ldd	r30, Y+39	; 0x27
     e38:	f8 a5       	ldd	r31, Y+40	; 0x28
     e3a:	00 82       	st	Z, r0
     e3c:	8f a1       	ldd	r24, Y+39	; 0x27
     e3e:	98 a5       	ldd	r25, Y+40	; 0x28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	98 a7       	std	Y+40, r25	; 0x28
     e44:	8f a3       	std	Y+39, r24	; 0x27
     e46:	9b a5       	ldd	r25, Y+43	; 0x2b
     e48:	91 50       	subi	r25, 0x01	; 1
     e4a:	9b a7       	std	Y+43, r25	; 0x2b
     e4c:	eb a5       	ldd	r30, Y+43	; 0x2b
     e4e:	ee 23       	and	r30, r30
     e50:	51 f7       	brne	.-44     	; 0xe26 <main+0x2e>
	 * 0xD1: SLA+R
	 * 7   : Number of bytes to read
	 * 255 : end frame code
	 */

	I2C_void_master_start_comm(RTC_frame);
     e52:	ce 01       	movw	r24, r28
     e54:	42 96       	adiw	r24, 0x12	; 18
     e56:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <I2C_void_master_start_comm>

	LCD_init();
     e5a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <LCD_init>
	LCD_write_str((u8*)"Starting...");
     e5e:	8a e8       	ldi	r24, 0x8A	; 138
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <LCD_write_str>

	DIO_void_set_pin_in_pullUP(DIO_REF_PORTD, B0);
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	0e 94 53 31 	call	0x62a6	; 0x62a6 <DIO_void_set_pin_in_pullUP>
	u8* RTC_data;
	RTC_data = I2C_u8_ptr_get_buffered_frame();
     e6e:	0e 94 2b 30 	call	0x6056	; 0x6056 <I2C_u8_ptr_get_buffered_frame>
     e72:	99 8b       	std	Y+17, r25	; 0x11
     e74:	88 8b       	std	Y+16, r24	; 0x10
	u8* RTC_dataType[7] = {(u8*)"Seconds", (u8*)"Minutes", (u8*)"Hours", (u8*)"Day", (u8*)"Date", (u8*)"Month", (u8*)"Year"};
     e76:	ce 01       	movw	r24, r28
     e78:	48 96       	adiw	r24, 0x18	; 24
     e7a:	9d a7       	std	Y+45, r25	; 0x2d
     e7c:	8c a7       	std	Y+44, r24	; 0x2c
     e7e:	e6 eb       	ldi	r30, 0xB6	; 182
     e80:	f1 e0       	ldi	r31, 0x01	; 1
     e82:	ff a7       	std	Y+47, r31	; 0x2f
     e84:	ee a7       	std	Y+46, r30	; 0x2e
     e86:	fe e0       	ldi	r31, 0x0E	; 14
     e88:	f8 ab       	std	Y+48, r31	; 0x30
     e8a:	ee a5       	ldd	r30, Y+46	; 0x2e
     e8c:	ff a5       	ldd	r31, Y+47	; 0x2f
     e8e:	00 80       	ld	r0, Z
     e90:	8e a5       	ldd	r24, Y+46	; 0x2e
     e92:	9f a5       	ldd	r25, Y+47	; 0x2f
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	9f a7       	std	Y+47, r25	; 0x2f
     e98:	8e a7       	std	Y+46, r24	; 0x2e
     e9a:	ec a5       	ldd	r30, Y+44	; 0x2c
     e9c:	fd a5       	ldd	r31, Y+45	; 0x2d
     e9e:	00 82       	st	Z, r0
     ea0:	8c a5       	ldd	r24, Y+44	; 0x2c
     ea2:	9d a5       	ldd	r25, Y+45	; 0x2d
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	9d a7       	std	Y+45, r25	; 0x2d
     ea8:	8c a7       	std	Y+44, r24	; 0x2c
     eaa:	98 a9       	ldd	r25, Y+48	; 0x30
     eac:	91 50       	subi	r25, 0x01	; 1
     eae:	98 ab       	std	Y+48, r25	; 0x30
     eb0:	e8 a9       	ldd	r30, Y+48	; 0x30
     eb2:	ee 23       	and	r30, r30
     eb4:	51 f7       	brne	.-44     	; 0xe8a <main+0x92>

	u8 RTC_dataCounter = 0;
     eb6:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_set_cursor(0,0);
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_set_cursor>
	LCD_write_str(RTC_dataType[RTC_dataCounter]);
     ec0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9c 01       	movw	r18, r24
     ec8:	22 0f       	add	r18, r18
     eca:	33 1f       	adc	r19, r19
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	fc 01       	movw	r30, r24
     ed6:	77 96       	adiw	r30, 0x17	; 23
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <LCD_write_str>
	LCD_set_cursor(1,0);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_set_cursor>
	LCD_write_s32_number(RTC_data[RTC_dataCounter]);
     ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	88 89       	ldd	r24, Y+16	; 0x10
     ef0:	99 89       	ldd	r25, Y+17	; 0x11
     ef2:	fc 01       	movw	r30, r24
     ef4:	e2 0f       	add	r30, r18
     ef6:	f3 1f       	adc	r31, r19
     ef8:	80 81       	ld	r24, Z
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 0c 29 	call	0x5218	; 0x5218 <LCD_write_s32_number>
	while(1){
		// loop section
		if(DIO_u8_get_pin(DIO_REF_PORTD, B0) == 0){
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	0e 94 12 33 	call	0x6624	; 0x6624 <DIO_u8_get_pin>
     f12:	88 23       	and	r24, r24
     f14:	d1 f7       	brne	.-12     	; 0xf0a <main+0x112>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a6 e1       	ldi	r26, 0x16	; 22
     f1c:	b3 e4       	ldi	r27, 0x43	; 67
     f1e:	8b 87       	std	Y+11, r24	; 0x0b
     f20:	9c 87       	std	Y+12, r25	; 0x0c
     f22:	ad 87       	std	Y+13, r26	; 0x0d
     f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f26:	6b 85       	ldd	r22, Y+11	; 0x0b
     f28:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	54 e4       	ldi	r21, 0x44	; 68
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	98 87       	std	Y+8, r25	; 0x08
     f42:	a9 87       	std	Y+9, r26	; 0x09
     f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <main+0x170>
		__ticks = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <main+0x1ee>
	else if (__tmp > 65535)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f80:	6b 85       	ldd	r22, Y+11	; 0x0b
     f82:	7c 85       	ldd	r23, Y+12	; 0x0c
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	51 e4       	ldi	r21, 0x41	; 65
     f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <main+0x1d0>
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <main+0x1be>
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f7       	brne	.-38     	; 0xfaa <main+0x1b2>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <main+0x1fa>
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(150);
			RTC_dataCounter = (RTC_dataCounter == 6) ? 0 : RTC_dataCounter+1;
     ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffc:	86 30       	cpi	r24, 0x06	; 6
     ffe:	29 f0       	breq	.+10     	; 0x100a <main+0x212>
    1000:	8f 85       	ldd	r24, Y+15	; 0x0f
    1002:	f8 2f       	mov	r31, r24
    1004:	ff 5f       	subi	r31, 0xFF	; 255
    1006:	fe a3       	std	Y+38, r31	; 0x26
    1008:	01 c0       	rjmp	.+2      	; 0x100c <main+0x214>
    100a:	1e a2       	std	Y+38, r1	; 0x26
    100c:	8e a1       	ldd	r24, Y+38	; 0x26
    100e:	8f 87       	std	Y+15, r24	; 0x0f
			while((DIO_u8_get_pin(DIO_REF_PORTD, B0) == 0));
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	0e 94 12 33 	call	0x6624	; 0x6624 <DIO_u8_get_pin>
    1018:	88 23       	and	r24, r24
    101a:	d1 f3       	breq	.-12     	; 0x1010 <main+0x218>
			LCD_set_cursor(0,0);
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_set_cursor>
			LCD_write_str(RTC_dataType[RTC_dataCounter]);
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9c 01       	movw	r18, r24
    102c:	22 0f       	add	r18, r18
    102e:	33 1f       	adc	r19, r19
    1030:	ce 01       	movw	r24, r28
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	82 0f       	add	r24, r18
    1036:	93 1f       	adc	r25, r19
    1038:	fc 01       	movw	r30, r24
    103a:	77 96       	adiw	r30, 0x17	; 23
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <LCD_write_str>
			LCD_set_cursor(1,0);
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	0e 94 bf 24 	call	0x497e	; 0x497e <LCD_set_cursor>
			LCD_write_s32_number(RTC_data[RTC_dataCounter]);
    104c:	8f 85       	ldd	r24, Y+15	; 0x0f
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	88 89       	ldd	r24, Y+16	; 0x10
    1054:	99 89       	ldd	r25, Y+17	; 0x11
    1056:	fc 01       	movw	r30, r24
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	80 81       	ld	r24, Z
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 0c 29 	call	0x5218	; 0x5218 <LCD_write_s32_number>
    106e:	4d cf       	rjmp	.-358    	; 0xf0a <main+0x112>

00001070 <LCD_pow>:
#include "../../MCAL/DIO/DIO_interface.h"

/******************************************************************************/

/* LCD helper functions implementation */
s32 LCD_pow(u8 val, u8 power){
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	27 97       	sbiw	r28, 0x07	; 7
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	8e 83       	std	Y+6, r24	; 0x06
    1086:	6f 83       	std	Y+7, r22	; 0x07
	 *	Return::
	 *		power_res>> the result of the exponential function
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a0 e0       	ldi	r26, 0x00	; 0
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	8a 83       	std	Y+2, r24	; 0x02
    1094:	9b 83       	std	Y+3, r25	; 0x03
    1096:	ac 83       	std	Y+4, r26	; 0x04
    1098:	bd 83       	std	Y+5, r27	; 0x05
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	16 c0       	rjmp	.+44     	; 0x10ca <LCD_pow+0x5a>
		// Remultibly the value by itself
		power_res*= val;
    109e:	8e 81       	ldd	r24, Y+6	; 0x06
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	ac 81       	ldd	r26, Y+4	; 0x04
    10ae:	bd 81       	ldd	r27, Y+5	; 0x05
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 37 33 	call	0x666e	; 0x666e <__mulsi3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	9b 83       	std	Y+3, r25	; 0x03
    10c0:	ac 83       	std	Y+4, r26	; 0x04
    10c2:	bd 83       	std	Y+5, r27	; 0x05
	 *	Function is helper and not allowed to be used out side of the driver.
	 */
	// Create a container for the power result and set its inital value
	s32 power_res= val;
	// Loop in the power order
	for(u8 i= 0; i< power-1; i++)
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	8f 81       	ldd	r24, Y+7	; 0x07
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	04 f3       	brlt	.-64     	; 0x109e <LCD_pow+0x2e>
		// Remultibly the value by itself
		power_res*= val;
	// Return the result in the container
	return power_res;
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	9b 81       	ldd	r25, Y+3	; 0x03
    10e2:	ac 81       	ldd	r26, Y+4	; 0x04
    10e4:	bd 81       	ldd	r27, Y+5	; 0x05
}
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	27 96       	adiw	r28, 0x07	; 7
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <LCD_write_data_8bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_8bit(u8 lcd_copy_word_8bit){
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	e1 97       	sbiw	r28, 0x31	; 49
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_word_8bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive data
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a0 e8       	ldi	r26, 0x80	; 128
    1128:	bf e3       	ldi	r27, 0x3F	; 63
    112a:	8d a7       	std	Y+45, r24	; 0x2d
    112c:	9e a7       	std	Y+46, r25	; 0x2e
    112e:	af a7       	std	Y+47, r26	; 0x2f
    1130:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1132:	6d a5       	ldd	r22, Y+45	; 0x2d
    1134:	7e a5       	ldd	r23, Y+46	; 0x2e
    1136:	8f a5       	ldd	r24, Y+47	; 0x2f
    1138:	98 a9       	ldd	r25, Y+48	; 0x30
    113a:	2b ea       	ldi	r18, 0xAB	; 171
    113c:	3a ea       	ldi	r19, 0xAA	; 170
    113e:	4a e2       	ldi	r20, 0x2A	; 42
    1140:	50 e4       	ldi	r21, 0x40	; 64
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	89 a7       	std	Y+41, r24	; 0x29
    114c:	9a a7       	std	Y+42, r25	; 0x2a
    114e:	ab a7       	std	Y+43, r26	; 0x2b
    1150:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1152:	69 a5       	ldd	r22, Y+41	; 0x29
    1154:	7a a5       	ldd	r23, Y+42	; 0x2a
    1156:	8b a5       	ldd	r24, Y+43	; 0x2b
    1158:	9c a5       	ldd	r25, Y+44	; 0x2c
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e8       	ldi	r20, 0x80	; 128
    1160:	5f e3       	ldi	r21, 0x3F	; 63
    1162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1166:	88 23       	and	r24, r24
    1168:	1c f4       	brge	.+6      	; 0x1170 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	88 a7       	std	Y+40, r24	; 0x28
    116e:	91 c0       	rjmp	.+290    	; 0x1292 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    1170:	69 a5       	ldd	r22, Y+41	; 0x29
    1172:	7a a5       	ldd	r23, Y+42	; 0x2a
    1174:	8b a5       	ldd	r24, Y+43	; 0x2b
    1176:	9c a5       	ldd	r25, Y+44	; 0x2c
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	4f e7       	ldi	r20, 0x7F	; 127
    117e:	53 e4       	ldi	r21, 0x43	; 67
    1180:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1184:	18 16       	cp	r1, r24
    1186:	0c f0       	brlt	.+2      	; 0x118a <LCD_write_data_8bit+0x8e>
    1188:	7b c0       	rjmp	.+246    	; 0x1280 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    118a:	6d a5       	ldd	r22, Y+45	; 0x2d
    118c:	7e a5       	ldd	r23, Y+46	; 0x2e
    118e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1190:	98 a9       	ldd	r25, Y+48	; 0x30
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	4a e7       	ldi	r20, 0x7A	; 122
    1198:	54 e4       	ldi	r21, 0x44	; 68
    119a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	8c a3       	std	Y+36, r24	; 0x24
    11a4:	9d a3       	std	Y+37, r25	; 0x25
    11a6:	ae a3       	std	Y+38, r26	; 0x26
    11a8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11aa:	6c a1       	ldd	r22, Y+36	; 0x24
    11ac:	7d a1       	ldd	r23, Y+37	; 0x25
    11ae:	8e a1       	ldd	r24, Y+38	; 0x26
    11b0:	9f a1       	ldd	r25, Y+39	; 0x27
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4a ef       	ldi	r20, 0xFA	; 250
    11b8:	54 e4       	ldi	r21, 0x44	; 68
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	88 a3       	std	Y+32, r24	; 0x20
    11c4:	99 a3       	std	Y+33, r25	; 0x21
    11c6:	aa a3       	std	Y+34, r26	; 0x22
    11c8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    11ca:	68 a1       	ldd	r22, Y+32	; 0x20
    11cc:	79 a1       	ldd	r23, Y+33	; 0x21
    11ce:	8a a1       	ldd	r24, Y+34	; 0x22
    11d0:	9b a1       	ldd	r25, Y+35	; 0x23
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11de:	88 23       	and	r24, r24
    11e0:	2c f4       	brge	.+10     	; 0x11ec <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9f 8f       	std	Y+31, r25	; 0x1f
    11e8:	8e 8f       	std	Y+30, r24	; 0x1e
    11ea:	3f c0       	rjmp	.+126    	; 0x126a <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    11ec:	68 a1       	ldd	r22, Y+32	; 0x20
    11ee:	79 a1       	ldd	r23, Y+33	; 0x21
    11f0:	8a a1       	ldd	r24, Y+34	; 0x22
    11f2:	9b a1       	ldd	r25, Y+35	; 0x23
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	57 e4       	ldi	r21, 0x47	; 71
    11fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1200:	18 16       	cp	r1, r24
    1202:	4c f5       	brge	.+82     	; 0x1256 <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1204:	6c a1       	ldd	r22, Y+36	; 0x24
    1206:	7d a1       	ldd	r23, Y+37	; 0x25
    1208:	8e a1       	ldd	r24, Y+38	; 0x26
    120a:	9f a1       	ldd	r25, Y+39	; 0x27
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e2       	ldi	r20, 0x20	; 32
    1212:	51 e4       	ldi	r21, 0x41	; 65
    1214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9f 8f       	std	Y+31, r25	; 0x1f
    122a:	8e 8f       	std	Y+30, r24	; 0x1e
    122c:	0f c0       	rjmp	.+30     	; 0x124c <LCD_write_data_8bit+0x150>
    122e:	88 ec       	ldi	r24, 0xC8	; 200
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9d 8f       	std	Y+29, r25	; 0x1d
    1234:	8c 8f       	std	Y+28, r24	; 0x1c
    1236:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1238:	9d 8d       	ldd	r25, Y+29	; 0x1d
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <LCD_write_data_8bit+0x13e>
    123e:	9d 8f       	std	Y+29, r25	; 0x1d
    1240:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1242:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1244:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	9f 8f       	std	Y+31, r25	; 0x1f
    124a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    124e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	69 f7       	brne	.-38     	; 0x122e <LCD_write_data_8bit+0x132>
    1254:	24 c0       	rjmp	.+72     	; 0x129e <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1256:	68 a1       	ldd	r22, Y+32	; 0x20
    1258:	79 a1       	ldd	r23, Y+33	; 0x21
    125a:	8a a1       	ldd	r24, Y+34	; 0x22
    125c:	9b a1       	ldd	r25, Y+35	; 0x23
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9f 8f       	std	Y+31, r25	; 0x1f
    1268:	8e 8f       	std	Y+30, r24	; 0x1e
    126a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    126c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    126e:	9b 8f       	std	Y+27, r25	; 0x1b
    1270:	8a 8f       	std	Y+26, r24	; 0x1a
    1272:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1274:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <LCD_write_data_8bit+0x17a>
    127a:	9b 8f       	std	Y+27, r25	; 0x1b
    127c:	8a 8f       	std	Y+26, r24	; 0x1a
    127e:	0f c0       	rjmp	.+30     	; 0x129e <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1280:	69 a5       	ldd	r22, Y+41	; 0x29
    1282:	7a a5       	ldd	r23, Y+42	; 0x2a
    1284:	8b a5       	ldd	r24, Y+43	; 0x2b
    1286:	9c a5       	ldd	r25, Y+44	; 0x2c
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	88 a7       	std	Y+40, r24	; 0x28
    1292:	88 a5       	ldd	r24, Y+40	; 0x28
    1294:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1296:	89 8d       	ldd	r24, Y+25	; 0x19
    1298:	8a 95       	dec	r24
    129a:	f1 f7       	brne	.-4      	; 0x1298 <LCD_write_data_8bit+0x19c>
    129c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 e8       	ldi	r26, 0x80	; 128
    12ac:	bf e3       	ldi	r27, 0x3F	; 63
    12ae:	8d 8b       	std	Y+21, r24	; 0x15
    12b0:	9e 8b       	std	Y+22, r25	; 0x16
    12b2:	af 8b       	std	Y+23, r26	; 0x17
    12b4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12b6:	6d 89       	ldd	r22, Y+21	; 0x15
    12b8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ba:	8f 89       	ldd	r24, Y+23	; 0x17
    12bc:	98 8d       	ldd	r25, Y+24	; 0x18
    12be:	2b ea       	ldi	r18, 0xAB	; 171
    12c0:	3a ea       	ldi	r19, 0xAA	; 170
    12c2:	4a e2       	ldi	r20, 0x2A	; 42
    12c4:	50 e4       	ldi	r21, 0x40	; 64
    12c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	89 8b       	std	Y+17, r24	; 0x11
    12d0:	9a 8b       	std	Y+18, r25	; 0x12
    12d2:	ab 8b       	std	Y+19, r26	; 0x13
    12d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12d6:	69 89       	ldd	r22, Y+17	; 0x11
    12d8:	7a 89       	ldd	r23, Y+18	; 0x12
    12da:	8b 89       	ldd	r24, Y+19	; 0x13
    12dc:	9c 89       	ldd	r25, Y+20	; 0x14
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e8       	ldi	r20, 0x80	; 128
    12e4:	5f e3       	ldi	r21, 0x3F	; 63
    12e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ea:	88 23       	and	r24, r24
    12ec:	1c f4       	brge	.+6      	; 0x12f4 <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	88 8b       	std	Y+16, r24	; 0x10
    12f2:	91 c0       	rjmp	.+290    	; 0x1416 <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    12f4:	69 89       	ldd	r22, Y+17	; 0x11
    12f6:	7a 89       	ldd	r23, Y+18	; 0x12
    12f8:	8b 89       	ldd	r24, Y+19	; 0x13
    12fa:	9c 89       	ldd	r25, Y+20	; 0x14
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	4f e7       	ldi	r20, 0x7F	; 127
    1302:	53 e4       	ldi	r21, 0x43	; 67
    1304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1308:	18 16       	cp	r1, r24
    130a:	0c f0       	brlt	.+2      	; 0x130e <LCD_write_data_8bit+0x212>
    130c:	7b c0       	rjmp	.+246    	; 0x1404 <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    130e:	6d 89       	ldd	r22, Y+21	; 0x15
    1310:	7e 89       	ldd	r23, Y+22	; 0x16
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	4a e7       	ldi	r20, 0x7A	; 122
    131c:	54 e4       	ldi	r21, 0x44	; 68
    131e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8c 87       	std	Y+12, r24	; 0x0c
    1328:	9d 87       	std	Y+13, r25	; 0x0d
    132a:	ae 87       	std	Y+14, r26	; 0x0e
    132c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1330:	7d 85       	ldd	r23, Y+13	; 0x0d
    1332:	8e 85       	ldd	r24, Y+14	; 0x0e
    1334:	9f 85       	ldd	r25, Y+15	; 0x0f
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a ef       	ldi	r20, 0xFA	; 250
    133c:	54 e4       	ldi	r21, 0x44	; 68
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	88 87       	std	Y+8, r24	; 0x08
    1348:	99 87       	std	Y+9, r25	; 0x09
    134a:	aa 87       	std	Y+10, r26	; 0x0a
    134c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    134e:	68 85       	ldd	r22, Y+8	; 0x08
    1350:	79 85       	ldd	r23, Y+9	; 0x09
    1352:	8a 85       	ldd	r24, Y+10	; 0x0a
    1354:	9b 85       	ldd	r25, Y+11	; 0x0b
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	5f e3       	ldi	r21, 0x3F	; 63
    135e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1362:	88 23       	and	r24, r24
    1364:	2c f4       	brge	.+10     	; 0x1370 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	9f 83       	std	Y+7, r25	; 0x07
    136c:	8e 83       	std	Y+6, r24	; 0x06
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    1370:	68 85       	ldd	r22, Y+8	; 0x08
    1372:	79 85       	ldd	r23, Y+9	; 0x09
    1374:	8a 85       	ldd	r24, Y+10	; 0x0a
    1376:	9b 85       	ldd	r25, Y+11	; 0x0b
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	4f e7       	ldi	r20, 0x7F	; 127
    137e:	57 e4       	ldi	r21, 0x47	; 71
    1380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1384:	18 16       	cp	r1, r24
    1386:	4c f5       	brge	.+82     	; 0x13da <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1388:	6c 85       	ldd	r22, Y+12	; 0x0c
    138a:	7d 85       	ldd	r23, Y+13	; 0x0d
    138c:	8e 85       	ldd	r24, Y+14	; 0x0e
    138e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e2       	ldi	r20, 0x20	; 32
    1396:	51 e4       	ldi	r21, 0x41	; 65
    1398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9f 83       	std	Y+7, r25	; 0x07
    13ae:	8e 83       	std	Y+6, r24	; 0x06
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <LCD_write_data_8bit+0x2d4>
    13b2:	88 ec       	ldi	r24, 0xC8	; 200
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9d 83       	std	Y+5, r25	; 0x05
    13b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD_write_data_8bit+0x2c2>
    13c2:	9d 83       	std	Y+5, r25	; 0x05
    13c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9f 83       	std	Y+7, r25	; 0x07
    13ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f7       	brne	.-38     	; 0x13b2 <LCD_write_data_8bit+0x2b6>
    13d8:	24 c0       	rjmp	.+72     	; 0x1422 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	68 85       	ldd	r22, Y+8	; 0x08
    13dc:	79 85       	ldd	r23, Y+9	; 0x09
    13de:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9f 83       	std	Y+7, r25	; 0x07
    13ec:	8e 83       	std	Y+6, r24	; 0x06
    13ee:	8e 81       	ldd	r24, Y+6	; 0x06
    13f0:	9f 81       	ldd	r25, Y+7	; 0x07
    13f2:	9b 83       	std	Y+3, r25	; 0x03
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	9b 81       	ldd	r25, Y+3	; 0x03
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <LCD_write_data_8bit+0x2fe>
    13fe:	9b 83       	std	Y+3, r25	; 0x03
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1404:	69 89       	ldd	r22, Y+17	; 0x11
    1406:	7a 89       	ldd	r23, Y+18	; 0x12
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	88 8b       	std	Y+16, r24	; 0x10
    1416:	88 89       	ldd	r24, Y+16	; 0x10
    1418:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	8a 95       	dec	r24
    141e:	f1 f7       	brne	.-4      	; 0x141c <LCD_write_data_8bit+0x320>
    1420:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the data packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_word_8bit);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	69 a9       	ldd	r22, Y+49	; 0x31
    1426:	0e 94 f6 31 	call	0x63ec	; 0x63ec <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
}
    1432:	e1 96       	adiw	r28, 0x31	; 49
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <LCD_write_cmd_8bit>:

void LCD_write_cmd_8bit(u8 lcd_copy_cmd_8bit){
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	e1 97       	sbiw	r28, 0x31	; 49
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	89 ab       	std	Y+49, r24	; 0x31
	 *		lcd_copy_cmd_8bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	62 e0       	ldi	r22, 0x02	; 2
    145e:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	a0 e8       	ldi	r26, 0x80	; 128
    1470:	bf e3       	ldi	r27, 0x3F	; 63
    1472:	8d a7       	std	Y+45, r24	; 0x2d
    1474:	9e a7       	std	Y+46, r25	; 0x2e
    1476:	af a7       	std	Y+47, r26	; 0x2f
    1478:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    147a:	6d a5       	ldd	r22, Y+45	; 0x2d
    147c:	7e a5       	ldd	r23, Y+46	; 0x2e
    147e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1480:	98 a9       	ldd	r25, Y+48	; 0x30
    1482:	2b ea       	ldi	r18, 0xAB	; 171
    1484:	3a ea       	ldi	r19, 0xAA	; 170
    1486:	4a e2       	ldi	r20, 0x2A	; 42
    1488:	50 e4       	ldi	r21, 0x40	; 64
    148a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	89 a7       	std	Y+41, r24	; 0x29
    1494:	9a a7       	std	Y+42, r25	; 0x2a
    1496:	ab a7       	std	Y+43, r26	; 0x2b
    1498:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    149a:	69 a5       	ldd	r22, Y+41	; 0x29
    149c:	7a a5       	ldd	r23, Y+42	; 0x2a
    149e:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e8       	ldi	r20, 0x80	; 128
    14a8:	5f e3       	ldi	r21, 0x3F	; 63
    14aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14ae:	88 23       	and	r24, r24
    14b0:	1c f4       	brge	.+6      	; 0x14b8 <LCD_write_cmd_8bit+0x74>
		__ticks = 1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	88 a7       	std	Y+40, r24	; 0x28
    14b6:	91 c0       	rjmp	.+290    	; 0x15da <LCD_write_cmd_8bit+0x196>
	else if (__tmp > 255)
    14b8:	69 a5       	ldd	r22, Y+41	; 0x29
    14ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    14bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    14be:	9c a5       	ldd	r25, Y+44	; 0x2c
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	53 e4       	ldi	r21, 0x43	; 67
    14c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	0c f0       	brlt	.+2      	; 0x14d2 <LCD_write_cmd_8bit+0x8e>
    14d0:	7b c0       	rjmp	.+246    	; 0x15c8 <LCD_write_cmd_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    14d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    14d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    14d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d8:	98 a9       	ldd	r25, Y+48	; 0x30
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a e7       	ldi	r20, 0x7A	; 122
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8c a3       	std	Y+36, r24	; 0x24
    14ec:	9d a3       	std	Y+37, r25	; 0x25
    14ee:	ae a3       	std	Y+38, r26	; 0x26
    14f0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f2:	6c a1       	ldd	r22, Y+36	; 0x24
    14f4:	7d a1       	ldd	r23, Y+37	; 0x25
    14f6:	8e a1       	ldd	r24, Y+38	; 0x26
    14f8:	9f a1       	ldd	r25, Y+39	; 0x27
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a ef       	ldi	r20, 0xFA	; 250
    1500:	54 e4       	ldi	r21, 0x44	; 68
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	88 a3       	std	Y+32, r24	; 0x20
    150c:	99 a3       	std	Y+33, r25	; 0x21
    150e:	aa a3       	std	Y+34, r26	; 0x22
    1510:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1512:	68 a1       	ldd	r22, Y+32	; 0x20
    1514:	79 a1       	ldd	r23, Y+33	; 0x21
    1516:	8a a1       	ldd	r24, Y+34	; 0x22
    1518:	9b a1       	ldd	r25, Y+35	; 0x23
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	2c f4       	brge	.+10     	; 0x1534 <LCD_write_cmd_8bit+0xf0>
		__ticks = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9f 8f       	std	Y+31, r25	; 0x1f
    1530:	8e 8f       	std	Y+30, r24	; 0x1e
    1532:	3f c0       	rjmp	.+126    	; 0x15b2 <LCD_write_cmd_8bit+0x16e>
	else if (__tmp > 65535)
    1534:	68 a1       	ldd	r22, Y+32	; 0x20
    1536:	79 a1       	ldd	r23, Y+33	; 0x21
    1538:	8a a1       	ldd	r24, Y+34	; 0x22
    153a:	9b a1       	ldd	r25, Y+35	; 0x23
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	4c f5       	brge	.+82     	; 0x159e <LCD_write_cmd_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	6c a1       	ldd	r22, Y+36	; 0x24
    154e:	7d a1       	ldd	r23, Y+37	; 0x25
    1550:	8e a1       	ldd	r24, Y+38	; 0x26
    1552:	9f a1       	ldd	r25, Y+39	; 0x27
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9f 8f       	std	Y+31, r25	; 0x1f
    1572:	8e 8f       	std	Y+30, r24	; 0x1e
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <LCD_write_cmd_8bit+0x150>
    1576:	88 ec       	ldi	r24, 0xC8	; 200
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9d 8f       	std	Y+29, r25	; 0x1d
    157c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    157e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1580:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <LCD_write_cmd_8bit+0x13e>
    1586:	9d 8f       	std	Y+29, r25	; 0x1d
    1588:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    158c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9f 8f       	std	Y+31, r25	; 0x1f
    1592:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1594:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1596:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f7       	brne	.-38     	; 0x1576 <LCD_write_cmd_8bit+0x132>
    159c:	24 c0       	rjmp	.+72     	; 0x15e6 <LCD_write_cmd_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159e:	68 a1       	ldd	r22, Y+32	; 0x20
    15a0:	79 a1       	ldd	r23, Y+33	; 0x21
    15a2:	8a a1       	ldd	r24, Y+34	; 0x22
    15a4:	9b a1       	ldd	r25, Y+35	; 0x23
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9f 8f       	std	Y+31, r25	; 0x1f
    15b0:	8e 8f       	std	Y+30, r24	; 0x1e
    15b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15b6:	9b 8f       	std	Y+27, r25	; 0x1b
    15b8:	8a 8f       	std	Y+26, r24	; 0x1a
    15ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <LCD_write_cmd_8bit+0x17a>
    15c2:	9b 8f       	std	Y+27, r25	; 0x1b
    15c4:	8a 8f       	std	Y+26, r24	; 0x1a
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <LCD_write_cmd_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15c8:	69 a5       	ldd	r22, Y+41	; 0x29
    15ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    15cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	88 a7       	std	Y+40, r24	; 0x28
    15da:	88 a5       	ldd	r24, Y+40	; 0x28
    15dc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15de:	89 8d       	ldd	r24, Y+25	; 0x19
    15e0:	8a 95       	dec	r24
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <LCD_write_cmd_8bit+0x19c>
    15e4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e8       	ldi	r26, 0x80	; 128
    15f4:	bf e3       	ldi	r27, 0x3F	; 63
    15f6:	8d 8b       	std	Y+21, r24	; 0x15
    15f8:	9e 8b       	std	Y+22, r25	; 0x16
    15fa:	af 8b       	std	Y+23, r26	; 0x17
    15fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1600:	7e 89       	ldd	r23, Y+22	; 0x16
    1602:	8f 89       	ldd	r24, Y+23	; 0x17
    1604:	98 8d       	ldd	r25, Y+24	; 0x18
    1606:	2b ea       	ldi	r18, 0xAB	; 171
    1608:	3a ea       	ldi	r19, 0xAA	; 170
    160a:	4a e2       	ldi	r20, 0x2A	; 42
    160c:	50 e4       	ldi	r21, 0x40	; 64
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	89 8b       	std	Y+17, r24	; 0x11
    1618:	9a 8b       	std	Y+18, r25	; 0x12
    161a:	ab 8b       	std	Y+19, r26	; 0x13
    161c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    161e:	69 89       	ldd	r22, Y+17	; 0x11
    1620:	7a 89       	ldd	r23, Y+18	; 0x12
    1622:	8b 89       	ldd	r24, Y+19	; 0x13
    1624:	9c 89       	ldd	r25, Y+20	; 0x14
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	1c f4       	brge	.+6      	; 0x163c <LCD_write_cmd_8bit+0x1f8>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	88 8b       	std	Y+16, r24	; 0x10
    163a:	91 c0       	rjmp	.+290    	; 0x175e <LCD_write_cmd_8bit+0x31a>
	else if (__tmp > 255)
    163c:	69 89       	ldd	r22, Y+17	; 0x11
    163e:	7a 89       	ldd	r23, Y+18	; 0x12
    1640:	8b 89       	ldd	r24, Y+19	; 0x13
    1642:	9c 89       	ldd	r25, Y+20	; 0x14
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	53 e4       	ldi	r21, 0x43	; 67
    164c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	0c f0       	brlt	.+2      	; 0x1656 <LCD_write_cmd_8bit+0x212>
    1654:	7b c0       	rjmp	.+246    	; 0x174c <LCD_write_cmd_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1656:	6d 89       	ldd	r22, Y+21	; 0x15
    1658:	7e 89       	ldd	r23, Y+22	; 0x16
    165a:	8f 89       	ldd	r24, Y+23	; 0x17
    165c:	98 8d       	ldd	r25, Y+24	; 0x18
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	4a e7       	ldi	r20, 0x7A	; 122
    1664:	54 e4       	ldi	r21, 0x44	; 68
    1666:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	8c 87       	std	Y+12, r24	; 0x0c
    1670:	9d 87       	std	Y+13, r25	; 0x0d
    1672:	ae 87       	std	Y+14, r26	; 0x0e
    1674:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1676:	6c 85       	ldd	r22, Y+12	; 0x0c
    1678:	7d 85       	ldd	r23, Y+13	; 0x0d
    167a:	8e 85       	ldd	r24, Y+14	; 0x0e
    167c:	9f 85       	ldd	r25, Y+15	; 0x0f
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4a ef       	ldi	r20, 0xFA	; 250
    1684:	54 e4       	ldi	r21, 0x44	; 68
    1686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	88 87       	std	Y+8, r24	; 0x08
    1690:	99 87       	std	Y+9, r25	; 0x09
    1692:	aa 87       	std	Y+10, r26	; 0x0a
    1694:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1696:	68 85       	ldd	r22, Y+8	; 0x08
    1698:	79 85       	ldd	r23, Y+9	; 0x09
    169a:	8a 85       	ldd	r24, Y+10	; 0x0a
    169c:	9b 85       	ldd	r25, Y+11	; 0x0b
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e8       	ldi	r20, 0x80	; 128
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <LCD_write_cmd_8bit+0x274>
		__ticks = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9f 83       	std	Y+7, r25	; 0x07
    16b4:	8e 83       	std	Y+6, r24	; 0x06
    16b6:	3f c0       	rjmp	.+126    	; 0x1736 <LCD_write_cmd_8bit+0x2f2>
	else if (__tmp > 65535)
    16b8:	68 85       	ldd	r22, Y+8	; 0x08
    16ba:	79 85       	ldd	r23, Y+9	; 0x09
    16bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16be:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	3f ef       	ldi	r19, 0xFF	; 255
    16c4:	4f e7       	ldi	r20, 0x7F	; 127
    16c6:	57 e4       	ldi	r21, 0x47	; 71
    16c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	4c f5       	brge	.+82     	; 0x1722 <LCD_write_cmd_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    16d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    16d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    16d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	51 e4       	ldi	r21, 0x41	; 65
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9f 83       	std	Y+7, r25	; 0x07
    16f6:	8e 83       	std	Y+6, r24	; 0x06
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <LCD_write_cmd_8bit+0x2d4>
    16fa:	88 ec       	ldi	r24, 0xC8	; 200
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9d 83       	std	Y+5, r25	; 0x05
    1700:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCD_write_cmd_8bit+0x2c2>
    170a:	9d 83       	std	Y+5, r25	; 0x05
    170c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170e:	8e 81       	ldd	r24, Y+6	; 0x06
    1710:	9f 81       	ldd	r25, Y+7	; 0x07
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	9f 83       	std	Y+7, r25	; 0x07
    1716:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1718:	8e 81       	ldd	r24, Y+6	; 0x06
    171a:	9f 81       	ldd	r25, Y+7	; 0x07
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	69 f7       	brne	.-38     	; 0x16fa <LCD_write_cmd_8bit+0x2b6>
    1720:	24 c0       	rjmp	.+72     	; 0x176a <LCD_write_cmd_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1722:	68 85       	ldd	r22, Y+8	; 0x08
    1724:	79 85       	ldd	r23, Y+9	; 0x09
    1726:	8a 85       	ldd	r24, Y+10	; 0x0a
    1728:	9b 85       	ldd	r25, Y+11	; 0x0b
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9f 83       	std	Y+7, r25	; 0x07
    1734:	8e 83       	std	Y+6, r24	; 0x06
    1736:	8e 81       	ldd	r24, Y+6	; 0x06
    1738:	9f 81       	ldd	r25, Y+7	; 0x07
    173a:	9b 83       	std	Y+3, r25	; 0x03
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	9b 81       	ldd	r25, Y+3	; 0x03
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_write_cmd_8bit+0x2fe>
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	0f c0       	rjmp	.+30     	; 0x176a <LCD_write_cmd_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    174c:	69 89       	ldd	r22, Y+17	; 0x11
    174e:	7a 89       	ldd	r23, Y+18	; 0x12
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	88 8b       	std	Y+16, r24	; 0x10
    175e:	88 89       	ldd	r24, Y+16	; 0x10
    1760:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	8a 95       	dec	r24
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCD_write_cmd_8bit+0x320>
    1768:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the command packet
	DIO_void_assign_port(lcd_data_port, lcd_copy_cmd_8bit);
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	69 a9       	ldd	r22, Y+49	; 0x31
    176e:	0e 94 f6 31 	call	0x63ec	; 0x63ec <DIO_void_assign_port>
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
}
    177a:	e1 96       	adiw	r28, 0x31	; 49
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <LCD_read_address_8bit>:

u8 LCD_read_address_8bit(void ){
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	ef 97       	sbiw	r28, 0x3f	; 63
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data port to input
	DIO_void_set_port_dir(lcd_data_port, INPUT);
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	0e 94 bb 30 	call	0x6176	; 0x6176 <DIO_void_set_port_dir>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a8 e4       	ldi	r26, 0x48	; 72
    17ae:	b2 e4       	ldi	r27, 0x42	; 66
    17b0:	8b af       	std	Y+59, r24	; 0x3b
    17b2:	9c af       	std	Y+60, r25	; 0x3c
    17b4:	ad af       	std	Y+61, r26	; 0x3d
    17b6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	6b ad       	ldd	r22, Y+59	; 0x3b
    17ba:	7c ad       	ldd	r23, Y+60	; 0x3c
    17bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    17be:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a ef       	ldi	r20, 0xFA	; 250
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8f ab       	std	Y+55, r24	; 0x37
    17d2:	98 af       	std	Y+56, r25	; 0x38
    17d4:	a9 af       	std	Y+57, r26	; 0x39
    17d6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17d8:	6f a9       	ldd	r22, Y+55	; 0x37
    17da:	78 ad       	ldd	r23, Y+56	; 0x38
    17dc:	89 ad       	ldd	r24, Y+57	; 0x39
    17de:	9a ad       	ldd	r25, Y+58	; 0x3a
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	2c f4       	brge	.+10     	; 0x17fa <LCD_read_address_8bit+0x6e>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9e ab       	std	Y+54, r25	; 0x36
    17f6:	8d ab       	std	Y+53, r24	; 0x35
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <LCD_read_address_8bit+0xec>
	else if (__tmp > 65535)
    17fa:	6f a9       	ldd	r22, Y+55	; 0x37
    17fc:	78 ad       	ldd	r23, Y+56	; 0x38
    17fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1800:	9a ad       	ldd	r25, Y+58	; 0x3a
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    180e:	18 16       	cp	r1, r24
    1810:	4c f5       	brge	.+82     	; 0x1864 <LCD_read_address_8bit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1812:	6b ad       	ldd	r22, Y+59	; 0x3b
    1814:	7c ad       	ldd	r23, Y+60	; 0x3c
    1816:	8d ad       	ldd	r24, Y+61	; 0x3d
    1818:	9e ad       	ldd	r25, Y+62	; 0x3e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e2       	ldi	r20, 0x20	; 32
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9e ab       	std	Y+54, r25	; 0x36
    1838:	8d ab       	std	Y+53, r24	; 0x35
    183a:	0f c0       	rjmp	.+30     	; 0x185a <LCD_read_address_8bit+0xce>
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9c ab       	std	Y+52, r25	; 0x34
    1842:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1844:	8b a9       	ldd	r24, Y+51	; 0x33
    1846:	9c a9       	ldd	r25, Y+52	; 0x34
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_read_address_8bit+0xbc>
    184c:	9c ab       	std	Y+52, r25	; 0x34
    184e:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1850:	8d a9       	ldd	r24, Y+53	; 0x35
    1852:	9e a9       	ldd	r25, Y+54	; 0x36
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	9e ab       	std	Y+54, r25	; 0x36
    1858:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	8d a9       	ldd	r24, Y+53	; 0x35
    185c:	9e a9       	ldd	r25, Y+54	; 0x36
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	69 f7       	brne	.-38     	; 0x183c <LCD_read_address_8bit+0xb0>
    1862:	14 c0       	rjmp	.+40     	; 0x188c <LCD_read_address_8bit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1864:	6f a9       	ldd	r22, Y+55	; 0x37
    1866:	78 ad       	ldd	r23, Y+56	; 0x38
    1868:	89 ad       	ldd	r24, Y+57	; 0x39
    186a:	9a ad       	ldd	r25, Y+58	; 0x3a
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9e ab       	std	Y+54, r25	; 0x36
    1876:	8d ab       	std	Y+53, r24	; 0x35
    1878:	8d a9       	ldd	r24, Y+53	; 0x35
    187a:	9e a9       	ldd	r25, Y+54	; 0x36
    187c:	9a ab       	std	Y+50, r25	; 0x32
    187e:	89 ab       	std	Y+49, r24	; 0x31
    1880:	89 a9       	ldd	r24, Y+49	; 0x31
    1882:	9a a9       	ldd	r25, Y+50	; 0x32
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <LCD_read_address_8bit+0xf8>
    1888:	9a ab       	std	Y+50, r25	; 0x32
    188a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(50);
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	62 e0       	ldi	r22, 0x02	; 2
    1890:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e8       	ldi	r26, 0x80	; 128
    18a2:	bf e3       	ldi	r27, 0x3F	; 63
    18a4:	8d a7       	std	Y+45, r24	; 0x2d
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	af a7       	std	Y+47, r26	; 0x2f
    18aa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    18ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    18b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b2:	98 a9       	ldd	r25, Y+48	; 0x30
    18b4:	2b ea       	ldi	r18, 0xAB	; 171
    18b6:	3a ea       	ldi	r19, 0xAA	; 170
    18b8:	4a e2       	ldi	r20, 0x2A	; 42
    18ba:	50 e4       	ldi	r21, 0x40	; 64
    18bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	89 a7       	std	Y+41, r24	; 0x29
    18c6:	9a a7       	std	Y+42, r25	; 0x2a
    18c8:	ab a7       	std	Y+43, r26	; 0x2b
    18ca:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    18cc:	69 a5       	ldd	r22, Y+41	; 0x29
    18ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    18d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	1c f4       	brge	.+6      	; 0x18ea <LCD_read_address_8bit+0x15e>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	88 a7       	std	Y+40, r24	; 0x28
    18e8:	91 c0       	rjmp	.+290    	; 0x1a0c <LCD_read_address_8bit+0x280>
	else if (__tmp > 255)
    18ea:	69 a5       	ldd	r22, Y+41	; 0x29
    18ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    18ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	53 e4       	ldi	r21, 0x43	; 67
    18fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	0c f0       	brlt	.+2      	; 0x1904 <LCD_read_address_8bit+0x178>
    1902:	7b c0       	rjmp	.+246    	; 0x19fa <LCD_read_address_8bit+0x26e>
	{
		_delay_ms(__us / 1000.0);
    1904:	6d a5       	ldd	r22, Y+45	; 0x2d
    1906:	7e a5       	ldd	r23, Y+46	; 0x2e
    1908:	8f a5       	ldd	r24, Y+47	; 0x2f
    190a:	98 a9       	ldd	r25, Y+48	; 0x30
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a e7       	ldi	r20, 0x7A	; 122
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8c a3       	std	Y+36, r24	; 0x24
    191e:	9d a3       	std	Y+37, r25	; 0x25
    1920:	ae a3       	std	Y+38, r26	; 0x26
    1922:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1924:	6c a1       	ldd	r22, Y+36	; 0x24
    1926:	7d a1       	ldd	r23, Y+37	; 0x25
    1928:	8e a1       	ldd	r24, Y+38	; 0x26
    192a:	9f a1       	ldd	r25, Y+39	; 0x27
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a ef       	ldi	r20, 0xFA	; 250
    1932:	54 e4       	ldi	r21, 0x44	; 68
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	88 a3       	std	Y+32, r24	; 0x20
    193e:	99 a3       	std	Y+33, r25	; 0x21
    1940:	aa a3       	std	Y+34, r26	; 0x22
    1942:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1944:	68 a1       	ldd	r22, Y+32	; 0x20
    1946:	79 a1       	ldd	r23, Y+33	; 0x21
    1948:	8a a1       	ldd	r24, Y+34	; 0x22
    194a:	9b a1       	ldd	r25, Y+35	; 0x23
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <LCD_read_address_8bit+0x1da>
		__ticks = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9f 8f       	std	Y+31, r25	; 0x1f
    1962:	8e 8f       	std	Y+30, r24	; 0x1e
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <LCD_read_address_8bit+0x258>
	else if (__tmp > 65535)
    1966:	68 a1       	ldd	r22, Y+32	; 0x20
    1968:	79 a1       	ldd	r23, Y+33	; 0x21
    196a:	8a a1       	ldd	r24, Y+34	; 0x22
    196c:	9b a1       	ldd	r25, Y+35	; 0x23
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    197a:	18 16       	cp	r1, r24
    197c:	4c f5       	brge	.+82     	; 0x19d0 <LCD_read_address_8bit+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197e:	6c a1       	ldd	r22, Y+36	; 0x24
    1980:	7d a1       	ldd	r23, Y+37	; 0x25
    1982:	8e a1       	ldd	r24, Y+38	; 0x26
    1984:	9f a1       	ldd	r25, Y+39	; 0x27
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e2       	ldi	r20, 0x20	; 32
    198c:	51 e4       	ldi	r21, 0x41	; 65
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9f 8f       	std	Y+31, r25	; 0x1f
    19a4:	8e 8f       	std	Y+30, r24	; 0x1e
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <LCD_read_address_8bit+0x23a>
    19a8:	88 ec       	ldi	r24, 0xC8	; 200
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9d 8f       	std	Y+29, r25	; 0x1d
    19ae:	8c 8f       	std	Y+28, r24	; 0x1c
    19b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <LCD_read_address_8bit+0x228>
    19b8:	9d 8f       	std	Y+29, r25	; 0x1d
    19ba:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9f 8f       	std	Y+31, r25	; 0x1f
    19c4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <LCD_read_address_8bit+0x21c>
    19ce:	24 c0       	rjmp	.+72     	; 0x1a18 <LCD_read_address_8bit+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	68 a1       	ldd	r22, Y+32	; 0x20
    19d2:	79 a1       	ldd	r23, Y+33	; 0x21
    19d4:	8a a1       	ldd	r24, Y+34	; 0x22
    19d6:	9b a1       	ldd	r25, Y+35	; 0x23
    19d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9f 8f       	std	Y+31, r25	; 0x1f
    19e2:	8e 8f       	std	Y+30, r24	; 0x1e
    19e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19e8:	9b 8f       	std	Y+27, r25	; 0x1b
    19ea:	8a 8f       	std	Y+26, r24	; 0x1a
    19ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_read_address_8bit+0x264>
    19f4:	9b 8f       	std	Y+27, r25	; 0x1b
    19f6:	8a 8f       	std	Y+26, r24	; 0x1a
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <LCD_read_address_8bit+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19fa:	69 a5       	ldd	r22, Y+41	; 0x29
    19fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    19fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	88 a7       	std	Y+40, r24	; 0x28
    1a0c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a0e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a10:	89 8d       	ldd	r24, Y+25	; 0x19
    1a12:	8a 95       	dec	r24
    1a14:	f1 f7       	brne	.-4      	; 0x1a12 <LCD_read_address_8bit+0x286>
    1a16:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Enable pin is high to recive the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 e8       	ldi	r26, 0x80	; 128
    1a26:	bf e3       	ldi	r27, 0x3F	; 63
    1a28:	8d 8b       	std	Y+21, r24	; 0x15
    1a2a:	9e 8b       	std	Y+22, r25	; 0x16
    1a2c:	af 8b       	std	Y+23, r26	; 0x17
    1a2e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	2b ea       	ldi	r18, 0xAB	; 171
    1a3a:	3a ea       	ldi	r19, 0xAA	; 170
    1a3c:	4a e2       	ldi	r20, 0x2A	; 42
    1a3e:	50 e4       	ldi	r21, 0x40	; 64
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	89 8b       	std	Y+17, r24	; 0x11
    1a4a:	9a 8b       	std	Y+18, r25	; 0x12
    1a4c:	ab 8b       	std	Y+19, r26	; 0x13
    1a4e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a50:	69 89       	ldd	r22, Y+17	; 0x11
    1a52:	7a 89       	ldd	r23, Y+18	; 0x12
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	1c f4       	brge	.+6      	; 0x1a6e <LCD_read_address_8bit+0x2e2>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	88 8b       	std	Y+16, r24	; 0x10
    1a6c:	91 c0       	rjmp	.+290    	; 0x1b90 <LCD_read_address_8bit+0x404>
	else if (__tmp > 255)
    1a6e:	69 89       	ldd	r22, Y+17	; 0x11
    1a70:	7a 89       	ldd	r23, Y+18	; 0x12
    1a72:	8b 89       	ldd	r24, Y+19	; 0x13
    1a74:	9c 89       	ldd	r25, Y+20	; 0x14
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	53 e4       	ldi	r21, 0x43	; 67
    1a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <LCD_read_address_8bit+0x2fc>
    1a86:	7b c0       	rjmp	.+246    	; 0x1b7e <LCD_read_address_8bit+0x3f2>
	{
		_delay_ms(__us / 1000.0);
    1a88:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	4a e7       	ldi	r20, 0x7A	; 122
    1a96:	54 e4       	ldi	r21, 0x44	; 68
    1a98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	8c 87       	std	Y+12, r24	; 0x0c
    1aa2:	9d 87       	std	Y+13, r25	; 0x0d
    1aa4:	ae 87       	std	Y+14, r26	; 0x0e
    1aa6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1aaa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1aac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	88 87       	std	Y+8, r24	; 0x08
    1ac2:	99 87       	std	Y+9, r25	; 0x09
    1ac4:	aa 87       	std	Y+10, r26	; 0x0a
    1ac6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ac8:	68 85       	ldd	r22, Y+8	; 0x08
    1aca:	79 85       	ldd	r23, Y+9	; 0x09
    1acc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ace:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <LCD_read_address_8bit+0x35e>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9f 83       	std	Y+7, r25	; 0x07
    1ae6:	8e 83       	std	Y+6, r24	; 0x06
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <LCD_read_address_8bit+0x3dc>
	else if (__tmp > 65535)
    1aea:	68 85       	ldd	r22, Y+8	; 0x08
    1aec:	79 85       	ldd	r23, Y+9	; 0x09
    1aee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <LCD_read_address_8bit+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b04:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9f 83       	std	Y+7, r25	; 0x07
    1b28:	8e 83       	std	Y+6, r24	; 0x06
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <LCD_read_address_8bit+0x3be>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9d 83       	std	Y+5, r25	; 0x05
    1b32:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	9d 81       	ldd	r25, Y+5	; 0x05
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_read_address_8bit+0x3ac>
    1b3c:	9d 83       	std	Y+5, r25	; 0x05
    1b3e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8e 81       	ldd	r24, Y+6	; 0x06
    1b42:	9f 81       	ldd	r25, Y+7	; 0x07
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9f 83       	std	Y+7, r25	; 0x07
    1b48:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <LCD_read_address_8bit+0x3a0>
    1b52:	24 c0       	rjmp	.+72     	; 0x1b9c <LCD_read_address_8bit+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	68 85       	ldd	r22, Y+8	; 0x08
    1b56:	79 85       	ldd	r23, Y+9	; 0x09
    1b58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9f 83       	std	Y+7, r25	; 0x07
    1b66:	8e 83       	std	Y+6, r24	; 0x06
    1b68:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b6c:	9b 83       	std	Y+3, r25	; 0x03
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	9b 81       	ldd	r25, Y+3	; 0x03
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_read_address_8bit+0x3e8>
    1b78:	9b 83       	std	Y+3, r25	; 0x03
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <LCD_read_address_8bit+0x410>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b7e:	69 89       	ldd	r22, Y+17	; 0x11
    1b80:	7a 89       	ldd	r23, Y+18	; 0x12
    1b82:	8b 89       	ldd	r24, Y+19	; 0x13
    1b84:	9c 89       	ldd	r25, Y+20	; 0x14
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	88 8b       	std	Y+16, r24	; 0x10
    1b90:	88 89       	ldd	r24, Y+16	; 0x10
    1b92:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	8a 95       	dec	r24
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_read_address_8bit+0x40a>
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the packet
	u8 address= DIO_u8_get_port(lcd_data_port);
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <DIO_u8_get_port>
    1ba2:	8f af       	std	Y+63, r24	; 0x3f
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    1bac:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bae:	8f 77       	andi	r24, 0x7F	; 127
    1bb0:	8f af       	std	Y+63, r24	; 0x3f
	// Configure the data port back to output
	DIO_void_set_port_dir(lcd_data_port, OUTPUT);
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	6f ef       	ldi	r22, 0xFF	; 255
    1bb6:	0e 94 bb 30 	call	0x6176	; 0x6176 <DIO_void_set_port_dir>
	return address;
    1bba:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    1bbc:	ef 96       	adiw	r28, 0x3f	; 63
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <LCD_write_data_4bit>:

/******************************************************************************/

/* LCD 8bit interfacing functions implementation */
void LCD_write_data_4bit(u8 lcd_copy_word_4bit){
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	c3 56       	subi	r28, 0x63	; 99
    1bdc:	d0 40       	sbci	r29, 0x00	; 0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	fe 01       	movw	r30, r28
    1bea:	ed 59       	subi	r30, 0x9D	; 157
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 83       	st	Z, r24
	 *		lcd_copy_word_4bit>> The data byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_set_pin(lcd_ctrl_port, lcd_RS);
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	62 e0       	ldi	r22, 0x02	; 2
    1bf4:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	61 e0       	ldi	r22, 0x01	; 1
    1bfc:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    1c00:	fe 01       	movw	r30, r28
    1c02:	e3 5a       	subi	r30, 0xA3	; 163
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	a0 e8       	ldi	r26, 0x80	; 128
    1c0c:	bf e3       	ldi	r27, 0x3F	; 63
    1c0e:	80 83       	st	Z, r24
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	a2 83       	std	Z+2, r26	; 0x02
    1c14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c16:	8e 01       	movw	r16, r28
    1c18:	07 5a       	subi	r16, 0xA7	; 167
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e3 5a       	subi	r30, 0xA3	; 163
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	2b ea       	ldi	r18, 0xAB	; 171
    1c2c:	3a ea       	ldi	r19, 0xAA	; 170
    1c2e:	4a e2       	ldi	r20, 0x2A	; 42
    1c30:	50 e4       	ldi	r21, 0x40	; 64
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c44:	fe 01       	movw	r30, r28
    1c46:	e7 5a       	subi	r30, 0xA7	; 167
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	34 f4       	brge	.+12     	; 0x1c6e <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1c62:	fe 01       	movw	r30, r28
    1c64:	e8 5a       	subi	r30, 0xA8	; 168
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 83       	st	Z, r24
    1c6c:	e0 c0       	rjmp	.+448    	; 0x1e2e <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e7 5a       	subi	r30, 0xA7	; 167
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	53 e4       	ldi	r21, 0x43	; 67
    1c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <LCD_write_data_4bit+0xc0>
    1c8c:	c0 c0       	rjmp	.+384    	; 0x1e0e <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e3 5a       	subi	r30, 0xA3	; 163
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a e7       	ldi	r20, 0x7A	; 122
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	fe 01       	movw	r30, r28
    1cae:	ec 5a       	subi	r30, 0xAC	; 172
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 83       	st	Z, r24
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	a2 83       	std	Z+2, r26	; 0x02
    1cb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	8e 01       	movw	r16, r28
    1cbc:	00 5b       	subi	r16, 0xB0	; 176
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ec 5a       	subi	r30, 0xAC	; 172
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a ef       	ldi	r20, 0xFA	; 250
    1cd4:	54 e4       	ldi	r21, 0x44	; 68
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	f8 01       	movw	r30, r16
    1ce0:	80 83       	st	Z, r24
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	a2 83       	std	Z+2, r26	; 0x02
    1ce6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e0 5b       	subi	r30, 0xB0	; 176
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	44 f4       	brge	.+16     	; 0x1d16 <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1d06:	fe 01       	movw	r30, r28
    1d08:	e2 5b       	subi	r30, 0xB2	; 178
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
    1d14:	64 c0       	rjmp	.+200    	; 0x1dde <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1d16:	fe 01       	movw	r30, r28
    1d18:	e0 5b       	subi	r30, 0xB0	; 176
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	0c f0       	brlt	.+2      	; 0x1d36 <LCD_write_data_4bit+0x168>
    1d34:	43 c0       	rjmp	.+134    	; 0x1dbc <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d36:	fe 01       	movw	r30, r28
    1d38:	ec 5a       	subi	r30, 0xAC	; 172
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8e 01       	movw	r16, r28
    1d56:	02 5b       	subi	r16, 0xB2	; 178
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	f8 01       	movw	r30, r16
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	1f c0       	rjmp	.+62     	; 0x1dac <LCD_write_data_4bit+0x1de>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e4 5b       	subi	r30, 0xB4	; 180
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	88 ec       	ldi	r24, 0xC8	; 200
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e4 5b       	subi	r30, 0xB4	; 180
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_write_data_4bit+0x1b8>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e4 5b       	subi	r30, 0xB4	; 180
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d94:	de 01       	movw	r26, r28
    1d96:	a2 5b       	subi	r26, 0xB2	; 178
    1d98:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e2 5b       	subi	r30, 0xB2	; 178
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	11 96       	adiw	r26, 0x01	; 1
    1da8:	9c 93       	st	X, r25
    1daa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dac:	fe 01       	movw	r30, r28
    1dae:	e2 5b       	subi	r30, 0xB2	; 178
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	91 81       	ldd	r25, Z+1	; 0x01
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	d1 f6       	brne	.-76     	; 0x1d6e <LCD_write_data_4bit+0x1a0>
    1dba:	4b c0       	rjmp	.+150    	; 0x1e52 <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	02 5b       	subi	r16, 0xB2	; 178
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e0 5b       	subi	r30, 0xB0	; 176
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	f8 01       	movw	r30, r16
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	80 83       	st	Z, r24
    1dde:	de 01       	movw	r26, r28
    1de0:	a6 5b       	subi	r26, 0xB6	; 182
    1de2:	bf 4f       	sbci	r27, 0xFF	; 255
    1de4:	fe 01       	movw	r30, r28
    1de6:	e2 5b       	subi	r30, 0xB2	; 178
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	9c 93       	st	X, r25
    1df2:	8e 93       	st	-X, r24
    1df4:	fe 01       	movw	r30, r28
    1df6:	e6 5b       	subi	r30, 0xB6	; 182
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <LCD_write_data_4bit+0x230>
    1e02:	fe 01       	movw	r30, r28
    1e04:	e6 5b       	subi	r30, 0xB6	; 182
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	22 c0       	rjmp	.+68     	; 0x1e52 <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e0e:	8e 01       	movw	r16, r28
    1e10:	08 5a       	subi	r16, 0xA8	; 168
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
    1e14:	fe 01       	movw	r30, r28
    1e16:	e7 5a       	subi	r30, 0xA7	; 167
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	60 81       	ld	r22, Z
    1e1c:	71 81       	ldd	r23, Z+1	; 0x01
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	80 83       	st	Z, r24
    1e2e:	de 01       	movw	r26, r28
    1e30:	a7 5b       	subi	r26, 0xB7	; 183
    1e32:	bf 4f       	sbci	r27, 0xFF	; 255
    1e34:	fe 01       	movw	r30, r28
    1e36:	e8 5a       	subi	r30, 0xA8	; 168
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e7 5b       	subi	r30, 0xB7	; 183
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	8a 95       	dec	r24
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_write_data_4bit+0x278>
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e7 5b       	subi	r30, 0xB7	; 183
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	eb 5b       	subi	r30, 0xBB	; 187
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e8       	ldi	r26, 0x80	; 128
    1e66:	bf e3       	ldi	r27, 0x3F	; 63
    1e68:	80 83       	st	Z, r24
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	a2 83       	std	Z+2, r26	; 0x02
    1e6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e70:	8e 01       	movw	r16, r28
    1e72:	0f 5b       	subi	r16, 0xBF	; 191
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	fe 01       	movw	r30, r28
    1e78:	eb 5b       	subi	r30, 0xBB	; 187
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	2b ea       	ldi	r18, 0xAB	; 171
    1e86:	3a ea       	ldi	r19, 0xAA	; 170
    1e88:	4a e2       	ldi	r20, 0x2A	; 42
    1e8a:	50 e4       	ldi	r21, 0x40	; 64
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	f8 01       	movw	r30, r16
    1e96:	80 83       	st	Z, r24
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	a2 83       	std	Z+2, r26	; 0x02
    1e9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	ef 5b       	subi	r30, 0xBF	; 191
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	34 f4       	brge	.+12     	; 0x1ec8 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e0 5c       	subi	r30, 0xC0	; 192
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 83       	st	Z, r24
    1ec6:	9d c0       	rjmp	.+314    	; 0x2002 <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ef 5b       	subi	r30, 0xBF	; 191
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	53 e4       	ldi	r21, 0x43	; 67
    1ede:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	0c f0       	brlt	.+2      	; 0x1ee8 <LCD_write_data_4bit+0x31a>
    1ee6:	7e c0       	rjmp	.+252    	; 0x1fe4 <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    1ee8:	fe 01       	movw	r30, r28
    1eea:	eb 5b       	subi	r30, 0xBB	; 187
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a e7       	ldi	r20, 0x7A	; 122
    1efc:	54 e4       	ldi	r21, 0x44	; 68
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8c af       	std	Y+60, r24	; 0x3c
    1f08:	9d af       	std	Y+61, r25	; 0x3d
    1f0a:	ae af       	std	Y+62, r26	; 0x3e
    1f0c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f10:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f12:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f14:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	88 af       	std	Y+56, r24	; 0x38
    1f28:	99 af       	std	Y+57, r25	; 0x39
    1f2a:	aa af       	std	Y+58, r26	; 0x3a
    1f2c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1f2e:	68 ad       	ldd	r22, Y+56	; 0x38
    1f30:	79 ad       	ldd	r23, Y+57	; 0x39
    1f32:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f34:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_write_data_4bit+0x382>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9f ab       	std	Y+55, r25	; 0x37
    1f4c:	8e ab       	std	Y+54, r24	; 0x36
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    1f50:	68 ad       	ldd	r22, Y+56	; 0x38
    1f52:	79 ad       	ldd	r23, Y+57	; 0x39
    1f54:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f56:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9f ab       	std	Y+55, r25	; 0x37
    1f8e:	8e ab       	std	Y+54, r24	; 0x36
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_write_data_4bit+0x3e2>
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9d ab       	std	Y+53, r25	; 0x35
    1f98:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f9a:	8c a9       	ldd	r24, Y+52	; 0x34
    1f9c:	9d a9       	ldd	r25, Y+53	; 0x35
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_write_data_4bit+0x3d0>
    1fa2:	9d ab       	std	Y+53, r25	; 0x35
    1fa4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8e a9       	ldd	r24, Y+54	; 0x36
    1fa8:	9f a9       	ldd	r25, Y+55	; 0x37
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9f ab       	std	Y+55, r25	; 0x37
    1fae:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8e a9       	ldd	r24, Y+54	; 0x36
    1fb2:	9f a9       	ldd	r25, Y+55	; 0x37
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_write_data_4bit+0x3c4>
    1fb8:	2d c0       	rjmp	.+90     	; 0x2014 <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	68 ad       	ldd	r22, Y+56	; 0x38
    1fbc:	79 ad       	ldd	r23, Y+57	; 0x39
    1fbe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1fc0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9f ab       	std	Y+55, r25	; 0x37
    1fcc:	8e ab       	std	Y+54, r24	; 0x36
    1fce:	8e a9       	ldd	r24, Y+54	; 0x36
    1fd0:	9f a9       	ldd	r25, Y+55	; 0x37
    1fd2:	9b ab       	std	Y+51, r25	; 0x33
    1fd4:	8a ab       	std	Y+50, r24	; 0x32
    1fd6:	8a a9       	ldd	r24, Y+50	; 0x32
    1fd8:	9b a9       	ldd	r25, Y+51	; 0x33
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_write_data_4bit+0x40c>
    1fde:	9b ab       	std	Y+51, r25	; 0x33
    1fe0:	8a ab       	std	Y+50, r24	; 0x32
    1fe2:	18 c0       	rjmp	.+48     	; 0x2014 <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ef 5b       	subi	r30, 0xBF	; 191
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e0 5c       	subi	r30, 0xC0	; 192
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 83       	st	Z, r24
    2002:	fe 01       	movw	r30, r28
    2004:	e0 5c       	subi	r30, 0xC0	; 192
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    200c:	89 a9       	ldd	r24, Y+49	; 0x31
    200e:	8a 95       	dec	r24
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_write_data_4bit+0x440>
    2012:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2014:	fe 01       	movw	r30, r28
    2016:	ee 59       	subi	r30, 0x9E	; 158
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	84 e0       	ldi	r24, 0x04	; 4
    201c:	80 83       	st	Z, r24
    201e:	26 c0       	rjmp	.+76     	; 0x206c <LCD_write_data_4bit+0x49e>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
    2020:	fe 01       	movw	r30, r28
    2022:	ed 59       	subi	r30, 0x9D	; 157
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	fe 01       	movw	r30, r28
    202e:	ee 59       	subi	r30, 0x9E	; 158
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 81       	ld	r24, Z
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <LCD_write_data_4bit+0x472>
    203c:	55 95       	asr	r21
    203e:	47 95       	ror	r20
    2040:	8a 95       	dec	r24
    2042:	e2 f7       	brpl	.-8      	; 0x203c <LCD_write_data_4bit+0x46e>
    2044:	ca 01       	movw	r24, r20
    2046:	98 2f       	mov	r25, r24
    2048:	91 70       	andi	r25, 0x01	; 1
    204a:	fe 01       	movw	r30, r28
    204c:	ee 59       	subi	r30, 0x9E	; 158
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	60 81       	ld	r22, Z
    2054:	49 2f       	mov	r20, r25
    2056:	0e 94 a0 32 	call	0x6540	; 0x6540 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    205a:	de 01       	movw	r26, r28
    205c:	ae 59       	subi	r26, 0x9E	; 158
    205e:	bf 4f       	sbci	r27, 0xFF	; 255
    2060:	fe 01       	movw	r30, r28
    2062:	ee 59       	subi	r30, 0x9E	; 158
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 81       	ld	r24, Z
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	8c 93       	st	X, r24
    206c:	fe 01       	movw	r30, r28
    206e:	ee 59       	subi	r30, 0x9E	; 158
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	88 30       	cpi	r24, 0x08	; 8
    2076:	a0 f2       	brcs	.-88     	; 0x2020 <LCD_write_data_4bit+0x452>
			DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e2       	ldi	r26, 0x20	; 32
    2086:	b1 e4       	ldi	r27, 0x41	; 65
    2088:	8d a7       	std	Y+45, r24	; 0x2d
    208a:	9e a7       	std	Y+46, r25	; 0x2e
    208c:	af a7       	std	Y+47, r26	; 0x2f
    208e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2090:	6d a5       	ldd	r22, Y+45	; 0x2d
    2092:	7e a5       	ldd	r23, Y+46	; 0x2e
    2094:	8f a5       	ldd	r24, Y+47	; 0x2f
    2096:	98 a9       	ldd	r25, Y+48	; 0x30
    2098:	2b ea       	ldi	r18, 0xAB	; 171
    209a:	3a ea       	ldi	r19, 0xAA	; 170
    209c:	4a e2       	ldi	r20, 0x2A	; 42
    209e:	50 e4       	ldi	r21, 0x40	; 64
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	89 a7       	std	Y+41, r24	; 0x29
    20aa:	9a a7       	std	Y+42, r25	; 0x2a
    20ac:	ab a7       	std	Y+43, r26	; 0x2b
    20ae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20b0:	69 a5       	ldd	r22, Y+41	; 0x29
    20b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    20b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	1c f4       	brge	.+6      	; 0x20ce <LCD_write_data_4bit+0x500>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	88 a7       	std	Y+40, r24	; 0x28
    20cc:	91 c0       	rjmp	.+290    	; 0x21f0 <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    20ce:	69 a5       	ldd	r22, Y+41	; 0x29
    20d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    20d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	53 e4       	ldi	r21, 0x43	; 67
    20de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	0c f0       	brlt	.+2      	; 0x20e8 <LCD_write_data_4bit+0x51a>
    20e6:	7b c0       	rjmp	.+246    	; 0x21de <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    20e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    20ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    20ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ee:	98 a9       	ldd	r25, Y+48	; 0x30
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a e7       	ldi	r20, 0x7A	; 122
    20f6:	54 e4       	ldi	r21, 0x44	; 68
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8c a3       	std	Y+36, r24	; 0x24
    2102:	9d a3       	std	Y+37, r25	; 0x25
    2104:	ae a3       	std	Y+38, r26	; 0x26
    2106:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	6c a1       	ldd	r22, Y+36	; 0x24
    210a:	7d a1       	ldd	r23, Y+37	; 0x25
    210c:	8e a1       	ldd	r24, Y+38	; 0x26
    210e:	9f a1       	ldd	r25, Y+39	; 0x27
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	88 a3       	std	Y+32, r24	; 0x20
    2122:	99 a3       	std	Y+33, r25	; 0x21
    2124:	aa a3       	std	Y+34, r26	; 0x22
    2126:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2128:	68 a1       	ldd	r22, Y+32	; 0x20
    212a:	79 a1       	ldd	r23, Y+33	; 0x21
    212c:	8a a1       	ldd	r24, Y+34	; 0x22
    212e:	9b a1       	ldd	r25, Y+35	; 0x23
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9f 8f       	std	Y+31, r25	; 0x1f
    2146:	8e 8f       	std	Y+30, r24	; 0x1e
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    214a:	68 a1       	ldd	r22, Y+32	; 0x20
    214c:	79 a1       	ldd	r23, Y+33	; 0x21
    214e:	8a a1       	ldd	r24, Y+34	; 0x22
    2150:	9b a1       	ldd	r25, Y+35	; 0x23
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	6c a1       	ldd	r22, Y+36	; 0x24
    2164:	7d a1       	ldd	r23, Y+37	; 0x25
    2166:	8e a1       	ldd	r24, Y+38	; 0x26
    2168:	9f a1       	ldd	r25, Y+39	; 0x27
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9f 8f       	std	Y+31, r25	; 0x1f
    2188:	8e 8f       	std	Y+30, r24	; 0x1e
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_write_data_4bit+0x5dc>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9d 8f       	std	Y+29, r25	; 0x1d
    2192:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2194:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2196:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_write_data_4bit+0x5ca>
    219c:	9d 8f       	std	Y+29, r25	; 0x1d
    219e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9f 8f       	std	Y+31, r25	; 0x1f
    21a8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_write_data_4bit+0x5be>
    21b2:	24 c0       	rjmp	.+72     	; 0x21fc <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	68 a1       	ldd	r22, Y+32	; 0x20
    21b6:	79 a1       	ldd	r23, Y+33	; 0x21
    21b8:	8a a1       	ldd	r24, Y+34	; 0x22
    21ba:	9b a1       	ldd	r25, Y+35	; 0x23
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9f 8f       	std	Y+31, r25	; 0x1f
    21c6:	8e 8f       	std	Y+30, r24	; 0x1e
    21c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21cc:	9b 8f       	std	Y+27, r25	; 0x1b
    21ce:	8a 8f       	std	Y+26, r24	; 0x1a
    21d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_write_data_4bit+0x606>
    21d8:	9b 8f       	std	Y+27, r25	; 0x1b
    21da:	8a 8f       	std	Y+26, r24	; 0x1a
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21de:	69 a5       	ldd	r22, Y+41	; 0x29
    21e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    21e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	88 a7       	std	Y+40, r24	; 0x28
    21f0:	88 a5       	ldd	r24, Y+40	; 0x28
    21f2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21f4:	89 8d       	ldd	r24, Y+25	; 0x19
    21f6:	8a 95       	dec	r24
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <LCD_write_data_4bit+0x628>
    21fa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e8       	ldi	r26, 0x80	; 128
    220a:	bf e3       	ldi	r27, 0x3F	; 63
    220c:	8d 8b       	std	Y+21, r24	; 0x15
    220e:	9e 8b       	std	Y+22, r25	; 0x16
    2210:	af 8b       	std	Y+23, r26	; 0x17
    2212:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2214:	6d 89       	ldd	r22, Y+21	; 0x15
    2216:	7e 89       	ldd	r23, Y+22	; 0x16
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	2b ea       	ldi	r18, 0xAB	; 171
    221e:	3a ea       	ldi	r19, 0xAA	; 170
    2220:	4a e2       	ldi	r20, 0x2A	; 42
    2222:	50 e4       	ldi	r21, 0x40	; 64
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	89 8b       	std	Y+17, r24	; 0x11
    222e:	9a 8b       	std	Y+18, r25	; 0x12
    2230:	ab 8b       	std	Y+19, r26	; 0x13
    2232:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2234:	69 89       	ldd	r22, Y+17	; 0x11
    2236:	7a 89       	ldd	r23, Y+18	; 0x12
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	1c f4       	brge	.+6      	; 0x2252 <LCD_write_data_4bit+0x684>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	88 8b       	std	Y+16, r24	; 0x10
    2250:	91 c0       	rjmp	.+290    	; 0x2374 <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    2252:	69 89       	ldd	r22, Y+17	; 0x11
    2254:	7a 89       	ldd	r23, Y+18	; 0x12
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	53 e4       	ldi	r21, 0x43	; 67
    2262:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	0c f0       	brlt	.+2      	; 0x226c <LCD_write_data_4bit+0x69e>
    226a:	7b c0       	rjmp	.+246    	; 0x2362 <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    226c:	6d 89       	ldd	r22, Y+21	; 0x15
    226e:	7e 89       	ldd	r23, Y+22	; 0x16
    2270:	8f 89       	ldd	r24, Y+23	; 0x17
    2272:	98 8d       	ldd	r25, Y+24	; 0x18
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	54 e4       	ldi	r21, 0x44	; 68
    227c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8c 87       	std	Y+12, r24	; 0x0c
    2286:	9d 87       	std	Y+13, r25	; 0x0d
    2288:	ae 87       	std	Y+14, r26	; 0x0e
    228a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	6c 85       	ldd	r22, Y+12	; 0x0c
    228e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2290:	8e 85       	ldd	r24, Y+14	; 0x0e
    2292:	9f 85       	ldd	r25, Y+15	; 0x0f
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a ef       	ldi	r20, 0xFA	; 250
    229a:	54 e4       	ldi	r21, 0x44	; 68
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	88 87       	std	Y+8, r24	; 0x08
    22a6:	99 87       	std	Y+9, r25	; 0x09
    22a8:	aa 87       	std	Y+10, r26	; 0x0a
    22aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22ac:	68 85       	ldd	r22, Y+8	; 0x08
    22ae:	79 85       	ldd	r23, Y+9	; 0x09
    22b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <LCD_write_data_4bit+0x700>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9f 83       	std	Y+7, r25	; 0x07
    22ca:	8e 83       	std	Y+6, r24	; 0x06
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    22ce:	68 85       	ldd	r22, Y+8	; 0x08
    22d0:	79 85       	ldd	r23, Y+9	; 0x09
    22d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    22e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    22ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9f 83       	std	Y+7, r25	; 0x07
    230c:	8e 83       	std	Y+6, r24	; 0x06
    230e:	0f c0       	rjmp	.+30     	; 0x232e <LCD_write_data_4bit+0x760>
    2310:	88 ec       	ldi	r24, 0xC8	; 200
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9d 83       	std	Y+5, r25	; 0x05
    2316:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2318:	8c 81       	ldd	r24, Y+4	; 0x04
    231a:	9d 81       	ldd	r25, Y+5	; 0x05
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_write_data_4bit+0x74e>
    2320:	9d 83       	std	Y+5, r25	; 0x05
    2322:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8e 81       	ldd	r24, Y+6	; 0x06
    2326:	9f 81       	ldd	r25, Y+7	; 0x07
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9f 83       	std	Y+7, r25	; 0x07
    232c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8e 81       	ldd	r24, Y+6	; 0x06
    2330:	9f 81       	ldd	r25, Y+7	; 0x07
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <LCD_write_data_4bit+0x742>
    2336:	24 c0       	rjmp	.+72     	; 0x2380 <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	68 85       	ldd	r22, Y+8	; 0x08
    233a:	79 85       	ldd	r23, Y+9	; 0x09
    233c:	8a 85       	ldd	r24, Y+10	; 0x0a
    233e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9f 83       	std	Y+7, r25	; 0x07
    234a:	8e 83       	std	Y+6, r24	; 0x06
    234c:	8e 81       	ldd	r24, Y+6	; 0x06
    234e:	9f 81       	ldd	r25, Y+7	; 0x07
    2350:	9b 83       	std	Y+3, r25	; 0x03
    2352:	8a 83       	std	Y+2, r24	; 0x02
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_write_data_4bit+0x78a>
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2362:	69 89       	ldd	r22, Y+17	; 0x11
    2364:	7a 89       	ldd	r23, Y+18	; 0x12
    2366:	8b 89       	ldd	r24, Y+19	; 0x13
    2368:	9c 89       	ldd	r25, Y+20	; 0x14
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	88 8b       	std	Y+16, r24	; 0x10
    2374:	88 89       	ldd	r24, Y+16	; 0x10
    2376:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	8a 95       	dec	r24
    237c:	f1 f7       	brne	.-4      	; 0x237a <LCD_write_data_4bit+0x7ac>
    237e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2380:	fe 01       	movw	r30, r28
    2382:	ef 59       	subi	r30, 0x9F	; 159
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	84 e0       	ldi	r24, 0x04	; 4
    2388:	80 83       	st	Z, r24
    238a:	27 c0       	rjmp	.+78     	; 0x23da <LCD_write_data_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
    238c:	fe 01       	movw	r30, r28
    238e:	ed 59       	subi	r30, 0x9D	; 157
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	fe 01       	movw	r30, r28
    239a:	ef 59       	subi	r30, 0x9F	; 159
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	04 97       	sbiw	r24, 0x04	; 4
    23a6:	f9 01       	movw	r30, r18
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <LCD_write_data_4bit+0x7e0>
    23aa:	f5 95       	asr	r31
    23ac:	e7 95       	ror	r30
    23ae:	8a 95       	dec	r24
    23b0:	e2 f7       	brpl	.-8      	; 0x23aa <LCD_write_data_4bit+0x7dc>
    23b2:	cf 01       	movw	r24, r30
    23b4:	98 2f       	mov	r25, r24
    23b6:	91 70       	andi	r25, 0x01	; 1
    23b8:	fe 01       	movw	r30, r28
    23ba:	ef 59       	subi	r30, 0x9F	; 159
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	60 81       	ld	r22, Z
    23c2:	49 2f       	mov	r20, r25
    23c4:	0e 94 a0 32 	call	0x6540	; 0x6540 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    23c8:	de 01       	movw	r26, r28
    23ca:	af 59       	subi	r26, 0x9F	; 159
    23cc:	bf 4f       	sbci	r27, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	ef 59       	subi	r30, 0x9F	; 159
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	8c 93       	st	X, r24
    23da:	fe 01       	movw	r30, r28
    23dc:	ef 59       	subi	r30, 0x9F	; 159
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	88 30       	cpi	r24, 0x08	; 8
    23e4:	98 f2       	brcs	.-90     	; 0x238c <LCD_write_data_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_word_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
}
    23ee:	cd 59       	subi	r28, 0x9D	; 157
    23f0:	df 4f       	sbci	r29, 0xFF	; 255
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	08 95       	ret

00002406 <LCD_write_cmd_4bit>:

void LCD_write_cmd_4bit(u8 lcd_copy_cmd_4bit){
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	c3 56       	subi	r28, 0x63	; 99
    2414:	d0 40       	sbci	r29, 0x00	; 0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	fe 01       	movw	r30, r28
    2422:	ed 59       	subi	r30, 0x9D	; 157
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 83       	st	Z, r24
	 *		lcd_copy_cmd_4bit>> The comand byte that needs to be sent to the LCD
	 *
	 *	Function does not return any  valus and it is helper and not allowed to be used out side of the driver.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	62 e0       	ldi	r22, 0x02	; 2
    242c:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    2438:	fe 01       	movw	r30, r28
    243a:	e3 5a       	subi	r30, 0xA3	; 163
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	bf e3       	ldi	r27, 0x3F	; 63
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    244e:	8e 01       	movw	r16, r28
    2450:	07 5a       	subi	r16, 0xA7	; 167
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	e3 5a       	subi	r30, 0xA3	; 163
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	2b ea       	ldi	r18, 0xAB	; 171
    2464:	3a ea       	ldi	r19, 0xAA	; 170
    2466:	4a e2       	ldi	r20, 0x2A	; 42
    2468:	50 e4       	ldi	r21, 0x40	; 64
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247c:	fe 01       	movw	r30, r28
    247e:	e7 5a       	subi	r30, 0xA7	; 167
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	34 f4       	brge	.+12     	; 0x24a6 <LCD_write_cmd_4bit+0xa0>
		__ticks = 1;
    249a:	fe 01       	movw	r30, r28
    249c:	e8 5a       	subi	r30, 0xA8	; 168
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	80 83       	st	Z, r24
    24a4:	e0 c0       	rjmp	.+448    	; 0x2666 <LCD_write_cmd_4bit+0x260>
	else if (__tmp > 255)
    24a6:	fe 01       	movw	r30, r28
    24a8:	e7 5a       	subi	r30, 0xA7	; 167
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	53 e4       	ldi	r21, 0x43	; 67
    24bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	0c f0       	brlt	.+2      	; 0x24c6 <LCD_write_cmd_4bit+0xc0>
    24c4:	c0 c0       	rjmp	.+384    	; 0x2646 <LCD_write_cmd_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    24c6:	fe 01       	movw	r30, r28
    24c8:	e3 5a       	subi	r30, 0xA3	; 163
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a e7       	ldi	r20, 0x7A	; 122
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	fe 01       	movw	r30, r28
    24e6:	ec 5a       	subi	r30, 0xAC	; 172
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 83       	st	Z, r24
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	a2 83       	std	Z+2, r26	; 0x02
    24f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	8e 01       	movw	r16, r28
    24f4:	00 5b       	subi	r16, 0xB0	; 176
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	fe 01       	movw	r30, r28
    24fa:	ec 5a       	subi	r30, 0xAC	; 172
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a ef       	ldi	r20, 0xFA	; 250
    250c:	54 e4       	ldi	r21, 0x44	; 68
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	f8 01       	movw	r30, r16
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2520:	fe 01       	movw	r30, r28
    2522:	e0 5b       	subi	r30, 0xB0	; 176
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	44 f4       	brge	.+16     	; 0x254e <LCD_write_cmd_4bit+0x148>
		__ticks = 1;
    253e:	fe 01       	movw	r30, r28
    2540:	e2 5b       	subi	r30, 0xB2	; 178
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	64 c0       	rjmp	.+200    	; 0x2616 <LCD_write_cmd_4bit+0x210>
	else if (__tmp > 65535)
    254e:	fe 01       	movw	r30, r28
    2550:	e0 5b       	subi	r30, 0xB0	; 176
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	0c f0       	brlt	.+2      	; 0x256e <LCD_write_cmd_4bit+0x168>
    256c:	43 c0       	rjmp	.+134    	; 0x25f4 <LCD_write_cmd_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	fe 01       	movw	r30, r28
    2570:	ec 5a       	subi	r30, 0xAC	; 172
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8e 01       	movw	r16, r28
    258e:	02 5b       	subi	r16, 0xB2	; 178
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	1f c0       	rjmp	.+62     	; 0x25e4 <LCD_write_cmd_4bit+0x1de>
    25a6:	fe 01       	movw	r30, r28
    25a8:	e4 5b       	subi	r30, 0xB4	; 180
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	88 ec       	ldi	r24, 0xC8	; 200
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25b4:	fe 01       	movw	r30, r28
    25b6:	e4 5b       	subi	r30, 0xB4	; 180
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_write_cmd_4bit+0x1b8>
    25c2:	fe 01       	movw	r30, r28
    25c4:	e4 5b       	subi	r30, 0xB4	; 180
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	de 01       	movw	r26, r28
    25ce:	a2 5b       	subi	r26, 0xB2	; 178
    25d0:	bf 4f       	sbci	r27, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e2 5b       	subi	r30, 0xB2	; 178
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	11 96       	adiw	r26, 0x01	; 1
    25e0:	9c 93       	st	X, r25
    25e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	fe 01       	movw	r30, r28
    25e6:	e2 5b       	subi	r30, 0xB2	; 178
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	d1 f6       	brne	.-76     	; 0x25a6 <LCD_write_cmd_4bit+0x1a0>
    25f2:	4b c0       	rjmp	.+150    	; 0x268a <LCD_write_cmd_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	8e 01       	movw	r16, r28
    25f6:	02 5b       	subi	r16, 0xB2	; 178
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	fe 01       	movw	r30, r28
    25fc:	e0 5b       	subi	r30, 0xB0	; 176
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	f8 01       	movw	r30, r16
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	de 01       	movw	r26, r28
    2618:	a6 5b       	subi	r26, 0xB6	; 182
    261a:	bf 4f       	sbci	r27, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	e2 5b       	subi	r30, 0xB2	; 178
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	11 96       	adiw	r26, 0x01	; 1
    2628:	9c 93       	st	X, r25
    262a:	8e 93       	st	-X, r24
    262c:	fe 01       	movw	r30, r28
    262e:	e6 5b       	subi	r30, 0xB6	; 182
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <LCD_write_cmd_4bit+0x230>
    263a:	fe 01       	movw	r30, r28
    263c:	e6 5b       	subi	r30, 0xB6	; 182
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
    2644:	22 c0       	rjmp	.+68     	; 0x268a <LCD_write_cmd_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2646:	8e 01       	movw	r16, r28
    2648:	08 5a       	subi	r16, 0xA8	; 168
    264a:	1f 4f       	sbci	r17, 0xFF	; 255
    264c:	fe 01       	movw	r30, r28
    264e:	e7 5a       	subi	r30, 0xA7	; 167
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	f8 01       	movw	r30, r16
    2664:	80 83       	st	Z, r24
    2666:	de 01       	movw	r26, r28
    2668:	a7 5b       	subi	r26, 0xB7	; 183
    266a:	bf 4f       	sbci	r27, 0xFF	; 255
    266c:	fe 01       	movw	r30, r28
    266e:	e8 5a       	subi	r30, 0xA8	; 168
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5b       	subi	r30, 0xB7	; 183
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	8a 95       	dec	r24
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_write_cmd_4bit+0x278>
    2682:	fe 01       	movw	r30, r28
    2684:	e7 5b       	subi	r30, 0xB7	; 183
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    2692:	fe 01       	movw	r30, r28
    2694:	eb 5b       	subi	r30, 0xBB	; 187
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a0 e8       	ldi	r26, 0x80	; 128
    269e:	bf e3       	ldi	r27, 0x3F	; 63
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26a8:	8e 01       	movw	r16, r28
    26aa:	0f 5b       	subi	r16, 0xBF	; 191
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	eb 5b       	subi	r30, 0xBB	; 187
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	2b ea       	ldi	r18, 0xAB	; 171
    26be:	3a ea       	ldi	r19, 0xAA	; 170
    26c0:	4a e2       	ldi	r20, 0x2A	; 42
    26c2:	50 e4       	ldi	r21, 0x40	; 64
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	80 83       	st	Z, r24
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	a2 83       	std	Z+2, r26	; 0x02
    26d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d6:	fe 01       	movw	r30, r28
    26d8:	ef 5b       	subi	r30, 0xBF	; 191
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	34 f4       	brge	.+12     	; 0x2700 <LCD_write_cmd_4bit+0x2fa>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	fe 01       	movw	r30, r28
    26f8:	e0 5c       	subi	r30, 0xC0	; 192
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 83       	st	Z, r24
    26fe:	9d c0       	rjmp	.+314    	; 0x283a <LCD_write_cmd_4bit+0x434>
	else if (__tmp > 255)
    2700:	fe 01       	movw	r30, r28
    2702:	ef 5b       	subi	r30, 0xBF	; 191
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4f e7       	ldi	r20, 0x7F	; 127
    2714:	53 e4       	ldi	r21, 0x43	; 67
    2716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    271a:	18 16       	cp	r1, r24
    271c:	0c f0       	brlt	.+2      	; 0x2720 <LCD_write_cmd_4bit+0x31a>
    271e:	7e c0       	rjmp	.+252    	; 0x281c <LCD_write_cmd_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    2720:	fe 01       	movw	r30, r28
    2722:	eb 5b       	subi	r30, 0xBB	; 187
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a e7       	ldi	r20, 0x7A	; 122
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8c af       	std	Y+60, r24	; 0x3c
    2740:	9d af       	std	Y+61, r25	; 0x3d
    2742:	ae af       	std	Y+62, r26	; 0x3e
    2744:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6c ad       	ldd	r22, Y+60	; 0x3c
    2748:	7d ad       	ldd	r23, Y+61	; 0x3d
    274a:	8e ad       	ldd	r24, Y+62	; 0x3e
    274c:	9f ad       	ldd	r25, Y+63	; 0x3f
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a ef       	ldi	r20, 0xFA	; 250
    2754:	54 e4       	ldi	r21, 0x44	; 68
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	88 af       	std	Y+56, r24	; 0x38
    2760:	99 af       	std	Y+57, r25	; 0x39
    2762:	aa af       	std	Y+58, r26	; 0x3a
    2764:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2766:	68 ad       	ldd	r22, Y+56	; 0x38
    2768:	79 ad       	ldd	r23, Y+57	; 0x39
    276a:	8a ad       	ldd	r24, Y+58	; 0x3a
    276c:	9b ad       	ldd	r25, Y+59	; 0x3b
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <LCD_write_cmd_4bit+0x382>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9f ab       	std	Y+55, r25	; 0x37
    2784:	8e ab       	std	Y+54, r24	; 0x36
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <LCD_write_cmd_4bit+0x400>
	else if (__tmp > 65535)
    2788:	68 ad       	ldd	r22, Y+56	; 0x38
    278a:	79 ad       	ldd	r23, Y+57	; 0x39
    278c:	8a ad       	ldd	r24, Y+58	; 0x3a
    278e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <LCD_write_cmd_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    27a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    27a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    27a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9f ab       	std	Y+55, r25	; 0x37
    27c6:	8e ab       	std	Y+54, r24	; 0x36
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <LCD_write_cmd_4bit+0x3e2>
    27ca:	88 ec       	ldi	r24, 0xC8	; 200
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9d ab       	std	Y+53, r25	; 0x35
    27d0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27d2:	8c a9       	ldd	r24, Y+52	; 0x34
    27d4:	9d a9       	ldd	r25, Y+53	; 0x35
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_write_cmd_4bit+0x3d0>
    27da:	9d ab       	std	Y+53, r25	; 0x35
    27dc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8e a9       	ldd	r24, Y+54	; 0x36
    27e0:	9f a9       	ldd	r25, Y+55	; 0x37
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9f ab       	std	Y+55, r25	; 0x37
    27e6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8e a9       	ldd	r24, Y+54	; 0x36
    27ea:	9f a9       	ldd	r25, Y+55	; 0x37
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <LCD_write_cmd_4bit+0x3c4>
    27f0:	2d c0       	rjmp	.+90     	; 0x284c <LCD_write_cmd_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	68 ad       	ldd	r22, Y+56	; 0x38
    27f4:	79 ad       	ldd	r23, Y+57	; 0x39
    27f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    27f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9f ab       	std	Y+55, r25	; 0x37
    2804:	8e ab       	std	Y+54, r24	; 0x36
    2806:	8e a9       	ldd	r24, Y+54	; 0x36
    2808:	9f a9       	ldd	r25, Y+55	; 0x37
    280a:	9b ab       	std	Y+51, r25	; 0x33
    280c:	8a ab       	std	Y+50, r24	; 0x32
    280e:	8a a9       	ldd	r24, Y+50	; 0x32
    2810:	9b a9       	ldd	r25, Y+51	; 0x33
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <LCD_write_cmd_4bit+0x40c>
    2816:	9b ab       	std	Y+51, r25	; 0x33
    2818:	8a ab       	std	Y+50, r24	; 0x32
    281a:	18 c0       	rjmp	.+48     	; 0x284c <LCD_write_cmd_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    281c:	fe 01       	movw	r30, r28
    281e:	ef 5b       	subi	r30, 0xBF	; 191
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	fe 01       	movw	r30, r28
    2834:	e0 5c       	subi	r30, 0xC0	; 192
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 83       	st	Z, r24
    283a:	fe 01       	movw	r30, r28
    283c:	e0 5c       	subi	r30, 0xC0	; 192
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2844:	89 a9       	ldd	r24, Y+49	; 0x31
    2846:	8a 95       	dec	r24
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_write_cmd_4bit+0x440>
    284a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    284c:	fe 01       	movw	r30, r28
    284e:	ee 59       	subi	r30, 0x9E	; 158
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	84 e0       	ldi	r24, 0x04	; 4
    2854:	80 83       	st	Z, r24
    2856:	26 c0       	rjmp	.+76     	; 0x28a4 <LCD_write_cmd_4bit+0x49e>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
    2858:	fe 01       	movw	r30, r28
    285a:	ed 59       	subi	r30, 0x9D	; 157
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	fe 01       	movw	r30, r28
    2866:	ee 59       	subi	r30, 0x9E	; 158
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a9 01       	movw	r20, r18
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <LCD_write_cmd_4bit+0x472>
    2874:	55 95       	asr	r21
    2876:	47 95       	ror	r20
    2878:	8a 95       	dec	r24
    287a:	e2 f7       	brpl	.-8      	; 0x2874 <LCD_write_cmd_4bit+0x46e>
    287c:	ca 01       	movw	r24, r20
    287e:	98 2f       	mov	r25, r24
    2880:	91 70       	andi	r25, 0x01	; 1
    2882:	fe 01       	movw	r30, r28
    2884:	ee 59       	subi	r30, 0x9E	; 158
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	60 81       	ld	r22, Z
    288c:	49 2f       	mov	r20, r25
    288e:	0e 94 a0 32 	call	0x6540	; 0x6540 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 4; i< 8; i++)
    2892:	de 01       	movw	r26, r28
    2894:	ae 59       	subi	r26, 0x9E	; 158
    2896:	bf 4f       	sbci	r27, 0xFF	; 255
    2898:	fe 01       	movw	r30, r28
    289a:	ee 59       	subi	r30, 0x9E	; 158
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	8f 5f       	subi	r24, 0xFF	; 255
    28a2:	8c 93       	st	X, r24
    28a4:	fe 01       	movw	r30, r28
    28a6:	ee 59       	subi	r30, 0x9E	; 158
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	88 30       	cpi	r24, 0x08	; 8
    28ae:	a0 f2       	brcs	.-88     	; 0x2858 <LCD_write_cmd_4bit+0x452>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a0 e2       	ldi	r26, 0x20	; 32
    28be:	b1 e4       	ldi	r27, 0x41	; 65
    28c0:	8d a7       	std	Y+45, r24	; 0x2d
    28c2:	9e a7       	std	Y+46, r25	; 0x2e
    28c4:	af a7       	std	Y+47, r26	; 0x2f
    28c6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    28ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    28cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ce:	98 a9       	ldd	r25, Y+48	; 0x30
    28d0:	2b ea       	ldi	r18, 0xAB	; 171
    28d2:	3a ea       	ldi	r19, 0xAA	; 170
    28d4:	4a e2       	ldi	r20, 0x2A	; 42
    28d6:	50 e4       	ldi	r21, 0x40	; 64
    28d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	89 a7       	std	Y+41, r24	; 0x29
    28e2:	9a a7       	std	Y+42, r25	; 0x2a
    28e4:	ab a7       	std	Y+43, r26	; 0x2b
    28e6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    28e8:	69 a5       	ldd	r22, Y+41	; 0x29
    28ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    28ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28fc:	88 23       	and	r24, r24
    28fe:	1c f4       	brge	.+6      	; 0x2906 <LCD_write_cmd_4bit+0x500>
		__ticks = 1;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	88 a7       	std	Y+40, r24	; 0x28
    2904:	91 c0       	rjmp	.+290    	; 0x2a28 <LCD_write_cmd_4bit+0x622>
	else if (__tmp > 255)
    2906:	69 a5       	ldd	r22, Y+41	; 0x29
    2908:	7a a5       	ldd	r23, Y+42	; 0x2a
    290a:	8b a5       	ldd	r24, Y+43	; 0x2b
    290c:	9c a5       	ldd	r25, Y+44	; 0x2c
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	53 e4       	ldi	r21, 0x43	; 67
    2916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	0c f0       	brlt	.+2      	; 0x2920 <LCD_write_cmd_4bit+0x51a>
    291e:	7b c0       	rjmp	.+246    	; 0x2a16 <LCD_write_cmd_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2920:	6d a5       	ldd	r22, Y+45	; 0x2d
    2922:	7e a5       	ldd	r23, Y+46	; 0x2e
    2924:	8f a5       	ldd	r24, Y+47	; 0x2f
    2926:	98 a9       	ldd	r25, Y+48	; 0x30
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	4a e7       	ldi	r20, 0x7A	; 122
    292e:	54 e4       	ldi	r21, 0x44	; 68
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8c a3       	std	Y+36, r24	; 0x24
    293a:	9d a3       	std	Y+37, r25	; 0x25
    293c:	ae a3       	std	Y+38, r26	; 0x26
    293e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2940:	6c a1       	ldd	r22, Y+36	; 0x24
    2942:	7d a1       	ldd	r23, Y+37	; 0x25
    2944:	8e a1       	ldd	r24, Y+38	; 0x26
    2946:	9f a1       	ldd	r25, Y+39	; 0x27
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	4a ef       	ldi	r20, 0xFA	; 250
    294e:	54 e4       	ldi	r21, 0x44	; 68
    2950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	88 a3       	std	Y+32, r24	; 0x20
    295a:	99 a3       	std	Y+33, r25	; 0x21
    295c:	aa a3       	std	Y+34, r26	; 0x22
    295e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2960:	68 a1       	ldd	r22, Y+32	; 0x20
    2962:	79 a1       	ldd	r23, Y+33	; 0x21
    2964:	8a a1       	ldd	r24, Y+34	; 0x22
    2966:	9b a1       	ldd	r25, Y+35	; 0x23
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2974:	88 23       	and	r24, r24
    2976:	2c f4       	brge	.+10     	; 0x2982 <LCD_write_cmd_4bit+0x57c>
		__ticks = 1;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	9f 8f       	std	Y+31, r25	; 0x1f
    297e:	8e 8f       	std	Y+30, r24	; 0x1e
    2980:	3f c0       	rjmp	.+126    	; 0x2a00 <LCD_write_cmd_4bit+0x5fa>
	else if (__tmp > 65535)
    2982:	68 a1       	ldd	r22, Y+32	; 0x20
    2984:	79 a1       	ldd	r23, Y+33	; 0x21
    2986:	8a a1       	ldd	r24, Y+34	; 0x22
    2988:	9b a1       	ldd	r25, Y+35	; 0x23
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	3f ef       	ldi	r19, 0xFF	; 255
    298e:	4f e7       	ldi	r20, 0x7F	; 127
    2990:	57 e4       	ldi	r21, 0x47	; 71
    2992:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2996:	18 16       	cp	r1, r24
    2998:	4c f5       	brge	.+82     	; 0x29ec <LCD_write_cmd_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299a:	6c a1       	ldd	r22, Y+36	; 0x24
    299c:	7d a1       	ldd	r23, Y+37	; 0x25
    299e:	8e a1       	ldd	r24, Y+38	; 0x26
    29a0:	9f a1       	ldd	r25, Y+39	; 0x27
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e2       	ldi	r20, 0x20	; 32
    29a8:	51 e4       	ldi	r21, 0x41	; 65
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	9f 8f       	std	Y+31, r25	; 0x1f
    29c0:	8e 8f       	std	Y+30, r24	; 0x1e
    29c2:	0f c0       	rjmp	.+30     	; 0x29e2 <LCD_write_cmd_4bit+0x5dc>
    29c4:	88 ec       	ldi	r24, 0xC8	; 200
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9d 8f       	std	Y+29, r25	; 0x1d
    29ca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <LCD_write_cmd_4bit+0x5ca>
    29d4:	9d 8f       	std	Y+29, r25	; 0x1d
    29d6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	9f 8f       	std	Y+31, r25	; 0x1f
    29e0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	69 f7       	brne	.-38     	; 0x29c4 <LCD_write_cmd_4bit+0x5be>
    29ea:	24 c0       	rjmp	.+72     	; 0x2a34 <LCD_write_cmd_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ec:	68 a1       	ldd	r22, Y+32	; 0x20
    29ee:	79 a1       	ldd	r23, Y+33	; 0x21
    29f0:	8a a1       	ldd	r24, Y+34	; 0x22
    29f2:	9b a1       	ldd	r25, Y+35	; 0x23
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9f 8f       	std	Y+31, r25	; 0x1f
    29fe:	8e 8f       	std	Y+30, r24	; 0x1e
    2a00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a04:	9b 8f       	std	Y+27, r25	; 0x1b
    2a06:	8a 8f       	std	Y+26, r24	; 0x1a
    2a08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_write_cmd_4bit+0x606>
    2a10:	9b 8f       	std	Y+27, r25	; 0x1b
    2a12:	8a 8f       	std	Y+26, r24	; 0x1a
    2a14:	0f c0       	rjmp	.+30     	; 0x2a34 <LCD_write_cmd_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a16:	69 a5       	ldd	r22, Y+41	; 0x29
    2a18:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	88 a7       	std	Y+40, r24	; 0x28
    2a28:	88 a5       	ldd	r24, Y+40	; 0x28
    2a2a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a2c:	89 8d       	ldd	r24, Y+25	; 0x19
    2a2e:	8a 95       	dec	r24
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_write_cmd_4bit+0x628>
    2a32:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	60 e0       	ldi	r22, 0x00	; 0
    2a38:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	a0 e8       	ldi	r26, 0x80	; 128
    2a42:	bf e3       	ldi	r27, 0x3F	; 63
    2a44:	8d 8b       	std	Y+21, r24	; 0x15
    2a46:	9e 8b       	std	Y+22, r25	; 0x16
    2a48:	af 8b       	std	Y+23, r26	; 0x17
    2a4a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	2b ea       	ldi	r18, 0xAB	; 171
    2a56:	3a ea       	ldi	r19, 0xAA	; 170
    2a58:	4a e2       	ldi	r20, 0x2A	; 42
    2a5a:	50 e4       	ldi	r21, 0x40	; 64
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	89 8b       	std	Y+17, r24	; 0x11
    2a66:	9a 8b       	std	Y+18, r25	; 0x12
    2a68:	ab 8b       	std	Y+19, r26	; 0x13
    2a6a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a6c:	69 89       	ldd	r22, Y+17	; 0x11
    2a6e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a70:	8b 89       	ldd	r24, Y+19	; 0x13
    2a72:	9c 89       	ldd	r25, Y+20	; 0x14
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e8       	ldi	r20, 0x80	; 128
    2a7a:	5f e3       	ldi	r21, 0x3F	; 63
    2a7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	1c f4       	brge	.+6      	; 0x2a8a <LCD_write_cmd_4bit+0x684>
		__ticks = 1;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	88 8b       	std	Y+16, r24	; 0x10
    2a88:	91 c0       	rjmp	.+290    	; 0x2bac <LCD_write_cmd_4bit+0x7a6>
	else if (__tmp > 255)
    2a8a:	69 89       	ldd	r22, Y+17	; 0x11
    2a8c:	7a 89       	ldd	r23, Y+18	; 0x12
    2a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a90:	9c 89       	ldd	r25, Y+20	; 0x14
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	53 e4       	ldi	r21, 0x43	; 67
    2a9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	0c f0       	brlt	.+2      	; 0x2aa4 <LCD_write_cmd_4bit+0x69e>
    2aa2:	7b c0       	rjmp	.+246    	; 0x2b9a <LCD_write_cmd_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4a e7       	ldi	r20, 0x7A	; 122
    2ab2:	54 e4       	ldi	r21, 0x44	; 68
    2ab4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	8c 87       	std	Y+12, r24	; 0x0c
    2abe:	9d 87       	std	Y+13, r25	; 0x0d
    2ac0:	ae 87       	std	Y+14, r26	; 0x0e
    2ac2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ac6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ac8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2aca:	9f 85       	ldd	r25, Y+15	; 0x0f
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4a ef       	ldi	r20, 0xFA	; 250
    2ad2:	54 e4       	ldi	r21, 0x44	; 68
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	88 87       	std	Y+8, r24	; 0x08
    2ade:	99 87       	std	Y+9, r25	; 0x09
    2ae0:	aa 87       	std	Y+10, r26	; 0x0a
    2ae2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ae4:	68 85       	ldd	r22, Y+8	; 0x08
    2ae6:	79 85       	ldd	r23, Y+9	; 0x09
    2ae8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aea:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	2c f4       	brge	.+10     	; 0x2b06 <LCD_write_cmd_4bit+0x700>
		__ticks = 1;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9f 83       	std	Y+7, r25	; 0x07
    2b02:	8e 83       	std	Y+6, r24	; 0x06
    2b04:	3f c0       	rjmp	.+126    	; 0x2b84 <LCD_write_cmd_4bit+0x77e>
	else if (__tmp > 65535)
    2b06:	68 85       	ldd	r22, Y+8	; 0x08
    2b08:	79 85       	ldd	r23, Y+9	; 0x09
    2b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	4c f5       	brge	.+82     	; 0x2b70 <LCD_write_cmd_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b20:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b22:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b24:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9f 83       	std	Y+7, r25	; 0x07
    2b44:	8e 83       	std	Y+6, r24	; 0x06
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <LCD_write_cmd_4bit+0x760>
    2b48:	88 ec       	ldi	r24, 0xC8	; 200
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	9d 83       	std	Y+5, r25	; 0x05
    2b4e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b50:	8c 81       	ldd	r24, Y+4	; 0x04
    2b52:	9d 81       	ldd	r25, Y+5	; 0x05
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LCD_write_cmd_4bit+0x74e>
    2b58:	9d 83       	std	Y+5, r25	; 0x05
    2b5a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	9f 83       	std	Y+7, r25	; 0x07
    2b64:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b66:	8e 81       	ldd	r24, Y+6	; 0x06
    2b68:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	69 f7       	brne	.-38     	; 0x2b48 <LCD_write_cmd_4bit+0x742>
    2b6e:	24 c0       	rjmp	.+72     	; 0x2bb8 <LCD_write_cmd_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	68 85       	ldd	r22, Y+8	; 0x08
    2b72:	79 85       	ldd	r23, Y+9	; 0x09
    2b74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9f 83       	std	Y+7, r25	; 0x07
    2b82:	8e 83       	std	Y+6, r24	; 0x06
    2b84:	8e 81       	ldd	r24, Y+6	; 0x06
    2b86:	9f 81       	ldd	r25, Y+7	; 0x07
    2b88:	9b 83       	std	Y+3, r25	; 0x03
    2b8a:	8a 83       	std	Y+2, r24	; 0x02
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <LCD_write_cmd_4bit+0x78a>
    2b94:	9b 83       	std	Y+3, r25	; 0x03
    2b96:	8a 83       	std	Y+2, r24	; 0x02
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <LCD_write_cmd_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b9a:	69 89       	ldd	r22, Y+17	; 0x11
    2b9c:	7a 89       	ldd	r23, Y+18	; 0x12
    2b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	88 8b       	std	Y+16, r24	; 0x10
    2bac:	88 89       	ldd	r24, Y+16	; 0x10
    2bae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	8a 95       	dec	r24
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_write_cmd_4bit+0x7ac>
    2bb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ef 59       	subi	r30, 0x9F	; 159
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	84 e0       	ldi	r24, 0x04	; 4
    2bc0:	80 83       	st	Z, r24
    2bc2:	27 c0       	rjmp	.+78     	; 0x2c12 <LCD_write_cmd_4bit+0x80c>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ed 59       	subi	r30, 0x9D	; 157
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ef 59       	subi	r30, 0x9F	; 159
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	88 2f       	mov	r24, r24
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	04 97       	sbiw	r24, 0x04	; 4
    2bde:	f9 01       	movw	r30, r18
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <LCD_write_cmd_4bit+0x7e0>
    2be2:	f5 95       	asr	r31
    2be4:	e7 95       	ror	r30
    2be6:	8a 95       	dec	r24
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <LCD_write_cmd_4bit+0x7dc>
    2bea:	cf 01       	movw	r24, r30
    2bec:	98 2f       	mov	r25, r24
    2bee:	91 70       	andi	r25, 0x01	; 1
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	ef 59       	subi	r30, 0x9F	; 159
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	60 81       	ld	r22, Z
    2bfa:	49 2f       	mov	r20, r25
    2bfc:	0e 94 a0 32 	call	0x6540	; 0x6540 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the Lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the Lower nipple
	for(u8 i= 4; i< 8; i++)
    2c00:	de 01       	movw	r26, r28
    2c02:	af 59       	subi	r26, 0x9F	; 159
    2c04:	bf 4f       	sbci	r27, 0xFF	; 255
    2c06:	fe 01       	movw	r30, r28
    2c08:	ef 59       	subi	r30, 0x9F	; 159
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	8f 5f       	subi	r24, 0xFF	; 255
    2c10:	8c 93       	st	X, r24
    2c12:	fe 01       	movw	r30, r28
    2c14:	ef 59       	subi	r30, 0x9F	; 159
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 30       	cpi	r24, 0x08	; 8
    2c1c:	98 f2       	brcs	.-90     	; 0x2bc4 <LCD_write_cmd_4bit+0x7be>
		DIO_void_assign_pin(lcd_data_port, i, get_bit(lcd_copy_cmd_4bit, i-4));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
}
    2c26:	cd 59       	subi	r28, 0x9D	; 157
    2c28:	df 4f       	sbci	r29, 0xFF	; 255
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	08 95       	ret

00002c3e <LCD_function_set_4bit>:

void LCD_function_set_4bit(void ){
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	cb 5a       	subi	r28, 0xAB	; 171
    2c4c:	d0 40       	sbci	r29, 0x00	; 0
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs for the function.
	 *
	 *	No return from the function.
	 */
	// Configure RS/RW pins to recive command
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	62 e0       	ldi	r22, 0x02	; 2
    2c5c:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RW);
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    2c68:	fe 01       	movw	r30, r28
    2c6a:	eb 55       	subi	r30, 0x5B	; 91
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a0 e8       	ldi	r26, 0x80	; 128
    2c74:	bf e3       	ldi	r27, 0x3F	; 63
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	a2 83       	std	Z+2, r26	; 0x02
    2c7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c7e:	8e 01       	movw	r16, r28
    2c80:	0f 55       	subi	r16, 0x5F	; 95
    2c82:	1f 4f       	sbci	r17, 0xFF	; 255
    2c84:	fe 01       	movw	r30, r28
    2c86:	eb 55       	subi	r30, 0x5B	; 91
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	2b ea       	ldi	r18, 0xAB	; 171
    2c94:	3a ea       	ldi	r19, 0xAA	; 170
    2c96:	4a e2       	ldi	r20, 0x2A	; 42
    2c98:	50 e4       	ldi	r21, 0x40	; 64
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	80 83       	st	Z, r24
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	a2 83       	std	Z+2, r26	; 0x02
    2caa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cac:	fe 01       	movw	r30, r28
    2cae:	ef 55       	subi	r30, 0x5F	; 95
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f e3       	ldi	r21, 0x3F	; 63
    2cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc6:	88 23       	and	r24, r24
    2cc8:	34 f4       	brge	.+12     	; 0x2cd6 <LCD_function_set_4bit+0x98>
		__ticks = 1;
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e0 56       	subi	r30, 0x60	; 96
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 83       	st	Z, r24
    2cd4:	e0 c0       	rjmp	.+448    	; 0x2e96 <LCD_function_set_4bit+0x258>
	else if (__tmp > 255)
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ef 55       	subi	r30, 0x5F	; 95
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	4f e7       	ldi	r20, 0x7F	; 127
    2cea:	53 e4       	ldi	r21, 0x43	; 67
    2cec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf0:	18 16       	cp	r1, r24
    2cf2:	0c f0       	brlt	.+2      	; 0x2cf6 <LCD_function_set_4bit+0xb8>
    2cf4:	c0 c0       	rjmp	.+384    	; 0x2e76 <LCD_function_set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	eb 55       	subi	r30, 0x5B	; 91
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	60 81       	ld	r22, Z
    2cfe:	71 81       	ldd	r23, Z+1	; 0x01
    2d00:	82 81       	ldd	r24, Z+2	; 0x02
    2d02:	93 81       	ldd	r25, Z+3	; 0x03
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a e7       	ldi	r20, 0x7A	; 122
    2d0a:	54 e4       	ldi	r21, 0x44	; 68
    2d0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	fe 01       	movw	r30, r28
    2d16:	e4 56       	subi	r30, 0x64	; 100
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 83       	st	Z, r24
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	a2 83       	std	Z+2, r26	; 0x02
    2d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d22:	8e 01       	movw	r16, r28
    2d24:	08 56       	subi	r16, 0x68	; 104
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e4 56       	subi	r30, 0x64	; 100
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	4a ef       	ldi	r20, 0xFA	; 250
    2d3c:	54 e4       	ldi	r21, 0x44	; 68
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	f8 01       	movw	r30, r16
    2d48:	80 83       	st	Z, r24
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	a2 83       	std	Z+2, r26	; 0x02
    2d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d50:	fe 01       	movw	r30, r28
    2d52:	e8 56       	subi	r30, 0x68	; 104
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	44 f4       	brge	.+16     	; 0x2d7e <LCD_function_set_4bit+0x140>
		__ticks = 1;
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ea 56       	subi	r30, 0x6A	; 106
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
    2d7c:	64 c0       	rjmp	.+200    	; 0x2e46 <LCD_function_set_4bit+0x208>
	else if (__tmp > 65535)
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e8 56       	subi	r30, 0x68	; 104
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	0c f0       	brlt	.+2      	; 0x2d9e <LCD_function_set_4bit+0x160>
    2d9c:	43 c0       	rjmp	.+134    	; 0x2e24 <LCD_function_set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e4 56       	subi	r30, 0x64	; 100
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e2       	ldi	r20, 0x20	; 32
    2db2:	51 e4       	ldi	r21, 0x41	; 65
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	0a 56       	subi	r16, 0x6A	; 106
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	f8 01       	movw	r30, r16
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
    2dd4:	1f c0       	rjmp	.+62     	; 0x2e14 <LCD_function_set_4bit+0x1d6>
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ec 56       	subi	r30, 0x6C	; 108
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2de4:	fe 01       	movw	r30, r28
    2de6:	ec 56       	subi	r30, 0x6C	; 108
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <LCD_function_set_4bit+0x1b0>
    2df2:	fe 01       	movw	r30, r28
    2df4:	ec 56       	subi	r30, 0x6C	; 108
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	de 01       	movw	r26, r28
    2dfe:	aa 56       	subi	r26, 0x6A	; 106
    2e00:	bf 4f       	sbci	r27, 0xFF	; 255
    2e02:	fe 01       	movw	r30, r28
    2e04:	ea 56       	subi	r30, 0x6A	; 106
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	11 96       	adiw	r26, 0x01	; 1
    2e10:	9c 93       	st	X, r25
    2e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	fe 01       	movw	r30, r28
    2e16:	ea 56       	subi	r30, 0x6A	; 106
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	d1 f6       	brne	.-76     	; 0x2dd6 <LCD_function_set_4bit+0x198>
    2e22:	4b c0       	rjmp	.+150    	; 0x2eba <LCD_function_set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	8e 01       	movw	r16, r28
    2e26:	0a 56       	subi	r16, 0x6A	; 106
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e8 56       	subi	r30, 0x68	; 104
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	de 01       	movw	r26, r28
    2e48:	ae 56       	subi	r26, 0x6E	; 110
    2e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ea 56       	subi	r30, 0x6A	; 106
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	11 96       	adiw	r26, 0x01	; 1
    2e58:	9c 93       	st	X, r25
    2e5a:	8e 93       	st	-X, r24
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	ee 56       	subi	r30, 0x6E	; 110
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <LCD_function_set_4bit+0x228>
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ee 56       	subi	r30, 0x6E	; 110
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	22 c0       	rjmp	.+68     	; 0x2eba <LCD_function_set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e76:	8e 01       	movw	r16, r28
    2e78:	00 56       	subi	r16, 0x60	; 96
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ef 55       	subi	r30, 0x5F	; 95
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	f8 01       	movw	r30, r16
    2e94:	80 83       	st	Z, r24
    2e96:	de 01       	movw	r26, r28
    2e98:	af 56       	subi	r26, 0x6F	; 111
    2e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e0 56       	subi	r30, 0x60	; 96
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ef 56       	subi	r30, 0x6F	; 111
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	80 81       	ld	r24, Z
    2eae:	8a 95       	dec	r24
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <LCD_function_set_4bit+0x270>
    2eb2:	fe 01       	movw	r30, r28
    2eb4:	ef 56       	subi	r30, 0x6F	; 111
    2eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb8:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e3 57       	subi	r30, 0x73	; 115
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	a0 e8       	ldi	r26, 0x80	; 128
    2ece:	bf e3       	ldi	r27, 0x3F	; 63
    2ed0:	80 83       	st	Z, r24
    2ed2:	91 83       	std	Z+1, r25	; 0x01
    2ed4:	a2 83       	std	Z+2, r26	; 0x02
    2ed6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ed8:	8e 01       	movw	r16, r28
    2eda:	07 57       	subi	r16, 0x77	; 119
    2edc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e3 57       	subi	r30, 0x73	; 115
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	60 81       	ld	r22, Z
    2ee6:	71 81       	ldd	r23, Z+1	; 0x01
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	93 81       	ldd	r25, Z+3	; 0x03
    2eec:	2b ea       	ldi	r18, 0xAB	; 171
    2eee:	3a ea       	ldi	r19, 0xAA	; 170
    2ef0:	4a e2       	ldi	r20, 0x2A	; 42
    2ef2:	50 e4       	ldi	r21, 0x40	; 64
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	f8 01       	movw	r30, r16
    2efe:	80 83       	st	Z, r24
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	a2 83       	std	Z+2, r26	; 0x02
    2f04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f06:	fe 01       	movw	r30, r28
    2f08:	e7 57       	subi	r30, 0x77	; 119
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	34 f4       	brge	.+12     	; 0x2f30 <LCD_function_set_4bit+0x2f2>
		__ticks = 1;
    2f24:	fe 01       	movw	r30, r28
    2f26:	e8 57       	subi	r30, 0x78	; 120
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	80 83       	st	Z, r24
    2f2e:	e0 c0       	rjmp	.+448    	; 0x30f0 <LCD_function_set_4bit+0x4b2>
	else if (__tmp > 255)
    2f30:	fe 01       	movw	r30, r28
    2f32:	e7 57       	subi	r30, 0x77	; 119
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	53 e4       	ldi	r21, 0x43	; 67
    2f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	0c f0       	brlt	.+2      	; 0x2f50 <LCD_function_set_4bit+0x312>
    2f4e:	c0 c0       	rjmp	.+384    	; 0x30d0 <LCD_function_set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2f50:	fe 01       	movw	r30, r28
    2f52:	e3 57       	subi	r30, 0x73	; 115
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	60 81       	ld	r22, Z
    2f58:	71 81       	ldd	r23, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a e7       	ldi	r20, 0x7A	; 122
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ec 57       	subi	r30, 0x7C	; 124
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 83       	st	Z, r24
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	a2 83       	std	Z+2, r26	; 0x02
    2f7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7c:	8e 01       	movw	r16, r28
    2f7e:	00 58       	subi	r16, 0x80	; 128
    2f80:	1f 4f       	sbci	r17, 0xFF	; 255
    2f82:	fe 01       	movw	r30, r28
    2f84:	ec 57       	subi	r30, 0x7C	; 124
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	82 81       	ldd	r24, Z+2	; 0x02
    2f8e:	93 81       	ldd	r25, Z+3	; 0x03
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	4a ef       	ldi	r20, 0xFA	; 250
    2f96:	54 e4       	ldi	r21, 0x44	; 68
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	f8 01       	movw	r30, r16
    2fa2:	80 83       	st	Z, r24
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	a2 83       	std	Z+2, r26	; 0x02
    2fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2faa:	fe 01       	movw	r30, r28
    2fac:	e0 58       	subi	r30, 0x80	; 128
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e8       	ldi	r20, 0x80	; 128
    2fbe:	5f e3       	ldi	r21, 0x3F	; 63
    2fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fc4:	88 23       	and	r24, r24
    2fc6:	44 f4       	brge	.+16     	; 0x2fd8 <LCD_function_set_4bit+0x39a>
		__ticks = 1;
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e2 58       	subi	r30, 0x82	; 130
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	80 83       	st	Z, r24
    2fd6:	64 c0       	rjmp	.+200    	; 0x30a0 <LCD_function_set_4bit+0x462>
	else if (__tmp > 65535)
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e0 58       	subi	r30, 0x80	; 128
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	3f ef       	ldi	r19, 0xFF	; 255
    2fea:	4f e7       	ldi	r20, 0x7F	; 127
    2fec:	57 e4       	ldi	r21, 0x47	; 71
    2fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ff2:	18 16       	cp	r1, r24
    2ff4:	0c f0       	brlt	.+2      	; 0x2ff8 <LCD_function_set_4bit+0x3ba>
    2ff6:	43 c0       	rjmp	.+134    	; 0x307e <LCD_function_set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	ec 57       	subi	r30, 0x7C	; 124
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	82 81       	ldd	r24, Z+2	; 0x02
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	51 e4       	ldi	r21, 0x41	; 65
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	8e 01       	movw	r16, r28
    3018:	02 58       	subi	r16, 0x82	; 130
    301a:	1f 4f       	sbci	r17, 0xFF	; 255
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	f8 01       	movw	r30, r16
    302a:	91 83       	std	Z+1, r25	; 0x01
    302c:	80 83       	st	Z, r24
    302e:	1f c0       	rjmp	.+62     	; 0x306e <LCD_function_set_4bit+0x430>
    3030:	fe 01       	movw	r30, r28
    3032:	e4 58       	subi	r30, 0x84	; 132
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	88 ec       	ldi	r24, 0xC8	; 200
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    303e:	fe 01       	movw	r30, r28
    3040:	e4 58       	subi	r30, 0x84	; 132
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	80 81       	ld	r24, Z
    3046:	91 81       	ldd	r25, Z+1	; 0x01
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <LCD_function_set_4bit+0x40a>
    304c:	fe 01       	movw	r30, r28
    304e:	e4 58       	subi	r30, 0x84	; 132
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3056:	de 01       	movw	r26, r28
    3058:	a2 58       	subi	r26, 0x82	; 130
    305a:	bf 4f       	sbci	r27, 0xFF	; 255
    305c:	fe 01       	movw	r30, r28
    305e:	e2 58       	subi	r30, 0x82	; 130
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	80 81       	ld	r24, Z
    3064:	91 81       	ldd	r25, Z+1	; 0x01
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	11 96       	adiw	r26, 0x01	; 1
    306a:	9c 93       	st	X, r25
    306c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306e:	fe 01       	movw	r30, r28
    3070:	e2 58       	subi	r30, 0x82	; 130
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	d1 f6       	brne	.-76     	; 0x3030 <LCD_function_set_4bit+0x3f2>
    307c:	4b c0       	rjmp	.+150    	; 0x3114 <LCD_function_set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307e:	8e 01       	movw	r16, r28
    3080:	02 58       	subi	r16, 0x82	; 130
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	fe 01       	movw	r30, r28
    3086:	e0 58       	subi	r30, 0x80	; 128
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	82 81       	ldd	r24, Z+2	; 0x02
    3090:	93 81       	ldd	r25, Z+3	; 0x03
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	f8 01       	movw	r30, r16
    309c:	91 83       	std	Z+1, r25	; 0x01
    309e:	80 83       	st	Z, r24
    30a0:	de 01       	movw	r26, r28
    30a2:	a6 58       	subi	r26, 0x86	; 134
    30a4:	bf 4f       	sbci	r27, 0xFF	; 255
    30a6:	fe 01       	movw	r30, r28
    30a8:	e2 58       	subi	r30, 0x82	; 130
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 81       	ld	r24, Z
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	11 96       	adiw	r26, 0x01	; 1
    30b2:	9c 93       	st	X, r25
    30b4:	8e 93       	st	-X, r24
    30b6:	fe 01       	movw	r30, r28
    30b8:	e6 58       	subi	r30, 0x86	; 134
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	80 81       	ld	r24, Z
    30be:	91 81       	ldd	r25, Z+1	; 0x01
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <LCD_function_set_4bit+0x482>
    30c4:	fe 01       	movw	r30, r28
    30c6:	e6 58       	subi	r30, 0x86	; 134
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	91 83       	std	Z+1, r25	; 0x01
    30cc:	80 83       	st	Z, r24
    30ce:	22 c0       	rjmp	.+68     	; 0x3114 <LCD_function_set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30d0:	8e 01       	movw	r16, r28
    30d2:	08 57       	subi	r16, 0x78	; 120
    30d4:	1f 4f       	sbci	r17, 0xFF	; 255
    30d6:	fe 01       	movw	r30, r28
    30d8:	e7 57       	subi	r30, 0x77	; 119
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	f8 01       	movw	r30, r16
    30ee:	80 83       	st	Z, r24
    30f0:	de 01       	movw	r26, r28
    30f2:	a7 58       	subi	r26, 0x87	; 135
    30f4:	bf 4f       	sbci	r27, 0xFF	; 255
    30f6:	fe 01       	movw	r30, r28
    30f8:	e8 57       	subi	r30, 0x78	; 120
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z
    30fe:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3100:	fe 01       	movw	r30, r28
    3102:	e7 58       	subi	r30, 0x87	; 135
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	80 81       	ld	r24, Z
    3108:	8a 95       	dec	r24
    310a:	f1 f7       	brne	.-4      	; 0x3108 <LCD_function_set_4bit+0x4ca>
    310c:	fe 01       	movw	r30, r28
    310e:	e7 58       	subi	r30, 0x87	; 135
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    3114:	fe 01       	movw	r30, r28
    3116:	e5 55       	subi	r30, 0x55	; 85
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	10 82       	st	Z, r1
    311c:	23 c0       	rjmp	.+70     	; 0x3164 <LCD_function_set_4bit+0x526>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    311e:	fe 01       	movw	r30, r28
    3120:	e5 55       	subi	r30, 0x55	; 85
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	48 2f       	mov	r20, r24
    3128:	4c 5f       	subi	r20, 0xFC	; 252
    312a:	fe 01       	movw	r30, r28
    312c:	e5 55       	subi	r30, 0x55	; 85
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 81       	ld	r24, Z
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <LCD_function_set_4bit+0x502>
    313c:	95 95       	asr	r25
    313e:	87 95       	ror	r24
    3140:	2a 95       	dec	r18
    3142:	e2 f7       	brpl	.-8      	; 0x313c <LCD_function_set_4bit+0x4fe>
    3144:	98 2f       	mov	r25, r24
    3146:	91 70       	andi	r25, 0x01	; 1
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	64 2f       	mov	r22, r20
    314c:	49 2f       	mov	r20, r25
    314e:	0e 94 a0 32 	call	0x6540	; 0x6540 <DIO_void_assign_pin>
	_delay_us(1);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple
	for(u8 i= 0; i< 4; i++)
    3152:	de 01       	movw	r26, r28
    3154:	a5 55       	subi	r26, 0x55	; 85
    3156:	bf 4f       	sbci	r27, 0xFF	; 255
    3158:	fe 01       	movw	r30, r28
    315a:	e5 55       	subi	r30, 0x55	; 85
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	80 81       	ld	r24, Z
    3160:	8f 5f       	subi	r24, 0xFF	; 255
    3162:	8c 93       	st	X, r24
    3164:	fe 01       	movw	r30, r28
    3166:	e5 55       	subi	r30, 0x55	; 85
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 81       	ld	r24, Z
    316c:	84 30       	cpi	r24, 0x04	; 4
    316e:	b8 f2       	brcs	.-82     	; 0x311e <LCD_function_set_4bit+0x4e0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin Low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    3178:	fe 01       	movw	r30, r28
    317a:	eb 58       	subi	r30, 0x8B	; 139
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	a0 e2       	ldi	r26, 0x20	; 32
    3184:	b1 e4       	ldi	r27, 0x41	; 65
    3186:	80 83       	st	Z, r24
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	a2 83       	std	Z+2, r26	; 0x02
    318c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    318e:	8e 01       	movw	r16, r28
    3190:	0f 58       	subi	r16, 0x8F	; 143
    3192:	1f 4f       	sbci	r17, 0xFF	; 255
    3194:	fe 01       	movw	r30, r28
    3196:	eb 58       	subi	r30, 0x8B	; 139
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	60 81       	ld	r22, Z
    319c:	71 81       	ldd	r23, Z+1	; 0x01
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	2b ea       	ldi	r18, 0xAB	; 171
    31a4:	3a ea       	ldi	r19, 0xAA	; 170
    31a6:	4a e2       	ldi	r20, 0x2A	; 42
    31a8:	50 e4       	ldi	r21, 0x40	; 64
    31aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	f8 01       	movw	r30, r16
    31b4:	80 83       	st	Z, r24
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	a2 83       	std	Z+2, r26	; 0x02
    31ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31bc:	fe 01       	movw	r30, r28
    31be:	ef 58       	subi	r30, 0x8F	; 143
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	34 f4       	brge	.+12     	; 0x31e6 <LCD_function_set_4bit+0x5a8>
		__ticks = 1;
    31da:	fe 01       	movw	r30, r28
    31dc:	e0 59       	subi	r30, 0x90	; 144
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	80 83       	st	Z, r24
    31e4:	e0 c0       	rjmp	.+448    	; 0x33a6 <LCD_function_set_4bit+0x768>
	else if (__tmp > 255)
    31e6:	fe 01       	movw	r30, r28
    31e8:	ef 58       	subi	r30, 0x8F	; 143
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4f e7       	ldi	r20, 0x7F	; 127
    31fa:	53 e4       	ldi	r21, 0x43	; 67
    31fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3200:	18 16       	cp	r1, r24
    3202:	0c f0       	brlt	.+2      	; 0x3206 <LCD_function_set_4bit+0x5c8>
    3204:	c0 c0       	rjmp	.+384    	; 0x3386 <LCD_function_set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    3206:	fe 01       	movw	r30, r28
    3208:	eb 58       	subi	r30, 0x8B	; 139
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	60 81       	ld	r22, Z
    320e:	71 81       	ldd	r23, Z+1	; 0x01
    3210:	82 81       	ldd	r24, Z+2	; 0x02
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	4a e7       	ldi	r20, 0x7A	; 122
    321a:	54 e4       	ldi	r21, 0x44	; 68
    321c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	fe 01       	movw	r30, r28
    3226:	e4 59       	subi	r30, 0x94	; 148
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	80 83       	st	Z, r24
    322c:	91 83       	std	Z+1, r25	; 0x01
    322e:	a2 83       	std	Z+2, r26	; 0x02
    3230:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3232:	8e 01       	movw	r16, r28
    3234:	08 59       	subi	r16, 0x98	; 152
    3236:	1f 4f       	sbci	r17, 0xFF	; 255
    3238:	fe 01       	movw	r30, r28
    323a:	e4 59       	subi	r30, 0x94	; 148
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	4a ef       	ldi	r20, 0xFA	; 250
    324c:	54 e4       	ldi	r21, 0x44	; 68
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	f8 01       	movw	r30, r16
    3258:	80 83       	st	Z, r24
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	a2 83       	std	Z+2, r26	; 0x02
    325e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3260:	fe 01       	movw	r30, r28
    3262:	e8 59       	subi	r30, 0x98	; 152
    3264:	ff 4f       	sbci	r31, 0xFF	; 255
    3266:	60 81       	ld	r22, Z
    3268:	71 81       	ldd	r23, Z+1	; 0x01
    326a:	82 81       	ldd	r24, Z+2	; 0x02
    326c:	93 81       	ldd	r25, Z+3	; 0x03
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e8       	ldi	r20, 0x80	; 128
    3274:	5f e3       	ldi	r21, 0x3F	; 63
    3276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    327a:	88 23       	and	r24, r24
    327c:	44 f4       	brge	.+16     	; 0x328e <LCD_function_set_4bit+0x650>
		__ticks = 1;
    327e:	fe 01       	movw	r30, r28
    3280:	ea 59       	subi	r30, 0x9A	; 154
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	91 83       	std	Z+1, r25	; 0x01
    328a:	80 83       	st	Z, r24
    328c:	64 c0       	rjmp	.+200    	; 0x3356 <LCD_function_set_4bit+0x718>
	else if (__tmp > 65535)
    328e:	fe 01       	movw	r30, r28
    3290:	e8 59       	subi	r30, 0x98	; 152
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	3f ef       	ldi	r19, 0xFF	; 255
    32a0:	4f e7       	ldi	r20, 0x7F	; 127
    32a2:	57 e4       	ldi	r21, 0x47	; 71
    32a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a8:	18 16       	cp	r1, r24
    32aa:	0c f0       	brlt	.+2      	; 0x32ae <LCD_function_set_4bit+0x670>
    32ac:	43 c0       	rjmp	.+134    	; 0x3334 <LCD_function_set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	fe 01       	movw	r30, r28
    32b0:	e4 59       	subi	r30, 0x94	; 148
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e2       	ldi	r20, 0x20	; 32
    32c2:	51 e4       	ldi	r21, 0x41	; 65
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8e 01       	movw	r16, r28
    32ce:	0a 59       	subi	r16, 0x9A	; 154
    32d0:	1f 4f       	sbci	r17, 0xFF	; 255
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	f8 01       	movw	r30, r16
    32e0:	91 83       	std	Z+1, r25	; 0x01
    32e2:	80 83       	st	Z, r24
    32e4:	1f c0       	rjmp	.+62     	; 0x3324 <LCD_function_set_4bit+0x6e6>
    32e6:	fe 01       	movw	r30, r28
    32e8:	ec 59       	subi	r30, 0x9C	; 156
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	88 ec       	ldi	r24, 0xC8	; 200
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	91 83       	std	Z+1, r25	; 0x01
    32f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32f4:	fe 01       	movw	r30, r28
    32f6:	ec 59       	subi	r30, 0x9C	; 156
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <LCD_function_set_4bit+0x6c0>
    3302:	fe 01       	movw	r30, r28
    3304:	ec 59       	subi	r30, 0x9C	; 156
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	91 83       	std	Z+1, r25	; 0x01
    330a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330c:	de 01       	movw	r26, r28
    330e:	aa 59       	subi	r26, 0x9A	; 154
    3310:	bf 4f       	sbci	r27, 0xFF	; 255
    3312:	fe 01       	movw	r30, r28
    3314:	ea 59       	subi	r30, 0x9A	; 154
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	11 96       	adiw	r26, 0x01	; 1
    3320:	9c 93       	st	X, r25
    3322:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3324:	fe 01       	movw	r30, r28
    3326:	ea 59       	subi	r30, 0x9A	; 154
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	d1 f6       	brne	.-76     	; 0x32e6 <LCD_function_set_4bit+0x6a8>
    3332:	4b c0       	rjmp	.+150    	; 0x33ca <LCD_function_set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3334:	8e 01       	movw	r16, r28
    3336:	0a 59       	subi	r16, 0x9A	; 154
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	fe 01       	movw	r30, r28
    333c:	e8 59       	subi	r30, 0x98	; 152
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	60 81       	ld	r22, Z
    3342:	71 81       	ldd	r23, Z+1	; 0x01
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	93 81       	ldd	r25, Z+3	; 0x03
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	f8 01       	movw	r30, r16
    3352:	91 83       	std	Z+1, r25	; 0x01
    3354:	80 83       	st	Z, r24
    3356:	de 01       	movw	r26, r28
    3358:	ae 59       	subi	r26, 0x9E	; 158
    335a:	bf 4f       	sbci	r27, 0xFF	; 255
    335c:	fe 01       	movw	r30, r28
    335e:	ea 59       	subi	r30, 0x9A	; 154
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	11 96       	adiw	r26, 0x01	; 1
    3368:	9c 93       	st	X, r25
    336a:	8e 93       	st	-X, r24
    336c:	fe 01       	movw	r30, r28
    336e:	ee 59       	subi	r30, 0x9E	; 158
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	80 81       	ld	r24, Z
    3374:	91 81       	ldd	r25, Z+1	; 0x01
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <LCD_function_set_4bit+0x738>
    337a:	fe 01       	movw	r30, r28
    337c:	ee 59       	subi	r30, 0x9E	; 158
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	91 83       	std	Z+1, r25	; 0x01
    3382:	80 83       	st	Z, r24
    3384:	22 c0       	rjmp	.+68     	; 0x33ca <LCD_function_set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3386:	8e 01       	movw	r16, r28
    3388:	00 59       	subi	r16, 0x90	; 144
    338a:	1f 4f       	sbci	r17, 0xFF	; 255
    338c:	fe 01       	movw	r30, r28
    338e:	ef 58       	subi	r30, 0x8F	; 143
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	60 81       	ld	r22, Z
    3394:	71 81       	ldd	r23, Z+1	; 0x01
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	f8 01       	movw	r30, r16
    33a4:	80 83       	st	Z, r24
    33a6:	de 01       	movw	r26, r28
    33a8:	af 59       	subi	r26, 0x9F	; 159
    33aa:	bf 4f       	sbci	r27, 0xFF	; 255
    33ac:	fe 01       	movw	r30, r28
    33ae:	e0 59       	subi	r30, 0x90	; 144
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 81       	ld	r24, Z
    33b4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33b6:	fe 01       	movw	r30, r28
    33b8:	ef 59       	subi	r30, 0x9F	; 159
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 81       	ld	r24, Z
    33be:	8a 95       	dec	r24
    33c0:	f1 f7       	brne	.-4      	; 0x33be <LCD_function_set_4bit+0x780>
    33c2:	fe 01       	movw	r30, r28
    33c4:	ef 59       	subi	r30, 0x9F	; 159
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	80 83       	st	Z, r24
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    33d2:	fe 01       	movw	r30, r28
    33d4:	e3 5a       	subi	r30, 0xA3	; 163
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	a0 e8       	ldi	r26, 0x80	; 128
    33de:	bf e3       	ldi	r27, 0x3F	; 63
    33e0:	80 83       	st	Z, r24
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	a2 83       	std	Z+2, r26	; 0x02
    33e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33e8:	8e 01       	movw	r16, r28
    33ea:	07 5a       	subi	r16, 0xA7	; 167
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	fe 01       	movw	r30, r28
    33f0:	e3 5a       	subi	r30, 0xA3	; 163
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	60 81       	ld	r22, Z
    33f6:	71 81       	ldd	r23, Z+1	; 0x01
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	93 81       	ldd	r25, Z+3	; 0x03
    33fc:	2b ea       	ldi	r18, 0xAB	; 171
    33fe:	3a ea       	ldi	r19, 0xAA	; 170
    3400:	4a e2       	ldi	r20, 0x2A	; 42
    3402:	50 e4       	ldi	r21, 0x40	; 64
    3404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	f8 01       	movw	r30, r16
    340e:	80 83       	st	Z, r24
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	a2 83       	std	Z+2, r26	; 0x02
    3414:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3416:	fe 01       	movw	r30, r28
    3418:	e7 5a       	subi	r30, 0xA7	; 167
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e8       	ldi	r20, 0x80	; 128
    342a:	5f e3       	ldi	r21, 0x3F	; 63
    342c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3430:	88 23       	and	r24, r24
    3432:	34 f4       	brge	.+12     	; 0x3440 <LCD_function_set_4bit+0x802>
		__ticks = 1;
    3434:	fe 01       	movw	r30, r28
    3436:	e8 5a       	subi	r30, 0xA8	; 168
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	80 83       	st	Z, r24
    343e:	e0 c0       	rjmp	.+448    	; 0x3600 <LCD_function_set_4bit+0x9c2>
	else if (__tmp > 255)
    3440:	fe 01       	movw	r30, r28
    3442:	e7 5a       	subi	r30, 0xA7	; 167
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	82 81       	ldd	r24, Z+2	; 0x02
    344c:	93 81       	ldd	r25, Z+3	; 0x03
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	4f e7       	ldi	r20, 0x7F	; 127
    3454:	53 e4       	ldi	r21, 0x43	; 67
    3456:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    345a:	18 16       	cp	r1, r24
    345c:	0c f0       	brlt	.+2      	; 0x3460 <LCD_function_set_4bit+0x822>
    345e:	c0 c0       	rjmp	.+384    	; 0x35e0 <LCD_function_set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    3460:	fe 01       	movw	r30, r28
    3462:	e3 5a       	subi	r30, 0xA3	; 163
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	60 81       	ld	r22, Z
    3468:	71 81       	ldd	r23, Z+1	; 0x01
    346a:	82 81       	ldd	r24, Z+2	; 0x02
    346c:	93 81       	ldd	r25, Z+3	; 0x03
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	4a e7       	ldi	r20, 0x7A	; 122
    3474:	54 e4       	ldi	r21, 0x44	; 68
    3476:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	fe 01       	movw	r30, r28
    3480:	ec 5a       	subi	r30, 0xAC	; 172
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	80 83       	st	Z, r24
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	a2 83       	std	Z+2, r26	; 0x02
    348a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	8e 01       	movw	r16, r28
    348e:	00 5b       	subi	r16, 0xB0	; 176
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	fe 01       	movw	r30, r28
    3494:	ec 5a       	subi	r30, 0xAC	; 172
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	4a ef       	ldi	r20, 0xFA	; 250
    34a6:	54 e4       	ldi	r21, 0x44	; 68
    34a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	f8 01       	movw	r30, r16
    34b2:	80 83       	st	Z, r24
    34b4:	91 83       	std	Z+1, r25	; 0x01
    34b6:	a2 83       	std	Z+2, r26	; 0x02
    34b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34ba:	fe 01       	movw	r30, r28
    34bc:	e0 5b       	subi	r30, 0xB0	; 176
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e8       	ldi	r20, 0x80	; 128
    34ce:	5f e3       	ldi	r21, 0x3F	; 63
    34d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34d4:	88 23       	and	r24, r24
    34d6:	44 f4       	brge	.+16     	; 0x34e8 <LCD_function_set_4bit+0x8aa>
		__ticks = 1;
    34d8:	fe 01       	movw	r30, r28
    34da:	e2 5b       	subi	r30, 0xB2	; 178
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	91 83       	std	Z+1, r25	; 0x01
    34e4:	80 83       	st	Z, r24
    34e6:	64 c0       	rjmp	.+200    	; 0x35b0 <LCD_function_set_4bit+0x972>
	else if (__tmp > 65535)
    34e8:	fe 01       	movw	r30, r28
    34ea:	e0 5b       	subi	r30, 0xB0	; 176
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	60 81       	ld	r22, Z
    34f0:	71 81       	ldd	r23, Z+1	; 0x01
    34f2:	82 81       	ldd	r24, Z+2	; 0x02
    34f4:	93 81       	ldd	r25, Z+3	; 0x03
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	3f ef       	ldi	r19, 0xFF	; 255
    34fa:	4f e7       	ldi	r20, 0x7F	; 127
    34fc:	57 e4       	ldi	r21, 0x47	; 71
    34fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3502:	18 16       	cp	r1, r24
    3504:	0c f0       	brlt	.+2      	; 0x3508 <LCD_function_set_4bit+0x8ca>
    3506:	43 c0       	rjmp	.+134    	; 0x358e <LCD_function_set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3508:	fe 01       	movw	r30, r28
    350a:	ec 5a       	subi	r30, 0xAC	; 172
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	60 81       	ld	r22, Z
    3510:	71 81       	ldd	r23, Z+1	; 0x01
    3512:	82 81       	ldd	r24, Z+2	; 0x02
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e2       	ldi	r20, 0x20	; 32
    351c:	51 e4       	ldi	r21, 0x41	; 65
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8e 01       	movw	r16, r28
    3528:	02 5b       	subi	r16, 0xB2	; 178
    352a:	1f 4f       	sbci	r17, 0xFF	; 255
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	f8 01       	movw	r30, r16
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	80 83       	st	Z, r24
    353e:	1f c0       	rjmp	.+62     	; 0x357e <LCD_function_set_4bit+0x940>
    3540:	fe 01       	movw	r30, r28
    3542:	e4 5b       	subi	r30, 0xB4	; 180
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	88 ec       	ldi	r24, 0xC8	; 200
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    354e:	fe 01       	movw	r30, r28
    3550:	e4 5b       	subi	r30, 0xB4	; 180
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	91 81       	ldd	r25, Z+1	; 0x01
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <LCD_function_set_4bit+0x91a>
    355c:	fe 01       	movw	r30, r28
    355e:	e4 5b       	subi	r30, 0xB4	; 180
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3566:	de 01       	movw	r26, r28
    3568:	a2 5b       	subi	r26, 0xB2	; 178
    356a:	bf 4f       	sbci	r27, 0xFF	; 255
    356c:	fe 01       	movw	r30, r28
    356e:	e2 5b       	subi	r30, 0xB2	; 178
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	11 96       	adiw	r26, 0x01	; 1
    357a:	9c 93       	st	X, r25
    357c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	fe 01       	movw	r30, r28
    3580:	e2 5b       	subi	r30, 0xB2	; 178
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	80 81       	ld	r24, Z
    3586:	91 81       	ldd	r25, Z+1	; 0x01
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	d1 f6       	brne	.-76     	; 0x3540 <LCD_function_set_4bit+0x902>
    358c:	4b c0       	rjmp	.+150    	; 0x3624 <LCD_function_set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358e:	8e 01       	movw	r16, r28
    3590:	02 5b       	subi	r16, 0xB2	; 178
    3592:	1f 4f       	sbci	r17, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	e0 5b       	subi	r30, 0xB0	; 176
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	f8 01       	movw	r30, r16
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	de 01       	movw	r26, r28
    35b2:	a6 5b       	subi	r26, 0xB6	; 182
    35b4:	bf 4f       	sbci	r27, 0xFF	; 255
    35b6:	fe 01       	movw	r30, r28
    35b8:	e2 5b       	subi	r30, 0xB2	; 178
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	80 81       	ld	r24, Z
    35be:	91 81       	ldd	r25, Z+1	; 0x01
    35c0:	11 96       	adiw	r26, 0x01	; 1
    35c2:	9c 93       	st	X, r25
    35c4:	8e 93       	st	-X, r24
    35c6:	fe 01       	movw	r30, r28
    35c8:	e6 5b       	subi	r30, 0xB6	; 182
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <LCD_function_set_4bit+0x992>
    35d4:	fe 01       	movw	r30, r28
    35d6:	e6 5b       	subi	r30, 0xB6	; 182
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
    35de:	22 c0       	rjmp	.+68     	; 0x3624 <LCD_function_set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35e0:	8e 01       	movw	r16, r28
    35e2:	08 5a       	subi	r16, 0xA8	; 168
    35e4:	1f 4f       	sbci	r17, 0xFF	; 255
    35e6:	fe 01       	movw	r30, r28
    35e8:	e7 5a       	subi	r30, 0xA7	; 167
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	60 81       	ld	r22, Z
    35ee:	71 81       	ldd	r23, Z+1	; 0x01
    35f0:	82 81       	ldd	r24, Z+2	; 0x02
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f8 01       	movw	r30, r16
    35fe:	80 83       	st	Z, r24
    3600:	de 01       	movw	r26, r28
    3602:	a7 5b       	subi	r26, 0xB7	; 183
    3604:	bf 4f       	sbci	r27, 0xFF	; 255
    3606:	fe 01       	movw	r30, r28
    3608:	e8 5a       	subi	r30, 0xA8	; 168
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3610:	fe 01       	movw	r30, r28
    3612:	e7 5b       	subi	r30, 0xB7	; 183
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	80 81       	ld	r24, Z
    3618:	8a 95       	dec	r24
    361a:	f1 f7       	brne	.-4      	; 0x3618 <LCD_function_set_4bit+0x9da>
    361c:	fe 01       	movw	r30, r28
    361e:	e7 5b       	subi	r30, 0xB7	; 183
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	80 83       	st	Z, r24
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    3624:	fe 01       	movw	r30, r28
    3626:	e6 55       	subi	r30, 0x56	; 86
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	10 82       	st	Z, r1
    362c:	23 c0       	rjmp	.+70     	; 0x3674 <LCD_function_set_4bit+0xa36>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
    362e:	fe 01       	movw	r30, r28
    3630:	e6 55       	subi	r30, 0x56	; 86
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 81       	ld	r24, Z
    3636:	48 2f       	mov	r20, r24
    3638:	4c 5f       	subi	r20, 0xFC	; 252
    363a:	fe 01       	movw	r30, r28
    363c:	e6 55       	subi	r30, 0x56	; 86
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	82 e0       	ldi	r24, 0x02	; 2
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <LCD_function_set_4bit+0xa12>
    364c:	95 95       	asr	r25
    364e:	87 95       	ror	r24
    3650:	2a 95       	dec	r18
    3652:	e2 f7       	brpl	.-8      	; 0x364c <LCD_function_set_4bit+0xa0e>
    3654:	98 2f       	mov	r25, r24
    3656:	91 70       	andi	r25, 0x01	; 1
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	64 2f       	mov	r22, r20
    365c:	49 2f       	mov	r20, r25
    365e:	0e 94 a0 32 	call	0x6540	; 0x6540 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the higher nipple again
	for(u8 i= 0; i< 4; i++)
    3662:	de 01       	movw	r26, r28
    3664:	a6 55       	subi	r26, 0x56	; 86
    3666:	bf 4f       	sbci	r27, 0xFF	; 255
    3668:	fe 01       	movw	r30, r28
    366a:	e6 55       	subi	r30, 0x56	; 86
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	80 81       	ld	r24, Z
    3670:	8f 5f       	subi	r24, 0xFF	; 255
    3672:	8c 93       	st	X, r24
    3674:	fe 01       	movw	r30, r28
    3676:	e6 55       	subi	r30, 0x56	; 86
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	80 81       	ld	r24, Z
    367c:	84 30       	cpi	r24, 0x04	; 4
    367e:	b8 f2       	brcs	.-82     	; 0x362e <LCD_function_set_4bit+0x9f0>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b0010, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    3688:	fe 01       	movw	r30, r28
    368a:	eb 5b       	subi	r30, 0xBB	; 187
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	a0 e2       	ldi	r26, 0x20	; 32
    3694:	b1 e4       	ldi	r27, 0x41	; 65
    3696:	80 83       	st	Z, r24
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	a2 83       	std	Z+2, r26	; 0x02
    369c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    369e:	8e 01       	movw	r16, r28
    36a0:	0f 5b       	subi	r16, 0xBF	; 191
    36a2:	1f 4f       	sbci	r17, 0xFF	; 255
    36a4:	fe 01       	movw	r30, r28
    36a6:	eb 5b       	subi	r30, 0xBB	; 187
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	2b ea       	ldi	r18, 0xAB	; 171
    36b4:	3a ea       	ldi	r19, 0xAA	; 170
    36b6:	4a e2       	ldi	r20, 0x2A	; 42
    36b8:	50 e4       	ldi	r21, 0x40	; 64
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	f8 01       	movw	r30, r16
    36c4:	80 83       	st	Z, r24
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	a2 83       	std	Z+2, r26	; 0x02
    36ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36cc:	fe 01       	movw	r30, r28
    36ce:	ef 5b       	subi	r30, 0xBF	; 191
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e8       	ldi	r20, 0x80	; 128
    36e0:	5f e3       	ldi	r21, 0x3F	; 63
    36e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36e6:	88 23       	and	r24, r24
    36e8:	34 f4       	brge	.+12     	; 0x36f6 <LCD_function_set_4bit+0xab8>
		__ticks = 1;
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	fe 01       	movw	r30, r28
    36ee:	e0 5c       	subi	r30, 0xC0	; 192
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 83       	st	Z, r24
    36f4:	9d c0       	rjmp	.+314    	; 0x3830 <LCD_function_set_4bit+0xbf2>
	else if (__tmp > 255)
    36f6:	fe 01       	movw	r30, r28
    36f8:	ef 5b       	subi	r30, 0xBF	; 191
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	60 81       	ld	r22, Z
    36fe:	71 81       	ldd	r23, Z+1	; 0x01
    3700:	82 81       	ldd	r24, Z+2	; 0x02
    3702:	93 81       	ldd	r25, Z+3	; 0x03
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4f e7       	ldi	r20, 0x7F	; 127
    370a:	53 e4       	ldi	r21, 0x43	; 67
    370c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3710:	18 16       	cp	r1, r24
    3712:	0c f0       	brlt	.+2      	; 0x3716 <LCD_function_set_4bit+0xad8>
    3714:	7e c0       	rjmp	.+252    	; 0x3812 <LCD_function_set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    3716:	fe 01       	movw	r30, r28
    3718:	eb 5b       	subi	r30, 0xBB	; 187
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 81       	ld	r22, Z
    371e:	71 81       	ldd	r23, Z+1	; 0x01
    3720:	82 81       	ldd	r24, Z+2	; 0x02
    3722:	93 81       	ldd	r25, Z+3	; 0x03
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	4a e7       	ldi	r20, 0x7A	; 122
    372a:	54 e4       	ldi	r21, 0x44	; 68
    372c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	8c af       	std	Y+60, r24	; 0x3c
    3736:	9d af       	std	Y+61, r25	; 0x3d
    3738:	ae af       	std	Y+62, r26	; 0x3e
    373a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373c:	6c ad       	ldd	r22, Y+60	; 0x3c
    373e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3740:	8e ad       	ldd	r24, Y+62	; 0x3e
    3742:	9f ad       	ldd	r25, Y+63	; 0x3f
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	4a ef       	ldi	r20, 0xFA	; 250
    374a:	54 e4       	ldi	r21, 0x44	; 68
    374c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	88 af       	std	Y+56, r24	; 0x38
    3756:	99 af       	std	Y+57, r25	; 0x39
    3758:	aa af       	std	Y+58, r26	; 0x3a
    375a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    375c:	68 ad       	ldd	r22, Y+56	; 0x38
    375e:	79 ad       	ldd	r23, Y+57	; 0x39
    3760:	8a ad       	ldd	r24, Y+58	; 0x3a
    3762:	9b ad       	ldd	r25, Y+59	; 0x3b
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5f e3       	ldi	r21, 0x3F	; 63
    376c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3770:	88 23       	and	r24, r24
    3772:	2c f4       	brge	.+10     	; 0x377e <LCD_function_set_4bit+0xb40>
		__ticks = 1;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9f ab       	std	Y+55, r25	; 0x37
    377a:	8e ab       	std	Y+54, r24	; 0x36
    377c:	3f c0       	rjmp	.+126    	; 0x37fc <LCD_function_set_4bit+0xbbe>
	else if (__tmp > 65535)
    377e:	68 ad       	ldd	r22, Y+56	; 0x38
    3780:	79 ad       	ldd	r23, Y+57	; 0x39
    3782:	8a ad       	ldd	r24, Y+58	; 0x3a
    3784:	9b ad       	ldd	r25, Y+59	; 0x3b
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	3f ef       	ldi	r19, 0xFF	; 255
    378a:	4f e7       	ldi	r20, 0x7F	; 127
    378c:	57 e4       	ldi	r21, 0x47	; 71
    378e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	4c f5       	brge	.+82     	; 0x37e8 <LCD_function_set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3796:	6c ad       	ldd	r22, Y+60	; 0x3c
    3798:	7d ad       	ldd	r23, Y+61	; 0x3d
    379a:	8e ad       	ldd	r24, Y+62	; 0x3e
    379c:	9f ad       	ldd	r25, Y+63	; 0x3f
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e2       	ldi	r20, 0x20	; 32
    37a4:	51 e4       	ldi	r21, 0x41	; 65
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9f ab       	std	Y+55, r25	; 0x37
    37bc:	8e ab       	std	Y+54, r24	; 0x36
    37be:	0f c0       	rjmp	.+30     	; 0x37de <LCD_function_set_4bit+0xba0>
    37c0:	88 ec       	ldi	r24, 0xC8	; 200
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9d ab       	std	Y+53, r25	; 0x35
    37c6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37c8:	8c a9       	ldd	r24, Y+52	; 0x34
    37ca:	9d a9       	ldd	r25, Y+53	; 0x35
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <LCD_function_set_4bit+0xb8e>
    37d0:	9d ab       	std	Y+53, r25	; 0x35
    37d2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d4:	8e a9       	ldd	r24, Y+54	; 0x36
    37d6:	9f a9       	ldd	r25, Y+55	; 0x37
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	9f ab       	std	Y+55, r25	; 0x37
    37dc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37de:	8e a9       	ldd	r24, Y+54	; 0x36
    37e0:	9f a9       	ldd	r25, Y+55	; 0x37
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	69 f7       	brne	.-38     	; 0x37c0 <LCD_function_set_4bit+0xb82>
    37e6:	2d c0       	rjmp	.+90     	; 0x3842 <LCD_function_set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e8:	68 ad       	ldd	r22, Y+56	; 0x38
    37ea:	79 ad       	ldd	r23, Y+57	; 0x39
    37ec:	8a ad       	ldd	r24, Y+58	; 0x3a
    37ee:	9b ad       	ldd	r25, Y+59	; 0x3b
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9f ab       	std	Y+55, r25	; 0x37
    37fa:	8e ab       	std	Y+54, r24	; 0x36
    37fc:	8e a9       	ldd	r24, Y+54	; 0x36
    37fe:	9f a9       	ldd	r25, Y+55	; 0x37
    3800:	9b ab       	std	Y+51, r25	; 0x33
    3802:	8a ab       	std	Y+50, r24	; 0x32
    3804:	8a a9       	ldd	r24, Y+50	; 0x32
    3806:	9b a9       	ldd	r25, Y+51	; 0x33
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <LCD_function_set_4bit+0xbca>
    380c:	9b ab       	std	Y+51, r25	; 0x33
    380e:	8a ab       	std	Y+50, r24	; 0x32
    3810:	18 c0       	rjmp	.+48     	; 0x3842 <LCD_function_set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3812:	fe 01       	movw	r30, r28
    3814:	ef 5b       	subi	r30, 0xBF	; 191
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	fe 01       	movw	r30, r28
    382a:	e0 5c       	subi	r30, 0xC0	; 192
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 83       	st	Z, r24
    3830:	fe 01       	movw	r30, r28
    3832:	e0 5c       	subi	r30, 0xC0	; 192
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 81       	ld	r24, Z
    3838:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    383a:	89 a9       	ldd	r24, Y+49	; 0x31
    383c:	8a 95       	dec	r24
    383e:	f1 f7       	brne	.-4      	; 0x383c <LCD_function_set_4bit+0xbfe>
    3840:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	a0 e8       	ldi	r26, 0x80	; 128
    3850:	bf e3       	ldi	r27, 0x3F	; 63
    3852:	8d a7       	std	Y+45, r24	; 0x2d
    3854:	9e a7       	std	Y+46, r25	; 0x2e
    3856:	af a7       	std	Y+47, r26	; 0x2f
    3858:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    385a:	6d a5       	ldd	r22, Y+45	; 0x2d
    385c:	7e a5       	ldd	r23, Y+46	; 0x2e
    385e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3860:	98 a9       	ldd	r25, Y+48	; 0x30
    3862:	2b ea       	ldi	r18, 0xAB	; 171
    3864:	3a ea       	ldi	r19, 0xAA	; 170
    3866:	4a e2       	ldi	r20, 0x2A	; 42
    3868:	50 e4       	ldi	r21, 0x40	; 64
    386a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	89 a7       	std	Y+41, r24	; 0x29
    3874:	9a a7       	std	Y+42, r25	; 0x2a
    3876:	ab a7       	std	Y+43, r26	; 0x2b
    3878:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    387a:	69 a5       	ldd	r22, Y+41	; 0x29
    387c:	7a a5       	ldd	r23, Y+42	; 0x2a
    387e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3880:	9c a5       	ldd	r25, Y+44	; 0x2c
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e8       	ldi	r20, 0x80	; 128
    3888:	5f e3       	ldi	r21, 0x3F	; 63
    388a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388e:	88 23       	and	r24, r24
    3890:	1c f4       	brge	.+6      	; 0x3898 <LCD_function_set_4bit+0xc5a>
		__ticks = 1;
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	88 a7       	std	Y+40, r24	; 0x28
    3896:	91 c0       	rjmp	.+290    	; 0x39ba <LCD_function_set_4bit+0xd7c>
	else if (__tmp > 255)
    3898:	69 a5       	ldd	r22, Y+41	; 0x29
    389a:	7a a5       	ldd	r23, Y+42	; 0x2a
    389c:	8b a5       	ldd	r24, Y+43	; 0x2b
    389e:	9c a5       	ldd	r25, Y+44	; 0x2c
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	4f e7       	ldi	r20, 0x7F	; 127
    38a6:	53 e4       	ldi	r21, 0x43	; 67
    38a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ac:	18 16       	cp	r1, r24
    38ae:	0c f0       	brlt	.+2      	; 0x38b2 <LCD_function_set_4bit+0xc74>
    38b0:	7b c0       	rjmp	.+246    	; 0x39a8 <LCD_function_set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    38b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    38b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    38b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	4a e7       	ldi	r20, 0x7A	; 122
    38c0:	54 e4       	ldi	r21, 0x44	; 68
    38c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8c a3       	std	Y+36, r24	; 0x24
    38cc:	9d a3       	std	Y+37, r25	; 0x25
    38ce:	ae a3       	std	Y+38, r26	; 0x26
    38d0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d2:	6c a1       	ldd	r22, Y+36	; 0x24
    38d4:	7d a1       	ldd	r23, Y+37	; 0x25
    38d6:	8e a1       	ldd	r24, Y+38	; 0x26
    38d8:	9f a1       	ldd	r25, Y+39	; 0x27
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	4a ef       	ldi	r20, 0xFA	; 250
    38e0:	54 e4       	ldi	r21, 0x44	; 68
    38e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	88 a3       	std	Y+32, r24	; 0x20
    38ec:	99 a3       	std	Y+33, r25	; 0x21
    38ee:	aa a3       	std	Y+34, r26	; 0x22
    38f0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    38f2:	68 a1       	ldd	r22, Y+32	; 0x20
    38f4:	79 a1       	ldd	r23, Y+33	; 0x21
    38f6:	8a a1       	ldd	r24, Y+34	; 0x22
    38f8:	9b a1       	ldd	r25, Y+35	; 0x23
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e8       	ldi	r20, 0x80	; 128
    3900:	5f e3       	ldi	r21, 0x3F	; 63
    3902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3906:	88 23       	and	r24, r24
    3908:	2c f4       	brge	.+10     	; 0x3914 <LCD_function_set_4bit+0xcd6>
		__ticks = 1;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9f 8f       	std	Y+31, r25	; 0x1f
    3910:	8e 8f       	std	Y+30, r24	; 0x1e
    3912:	3f c0       	rjmp	.+126    	; 0x3992 <LCD_function_set_4bit+0xd54>
	else if (__tmp > 65535)
    3914:	68 a1       	ldd	r22, Y+32	; 0x20
    3916:	79 a1       	ldd	r23, Y+33	; 0x21
    3918:	8a a1       	ldd	r24, Y+34	; 0x22
    391a:	9b a1       	ldd	r25, Y+35	; 0x23
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	3f ef       	ldi	r19, 0xFF	; 255
    3920:	4f e7       	ldi	r20, 0x7F	; 127
    3922:	57 e4       	ldi	r21, 0x47	; 71
    3924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3928:	18 16       	cp	r1, r24
    392a:	4c f5       	brge	.+82     	; 0x397e <LCD_function_set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392c:	6c a1       	ldd	r22, Y+36	; 0x24
    392e:	7d a1       	ldd	r23, Y+37	; 0x25
    3930:	8e a1       	ldd	r24, Y+38	; 0x26
    3932:	9f a1       	ldd	r25, Y+39	; 0x27
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e2       	ldi	r20, 0x20	; 32
    393a:	51 e4       	ldi	r21, 0x41	; 65
    393c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	bc 01       	movw	r22, r24
    3946:	cd 01       	movw	r24, r26
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9f 8f       	std	Y+31, r25	; 0x1f
    3952:	8e 8f       	std	Y+30, r24	; 0x1e
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <LCD_function_set_4bit+0xd36>
    3956:	88 ec       	ldi	r24, 0xC8	; 200
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	9d 8f       	std	Y+29, r25	; 0x1d
    395c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    395e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3960:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <LCD_function_set_4bit+0xd24>
    3966:	9d 8f       	std	Y+29, r25	; 0x1d
    3968:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    396c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	9f 8f       	std	Y+31, r25	; 0x1f
    3972:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3974:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3976:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	69 f7       	brne	.-38     	; 0x3956 <LCD_function_set_4bit+0xd18>
    397c:	24 c0       	rjmp	.+72     	; 0x39c6 <LCD_function_set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397e:	68 a1       	ldd	r22, Y+32	; 0x20
    3980:	79 a1       	ldd	r23, Y+33	; 0x21
    3982:	8a a1       	ldd	r24, Y+34	; 0x22
    3984:	9b a1       	ldd	r25, Y+35	; 0x23
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9f 8f       	std	Y+31, r25	; 0x1f
    3990:	8e 8f       	std	Y+30, r24	; 0x1e
    3992:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3994:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3996:	9b 8f       	std	Y+27, r25	; 0x1b
    3998:	8a 8f       	std	Y+26, r24	; 0x1a
    399a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    399c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <LCD_function_set_4bit+0xd60>
    39a2:	9b 8f       	std	Y+27, r25	; 0x1b
    39a4:	8a 8f       	std	Y+26, r24	; 0x1a
    39a6:	0f c0       	rjmp	.+30     	; 0x39c6 <LCD_function_set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39a8:	69 a5       	ldd	r22, Y+41	; 0x29
    39aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    39ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    39ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	88 a7       	std	Y+40, r24	; 0x28
    39ba:	88 a5       	ldd	r24, Y+40	; 0x28
    39bc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39be:	89 8d       	ldd	r24, Y+25	; 0x19
    39c0:	8a 95       	dec	r24
    39c2:	f1 f7       	brne	.-4      	; 0x39c0 <LCD_function_set_4bit+0xd82>
    39c4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    39c6:	fe 01       	movw	r30, r28
    39c8:	e7 55       	subi	r30, 0x57	; 87
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	10 82       	st	Z, r1
    39ce:	23 c0       	rjmp	.+70     	; 0x3a16 <LCD_function_set_4bit+0xdd8>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
    39d0:	fe 01       	movw	r30, r28
    39d2:	e7 55       	subi	r30, 0x57	; 87
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	80 81       	ld	r24, Z
    39d8:	48 2f       	mov	r20, r24
    39da:	4c 5f       	subi	r20, 0xFC	; 252
    39dc:	fe 01       	movw	r30, r28
    39de:	e7 55       	subi	r30, 0x57	; 87
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	88 e0       	ldi	r24, 0x08	; 8
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <LCD_function_set_4bit+0xdb4>
    39ee:	95 95       	asr	r25
    39f0:	87 95       	ror	r24
    39f2:	2a 95       	dec	r18
    39f4:	e2 f7       	brpl	.-8      	; 0x39ee <LCD_function_set_4bit+0xdb0>
    39f6:	98 2f       	mov	r25, r24
    39f8:	91 70       	andi	r25, 0x01	; 1
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	64 2f       	mov	r22, r20
    39fe:	49 2f       	mov	r20, r25
    3a00:	0e 94 a0 32 	call	0x6540	; 0x6540 <DIO_void_assign_pin>
	_delay_us(10);
	// Enable pin is high to send the packet
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
	_delay_us(1);
	// Sent the lower nipple
	for(u8 i= 0; i< 4; i++)
    3a04:	de 01       	movw	r26, r28
    3a06:	a7 55       	subi	r26, 0x57	; 87
    3a08:	bf 4f       	sbci	r27, 0xFF	; 255
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e7 55       	subi	r30, 0x57	; 87
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	8f 5f       	subi	r24, 0xFF	; 255
    3a14:	8c 93       	st	X, r24
    3a16:	fe 01       	movw	r30, r28
    3a18:	e7 55       	subi	r30, 0x57	; 87
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	80 81       	ld	r24, Z
    3a1e:	84 30       	cpi	r24, 0x04	; 4
    3a20:	b8 f2       	brcs	.-82     	; 0x39d0 <LCD_function_set_4bit+0xd92>
		DIO_void_assign_pin(lcd_data_port, i+4, get_bit(0b1000, i));
	// Enable pin low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	60 e0       	ldi	r22, 0x00	; 0
    3a26:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a0 e2       	ldi	r26, 0x20	; 32
    3a30:	b1 e4       	ldi	r27, 0x41	; 65
    3a32:	8d 8b       	std	Y+21, r24	; 0x15
    3a34:	9e 8b       	std	Y+22, r25	; 0x16
    3a36:	af 8b       	std	Y+23, r26	; 0x17
    3a38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a40:	98 8d       	ldd	r25, Y+24	; 0x18
    3a42:	2b ea       	ldi	r18, 0xAB	; 171
    3a44:	3a ea       	ldi	r19, 0xAA	; 170
    3a46:	4a e2       	ldi	r20, 0x2A	; 42
    3a48:	50 e4       	ldi	r21, 0x40	; 64
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	89 8b       	std	Y+17, r24	; 0x11
    3a54:	9a 8b       	std	Y+18, r25	; 0x12
    3a56:	ab 8b       	std	Y+19, r26	; 0x13
    3a58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3a5a:	69 89       	ldd	r22, Y+17	; 0x11
    3a5c:	7a 89       	ldd	r23, Y+18	; 0x12
    3a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a60:	9c 89       	ldd	r25, Y+20	; 0x14
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e8       	ldi	r20, 0x80	; 128
    3a68:	5f e3       	ldi	r21, 0x3F	; 63
    3a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a6e:	88 23       	and	r24, r24
    3a70:	1c f4       	brge	.+6      	; 0x3a78 <LCD_function_set_4bit+0xe3a>
		__ticks = 1;
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	88 8b       	std	Y+16, r24	; 0x10
    3a76:	91 c0       	rjmp	.+290    	; 0x3b9a <LCD_function_set_4bit+0xf5c>
	else if (__tmp > 255)
    3a78:	69 89       	ldd	r22, Y+17	; 0x11
    3a7a:	7a 89       	ldd	r23, Y+18	; 0x12
    3a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	53 e4       	ldi	r21, 0x43	; 67
    3a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	0c f0       	brlt	.+2      	; 0x3a92 <LCD_function_set_4bit+0xe54>
    3a90:	7b c0       	rjmp	.+246    	; 0x3b88 <LCD_function_set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    3a92:	6d 89       	ldd	r22, Y+21	; 0x15
    3a94:	7e 89       	ldd	r23, Y+22	; 0x16
    3a96:	8f 89       	ldd	r24, Y+23	; 0x17
    3a98:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	4a e7       	ldi	r20, 0x7A	; 122
    3aa0:	54 e4       	ldi	r21, 0x44	; 68
    3aa2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	8c 87       	std	Y+12, r24	; 0x0c
    3aac:	9d 87       	std	Y+13, r25	; 0x0d
    3aae:	ae 87       	std	Y+14, r26	; 0x0e
    3ab0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab2:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ab4:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ab6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ab8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	4a ef       	ldi	r20, 0xFA	; 250
    3ac0:	54 e4       	ldi	r21, 0x44	; 68
    3ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	88 87       	std	Y+8, r24	; 0x08
    3acc:	99 87       	std	Y+9, r25	; 0x09
    3ace:	aa 87       	std	Y+10, r26	; 0x0a
    3ad0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3ad2:	68 85       	ldd	r22, Y+8	; 0x08
    3ad4:	79 85       	ldd	r23, Y+9	; 0x09
    3ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ad8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e8       	ldi	r20, 0x80	; 128
    3ae0:	5f e3       	ldi	r21, 0x3F	; 63
    3ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ae6:	88 23       	and	r24, r24
    3ae8:	2c f4       	brge	.+10     	; 0x3af4 <LCD_function_set_4bit+0xeb6>
		__ticks = 1;
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	9f 83       	std	Y+7, r25	; 0x07
    3af0:	8e 83       	std	Y+6, r24	; 0x06
    3af2:	3f c0       	rjmp	.+126    	; 0x3b72 <LCD_function_set_4bit+0xf34>
	else if (__tmp > 65535)
    3af4:	68 85       	ldd	r22, Y+8	; 0x08
    3af6:	79 85       	ldd	r23, Y+9	; 0x09
    3af8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3afa:	9b 85       	ldd	r25, Y+11	; 0x0b
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	3f ef       	ldi	r19, 0xFF	; 255
    3b00:	4f e7       	ldi	r20, 0x7F	; 127
    3b02:	57 e4       	ldi	r21, 0x47	; 71
    3b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b08:	18 16       	cp	r1, r24
    3b0a:	4c f5       	brge	.+82     	; 0x3b5e <LCD_function_set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b10:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b12:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e2       	ldi	r20, 0x20	; 32
    3b1a:	51 e4       	ldi	r21, 0x41	; 65
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	bc 01       	movw	r22, r24
    3b26:	cd 01       	movw	r24, r26
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9f 83       	std	Y+7, r25	; 0x07
    3b32:	8e 83       	std	Y+6, r24	; 0x06
    3b34:	0f c0       	rjmp	.+30     	; 0x3b54 <LCD_function_set_4bit+0xf16>
    3b36:	88 ec       	ldi	r24, 0xC8	; 200
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	9d 83       	std	Y+5, r25	; 0x05
    3b3c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b40:	9d 81       	ldd	r25, Y+5	; 0x05
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	f1 f7       	brne	.-4      	; 0x3b42 <LCD_function_set_4bit+0xf04>
    3b46:	9d 83       	std	Y+5, r25	; 0x05
    3b48:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	9f 83       	std	Y+7, r25	; 0x07
    3b52:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b54:	8e 81       	ldd	r24, Y+6	; 0x06
    3b56:	9f 81       	ldd	r25, Y+7	; 0x07
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	69 f7       	brne	.-38     	; 0x3b36 <LCD_function_set_4bit+0xef8>
    3b5c:	24 c0       	rjmp	.+72     	; 0x3ba6 <LCD_function_set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5e:	68 85       	ldd	r22, Y+8	; 0x08
    3b60:	79 85       	ldd	r23, Y+9	; 0x09
    3b62:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b64:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	9f 83       	std	Y+7, r25	; 0x07
    3b70:	8e 83       	std	Y+6, r24	; 0x06
    3b72:	8e 81       	ldd	r24, Y+6	; 0x06
    3b74:	9f 81       	ldd	r25, Y+7	; 0x07
    3b76:	9b 83       	std	Y+3, r25	; 0x03
    3b78:	8a 83       	std	Y+2, r24	; 0x02
    3b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <LCD_function_set_4bit+0xf40>
    3b82:	9b 83       	std	Y+3, r25	; 0x03
    3b84:	8a 83       	std	Y+2, r24	; 0x02
    3b86:	0f c0       	rjmp	.+30     	; 0x3ba6 <LCD_function_set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b88:	69 89       	ldd	r22, Y+17	; 0x11
    3b8a:	7a 89       	ldd	r23, Y+18	; 0x12
    3b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	88 8b       	std	Y+16, r24	; 0x10
    3b9a:	88 89       	ldd	r24, Y+16	; 0x10
    3b9c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	8a 95       	dec	r24
    3ba2:	f1 f7       	brne	.-4      	; 0x3ba0 <LCD_function_set_4bit+0xf62>
    3ba4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    3ba6:	c5 55       	subi	r28, 0x55	; 85
    3ba8:	df 4f       	sbci	r29, 0xFF	; 255
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	1f 91       	pop	r17
    3bba:	0f 91       	pop	r16
    3bbc:	08 95       	ret

00003bbe <LCD_read_data_4bit>:

u8 LCD_read_data_4bit(void){
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	c1 56       	subi	r28, 0x61	; 97
    3bcc:	d0 40       	sbci	r29, 0x00	; 0
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
	 *	No inputs to the function
	 *
	 *	Function return the current address.
	 */
	// Configure the data pins to input
	DIO_void_set_pin_dir(lcd_data_port, B7, INPUT);
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	67 e0       	ldi	r22, 0x07	; 7
    3bdc:	40 e0       	ldi	r20, 0x00	; 0
    3bde:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, INPUT);
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	66 e0       	ldi	r22, 0x06	; 6
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, INPUT);
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	65 e0       	ldi	r22, 0x05	; 5
    3bf0:	40 e0       	ldi	r20, 0x00	; 0
    3bf2:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, INPUT);
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	64 e0       	ldi	r22, 0x04	; 4
    3bfa:	40 e0       	ldi	r20, 0x00	; 0
    3bfc:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	// Configure RS/RW pins to send address
	DIO_void_clear_pin(lcd_ctrl_port, lcd_RS);
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	62 e0       	ldi	r22, 0x02	; 2
    3c04:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
	DIO_void_set_pin(lcd_ctrl_port, lcd_RW);
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	61 e0       	ldi	r22, 0x01	; 1
    3c0c:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    3c10:	fe 01       	movw	r30, r28
    3c12:	e3 5a       	subi	r30, 0xA3	; 163
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	a0 e8       	ldi	r26, 0x80	; 128
    3c1c:	bf e3       	ldi	r27, 0x3F	; 63
    3c1e:	80 83       	st	Z, r24
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	a2 83       	std	Z+2, r26	; 0x02
    3c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c26:	8e 01       	movw	r16, r28
    3c28:	07 5a       	subi	r16, 0xA7	; 167
    3c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e3 5a       	subi	r30, 0xA3	; 163
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	2b ea       	ldi	r18, 0xAB	; 171
    3c3c:	3a ea       	ldi	r19, 0xAA	; 170
    3c3e:	4a e2       	ldi	r20, 0x2A	; 42
    3c40:	50 e4       	ldi	r21, 0x40	; 64
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	80 83       	st	Z, r24
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	a2 83       	std	Z+2, r26	; 0x02
    3c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c54:	fe 01       	movw	r30, r28
    3c56:	e7 5a       	subi	r30, 0xA7	; 167
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	60 81       	ld	r22, Z
    3c5c:	71 81       	ldd	r23, Z+1	; 0x01
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	93 81       	ldd	r25, Z+3	; 0x03
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e8       	ldi	r20, 0x80	; 128
    3c68:	5f e3       	ldi	r21, 0x3F	; 63
    3c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c6e:	88 23       	and	r24, r24
    3c70:	34 f4       	brge	.+12     	; 0x3c7e <LCD_read_data_4bit+0xc0>
		__ticks = 1;
    3c72:	fe 01       	movw	r30, r28
    3c74:	e8 5a       	subi	r30, 0xA8	; 168
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	80 83       	st	Z, r24
    3c7c:	e0 c0       	rjmp	.+448    	; 0x3e3e <LCD_read_data_4bit+0x280>
	else if (__tmp > 255)
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e7 5a       	subi	r30, 0xA7	; 167
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	60 81       	ld	r22, Z
    3c86:	71 81       	ldd	r23, Z+1	; 0x01
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	4f e7       	ldi	r20, 0x7F	; 127
    3c92:	53 e4       	ldi	r21, 0x43	; 67
    3c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c98:	18 16       	cp	r1, r24
    3c9a:	0c f0       	brlt	.+2      	; 0x3c9e <LCD_read_data_4bit+0xe0>
    3c9c:	c0 c0       	rjmp	.+384    	; 0x3e1e <LCD_read_data_4bit+0x260>
	{
		_delay_ms(__us / 1000.0);
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	e3 5a       	subi	r30, 0xA3	; 163
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	60 81       	ld	r22, Z
    3ca6:	71 81       	ldd	r23, Z+1	; 0x01
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	93 81       	ldd	r25, Z+3	; 0x03
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	4a e7       	ldi	r20, 0x7A	; 122
    3cb2:	54 e4       	ldi	r21, 0x44	; 68
    3cb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	ec 5a       	subi	r30, 0xAC	; 172
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	80 83       	st	Z, r24
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	a2 83       	std	Z+2, r26	; 0x02
    3cc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cca:	8e 01       	movw	r16, r28
    3ccc:	00 5b       	subi	r16, 0xB0	; 176
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	ec 5a       	subi	r30, 0xAC	; 172
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	60 81       	ld	r22, Z
    3cd8:	71 81       	ldd	r23, Z+1	; 0x01
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	4a ef       	ldi	r20, 0xFA	; 250
    3ce4:	54 e4       	ldi	r21, 0x44	; 68
    3ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	f8 01       	movw	r30, r16
    3cf0:	80 83       	st	Z, r24
    3cf2:	91 83       	std	Z+1, r25	; 0x01
    3cf4:	a2 83       	std	Z+2, r26	; 0x02
    3cf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	e0 5b       	subi	r30, 0xB0	; 176
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	60 81       	ld	r22, Z
    3d00:	71 81       	ldd	r23, Z+1	; 0x01
    3d02:	82 81       	ldd	r24, Z+2	; 0x02
    3d04:	93 81       	ldd	r25, Z+3	; 0x03
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e8       	ldi	r20, 0x80	; 128
    3d0c:	5f e3       	ldi	r21, 0x3F	; 63
    3d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d12:	88 23       	and	r24, r24
    3d14:	44 f4       	brge	.+16     	; 0x3d26 <LCD_read_data_4bit+0x168>
		__ticks = 1;
    3d16:	fe 01       	movw	r30, r28
    3d18:	e2 5b       	subi	r30, 0xB2	; 178
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	80 83       	st	Z, r24
    3d24:	64 c0       	rjmp	.+200    	; 0x3dee <LCD_read_data_4bit+0x230>
	else if (__tmp > 65535)
    3d26:	fe 01       	movw	r30, r28
    3d28:	e0 5b       	subi	r30, 0xB0	; 176
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	60 81       	ld	r22, Z
    3d2e:	71 81       	ldd	r23, Z+1	; 0x01
    3d30:	82 81       	ldd	r24, Z+2	; 0x02
    3d32:	93 81       	ldd	r25, Z+3	; 0x03
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	3f ef       	ldi	r19, 0xFF	; 255
    3d38:	4f e7       	ldi	r20, 0x7F	; 127
    3d3a:	57 e4       	ldi	r21, 0x47	; 71
    3d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d40:	18 16       	cp	r1, r24
    3d42:	0c f0       	brlt	.+2      	; 0x3d46 <LCD_read_data_4bit+0x188>
    3d44:	43 c0       	rjmp	.+134    	; 0x3dcc <LCD_read_data_4bit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d46:	fe 01       	movw	r30, r28
    3d48:	ec 5a       	subi	r30, 0xAC	; 172
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	60 81       	ld	r22, Z
    3d4e:	71 81       	ldd	r23, Z+1	; 0x01
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e2       	ldi	r20, 0x20	; 32
    3d5a:	51 e4       	ldi	r21, 0x41	; 65
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	8e 01       	movw	r16, r28
    3d66:	02 5b       	subi	r16, 0xB2	; 178
    3d68:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6a:	bc 01       	movw	r22, r24
    3d6c:	cd 01       	movw	r24, r26
    3d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d72:	dc 01       	movw	r26, r24
    3d74:	cb 01       	movw	r24, r22
    3d76:	f8 01       	movw	r30, r16
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
    3d7c:	1f c0       	rjmp	.+62     	; 0x3dbc <LCD_read_data_4bit+0x1fe>
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e4 5b       	subi	r30, 0xB4	; 180
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	88 ec       	ldi	r24, 0xC8	; 200
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	91 83       	std	Z+1, r25	; 0x01
    3d8a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e4 5b       	subi	r30, 0xB4	; 180
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	80 81       	ld	r24, Z
    3d94:	91 81       	ldd	r25, Z+1	; 0x01
    3d96:	01 97       	sbiw	r24, 0x01	; 1
    3d98:	f1 f7       	brne	.-4      	; 0x3d96 <LCD_read_data_4bit+0x1d8>
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	e4 5b       	subi	r30, 0xB4	; 180
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da4:	de 01       	movw	r26, r28
    3da6:	a2 5b       	subi	r26, 0xB2	; 178
    3da8:	bf 4f       	sbci	r27, 0xFF	; 255
    3daa:	fe 01       	movw	r30, r28
    3dac:	e2 5b       	subi	r30, 0xB2	; 178
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 81       	ld	r24, Z
    3db2:	91 81       	ldd	r25, Z+1	; 0x01
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	11 96       	adiw	r26, 0x01	; 1
    3db8:	9c 93       	st	X, r25
    3dba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e2 5b       	subi	r30, 0xB2	; 178
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	80 81       	ld	r24, Z
    3dc4:	91 81       	ldd	r25, Z+1	; 0x01
    3dc6:	00 97       	sbiw	r24, 0x00	; 0
    3dc8:	d1 f6       	brne	.-76     	; 0x3d7e <LCD_read_data_4bit+0x1c0>
    3dca:	4b c0       	rjmp	.+150    	; 0x3e62 <LCD_read_data_4bit+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dcc:	8e 01       	movw	r16, r28
    3dce:	02 5b       	subi	r16, 0xB2	; 178
    3dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	e0 5b       	subi	r30, 0xB0	; 176
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	60 81       	ld	r22, Z
    3dda:	71 81       	ldd	r23, Z+1	; 0x01
    3ddc:	82 81       	ldd	r24, Z+2	; 0x02
    3dde:	93 81       	ldd	r25, Z+3	; 0x03
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	f8 01       	movw	r30, r16
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24
    3dee:	de 01       	movw	r26, r28
    3df0:	a6 5b       	subi	r26, 0xB6	; 182
    3df2:	bf 4f       	sbci	r27, 0xFF	; 255
    3df4:	fe 01       	movw	r30, r28
    3df6:	e2 5b       	subi	r30, 0xB2	; 178
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	80 81       	ld	r24, Z
    3dfc:	91 81       	ldd	r25, Z+1	; 0x01
    3dfe:	11 96       	adiw	r26, 0x01	; 1
    3e00:	9c 93       	st	X, r25
    3e02:	8e 93       	st	-X, r24
    3e04:	fe 01       	movw	r30, r28
    3e06:	e6 5b       	subi	r30, 0xB6	; 182
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	80 81       	ld	r24, Z
    3e0c:	91 81       	ldd	r25, Z+1	; 0x01
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	f1 f7       	brne	.-4      	; 0x3e0e <LCD_read_data_4bit+0x250>
    3e12:	fe 01       	movw	r30, r28
    3e14:	e6 5b       	subi	r30, 0xB6	; 182
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	91 83       	std	Z+1, r25	; 0x01
    3e1a:	80 83       	st	Z, r24
    3e1c:	22 c0       	rjmp	.+68     	; 0x3e62 <LCD_read_data_4bit+0x2a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e1e:	8e 01       	movw	r16, r28
    3e20:	08 5a       	subi	r16, 0xA8	; 168
    3e22:	1f 4f       	sbci	r17, 0xFF	; 255
    3e24:	fe 01       	movw	r30, r28
    3e26:	e7 5a       	subi	r30, 0xA7	; 167
    3e28:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2a:	60 81       	ld	r22, Z
    3e2c:	71 81       	ldd	r23, Z+1	; 0x01
    3e2e:	82 81       	ldd	r24, Z+2	; 0x02
    3e30:	93 81       	ldd	r25, Z+3	; 0x03
    3e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	f8 01       	movw	r30, r16
    3e3c:	80 83       	st	Z, r24
    3e3e:	de 01       	movw	r26, r28
    3e40:	a7 5b       	subi	r26, 0xB7	; 183
    3e42:	bf 4f       	sbci	r27, 0xFF	; 255
    3e44:	fe 01       	movw	r30, r28
    3e46:	e8 5a       	subi	r30, 0xA8	; 168
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e4e:	fe 01       	movw	r30, r28
    3e50:	e7 5b       	subi	r30, 0xB7	; 183
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	80 81       	ld	r24, Z
    3e56:	8a 95       	dec	r24
    3e58:	f1 f7       	brne	.-4      	; 0x3e56 <LCD_read_data_4bit+0x298>
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e7 5b       	subi	r30, 0xB7	; 183
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	80 83       	st	Z, r24
	_delay_us(1);
	// Enable pin is high to recive the higher nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	eb 5b       	subi	r30, 0xBB	; 187
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	a0 e8       	ldi	r26, 0x80	; 128
    3e76:	bf e3       	ldi	r27, 0x3F	; 63
    3e78:	80 83       	st	Z, r24
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	a2 83       	std	Z+2, r26	; 0x02
    3e7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e80:	8e 01       	movw	r16, r28
    3e82:	0f 5b       	subi	r16, 0xBF	; 191
    3e84:	1f 4f       	sbci	r17, 0xFF	; 255
    3e86:	fe 01       	movw	r30, r28
    3e88:	eb 5b       	subi	r30, 0xBB	; 187
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	60 81       	ld	r22, Z
    3e8e:	71 81       	ldd	r23, Z+1	; 0x01
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	2b ea       	ldi	r18, 0xAB	; 171
    3e96:	3a ea       	ldi	r19, 0xAA	; 170
    3e98:	4a e2       	ldi	r20, 0x2A	; 42
    3e9a:	50 e4       	ldi	r21, 0x40	; 64
    3e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	f8 01       	movw	r30, r16
    3ea6:	80 83       	st	Z, r24
    3ea8:	91 83       	std	Z+1, r25	; 0x01
    3eaa:	a2 83       	std	Z+2, r26	; 0x02
    3eac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eae:	fe 01       	movw	r30, r28
    3eb0:	ef 5b       	subi	r30, 0xBF	; 191
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	60 81       	ld	r22, Z
    3eb6:	71 81       	ldd	r23, Z+1	; 0x01
    3eb8:	82 81       	ldd	r24, Z+2	; 0x02
    3eba:	93 81       	ldd	r25, Z+3	; 0x03
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	40 e8       	ldi	r20, 0x80	; 128
    3ec2:	5f e3       	ldi	r21, 0x3F	; 63
    3ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ec8:	88 23       	and	r24, r24
    3eca:	34 f4       	brge	.+12     	; 0x3ed8 <LCD_read_data_4bit+0x31a>
		__ticks = 1;
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	fe 01       	movw	r30, r28
    3ed0:	e0 5c       	subi	r30, 0xC0	; 192
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	80 83       	st	Z, r24
    3ed6:	9d c0       	rjmp	.+314    	; 0x4012 <LCD_read_data_4bit+0x454>
	else if (__tmp > 255)
    3ed8:	fe 01       	movw	r30, r28
    3eda:	ef 5b       	subi	r30, 0xBF	; 191
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	60 81       	ld	r22, Z
    3ee0:	71 81       	ldd	r23, Z+1	; 0x01
    3ee2:	82 81       	ldd	r24, Z+2	; 0x02
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	4f e7       	ldi	r20, 0x7F	; 127
    3eec:	53 e4       	ldi	r21, 0x43	; 67
    3eee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef2:	18 16       	cp	r1, r24
    3ef4:	0c f0       	brlt	.+2      	; 0x3ef8 <LCD_read_data_4bit+0x33a>
    3ef6:	7e c0       	rjmp	.+252    	; 0x3ff4 <LCD_read_data_4bit+0x436>
	{
		_delay_ms(__us / 1000.0);
    3ef8:	fe 01       	movw	r30, r28
    3efa:	eb 5b       	subi	r30, 0xBB	; 187
    3efc:	ff 4f       	sbci	r31, 0xFF	; 255
    3efe:	60 81       	ld	r22, Z
    3f00:	71 81       	ldd	r23, Z+1	; 0x01
    3f02:	82 81       	ldd	r24, Z+2	; 0x02
    3f04:	93 81       	ldd	r25, Z+3	; 0x03
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	4a e7       	ldi	r20, 0x7A	; 122
    3f0c:	54 e4       	ldi	r21, 0x44	; 68
    3f0e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	8c af       	std	Y+60, r24	; 0x3c
    3f18:	9d af       	std	Y+61, r25	; 0x3d
    3f1a:	ae af       	std	Y+62, r26	; 0x3e
    3f1c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f20:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f22:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f24:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	4a ef       	ldi	r20, 0xFA	; 250
    3f2c:	54 e4       	ldi	r21, 0x44	; 68
    3f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f32:	dc 01       	movw	r26, r24
    3f34:	cb 01       	movw	r24, r22
    3f36:	88 af       	std	Y+56, r24	; 0x38
    3f38:	99 af       	std	Y+57, r25	; 0x39
    3f3a:	aa af       	std	Y+58, r26	; 0x3a
    3f3c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3f3e:	68 ad       	ldd	r22, Y+56	; 0x38
    3f40:	79 ad       	ldd	r23, Y+57	; 0x39
    3f42:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f44:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e8       	ldi	r20, 0x80	; 128
    3f4c:	5f e3       	ldi	r21, 0x3F	; 63
    3f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f52:	88 23       	and	r24, r24
    3f54:	2c f4       	brge	.+10     	; 0x3f60 <LCD_read_data_4bit+0x3a2>
		__ticks = 1;
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	9f ab       	std	Y+55, r25	; 0x37
    3f5c:	8e ab       	std	Y+54, r24	; 0x36
    3f5e:	3f c0       	rjmp	.+126    	; 0x3fde <LCD_read_data_4bit+0x420>
	else if (__tmp > 65535)
    3f60:	68 ad       	ldd	r22, Y+56	; 0x38
    3f62:	79 ad       	ldd	r23, Y+57	; 0x39
    3f64:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f66:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	3f ef       	ldi	r19, 0xFF	; 255
    3f6c:	4f e7       	ldi	r20, 0x7F	; 127
    3f6e:	57 e4       	ldi	r21, 0x47	; 71
    3f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f74:	18 16       	cp	r1, r24
    3f76:	4c f5       	brge	.+82     	; 0x3fca <LCD_read_data_4bit+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f78:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f7a:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e2       	ldi	r20, 0x20	; 32
    3f86:	51 e4       	ldi	r21, 0x41	; 65
    3f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	bc 01       	movw	r22, r24
    3f92:	cd 01       	movw	r24, r26
    3f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f98:	dc 01       	movw	r26, r24
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	9f ab       	std	Y+55, r25	; 0x37
    3f9e:	8e ab       	std	Y+54, r24	; 0x36
    3fa0:	0f c0       	rjmp	.+30     	; 0x3fc0 <LCD_read_data_4bit+0x402>
    3fa2:	88 ec       	ldi	r24, 0xC8	; 200
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	9d ab       	std	Y+53, r25	; 0x35
    3fa8:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3faa:	8c a9       	ldd	r24, Y+52	; 0x34
    3fac:	9d a9       	ldd	r25, Y+53	; 0x35
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <LCD_read_data_4bit+0x3f0>
    3fb2:	9d ab       	std	Y+53, r25	; 0x35
    3fb4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb6:	8e a9       	ldd	r24, Y+54	; 0x36
    3fb8:	9f a9       	ldd	r25, Y+55	; 0x37
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	9f ab       	std	Y+55, r25	; 0x37
    3fbe:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc0:	8e a9       	ldd	r24, Y+54	; 0x36
    3fc2:	9f a9       	ldd	r25, Y+55	; 0x37
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	69 f7       	brne	.-38     	; 0x3fa2 <LCD_read_data_4bit+0x3e4>
    3fc8:	2d c0       	rjmp	.+90     	; 0x4024 <LCD_read_data_4bit+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fca:	68 ad       	ldd	r22, Y+56	; 0x38
    3fcc:	79 ad       	ldd	r23, Y+57	; 0x39
    3fce:	8a ad       	ldd	r24, Y+58	; 0x3a
    3fd0:	9b ad       	ldd	r25, Y+59	; 0x3b
    3fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	9f ab       	std	Y+55, r25	; 0x37
    3fdc:	8e ab       	std	Y+54, r24	; 0x36
    3fde:	8e a9       	ldd	r24, Y+54	; 0x36
    3fe0:	9f a9       	ldd	r25, Y+55	; 0x37
    3fe2:	9b ab       	std	Y+51, r25	; 0x33
    3fe4:	8a ab       	std	Y+50, r24	; 0x32
    3fe6:	8a a9       	ldd	r24, Y+50	; 0x32
    3fe8:	9b a9       	ldd	r25, Y+51	; 0x33
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	f1 f7       	brne	.-4      	; 0x3fea <LCD_read_data_4bit+0x42c>
    3fee:	9b ab       	std	Y+51, r25	; 0x33
    3ff0:	8a ab       	std	Y+50, r24	; 0x32
    3ff2:	18 c0       	rjmp	.+48     	; 0x4024 <LCD_read_data_4bit+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	ef 5b       	subi	r30, 0xBF	; 191
    3ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffa:	60 81       	ld	r22, Z
    3ffc:	71 81       	ldd	r23, Z+1	; 0x01
    3ffe:	82 81       	ldd	r24, Z+2	; 0x02
    4000:	93 81       	ldd	r25, Z+3	; 0x03
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	fe 01       	movw	r30, r28
    400c:	e0 5c       	subi	r30, 0xC0	; 192
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	80 83       	st	Z, r24
    4012:	fe 01       	movw	r30, r28
    4014:	e0 5c       	subi	r30, 0xC0	; 192
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 81       	ld	r24, Z
    401a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    401c:	89 a9       	ldd	r24, Y+49	; 0x31
    401e:	8a 95       	dec	r24
    4020:	f1 f7       	brne	.-4      	; 0x401e <LCD_read_data_4bit+0x460>
    4022:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	// Recive the higher nipple
	u8 address= (DIO_u8_get_port(lcd_data_port) << 4);
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <DIO_u8_get_port>
    402a:	fe 01       	movw	r30, r28
    402c:	ef 59       	subi	r30, 0x9F	; 159
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	82 95       	swap	r24
    4032:	80 7f       	andi	r24, 0xF0	; 240
    4034:	80 83       	st	Z, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
    403e:	80 e0       	ldi	r24, 0x00	; 0
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	a0 e2       	ldi	r26, 0x20	; 32
    4044:	b1 e4       	ldi	r27, 0x41	; 65
    4046:	8d a7       	std	Y+45, r24	; 0x2d
    4048:	9e a7       	std	Y+46, r25	; 0x2e
    404a:	af a7       	std	Y+47, r26	; 0x2f
    404c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    404e:	6d a5       	ldd	r22, Y+45	; 0x2d
    4050:	7e a5       	ldd	r23, Y+46	; 0x2e
    4052:	8f a5       	ldd	r24, Y+47	; 0x2f
    4054:	98 a9       	ldd	r25, Y+48	; 0x30
    4056:	2b ea       	ldi	r18, 0xAB	; 171
    4058:	3a ea       	ldi	r19, 0xAA	; 170
    405a:	4a e2       	ldi	r20, 0x2A	; 42
    405c:	50 e4       	ldi	r21, 0x40	; 64
    405e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	89 a7       	std	Y+41, r24	; 0x29
    4068:	9a a7       	std	Y+42, r25	; 0x2a
    406a:	ab a7       	std	Y+43, r26	; 0x2b
    406c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    406e:	69 a5       	ldd	r22, Y+41	; 0x29
    4070:	7a a5       	ldd	r23, Y+42	; 0x2a
    4072:	8b a5       	ldd	r24, Y+43	; 0x2b
    4074:	9c a5       	ldd	r25, Y+44	; 0x2c
    4076:	20 e0       	ldi	r18, 0x00	; 0
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e8       	ldi	r20, 0x80	; 128
    407c:	5f e3       	ldi	r21, 0x3F	; 63
    407e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4082:	88 23       	and	r24, r24
    4084:	1c f4       	brge	.+6      	; 0x408c <LCD_read_data_4bit+0x4ce>
		__ticks = 1;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	88 a7       	std	Y+40, r24	; 0x28
    408a:	91 c0       	rjmp	.+290    	; 0x41ae <LCD_read_data_4bit+0x5f0>
	else if (__tmp > 255)
    408c:	69 a5       	ldd	r22, Y+41	; 0x29
    408e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4090:	8b a5       	ldd	r24, Y+43	; 0x2b
    4092:	9c a5       	ldd	r25, Y+44	; 0x2c
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	4f e7       	ldi	r20, 0x7F	; 127
    409a:	53 e4       	ldi	r21, 0x43	; 67
    409c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a0:	18 16       	cp	r1, r24
    40a2:	0c f0       	brlt	.+2      	; 0x40a6 <LCD_read_data_4bit+0x4e8>
    40a4:	7b c0       	rjmp	.+246    	; 0x419c <LCD_read_data_4bit+0x5de>
	{
		_delay_ms(__us / 1000.0);
    40a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    40a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    40aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    40ac:	98 a9       	ldd	r25, Y+48	; 0x30
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	30 e0       	ldi	r19, 0x00	; 0
    40b2:	4a e7       	ldi	r20, 0x7A	; 122
    40b4:	54 e4       	ldi	r21, 0x44	; 68
    40b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40ba:	dc 01       	movw	r26, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	8c a3       	std	Y+36, r24	; 0x24
    40c0:	9d a3       	std	Y+37, r25	; 0x25
    40c2:	ae a3       	std	Y+38, r26	; 0x26
    40c4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40c6:	6c a1       	ldd	r22, Y+36	; 0x24
    40c8:	7d a1       	ldd	r23, Y+37	; 0x25
    40ca:	8e a1       	ldd	r24, Y+38	; 0x26
    40cc:	9f a1       	ldd	r25, Y+39	; 0x27
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	4a ef       	ldi	r20, 0xFA	; 250
    40d4:	54 e4       	ldi	r21, 0x44	; 68
    40d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	88 a3       	std	Y+32, r24	; 0x20
    40e0:	99 a3       	std	Y+33, r25	; 0x21
    40e2:	aa a3       	std	Y+34, r26	; 0x22
    40e4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    40e6:	68 a1       	ldd	r22, Y+32	; 0x20
    40e8:	79 a1       	ldd	r23, Y+33	; 0x21
    40ea:	8a a1       	ldd	r24, Y+34	; 0x22
    40ec:	9b a1       	ldd	r25, Y+35	; 0x23
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	5f e3       	ldi	r21, 0x3F	; 63
    40f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40fa:	88 23       	and	r24, r24
    40fc:	2c f4       	brge	.+10     	; 0x4108 <LCD_read_data_4bit+0x54a>
		__ticks = 1;
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	9f 8f       	std	Y+31, r25	; 0x1f
    4104:	8e 8f       	std	Y+30, r24	; 0x1e
    4106:	3f c0       	rjmp	.+126    	; 0x4186 <LCD_read_data_4bit+0x5c8>
	else if (__tmp > 65535)
    4108:	68 a1       	ldd	r22, Y+32	; 0x20
    410a:	79 a1       	ldd	r23, Y+33	; 0x21
    410c:	8a a1       	ldd	r24, Y+34	; 0x22
    410e:	9b a1       	ldd	r25, Y+35	; 0x23
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	3f ef       	ldi	r19, 0xFF	; 255
    4114:	4f e7       	ldi	r20, 0x7F	; 127
    4116:	57 e4       	ldi	r21, 0x47	; 71
    4118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    411c:	18 16       	cp	r1, r24
    411e:	4c f5       	brge	.+82     	; 0x4172 <LCD_read_data_4bit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4120:	6c a1       	ldd	r22, Y+36	; 0x24
    4122:	7d a1       	ldd	r23, Y+37	; 0x25
    4124:	8e a1       	ldd	r24, Y+38	; 0x26
    4126:	9f a1       	ldd	r25, Y+39	; 0x27
    4128:	20 e0       	ldi	r18, 0x00	; 0
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	40 e2       	ldi	r20, 0x20	; 32
    412e:	51 e4       	ldi	r21, 0x41	; 65
    4130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	bc 01       	movw	r22, r24
    413a:	cd 01       	movw	r24, r26
    413c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	9f 8f       	std	Y+31, r25	; 0x1f
    4146:	8e 8f       	std	Y+30, r24	; 0x1e
    4148:	0f c0       	rjmp	.+30     	; 0x4168 <LCD_read_data_4bit+0x5aa>
    414a:	88 ec       	ldi	r24, 0xC8	; 200
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	9d 8f       	std	Y+29, r25	; 0x1d
    4150:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4152:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4154:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4156:	01 97       	sbiw	r24, 0x01	; 1
    4158:	f1 f7       	brne	.-4      	; 0x4156 <LCD_read_data_4bit+0x598>
    415a:	9d 8f       	std	Y+29, r25	; 0x1d
    415c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    415e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4160:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4162:	01 97       	sbiw	r24, 0x01	; 1
    4164:	9f 8f       	std	Y+31, r25	; 0x1f
    4166:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4168:	8e 8d       	ldd	r24, Y+30	; 0x1e
    416a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    416c:	00 97       	sbiw	r24, 0x00	; 0
    416e:	69 f7       	brne	.-38     	; 0x414a <LCD_read_data_4bit+0x58c>
    4170:	24 c0       	rjmp	.+72     	; 0x41ba <LCD_read_data_4bit+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4172:	68 a1       	ldd	r22, Y+32	; 0x20
    4174:	79 a1       	ldd	r23, Y+33	; 0x21
    4176:	8a a1       	ldd	r24, Y+34	; 0x22
    4178:	9b a1       	ldd	r25, Y+35	; 0x23
    417a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	9f 8f       	std	Y+31, r25	; 0x1f
    4184:	8e 8f       	std	Y+30, r24	; 0x1e
    4186:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4188:	9f 8d       	ldd	r25, Y+31	; 0x1f
    418a:	9b 8f       	std	Y+27, r25	; 0x1b
    418c:	8a 8f       	std	Y+26, r24	; 0x1a
    418e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4190:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4192:	01 97       	sbiw	r24, 0x01	; 1
    4194:	f1 f7       	brne	.-4      	; 0x4192 <LCD_read_data_4bit+0x5d4>
    4196:	9b 8f       	std	Y+27, r25	; 0x1b
    4198:	8a 8f       	std	Y+26, r24	; 0x1a
    419a:	0f c0       	rjmp	.+30     	; 0x41ba <LCD_read_data_4bit+0x5fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    419c:	69 a5       	ldd	r22, Y+41	; 0x29
    419e:	7a a5       	ldd	r23, Y+42	; 0x2a
    41a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    41a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    41a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	88 a7       	std	Y+40, r24	; 0x28
    41ae:	88 a5       	ldd	r24, Y+40	; 0x28
    41b0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41b2:	89 8d       	ldd	r24, Y+25	; 0x19
    41b4:	8a 95       	dec	r24
    41b6:	f1 f7       	brne	.-4      	; 0x41b4 <LCD_read_data_4bit+0x5f6>
    41b8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	// Enable pin is high to recive the lower nipple
	DIO_void_set_pin(lcd_ctrl_port, lcd_EN);
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	60 e0       	ldi	r22, 0x00	; 0
    41be:	0e 94 0f 32 	call	0x641e	; 0x641e <DIO_void_set_pin>
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	a0 e8       	ldi	r26, 0x80	; 128
    41c8:	bf e3       	ldi	r27, 0x3F	; 63
    41ca:	8d 8b       	std	Y+21, r24	; 0x15
    41cc:	9e 8b       	std	Y+22, r25	; 0x16
    41ce:	af 8b       	std	Y+23, r26	; 0x17
    41d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    41d2:	6d 89       	ldd	r22, Y+21	; 0x15
    41d4:	7e 89       	ldd	r23, Y+22	; 0x16
    41d6:	8f 89       	ldd	r24, Y+23	; 0x17
    41d8:	98 8d       	ldd	r25, Y+24	; 0x18
    41da:	2b ea       	ldi	r18, 0xAB	; 171
    41dc:	3a ea       	ldi	r19, 0xAA	; 170
    41de:	4a e2       	ldi	r20, 0x2A	; 42
    41e0:	50 e4       	ldi	r21, 0x40	; 64
    41e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	89 8b       	std	Y+17, r24	; 0x11
    41ec:	9a 8b       	std	Y+18, r25	; 0x12
    41ee:	ab 8b       	std	Y+19, r26	; 0x13
    41f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    41f2:	69 89       	ldd	r22, Y+17	; 0x11
    41f4:	7a 89       	ldd	r23, Y+18	; 0x12
    41f6:	8b 89       	ldd	r24, Y+19	; 0x13
    41f8:	9c 89       	ldd	r25, Y+20	; 0x14
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	40 e8       	ldi	r20, 0x80	; 128
    4200:	5f e3       	ldi	r21, 0x3F	; 63
    4202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4206:	88 23       	and	r24, r24
    4208:	1c f4       	brge	.+6      	; 0x4210 <LCD_read_data_4bit+0x652>
		__ticks = 1;
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	88 8b       	std	Y+16, r24	; 0x10
    420e:	91 c0       	rjmp	.+290    	; 0x4332 <LCD_read_data_4bit+0x774>
	else if (__tmp > 255)
    4210:	69 89       	ldd	r22, Y+17	; 0x11
    4212:	7a 89       	ldd	r23, Y+18	; 0x12
    4214:	8b 89       	ldd	r24, Y+19	; 0x13
    4216:	9c 89       	ldd	r25, Y+20	; 0x14
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	4f e7       	ldi	r20, 0x7F	; 127
    421e:	53 e4       	ldi	r21, 0x43	; 67
    4220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4224:	18 16       	cp	r1, r24
    4226:	0c f0       	brlt	.+2      	; 0x422a <LCD_read_data_4bit+0x66c>
    4228:	7b c0       	rjmp	.+246    	; 0x4320 <LCD_read_data_4bit+0x762>
	{
		_delay_ms(__us / 1000.0);
    422a:	6d 89       	ldd	r22, Y+21	; 0x15
    422c:	7e 89       	ldd	r23, Y+22	; 0x16
    422e:	8f 89       	ldd	r24, Y+23	; 0x17
    4230:	98 8d       	ldd	r25, Y+24	; 0x18
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	4a e7       	ldi	r20, 0x7A	; 122
    4238:	54 e4       	ldi	r21, 0x44	; 68
    423a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	8c 87       	std	Y+12, r24	; 0x0c
    4244:	9d 87       	std	Y+13, r25	; 0x0d
    4246:	ae 87       	std	Y+14, r26	; 0x0e
    4248:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424a:	6c 85       	ldd	r22, Y+12	; 0x0c
    424c:	7d 85       	ldd	r23, Y+13	; 0x0d
    424e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4250:	9f 85       	ldd	r25, Y+15	; 0x0f
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4a ef       	ldi	r20, 0xFA	; 250
    4258:	54 e4       	ldi	r21, 0x44	; 68
    425a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	88 87       	std	Y+8, r24	; 0x08
    4264:	99 87       	std	Y+9, r25	; 0x09
    4266:	aa 87       	std	Y+10, r26	; 0x0a
    4268:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    426a:	68 85       	ldd	r22, Y+8	; 0x08
    426c:	79 85       	ldd	r23, Y+9	; 0x09
    426e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4270:	9b 85       	ldd	r25, Y+11	; 0x0b
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e8       	ldi	r20, 0x80	; 128
    4278:	5f e3       	ldi	r21, 0x3F	; 63
    427a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    427e:	88 23       	and	r24, r24
    4280:	2c f4       	brge	.+10     	; 0x428c <LCD_read_data_4bit+0x6ce>
		__ticks = 1;
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	9f 83       	std	Y+7, r25	; 0x07
    4288:	8e 83       	std	Y+6, r24	; 0x06
    428a:	3f c0       	rjmp	.+126    	; 0x430a <LCD_read_data_4bit+0x74c>
	else if (__tmp > 65535)
    428c:	68 85       	ldd	r22, Y+8	; 0x08
    428e:	79 85       	ldd	r23, Y+9	; 0x09
    4290:	8a 85       	ldd	r24, Y+10	; 0x0a
    4292:	9b 85       	ldd	r25, Y+11	; 0x0b
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	3f ef       	ldi	r19, 0xFF	; 255
    4298:	4f e7       	ldi	r20, 0x7F	; 127
    429a:	57 e4       	ldi	r21, 0x47	; 71
    429c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42a0:	18 16       	cp	r1, r24
    42a2:	4c f5       	brge	.+82     	; 0x42f6 <LCD_read_data_4bit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    42a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    42a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    42aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e2       	ldi	r20, 0x20	; 32
    42b2:	51 e4       	ldi	r21, 0x41	; 65
    42b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	bc 01       	movw	r22, r24
    42be:	cd 01       	movw	r24, r26
    42c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	9f 83       	std	Y+7, r25	; 0x07
    42ca:	8e 83       	std	Y+6, r24	; 0x06
    42cc:	0f c0       	rjmp	.+30     	; 0x42ec <LCD_read_data_4bit+0x72e>
    42ce:	88 ec       	ldi	r24, 0xC8	; 200
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	9d 83       	std	Y+5, r25	; 0x05
    42d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42d6:	8c 81       	ldd	r24, Y+4	; 0x04
    42d8:	9d 81       	ldd	r25, Y+5	; 0x05
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	f1 f7       	brne	.-4      	; 0x42da <LCD_read_data_4bit+0x71c>
    42de:	9d 83       	std	Y+5, r25	; 0x05
    42e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e2:	8e 81       	ldd	r24, Y+6	; 0x06
    42e4:	9f 81       	ldd	r25, Y+7	; 0x07
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	9f 83       	std	Y+7, r25	; 0x07
    42ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ec:	8e 81       	ldd	r24, Y+6	; 0x06
    42ee:	9f 81       	ldd	r25, Y+7	; 0x07
    42f0:	00 97       	sbiw	r24, 0x00	; 0
    42f2:	69 f7       	brne	.-38     	; 0x42ce <LCD_read_data_4bit+0x710>
    42f4:	24 c0       	rjmp	.+72     	; 0x433e <LCD_read_data_4bit+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f6:	68 85       	ldd	r22, Y+8	; 0x08
    42f8:	79 85       	ldd	r23, Y+9	; 0x09
    42fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    42fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	9f 83       	std	Y+7, r25	; 0x07
    4308:	8e 83       	std	Y+6, r24	; 0x06
    430a:	8e 81       	ldd	r24, Y+6	; 0x06
    430c:	9f 81       	ldd	r25, Y+7	; 0x07
    430e:	9b 83       	std	Y+3, r25	; 0x03
    4310:	8a 83       	std	Y+2, r24	; 0x02
    4312:	8a 81       	ldd	r24, Y+2	; 0x02
    4314:	9b 81       	ldd	r25, Y+3	; 0x03
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <LCD_read_data_4bit+0x758>
    431a:	9b 83       	std	Y+3, r25	; 0x03
    431c:	8a 83       	std	Y+2, r24	; 0x02
    431e:	0f c0       	rjmp	.+30     	; 0x433e <LCD_read_data_4bit+0x780>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4320:	69 89       	ldd	r22, Y+17	; 0x11
    4322:	7a 89       	ldd	r23, Y+18	; 0x12
    4324:	8b 89       	ldd	r24, Y+19	; 0x13
    4326:	9c 89       	ldd	r25, Y+20	; 0x14
    4328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	88 8b       	std	Y+16, r24	; 0x10
    4332:	88 89       	ldd	r24, Y+16	; 0x10
    4334:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4336:	89 81       	ldd	r24, Y+1	; 0x01
    4338:	8a 95       	dec	r24
    433a:	f1 f7       	brne	.-4      	; 0x4338 <LCD_read_data_4bit+0x77a>
    433c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	// Recive the lower nipple
	address|= DIO_u8_get_port(lcd_data_port);
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <DIO_u8_get_port>
    4344:	98 2f       	mov	r25, r24
    4346:	de 01       	movw	r26, r28
    4348:	af 59       	subi	r26, 0x9F	; 159
    434a:	bf 4f       	sbci	r27, 0xFF	; 255
    434c:	fe 01       	movw	r30, r28
    434e:	ef 59       	subi	r30, 0x9F	; 159
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	80 81       	ld	r24, Z
    4354:	89 2b       	or	r24, r25
    4356:	8c 93       	st	X, r24
	// Enable pin is low
	DIO_void_clear_pin(lcd_ctrl_port, lcd_EN);
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	0e 94 3f 32 	call	0x647e	; 0x647e <DIO_void_clear_pin>
	// clear the busy flag bit
	clr_bit(address, lcd_busy_flag);
    4360:	de 01       	movw	r26, r28
    4362:	af 59       	subi	r26, 0x9F	; 159
    4364:	bf 4f       	sbci	r27, 0xFF	; 255
    4366:	fe 01       	movw	r30, r28
    4368:	ef 59       	subi	r30, 0x9F	; 159
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 81       	ld	r24, Z
    436e:	8f 77       	andi	r24, 0x7F	; 127
    4370:	8c 93       	st	X, r24
	// Configure the data pins back to output
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	67 e0       	ldi	r22, 0x07	; 7
    4376:	4f ef       	ldi	r20, 0xFF	; 255
    4378:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	66 e0       	ldi	r22, 0x06	; 6
    4380:	4f ef       	ldi	r20, 0xFF	; 255
    4382:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	65 e0       	ldi	r22, 0x05	; 5
    438a:	4f ef       	ldi	r20, 0xFF	; 255
    438c:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	64 e0       	ldi	r22, 0x04	; 4
    4394:	4f ef       	ldi	r20, 0xFF	; 255
    4396:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	// Return the current address
	return address;
    439a:	fe 01       	movw	r30, r28
    439c:	ef 59       	subi	r30, 0x9F	; 159
    439e:	ff 4f       	sbci	r31, 0xFF	; 255
    43a0:	80 81       	ld	r24, Z
}
    43a2:	cf 59       	subi	r28, 0x9F	; 159
    43a4:	df 4f       	sbci	r29, 0xFF	; 255
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	cf 91       	pop	r28
    43b2:	df 91       	pop	r29
    43b4:	1f 91       	pop	r17
    43b6:	0f 91       	pop	r16
    43b8:	08 95       	ret

000043ba <LCD_init>:


/******************************************************************************/

/* User interfacing functions implementation */
void LCD_init(void){
    43ba:	0f 93       	push	r16
    43bc:	1f 93       	push	r17
    43be:	df 93       	push	r29
    43c0:	cf 93       	push	r28
    43c2:	cd b7       	in	r28, 0x3d	; 61
    43c4:	de b7       	in	r29, 0x3e	; 62
    43c6:	cc 54       	subi	r28, 0x4C	; 76
    43c8:	d0 40       	sbci	r29, 0x00	; 0
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	de bf       	out	0x3e, r29	; 62
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_clear);
	// Wait more than 1.53 ms
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Configure the I/O Data pins
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	67 e0       	ldi	r22, 0x07	; 7
    43d8:	4f ef       	ldi	r20, 0xFF	; 255
    43da:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	66 e0       	ldi	r22, 0x06	; 6
    43e2:	4f ef       	ldi	r20, 0xFF	; 255
    43e4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	65 e0       	ldi	r22, 0x05	; 5
    43ec:	4f ef       	ldi	r20, 0xFF	; 255
    43ee:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	64 e0       	ldi	r22, 0x04	; 4
    43f6:	4f ef       	ldi	r20, 0xFF	; 255
    43f8:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	// Configure the I/O control pins
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_EN, OUTPUT);
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	60 e0       	ldi	r22, 0x00	; 0
    4400:	4f ef       	ldi	r20, 0xFF	; 255
    4402:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RW, OUTPUT);
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	61 e0       	ldi	r22, 0x01	; 1
    440a:	4f ef       	ldi	r20, 0xFF	; 255
    440c:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_ctrl_port, lcd_RS, OUTPUT);
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	62 e0       	ldi	r22, 0x02	; 2
    4414:	4f ef       	ldi	r20, 0xFF	; 255
    4416:	0e 94 f7 30 	call	0x61ee	; 0x61ee <DIO_void_set_pin_dir>
    441a:	fe 01       	movw	r30, r28
    441c:	e7 5b       	subi	r30, 0xB7	; 183
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	a8 e4       	ldi	r26, 0x48	; 72
    4426:	b2 e4       	ldi	r27, 0x42	; 66
    4428:	80 83       	st	Z, r24
    442a:	91 83       	std	Z+1, r25	; 0x01
    442c:	a2 83       	std	Z+2, r26	; 0x02
    442e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4430:	8e 01       	movw	r16, r28
    4432:	0b 5b       	subi	r16, 0xBB	; 187
    4434:	1f 4f       	sbci	r17, 0xFF	; 255
    4436:	fe 01       	movw	r30, r28
    4438:	e7 5b       	subi	r30, 0xB7	; 183
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	60 81       	ld	r22, Z
    443e:	71 81       	ldd	r23, Z+1	; 0x01
    4440:	82 81       	ldd	r24, Z+2	; 0x02
    4442:	93 81       	ldd	r25, Z+3	; 0x03
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a ef       	ldi	r20, 0xFA	; 250
    444a:	54 e4       	ldi	r21, 0x44	; 68
    444c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	f8 01       	movw	r30, r16
    4456:	80 83       	st	Z, r24
    4458:	91 83       	std	Z+1, r25	; 0x01
    445a:	a2 83       	std	Z+2, r26	; 0x02
    445c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    445e:	fe 01       	movw	r30, r28
    4460:	eb 5b       	subi	r30, 0xBB	; 187
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	60 81       	ld	r22, Z
    4466:	71 81       	ldd	r23, Z+1	; 0x01
    4468:	82 81       	ldd	r24, Z+2	; 0x02
    446a:	93 81       	ldd	r25, Z+3	; 0x03
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 e8       	ldi	r20, 0x80	; 128
    4472:	5f e3       	ldi	r21, 0x3F	; 63
    4474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4478:	88 23       	and	r24, r24
    447a:	44 f4       	brge	.+16     	; 0x448c <LCD_init+0xd2>
		__ticks = 1;
    447c:	fe 01       	movw	r30, r28
    447e:	ed 5b       	subi	r30, 0xBD	; 189
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	91 83       	std	Z+1, r25	; 0x01
    4488:	80 83       	st	Z, r24
    448a:	64 c0       	rjmp	.+200    	; 0x4554 <LCD_init+0x19a>
	else if (__tmp > 65535)
    448c:	fe 01       	movw	r30, r28
    448e:	eb 5b       	subi	r30, 0xBB	; 187
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	60 81       	ld	r22, Z
    4494:	71 81       	ldd	r23, Z+1	; 0x01
    4496:	82 81       	ldd	r24, Z+2	; 0x02
    4498:	93 81       	ldd	r25, Z+3	; 0x03
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	3f ef       	ldi	r19, 0xFF	; 255
    449e:	4f e7       	ldi	r20, 0x7F	; 127
    44a0:	57 e4       	ldi	r21, 0x47	; 71
    44a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44a6:	18 16       	cp	r1, r24
    44a8:	0c f0       	brlt	.+2      	; 0x44ac <LCD_init+0xf2>
    44aa:	43 c0       	rjmp	.+134    	; 0x4532 <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ac:	fe 01       	movw	r30, r28
    44ae:	e7 5b       	subi	r30, 0xB7	; 183
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	60 81       	ld	r22, Z
    44b4:	71 81       	ldd	r23, Z+1	; 0x01
    44b6:	82 81       	ldd	r24, Z+2	; 0x02
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	40 e2       	ldi	r20, 0x20	; 32
    44c0:	51 e4       	ldi	r21, 0x41	; 65
    44c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	8e 01       	movw	r16, r28
    44cc:	0d 5b       	subi	r16, 0xBD	; 189
    44ce:	1f 4f       	sbci	r17, 0xFF	; 255
    44d0:	bc 01       	movw	r22, r24
    44d2:	cd 01       	movw	r24, r26
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	f8 01       	movw	r30, r16
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	80 83       	st	Z, r24
    44e2:	1f c0       	rjmp	.+62     	; 0x4522 <LCD_init+0x168>
    44e4:	fe 01       	movw	r30, r28
    44e6:	ef 5b       	subi	r30, 0xBF	; 191
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	88 ec       	ldi	r24, 0xC8	; 200
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	91 83       	std	Z+1, r25	; 0x01
    44f0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44f2:	fe 01       	movw	r30, r28
    44f4:	ef 5b       	subi	r30, 0xBF	; 191
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	80 81       	ld	r24, Z
    44fa:	91 81       	ldd	r25, Z+1	; 0x01
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	f1 f7       	brne	.-4      	; 0x44fc <LCD_init+0x142>
    4500:	fe 01       	movw	r30, r28
    4502:	ef 5b       	subi	r30, 0xBF	; 191
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	91 83       	std	Z+1, r25	; 0x01
    4508:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450a:	de 01       	movw	r26, r28
    450c:	ad 5b       	subi	r26, 0xBD	; 189
    450e:	bf 4f       	sbci	r27, 0xFF	; 255
    4510:	fe 01       	movw	r30, r28
    4512:	ed 5b       	subi	r30, 0xBD	; 189
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	80 81       	ld	r24, Z
    4518:	91 81       	ldd	r25, Z+1	; 0x01
    451a:	01 97       	sbiw	r24, 0x01	; 1
    451c:	11 96       	adiw	r26, 0x01	; 1
    451e:	9c 93       	st	X, r25
    4520:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4522:	fe 01       	movw	r30, r28
    4524:	ed 5b       	subi	r30, 0xBD	; 189
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	80 81       	ld	r24, Z
    452a:	91 81       	ldd	r25, Z+1	; 0x01
    452c:	00 97       	sbiw	r24, 0x00	; 0
    452e:	d1 f6       	brne	.-76     	; 0x44e4 <LCD_init+0x12a>
    4530:	24 c0       	rjmp	.+72     	; 0x457a <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4532:	8e 01       	movw	r16, r28
    4534:	0d 5b       	subi	r16, 0xBD	; 189
    4536:	1f 4f       	sbci	r17, 0xFF	; 255
    4538:	fe 01       	movw	r30, r28
    453a:	eb 5b       	subi	r30, 0xBB	; 187
    453c:	ff 4f       	sbci	r31, 0xFF	; 255
    453e:	60 81       	ld	r22, Z
    4540:	71 81       	ldd	r23, Z+1	; 0x01
    4542:	82 81       	ldd	r24, Z+2	; 0x02
    4544:	93 81       	ldd	r25, Z+3	; 0x03
    4546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	f8 01       	movw	r30, r16
    4550:	91 83       	std	Z+1, r25	; 0x01
    4552:	80 83       	st	Z, r24
    4554:	fe 01       	movw	r30, r28
    4556:	ed 5b       	subi	r30, 0xBD	; 189
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	80 81       	ld	r24, Z
    455c:	91 81       	ldd	r25, Z+1	; 0x01
    455e:	fe 01       	movw	r30, r28
    4560:	ff 96       	adiw	r30, 0x3f	; 63
    4562:	91 83       	std	Z+1, r25	; 0x01
    4564:	80 83       	st	Z, r24
    4566:	fe 01       	movw	r30, r28
    4568:	ff 96       	adiw	r30, 0x3f	; 63
    456a:	80 81       	ld	r24, Z
    456c:	91 81       	ldd	r25, Z+1	; 0x01
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <LCD_init+0x1b4>
    4572:	fe 01       	movw	r30, r28
    4574:	ff 96       	adiw	r30, 0x3f	; 63
    4576:	91 83       	std	Z+1, r25	; 0x01
    4578:	80 83       	st	Z, r24

	// Wait more than 30 ms
	_delay_ms(50);
	// Send the function set command
	LCD_function_set_4bit();
    457a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <LCD_function_set_4bit>
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	a8 e4       	ldi	r26, 0x48	; 72
    4584:	b2 e4       	ldi	r27, 0x42	; 66
    4586:	8b af       	std	Y+59, r24	; 0x3b
    4588:	9c af       	std	Y+60, r25	; 0x3c
    458a:	ad af       	std	Y+61, r26	; 0x3d
    458c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    458e:	6b ad       	ldd	r22, Y+59	; 0x3b
    4590:	7c ad       	ldd	r23, Y+60	; 0x3c
    4592:	8d ad       	ldd	r24, Y+61	; 0x3d
    4594:	9e ad       	ldd	r25, Y+62	; 0x3e
    4596:	2b ea       	ldi	r18, 0xAB	; 171
    4598:	3a ea       	ldi	r19, 0xAA	; 170
    459a:	4a e2       	ldi	r20, 0x2A	; 42
    459c:	50 e4       	ldi	r21, 0x40	; 64
    459e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	8f ab       	std	Y+55, r24	; 0x37
    45a8:	98 af       	std	Y+56, r25	; 0x38
    45aa:	a9 af       	std	Y+57, r26	; 0x39
    45ac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    45ae:	6f a9       	ldd	r22, Y+55	; 0x37
    45b0:	78 ad       	ldd	r23, Y+56	; 0x38
    45b2:	89 ad       	ldd	r24, Y+57	; 0x39
    45b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e8       	ldi	r20, 0x80	; 128
    45bc:	5f e3       	ldi	r21, 0x3F	; 63
    45be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45c2:	88 23       	and	r24, r24
    45c4:	1c f4       	brge	.+6      	; 0x45cc <LCD_init+0x212>
		__ticks = 1;
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	8e ab       	std	Y+54, r24	; 0x36
    45ca:	91 c0       	rjmp	.+290    	; 0x46ee <LCD_init+0x334>
	else if (__tmp > 255)
    45cc:	6f a9       	ldd	r22, Y+55	; 0x37
    45ce:	78 ad       	ldd	r23, Y+56	; 0x38
    45d0:	89 ad       	ldd	r24, Y+57	; 0x39
    45d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	4f e7       	ldi	r20, 0x7F	; 127
    45da:	53 e4       	ldi	r21, 0x43	; 67
    45dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45e0:	18 16       	cp	r1, r24
    45e2:	0c f0       	brlt	.+2      	; 0x45e6 <LCD_init+0x22c>
    45e4:	7b c0       	rjmp	.+246    	; 0x46dc <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    45e6:	6b ad       	ldd	r22, Y+59	; 0x3b
    45e8:	7c ad       	ldd	r23, Y+60	; 0x3c
    45ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    45ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	4a e7       	ldi	r20, 0x7A	; 122
    45f4:	54 e4       	ldi	r21, 0x44	; 68
    45f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	8a ab       	std	Y+50, r24	; 0x32
    4600:	9b ab       	std	Y+51, r25	; 0x33
    4602:	ac ab       	std	Y+52, r26	; 0x34
    4604:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4606:	6a a9       	ldd	r22, Y+50	; 0x32
    4608:	7b a9       	ldd	r23, Y+51	; 0x33
    460a:	8c a9       	ldd	r24, Y+52	; 0x34
    460c:	9d a9       	ldd	r25, Y+53	; 0x35
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	4a ef       	ldi	r20, 0xFA	; 250
    4614:	54 e4       	ldi	r21, 0x44	; 68
    4616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461a:	dc 01       	movw	r26, r24
    461c:	cb 01       	movw	r24, r22
    461e:	8e a7       	std	Y+46, r24	; 0x2e
    4620:	9f a7       	std	Y+47, r25	; 0x2f
    4622:	a8 ab       	std	Y+48, r26	; 0x30
    4624:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    4626:	6e a5       	ldd	r22, Y+46	; 0x2e
    4628:	7f a5       	ldd	r23, Y+47	; 0x2f
    462a:	88 a9       	ldd	r24, Y+48	; 0x30
    462c:	99 a9       	ldd	r25, Y+49	; 0x31
    462e:	20 e0       	ldi	r18, 0x00	; 0
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	40 e8       	ldi	r20, 0x80	; 128
    4634:	5f e3       	ldi	r21, 0x3F	; 63
    4636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    463a:	88 23       	and	r24, r24
    463c:	2c f4       	brge	.+10     	; 0x4648 <LCD_init+0x28e>
		__ticks = 1;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	9d a7       	std	Y+45, r25	; 0x2d
    4644:	8c a7       	std	Y+44, r24	; 0x2c
    4646:	3f c0       	rjmp	.+126    	; 0x46c6 <LCD_init+0x30c>
	else if (__tmp > 65535)
    4648:	6e a5       	ldd	r22, Y+46	; 0x2e
    464a:	7f a5       	ldd	r23, Y+47	; 0x2f
    464c:	88 a9       	ldd	r24, Y+48	; 0x30
    464e:	99 a9       	ldd	r25, Y+49	; 0x31
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	3f ef       	ldi	r19, 0xFF	; 255
    4654:	4f e7       	ldi	r20, 0x7F	; 127
    4656:	57 e4       	ldi	r21, 0x47	; 71
    4658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    465c:	18 16       	cp	r1, r24
    465e:	4c f5       	brge	.+82     	; 0x46b2 <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4660:	6a a9       	ldd	r22, Y+50	; 0x32
    4662:	7b a9       	ldd	r23, Y+51	; 0x33
    4664:	8c a9       	ldd	r24, Y+52	; 0x34
    4666:	9d a9       	ldd	r25, Y+53	; 0x35
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	40 e2       	ldi	r20, 0x20	; 32
    466e:	51 e4       	ldi	r21, 0x41	; 65
    4670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	bc 01       	movw	r22, r24
    467a:	cd 01       	movw	r24, r26
    467c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	9d a7       	std	Y+45, r25	; 0x2d
    4686:	8c a7       	std	Y+44, r24	; 0x2c
    4688:	0f c0       	rjmp	.+30     	; 0x46a8 <LCD_init+0x2ee>
    468a:	88 ec       	ldi	r24, 0xC8	; 200
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	9b a7       	std	Y+43, r25	; 0x2b
    4690:	8a a7       	std	Y+42, r24	; 0x2a
    4692:	8a a5       	ldd	r24, Y+42	; 0x2a
    4694:	9b a5       	ldd	r25, Y+43	; 0x2b
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	f1 f7       	brne	.-4      	; 0x4696 <LCD_init+0x2dc>
    469a:	9b a7       	std	Y+43, r25	; 0x2b
    469c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    469e:	8c a5       	ldd	r24, Y+44	; 0x2c
    46a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    46a2:	01 97       	sbiw	r24, 0x01	; 1
    46a4:	9d a7       	std	Y+45, r25	; 0x2d
    46a6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    46aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    46ac:	00 97       	sbiw	r24, 0x00	; 0
    46ae:	69 f7       	brne	.-38     	; 0x468a <LCD_init+0x2d0>
    46b0:	24 c0       	rjmp	.+72     	; 0x46fa <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b2:	6e a5       	ldd	r22, Y+46	; 0x2e
    46b4:	7f a5       	ldd	r23, Y+47	; 0x2f
    46b6:	88 a9       	ldd	r24, Y+48	; 0x30
    46b8:	99 a9       	ldd	r25, Y+49	; 0x31
    46ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	9d a7       	std	Y+45, r25	; 0x2d
    46c4:	8c a7       	std	Y+44, r24	; 0x2c
    46c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    46c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    46ca:	99 a7       	std	Y+41, r25	; 0x29
    46cc:	88 a7       	std	Y+40, r24	; 0x28
    46ce:	88 a5       	ldd	r24, Y+40	; 0x28
    46d0:	99 a5       	ldd	r25, Y+41	; 0x29
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	f1 f7       	brne	.-4      	; 0x46d2 <LCD_init+0x318>
    46d6:	99 a7       	std	Y+41, r25	; 0x29
    46d8:	88 a7       	std	Y+40, r24	; 0x28
    46da:	0f c0       	rjmp	.+30     	; 0x46fa <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    46dc:	6f a9       	ldd	r22, Y+55	; 0x37
    46de:	78 ad       	ldd	r23, Y+56	; 0x38
    46e0:	89 ad       	ldd	r24, Y+57	; 0x39
    46e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    46e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	8e ab       	std	Y+54, r24	; 0x36
    46ee:	8e a9       	ldd	r24, Y+54	; 0x36
    46f0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46f2:	8f a1       	ldd	r24, Y+39	; 0x27
    46f4:	8a 95       	dec	r24
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <LCD_init+0x33a>
    46f8:	8f a3       	std	Y+39, r24	; 0x27
	// Wait more than 39 us
	_delay_us(50);
	// Send the display on command
	LCD_write_cmd_4bit(display_on);
    46fa:	8c e0       	ldi	r24, 0x0C	; 12
    46fc:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_write_cmd_4bit>
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	a8 e4       	ldi	r26, 0x48	; 72
    4706:	b2 e4       	ldi	r27, 0x42	; 66
    4708:	8b a3       	std	Y+35, r24	; 0x23
    470a:	9c a3       	std	Y+36, r25	; 0x24
    470c:	ad a3       	std	Y+37, r26	; 0x25
    470e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4710:	6b a1       	ldd	r22, Y+35	; 0x23
    4712:	7c a1       	ldd	r23, Y+36	; 0x24
    4714:	8d a1       	ldd	r24, Y+37	; 0x25
    4716:	9e a1       	ldd	r25, Y+38	; 0x26
    4718:	2b ea       	ldi	r18, 0xAB	; 171
    471a:	3a ea       	ldi	r19, 0xAA	; 170
    471c:	4a e2       	ldi	r20, 0x2A	; 42
    471e:	50 e4       	ldi	r21, 0x40	; 64
    4720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	8f 8f       	std	Y+31, r24	; 0x1f
    472a:	98 a3       	std	Y+32, r25	; 0x20
    472c:	a9 a3       	std	Y+33, r26	; 0x21
    472e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    4730:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4732:	78 a1       	ldd	r23, Y+32	; 0x20
    4734:	89 a1       	ldd	r24, Y+33	; 0x21
    4736:	9a a1       	ldd	r25, Y+34	; 0x22
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	40 e8       	ldi	r20, 0x80	; 128
    473e:	5f e3       	ldi	r21, 0x3F	; 63
    4740:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4744:	88 23       	and	r24, r24
    4746:	1c f4       	brge	.+6      	; 0x474e <LCD_init+0x394>
		__ticks = 1;
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	8e 8f       	std	Y+30, r24	; 0x1e
    474c:	91 c0       	rjmp	.+290    	; 0x4870 <LCD_init+0x4b6>
	else if (__tmp > 255)
    474e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4750:	78 a1       	ldd	r23, Y+32	; 0x20
    4752:	89 a1       	ldd	r24, Y+33	; 0x21
    4754:	9a a1       	ldd	r25, Y+34	; 0x22
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	4f e7       	ldi	r20, 0x7F	; 127
    475c:	53 e4       	ldi	r21, 0x43	; 67
    475e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4762:	18 16       	cp	r1, r24
    4764:	0c f0       	brlt	.+2      	; 0x4768 <LCD_init+0x3ae>
    4766:	7b c0       	rjmp	.+246    	; 0x485e <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    4768:	6b a1       	ldd	r22, Y+35	; 0x23
    476a:	7c a1       	ldd	r23, Y+36	; 0x24
    476c:	8d a1       	ldd	r24, Y+37	; 0x25
    476e:	9e a1       	ldd	r25, Y+38	; 0x26
    4770:	20 e0       	ldi	r18, 0x00	; 0
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	4a e7       	ldi	r20, 0x7A	; 122
    4776:	54 e4       	ldi	r21, 0x44	; 68
    4778:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	8a 8f       	std	Y+26, r24	; 0x1a
    4782:	9b 8f       	std	Y+27, r25	; 0x1b
    4784:	ac 8f       	std	Y+28, r26	; 0x1c
    4786:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4788:	6a 8d       	ldd	r22, Y+26	; 0x1a
    478a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    478c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    478e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	4a ef       	ldi	r20, 0xFA	; 250
    4796:	54 e4       	ldi	r21, 0x44	; 68
    4798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479c:	dc 01       	movw	r26, r24
    479e:	cb 01       	movw	r24, r22
    47a0:	8e 8b       	std	Y+22, r24	; 0x16
    47a2:	9f 8b       	std	Y+23, r25	; 0x17
    47a4:	a8 8f       	std	Y+24, r26	; 0x18
    47a6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    47a8:	6e 89       	ldd	r22, Y+22	; 0x16
    47aa:	7f 89       	ldd	r23, Y+23	; 0x17
    47ac:	88 8d       	ldd	r24, Y+24	; 0x18
    47ae:	99 8d       	ldd	r25, Y+25	; 0x19
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	40 e8       	ldi	r20, 0x80	; 128
    47b6:	5f e3       	ldi	r21, 0x3F	; 63
    47b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47bc:	88 23       	and	r24, r24
    47be:	2c f4       	brge	.+10     	; 0x47ca <LCD_init+0x410>
		__ticks = 1;
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	9d 8b       	std	Y+21, r25	; 0x15
    47c6:	8c 8b       	std	Y+20, r24	; 0x14
    47c8:	3f c0       	rjmp	.+126    	; 0x4848 <LCD_init+0x48e>
	else if (__tmp > 65535)
    47ca:	6e 89       	ldd	r22, Y+22	; 0x16
    47cc:	7f 89       	ldd	r23, Y+23	; 0x17
    47ce:	88 8d       	ldd	r24, Y+24	; 0x18
    47d0:	99 8d       	ldd	r25, Y+25	; 0x19
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	3f ef       	ldi	r19, 0xFF	; 255
    47d6:	4f e7       	ldi	r20, 0x7F	; 127
    47d8:	57 e4       	ldi	r21, 0x47	; 71
    47da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47de:	18 16       	cp	r1, r24
    47e0:	4c f5       	brge	.+82     	; 0x4834 <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    47e4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    47e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    47e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	40 e2       	ldi	r20, 0x20	; 32
    47f0:	51 e4       	ldi	r21, 0x41	; 65
    47f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	bc 01       	movw	r22, r24
    47fc:	cd 01       	movw	r24, r26
    47fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4802:	dc 01       	movw	r26, r24
    4804:	cb 01       	movw	r24, r22
    4806:	9d 8b       	std	Y+21, r25	; 0x15
    4808:	8c 8b       	std	Y+20, r24	; 0x14
    480a:	0f c0       	rjmp	.+30     	; 0x482a <LCD_init+0x470>
    480c:	88 ec       	ldi	r24, 0xC8	; 200
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	9b 8b       	std	Y+19, r25	; 0x13
    4812:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4814:	8a 89       	ldd	r24, Y+18	; 0x12
    4816:	9b 89       	ldd	r25, Y+19	; 0x13
    4818:	01 97       	sbiw	r24, 0x01	; 1
    481a:	f1 f7       	brne	.-4      	; 0x4818 <LCD_init+0x45e>
    481c:	9b 8b       	std	Y+19, r25	; 0x13
    481e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4820:	8c 89       	ldd	r24, Y+20	; 0x14
    4822:	9d 89       	ldd	r25, Y+21	; 0x15
    4824:	01 97       	sbiw	r24, 0x01	; 1
    4826:	9d 8b       	std	Y+21, r25	; 0x15
    4828:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    482a:	8c 89       	ldd	r24, Y+20	; 0x14
    482c:	9d 89       	ldd	r25, Y+21	; 0x15
    482e:	00 97       	sbiw	r24, 0x00	; 0
    4830:	69 f7       	brne	.-38     	; 0x480c <LCD_init+0x452>
    4832:	24 c0       	rjmp	.+72     	; 0x487c <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4834:	6e 89       	ldd	r22, Y+22	; 0x16
    4836:	7f 89       	ldd	r23, Y+23	; 0x17
    4838:	88 8d       	ldd	r24, Y+24	; 0x18
    483a:	99 8d       	ldd	r25, Y+25	; 0x19
    483c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	9d 8b       	std	Y+21, r25	; 0x15
    4846:	8c 8b       	std	Y+20, r24	; 0x14
    4848:	8c 89       	ldd	r24, Y+20	; 0x14
    484a:	9d 89       	ldd	r25, Y+21	; 0x15
    484c:	99 8b       	std	Y+17, r25	; 0x11
    484e:	88 8b       	std	Y+16, r24	; 0x10
    4850:	88 89       	ldd	r24, Y+16	; 0x10
    4852:	99 89       	ldd	r25, Y+17	; 0x11
    4854:	01 97       	sbiw	r24, 0x01	; 1
    4856:	f1 f7       	brne	.-4      	; 0x4854 <LCD_init+0x49a>
    4858:	99 8b       	std	Y+17, r25	; 0x11
    485a:	88 8b       	std	Y+16, r24	; 0x10
    485c:	0f c0       	rjmp	.+30     	; 0x487c <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    485e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4860:	78 a1       	ldd	r23, Y+32	; 0x20
    4862:	89 a1       	ldd	r24, Y+33	; 0x21
    4864:	9a a1       	ldd	r25, Y+34	; 0x22
    4866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	8e 8f       	std	Y+30, r24	; 0x1e
    4870:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4872:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4874:	8f 85       	ldd	r24, Y+15	; 0x0f
    4876:	8a 95       	dec	r24
    4878:	f1 f7       	brne	.-4      	; 0x4876 <LCD_init+0x4bc>
    487a:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 39 us
	_delay_us(50);
	// Send the display clean command
	LCD_write_cmd_4bit(display_clear);
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_write_cmd_4bit>
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	a0 e0       	ldi	r26, 0x00	; 0
    4888:	b0 e4       	ldi	r27, 0x40	; 64
    488a:	8b 87       	std	Y+11, r24	; 0x0b
    488c:	9c 87       	std	Y+12, r25	; 0x0c
    488e:	ad 87       	std	Y+13, r26	; 0x0d
    4890:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4892:	6b 85       	ldd	r22, Y+11	; 0x0b
    4894:	7c 85       	ldd	r23, Y+12	; 0x0c
    4896:	8d 85       	ldd	r24, Y+13	; 0x0d
    4898:	9e 85       	ldd	r25, Y+14	; 0x0e
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	4a ef       	ldi	r20, 0xFA	; 250
    48a0:	54 e4       	ldi	r21, 0x44	; 68
    48a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	8f 83       	std	Y+7, r24	; 0x07
    48ac:	98 87       	std	Y+8, r25	; 0x08
    48ae:	a9 87       	std	Y+9, r26	; 0x09
    48b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48b2:	6f 81       	ldd	r22, Y+7	; 0x07
    48b4:	78 85       	ldd	r23, Y+8	; 0x08
    48b6:	89 85       	ldd	r24, Y+9	; 0x09
    48b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ba:	20 e0       	ldi	r18, 0x00	; 0
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	40 e8       	ldi	r20, 0x80	; 128
    48c0:	5f e3       	ldi	r21, 0x3F	; 63
    48c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48c6:	88 23       	and	r24, r24
    48c8:	2c f4       	brge	.+10     	; 0x48d4 <LCD_init+0x51a>
		__ticks = 1;
    48ca:	81 e0       	ldi	r24, 0x01	; 1
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	9e 83       	std	Y+6, r25	; 0x06
    48d0:	8d 83       	std	Y+5, r24	; 0x05
    48d2:	3f c0       	rjmp	.+126    	; 0x4952 <LCD_init+0x598>
	else if (__tmp > 65535)
    48d4:	6f 81       	ldd	r22, Y+7	; 0x07
    48d6:	78 85       	ldd	r23, Y+8	; 0x08
    48d8:	89 85       	ldd	r24, Y+9	; 0x09
    48da:	9a 85       	ldd	r25, Y+10	; 0x0a
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	3f ef       	ldi	r19, 0xFF	; 255
    48e0:	4f e7       	ldi	r20, 0x7F	; 127
    48e2:	57 e4       	ldi	r21, 0x47	; 71
    48e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48e8:	18 16       	cp	r1, r24
    48ea:	4c f5       	brge	.+82     	; 0x493e <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    48f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    48f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    48f4:	20 e0       	ldi	r18, 0x00	; 0
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	40 e2       	ldi	r20, 0x20	; 32
    48fa:	51 e4       	ldi	r21, 0x41	; 65
    48fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4900:	dc 01       	movw	r26, r24
    4902:	cb 01       	movw	r24, r22
    4904:	bc 01       	movw	r22, r24
    4906:	cd 01       	movw	r24, r26
    4908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	9e 83       	std	Y+6, r25	; 0x06
    4912:	8d 83       	std	Y+5, r24	; 0x05
    4914:	0f c0       	rjmp	.+30     	; 0x4934 <LCD_init+0x57a>
    4916:	88 ec       	ldi	r24, 0xC8	; 200
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	9c 83       	std	Y+4, r25	; 0x04
    491c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    491e:	8b 81       	ldd	r24, Y+3	; 0x03
    4920:	9c 81       	ldd	r25, Y+4	; 0x04
    4922:	01 97       	sbiw	r24, 0x01	; 1
    4924:	f1 f7       	brne	.-4      	; 0x4922 <LCD_init+0x568>
    4926:	9c 83       	std	Y+4, r25	; 0x04
    4928:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    492a:	8d 81       	ldd	r24, Y+5	; 0x05
    492c:	9e 81       	ldd	r25, Y+6	; 0x06
    492e:	01 97       	sbiw	r24, 0x01	; 1
    4930:	9e 83       	std	Y+6, r25	; 0x06
    4932:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4934:	8d 81       	ldd	r24, Y+5	; 0x05
    4936:	9e 81       	ldd	r25, Y+6	; 0x06
    4938:	00 97       	sbiw	r24, 0x00	; 0
    493a:	69 f7       	brne	.-38     	; 0x4916 <LCD_init+0x55c>
    493c:	14 c0       	rjmp	.+40     	; 0x4966 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    493e:	6f 81       	ldd	r22, Y+7	; 0x07
    4940:	78 85       	ldd	r23, Y+8	; 0x08
    4942:	89 85       	ldd	r24, Y+9	; 0x09
    4944:	9a 85       	ldd	r25, Y+10	; 0x0a
    4946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	9e 83       	std	Y+6, r25	; 0x06
    4950:	8d 83       	std	Y+5, r24	; 0x05
    4952:	8d 81       	ldd	r24, Y+5	; 0x05
    4954:	9e 81       	ldd	r25, Y+6	; 0x06
    4956:	9a 83       	std	Y+2, r25	; 0x02
    4958:	89 83       	std	Y+1, r24	; 0x01
    495a:	89 81       	ldd	r24, Y+1	; 0x01
    495c:	9a 81       	ldd	r25, Y+2	; 0x02
    495e:	01 97       	sbiw	r24, 0x01	; 1
    4960:	f1 f7       	brne	.-4      	; 0x495e <LCD_init+0x5a4>
    4962:	9a 83       	std	Y+2, r25	; 0x02
    4964:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 1.53 ms
	_delay_ms(2);
#endif
}
    4966:	c4 5b       	subi	r28, 0xB4	; 180
    4968:	df 4f       	sbci	r29, 0xFF	; 255
    496a:	0f b6       	in	r0, 0x3f	; 63
    496c:	f8 94       	cli
    496e:	de bf       	out	0x3e, r29	; 62
    4970:	0f be       	out	0x3f, r0	; 63
    4972:	cd bf       	out	0x3d, r28	; 61
    4974:	cf 91       	pop	r28
    4976:	df 91       	pop	r29
    4978:	1f 91       	pop	r17
    497a:	0f 91       	pop	r16
    497c:	08 95       	ret

0000497e <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row, u8 copy_u8_column){
    497e:	df 93       	push	r29
    4980:	cf 93       	push	r28
    4982:	cd b7       	in	r28, 0x3d	; 61
    4984:	de b7       	in	r29, 0x3e	; 62
    4986:	6b 97       	sbiw	r28, 0x1b	; 27
    4988:	0f b6       	in	r0, 0x3f	; 63
    498a:	f8 94       	cli
    498c:	de bf       	out	0x3e, r29	; 62
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	cd bf       	out	0x3d, r28	; 61
    4992:	8a 8f       	std	Y+26, r24	; 0x1a
    4994:	6b 8f       	std	Y+27, r22	; 0x1b
	LCD_write_cmd_8bit(address);
	// wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// calculate the addres from the given rows and columns
	u8 address= 128+(copy_u8_row*line2)+(copy_u8_column);
    4996:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4998:	88 2f       	mov	r24, r24
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	02 96       	adiw	r24, 0x02	; 2
    499e:	00 24       	eor	r0, r0
    49a0:	96 95       	lsr	r25
    49a2:	87 95       	ror	r24
    49a4:	07 94       	ror	r0
    49a6:	96 95       	lsr	r25
    49a8:	87 95       	ror	r24
    49aa:	07 94       	ror	r0
    49ac:	98 2f       	mov	r25, r24
    49ae:	80 2d       	mov	r24, r0
    49b0:	98 2f       	mov	r25, r24
    49b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49b4:	89 0f       	add	r24, r25
    49b6:	89 8f       	std	Y+25, r24	; 0x19
	// Sent set address command
	LCD_write_cmd_4bit(address);
    49b8:	89 8d       	ldd	r24, Y+25	; 0x19
    49ba:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_write_cmd_4bit>
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	a8 e4       	ldi	r26, 0x48	; 72
    49c4:	b2 e4       	ldi	r27, 0x42	; 66
    49c6:	8d 8b       	std	Y+21, r24	; 0x15
    49c8:	9e 8b       	std	Y+22, r25	; 0x16
    49ca:	af 8b       	std	Y+23, r26	; 0x17
    49cc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    49ce:	6d 89       	ldd	r22, Y+21	; 0x15
    49d0:	7e 89       	ldd	r23, Y+22	; 0x16
    49d2:	8f 89       	ldd	r24, Y+23	; 0x17
    49d4:	98 8d       	ldd	r25, Y+24	; 0x18
    49d6:	2b ea       	ldi	r18, 0xAB	; 171
    49d8:	3a ea       	ldi	r19, 0xAA	; 170
    49da:	4a e2       	ldi	r20, 0x2A	; 42
    49dc:	50 e4       	ldi	r21, 0x40	; 64
    49de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e2:	dc 01       	movw	r26, r24
    49e4:	cb 01       	movw	r24, r22
    49e6:	89 8b       	std	Y+17, r24	; 0x11
    49e8:	9a 8b       	std	Y+18, r25	; 0x12
    49ea:	ab 8b       	std	Y+19, r26	; 0x13
    49ec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    49ee:	69 89       	ldd	r22, Y+17	; 0x11
    49f0:	7a 89       	ldd	r23, Y+18	; 0x12
    49f2:	8b 89       	ldd	r24, Y+19	; 0x13
    49f4:	9c 89       	ldd	r25, Y+20	; 0x14
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e8       	ldi	r20, 0x80	; 128
    49fc:	5f e3       	ldi	r21, 0x3F	; 63
    49fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a02:	88 23       	and	r24, r24
    4a04:	1c f4       	brge	.+6      	; 0x4a0c <LCD_set_cursor+0x8e>
		__ticks = 1;
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	88 8b       	std	Y+16, r24	; 0x10
    4a0a:	91 c0       	rjmp	.+290    	; 0x4b2e <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    4a0c:	69 89       	ldd	r22, Y+17	; 0x11
    4a0e:	7a 89       	ldd	r23, Y+18	; 0x12
    4a10:	8b 89       	ldd	r24, Y+19	; 0x13
    4a12:	9c 89       	ldd	r25, Y+20	; 0x14
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	4f e7       	ldi	r20, 0x7F	; 127
    4a1a:	53 e4       	ldi	r21, 0x43	; 67
    4a1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a20:	18 16       	cp	r1, r24
    4a22:	0c f0       	brlt	.+2      	; 0x4a26 <LCD_set_cursor+0xa8>
    4a24:	7b c0       	rjmp	.+246    	; 0x4b1c <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    4a26:	6d 89       	ldd	r22, Y+21	; 0x15
    4a28:	7e 89       	ldd	r23, Y+22	; 0x16
    4a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	4a e7       	ldi	r20, 0x7A	; 122
    4a34:	54 e4       	ldi	r21, 0x44	; 68
    4a36:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	8c 87       	std	Y+12, r24	; 0x0c
    4a40:	9d 87       	std	Y+13, r25	; 0x0d
    4a42:	ae 87       	std	Y+14, r26	; 0x0e
    4a44:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a46:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a48:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    4a52:	4a ef       	ldi	r20, 0xFA	; 250
    4a54:	54 e4       	ldi	r21, 0x44	; 68
    4a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	88 87       	std	Y+8, r24	; 0x08
    4a60:	99 87       	std	Y+9, r25	; 0x09
    4a62:	aa 87       	std	Y+10, r26	; 0x0a
    4a64:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4a66:	68 85       	ldd	r22, Y+8	; 0x08
    4a68:	79 85       	ldd	r23, Y+9	; 0x09
    4a6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	40 e8       	ldi	r20, 0x80	; 128
    4a74:	5f e3       	ldi	r21, 0x3F	; 63
    4a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a7a:	88 23       	and	r24, r24
    4a7c:	2c f4       	brge	.+10     	; 0x4a88 <LCD_set_cursor+0x10a>
		__ticks = 1;
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	9f 83       	std	Y+7, r25	; 0x07
    4a84:	8e 83       	std	Y+6, r24	; 0x06
    4a86:	3f c0       	rjmp	.+126    	; 0x4b06 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4a88:	68 85       	ldd	r22, Y+8	; 0x08
    4a8a:	79 85       	ldd	r23, Y+9	; 0x09
    4a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a90:	20 e0       	ldi	r18, 0x00	; 0
    4a92:	3f ef       	ldi	r19, 0xFF	; 255
    4a94:	4f e7       	ldi	r20, 0x7F	; 127
    4a96:	57 e4       	ldi	r21, 0x47	; 71
    4a98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a9c:	18 16       	cp	r1, r24
    4a9e:	4c f5       	brge	.+82     	; 0x4af2 <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa0:	6c 85       	ldd	r22, Y+12	; 0x0c
    4aa2:	7d 85       	ldd	r23, Y+13	; 0x0d
    4aa4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4aa6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	40 e2       	ldi	r20, 0x20	; 32
    4aae:	51 e4       	ldi	r21, 0x41	; 65
    4ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	bc 01       	movw	r22, r24
    4aba:	cd 01       	movw	r24, r26
    4abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac0:	dc 01       	movw	r26, r24
    4ac2:	cb 01       	movw	r24, r22
    4ac4:	9f 83       	std	Y+7, r25	; 0x07
    4ac6:	8e 83       	std	Y+6, r24	; 0x06
    4ac8:	0f c0       	rjmp	.+30     	; 0x4ae8 <LCD_set_cursor+0x16a>
    4aca:	88 ec       	ldi	r24, 0xC8	; 200
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	9d 83       	std	Y+5, r25	; 0x05
    4ad0:	8c 83       	std	Y+4, r24	; 0x04
    4ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ad6:	01 97       	sbiw	r24, 0x01	; 1
    4ad8:	f1 f7       	brne	.-4      	; 0x4ad6 <LCD_set_cursor+0x158>
    4ada:	9d 83       	std	Y+5, r25	; 0x05
    4adc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ade:	8e 81       	ldd	r24, Y+6	; 0x06
    4ae0:	9f 81       	ldd	r25, Y+7	; 0x07
    4ae2:	01 97       	sbiw	r24, 0x01	; 1
    4ae4:	9f 83       	std	Y+7, r25	; 0x07
    4ae6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    4aea:	9f 81       	ldd	r25, Y+7	; 0x07
    4aec:	00 97       	sbiw	r24, 0x00	; 0
    4aee:	69 f7       	brne	.-38     	; 0x4aca <LCD_set_cursor+0x14c>
    4af0:	24 c0       	rjmp	.+72     	; 0x4b3a <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af2:	68 85       	ldd	r22, Y+8	; 0x08
    4af4:	79 85       	ldd	r23, Y+9	; 0x09
    4af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4af8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	9f 83       	std	Y+7, r25	; 0x07
    4b04:	8e 83       	std	Y+6, r24	; 0x06
    4b06:	8e 81       	ldd	r24, Y+6	; 0x06
    4b08:	9f 81       	ldd	r25, Y+7	; 0x07
    4b0a:	9b 83       	std	Y+3, r25	; 0x03
    4b0c:	8a 83       	std	Y+2, r24	; 0x02
    4b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b10:	9b 81       	ldd	r25, Y+3	; 0x03
    4b12:	01 97       	sbiw	r24, 0x01	; 1
    4b14:	f1 f7       	brne	.-4      	; 0x4b12 <LCD_set_cursor+0x194>
    4b16:	9b 83       	std	Y+3, r25	; 0x03
    4b18:	8a 83       	std	Y+2, r24	; 0x02
    4b1a:	0f c0       	rjmp	.+30     	; 0x4b3a <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b1c:	69 89       	ldd	r22, Y+17	; 0x11
    4b1e:	7a 89       	ldd	r23, Y+18	; 0x12
    4b20:	8b 89       	ldd	r24, Y+19	; 0x13
    4b22:	9c 89       	ldd	r25, Y+20	; 0x14
    4b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	88 8b       	std	Y+16, r24	; 0x10
    4b2e:	88 89       	ldd	r24, Y+16	; 0x10
    4b30:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4b32:	89 81       	ldd	r24, Y+1	; 0x01
    4b34:	8a 95       	dec	r24
    4b36:	f1 f7       	brne	.-4      	; 0x4b34 <LCD_set_cursor+0x1b6>
    4b38:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_us(50);
#endif
}
    4b3a:	6b 96       	adiw	r28, 0x1b	; 27
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	de bf       	out	0x3e, r29	; 62
    4b42:	0f be       	out	0x3f, r0	; 63
    4b44:	cd bf       	out	0x3d, r28	; 61
    4b46:	cf 91       	pop	r28
    4b48:	df 91       	pop	r29
    4b4a:	08 95       	ret

00004b4c <LCD_clear>:

void LCD_clear(void){
    4b4c:	df 93       	push	r29
    4b4e:	cf 93       	push	r28
    4b50:	cd b7       	in	r28, 0x3d	; 61
    4b52:	de b7       	in	r29, 0x3e	; 62
    4b54:	6c 97       	sbiw	r28, 0x1c	; 28
    4b56:	0f b6       	in	r0, 0x3f	; 63
    4b58:	f8 94       	cli
    4b5a:	de bf       	out	0x3e, r29	; 62
    4b5c:	0f be       	out	0x3f, r0	; 63
    4b5e:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(return_home);
	// wait more than 39 us
	_delay_ms(2);
#elif _LCD_interface_ == _4bit_interface
	// Send Display clear command
	LCD_write_cmd_4bit(display_clear);
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_write_cmd_4bit>
    4b66:	80 e0       	ldi	r24, 0x00	; 0
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	a0 e0       	ldi	r26, 0x00	; 0
    4b6c:	b0 e4       	ldi	r27, 0x40	; 64
    4b6e:	89 8f       	std	Y+25, r24	; 0x19
    4b70:	9a 8f       	std	Y+26, r25	; 0x1a
    4b72:	ab 8f       	std	Y+27, r26	; 0x1b
    4b74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b76:	69 8d       	ldd	r22, Y+25	; 0x19
    4b78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	4a ef       	ldi	r20, 0xFA	; 250
    4b84:	54 e4       	ldi	r21, 0x44	; 68
    4b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b8a:	dc 01       	movw	r26, r24
    4b8c:	cb 01       	movw	r24, r22
    4b8e:	8d 8b       	std	Y+21, r24	; 0x15
    4b90:	9e 8b       	std	Y+22, r25	; 0x16
    4b92:	af 8b       	std	Y+23, r26	; 0x17
    4b94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b96:	6d 89       	ldd	r22, Y+21	; 0x15
    4b98:	7e 89       	ldd	r23, Y+22	; 0x16
    4b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	40 e8       	ldi	r20, 0x80	; 128
    4ba4:	5f e3       	ldi	r21, 0x3F	; 63
    4ba6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4baa:	88 23       	and	r24, r24
    4bac:	2c f4       	brge	.+10     	; 0x4bb8 <LCD_clear+0x6c>
		__ticks = 1;
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	9c 8b       	std	Y+20, r25	; 0x14
    4bb4:	8b 8b       	std	Y+19, r24	; 0x13
    4bb6:	3f c0       	rjmp	.+126    	; 0x4c36 <LCD_clear+0xea>
	else if (__tmp > 65535)
    4bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    4bba:	7e 89       	ldd	r23, Y+22	; 0x16
    4bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    4bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	3f ef       	ldi	r19, 0xFF	; 255
    4bc4:	4f e7       	ldi	r20, 0x7F	; 127
    4bc6:	57 e4       	ldi	r21, 0x47	; 71
    4bc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bcc:	18 16       	cp	r1, r24
    4bce:	4c f5       	brge	.+82     	; 0x4c22 <LCD_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bd0:	69 8d       	ldd	r22, Y+25	; 0x19
    4bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	40 e2       	ldi	r20, 0x20	; 32
    4bde:	51 e4       	ldi	r21, 0x41	; 65
    4be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	bc 01       	movw	r22, r24
    4bea:	cd 01       	movw	r24, r26
    4bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	9c 8b       	std	Y+20, r25	; 0x14
    4bf6:	8b 8b       	std	Y+19, r24	; 0x13
    4bf8:	0f c0       	rjmp	.+30     	; 0x4c18 <LCD_clear+0xcc>
    4bfa:	88 ec       	ldi	r24, 0xC8	; 200
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	9a 8b       	std	Y+18, r25	; 0x12
    4c00:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c02:	89 89       	ldd	r24, Y+17	; 0x11
    4c04:	9a 89       	ldd	r25, Y+18	; 0x12
    4c06:	01 97       	sbiw	r24, 0x01	; 1
    4c08:	f1 f7       	brne	.-4      	; 0x4c06 <LCD_clear+0xba>
    4c0a:	9a 8b       	std	Y+18, r25	; 0x12
    4c0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    4c10:	9c 89       	ldd	r25, Y+20	; 0x14
    4c12:	01 97       	sbiw	r24, 0x01	; 1
    4c14:	9c 8b       	std	Y+20, r25	; 0x14
    4c16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c18:	8b 89       	ldd	r24, Y+19	; 0x13
    4c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c1c:	00 97       	sbiw	r24, 0x00	; 0
    4c1e:	69 f7       	brne	.-38     	; 0x4bfa <LCD_clear+0xae>
    4c20:	14 c0       	rjmp	.+40     	; 0x4c4a <LCD_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c22:	6d 89       	ldd	r22, Y+21	; 0x15
    4c24:	7e 89       	ldd	r23, Y+22	; 0x16
    4c26:	8f 89       	ldd	r24, Y+23	; 0x17
    4c28:	98 8d       	ldd	r25, Y+24	; 0x18
    4c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	9c 8b       	std	Y+20, r25	; 0x14
    4c34:	8b 8b       	std	Y+19, r24	; 0x13
    4c36:	8b 89       	ldd	r24, Y+19	; 0x13
    4c38:	9c 89       	ldd	r25, Y+20	; 0x14
    4c3a:	98 8b       	std	Y+16, r25	; 0x10
    4c3c:	8f 87       	std	Y+15, r24	; 0x0f
    4c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c40:	98 89       	ldd	r25, Y+16	; 0x10
    4c42:	01 97       	sbiw	r24, 0x01	; 1
    4c44:	f1 f7       	brne	.-4      	; 0x4c42 <LCD_clear+0xf6>
    4c46:	98 8b       	std	Y+16, r25	; 0x10
    4c48:	8f 87       	std	Y+15, r24	; 0x0f
	// Wait more than 1.53 ms
	_delay_ms(2);
	// Send set address command with home address
	LCD_write_cmd_4bit(return_home);
    4c4a:	82 e0       	ldi	r24, 0x02	; 2
    4c4c:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_write_cmd_4bit>
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	a0 e0       	ldi	r26, 0x00	; 0
    4c56:	b0 e4       	ldi	r27, 0x40	; 64
    4c58:	8b 87       	std	Y+11, r24	; 0x0b
    4c5a:	9c 87       	std	Y+12, r25	; 0x0c
    4c5c:	ad 87       	std	Y+13, r26	; 0x0d
    4c5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	30 e0       	ldi	r19, 0x00	; 0
    4c6c:	4a ef       	ldi	r20, 0xFA	; 250
    4c6e:	54 e4       	ldi	r21, 0x44	; 68
    4c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c74:	dc 01       	movw	r26, r24
    4c76:	cb 01       	movw	r24, r22
    4c78:	8f 83       	std	Y+7, r24	; 0x07
    4c7a:	98 87       	std	Y+8, r25	; 0x08
    4c7c:	a9 87       	std	Y+9, r26	; 0x09
    4c7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c80:	6f 81       	ldd	r22, Y+7	; 0x07
    4c82:	78 85       	ldd	r23, Y+8	; 0x08
    4c84:	89 85       	ldd	r24, Y+9	; 0x09
    4c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	30 e0       	ldi	r19, 0x00	; 0
    4c8c:	40 e8       	ldi	r20, 0x80	; 128
    4c8e:	5f e3       	ldi	r21, 0x3F	; 63
    4c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c94:	88 23       	and	r24, r24
    4c96:	2c f4       	brge	.+10     	; 0x4ca2 <LCD_clear+0x156>
		__ticks = 1;
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	9e 83       	std	Y+6, r25	; 0x06
    4c9e:	8d 83       	std	Y+5, r24	; 0x05
    4ca0:	3f c0       	rjmp	.+126    	; 0x4d20 <LCD_clear+0x1d4>
	else if (__tmp > 65535)
    4ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ca4:	78 85       	ldd	r23, Y+8	; 0x08
    4ca6:	89 85       	ldd	r24, Y+9	; 0x09
    4ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4caa:	20 e0       	ldi	r18, 0x00	; 0
    4cac:	3f ef       	ldi	r19, 0xFF	; 255
    4cae:	4f e7       	ldi	r20, 0x7F	; 127
    4cb0:	57 e4       	ldi	r21, 0x47	; 71
    4cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cb6:	18 16       	cp	r1, r24
    4cb8:	4c f5       	brge	.+82     	; 0x4d0c <LCD_clear+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cc2:	20 e0       	ldi	r18, 0x00	; 0
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	40 e2       	ldi	r20, 0x20	; 32
    4cc8:	51 e4       	ldi	r21, 0x41	; 65
    4cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cce:	dc 01       	movw	r26, r24
    4cd0:	cb 01       	movw	r24, r22
    4cd2:	bc 01       	movw	r22, r24
    4cd4:	cd 01       	movw	r24, r26
    4cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cda:	dc 01       	movw	r26, r24
    4cdc:	cb 01       	movw	r24, r22
    4cde:	9e 83       	std	Y+6, r25	; 0x06
    4ce0:	8d 83       	std	Y+5, r24	; 0x05
    4ce2:	0f c0       	rjmp	.+30     	; 0x4d02 <LCD_clear+0x1b6>
    4ce4:	88 ec       	ldi	r24, 0xC8	; 200
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	9c 83       	std	Y+4, r25	; 0x04
    4cea:	8b 83       	std	Y+3, r24	; 0x03
    4cec:	8b 81       	ldd	r24, Y+3	; 0x03
    4cee:	9c 81       	ldd	r25, Y+4	; 0x04
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	f1 f7       	brne	.-4      	; 0x4cf0 <LCD_clear+0x1a4>
    4cf4:	9c 83       	std	Y+4, r25	; 0x04
    4cf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    4cfc:	01 97       	sbiw	r24, 0x01	; 1
    4cfe:	9e 83       	std	Y+6, r25	; 0x06
    4d00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d02:	8d 81       	ldd	r24, Y+5	; 0x05
    4d04:	9e 81       	ldd	r25, Y+6	; 0x06
    4d06:	00 97       	sbiw	r24, 0x00	; 0
    4d08:	69 f7       	brne	.-38     	; 0x4ce4 <LCD_clear+0x198>
    4d0a:	14 c0       	rjmp	.+40     	; 0x4d34 <LCD_clear+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    4d0e:	78 85       	ldd	r23, Y+8	; 0x08
    4d10:	89 85       	ldd	r24, Y+9	; 0x09
    4d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	9e 83       	std	Y+6, r25	; 0x06
    4d1e:	8d 83       	std	Y+5, r24	; 0x05
    4d20:	8d 81       	ldd	r24, Y+5	; 0x05
    4d22:	9e 81       	ldd	r25, Y+6	; 0x06
    4d24:	9a 83       	std	Y+2, r25	; 0x02
    4d26:	89 83       	std	Y+1, r24	; 0x01
    4d28:	89 81       	ldd	r24, Y+1	; 0x01
    4d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d2c:	01 97       	sbiw	r24, 0x01	; 1
    4d2e:	f1 f7       	brne	.-4      	; 0x4d2c <LCD_clear+0x1e0>
    4d30:	9a 83       	std	Y+2, r25	; 0x02
    4d32:	89 83       	std	Y+1, r24	; 0x01
	// wait more than 39 us
	_delay_ms(2);
#endif
}
    4d34:	6c 96       	adiw	r28, 0x1c	; 28
    4d36:	0f b6       	in	r0, 0x3f	; 63
    4d38:	f8 94       	cli
    4d3a:	de bf       	out	0x3e, r29	; 62
    4d3c:	0f be       	out	0x3f, r0	; 63
    4d3e:	cd bf       	out	0x3d, r28	; 61
    4d40:	cf 91       	pop	r28
    4d42:	df 91       	pop	r29
    4d44:	08 95       	ret

00004d46 <LCD_off>:

void LCD_off(void ){
    4d46:	df 93       	push	r29
    4d48:	cf 93       	push	r28
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
    4d4e:	2e 97       	sbiw	r28, 0x0e	; 14
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_off);
	// Wait more than 39 us
	_delay_ms(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_off);
    4d5a:	88 e0       	ldi	r24, 0x08	; 8
    4d5c:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_write_cmd_4bit>
    4d60:	80 e0       	ldi	r24, 0x00	; 0
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	a8 e4       	ldi	r26, 0x48	; 72
    4d66:	b2 e4       	ldi	r27, 0x42	; 66
    4d68:	8b 87       	std	Y+11, r24	; 0x0b
    4d6a:	9c 87       	std	Y+12, r25	; 0x0c
    4d6c:	ad 87       	std	Y+13, r26	; 0x0d
    4d6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	4a ef       	ldi	r20, 0xFA	; 250
    4d7e:	54 e4       	ldi	r21, 0x44	; 68
    4d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d84:	dc 01       	movw	r26, r24
    4d86:	cb 01       	movw	r24, r22
    4d88:	8f 83       	std	Y+7, r24	; 0x07
    4d8a:	98 87       	std	Y+8, r25	; 0x08
    4d8c:	a9 87       	std	Y+9, r26	; 0x09
    4d8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d90:	6f 81       	ldd	r22, Y+7	; 0x07
    4d92:	78 85       	ldd	r23, Y+8	; 0x08
    4d94:	89 85       	ldd	r24, Y+9	; 0x09
    4d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	40 e8       	ldi	r20, 0x80	; 128
    4d9e:	5f e3       	ldi	r21, 0x3F	; 63
    4da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4da4:	88 23       	and	r24, r24
    4da6:	2c f4       	brge	.+10     	; 0x4db2 <LCD_off+0x6c>
		__ticks = 1;
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	9e 83       	std	Y+6, r25	; 0x06
    4dae:	8d 83       	std	Y+5, r24	; 0x05
    4db0:	3f c0       	rjmp	.+126    	; 0x4e30 <LCD_off+0xea>
	else if (__tmp > 65535)
    4db2:	6f 81       	ldd	r22, Y+7	; 0x07
    4db4:	78 85       	ldd	r23, Y+8	; 0x08
    4db6:	89 85       	ldd	r24, Y+9	; 0x09
    4db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dba:	20 e0       	ldi	r18, 0x00	; 0
    4dbc:	3f ef       	ldi	r19, 0xFF	; 255
    4dbe:	4f e7       	ldi	r20, 0x7F	; 127
    4dc0:	57 e4       	ldi	r21, 0x47	; 71
    4dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dc6:	18 16       	cp	r1, r24
    4dc8:	4c f5       	brge	.+82     	; 0x4e1c <LCD_off+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	40 e2       	ldi	r20, 0x20	; 32
    4dd8:	51 e4       	ldi	r21, 0x41	; 65
    4dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dde:	dc 01       	movw	r26, r24
    4de0:	cb 01       	movw	r24, r22
    4de2:	bc 01       	movw	r22, r24
    4de4:	cd 01       	movw	r24, r26
    4de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dea:	dc 01       	movw	r26, r24
    4dec:	cb 01       	movw	r24, r22
    4dee:	9e 83       	std	Y+6, r25	; 0x06
    4df0:	8d 83       	std	Y+5, r24	; 0x05
    4df2:	0f c0       	rjmp	.+30     	; 0x4e12 <LCD_off+0xcc>
    4df4:	88 ec       	ldi	r24, 0xC8	; 200
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	9c 83       	std	Y+4, r25	; 0x04
    4dfa:	8b 83       	std	Y+3, r24	; 0x03
    4dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    4e00:	01 97       	sbiw	r24, 0x01	; 1
    4e02:	f1 f7       	brne	.-4      	; 0x4e00 <LCD_off+0xba>
    4e04:	9c 83       	std	Y+4, r25	; 0x04
    4e06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e08:	8d 81       	ldd	r24, Y+5	; 0x05
    4e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e0c:	01 97       	sbiw	r24, 0x01	; 1
    4e0e:	9e 83       	std	Y+6, r25	; 0x06
    4e10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e12:	8d 81       	ldd	r24, Y+5	; 0x05
    4e14:	9e 81       	ldd	r25, Y+6	; 0x06
    4e16:	00 97       	sbiw	r24, 0x00	; 0
    4e18:	69 f7       	brne	.-38     	; 0x4df4 <LCD_off+0xae>
    4e1a:	14 c0       	rjmp	.+40     	; 0x4e44 <LCD_off+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e1e:	78 85       	ldd	r23, Y+8	; 0x08
    4e20:	89 85       	ldd	r24, Y+9	; 0x09
    4e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e28:	dc 01       	movw	r26, r24
    4e2a:	cb 01       	movw	r24, r22
    4e2c:	9e 83       	std	Y+6, r25	; 0x06
    4e2e:	8d 83       	std	Y+5, r24	; 0x05
    4e30:	8d 81       	ldd	r24, Y+5	; 0x05
    4e32:	9e 81       	ldd	r25, Y+6	; 0x06
    4e34:	9a 83       	std	Y+2, r25	; 0x02
    4e36:	89 83       	std	Y+1, r24	; 0x01
    4e38:	89 81       	ldd	r24, Y+1	; 0x01
    4e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e3c:	01 97       	sbiw	r24, 0x01	; 1
    4e3e:	f1 f7       	brne	.-4      	; 0x4e3c <LCD_off+0xf6>
    4e40:	9a 83       	std	Y+2, r25	; 0x02
    4e42:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_ms(50);
#endif
}
    4e44:	2e 96       	adiw	r28, 0x0e	; 14
    4e46:	0f b6       	in	r0, 0x3f	; 63
    4e48:	f8 94       	cli
    4e4a:	de bf       	out	0x3e, r29	; 62
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	cd bf       	out	0x3d, r28	; 61
    4e50:	cf 91       	pop	r28
    4e52:	df 91       	pop	r29
    4e54:	08 95       	ret

00004e56 <LCD_on>:

void LCD_on(void ){
    4e56:	df 93       	push	r29
    4e58:	cf 93       	push	r28
    4e5a:	cd b7       	in	r28, 0x3d	; 61
    4e5c:	de b7       	in	r29, 0x3e	; 62
    4e5e:	68 97       	sbiw	r28, 0x18	; 24
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	f8 94       	cli
    4e64:	de bf       	out	0x3e, r29	; 62
    4e66:	0f be       	out	0x3f, r0	; 63
    4e68:	cd bf       	out	0x3d, r28	; 61
	LCD_write_cmd_8bit(display_on);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Send display off command
	LCD_write_cmd_4bit(display_on);
    4e6a:	8c e0       	ldi	r24, 0x0C	; 12
    4e6c:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_write_cmd_4bit>
    4e70:	80 e0       	ldi	r24, 0x00	; 0
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	a8 e4       	ldi	r26, 0x48	; 72
    4e76:	b2 e4       	ldi	r27, 0x42	; 66
    4e78:	8d 8b       	std	Y+21, r24	; 0x15
    4e7a:	9e 8b       	std	Y+22, r25	; 0x16
    4e7c:	af 8b       	std	Y+23, r26	; 0x17
    4e7e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4e80:	6d 89       	ldd	r22, Y+21	; 0x15
    4e82:	7e 89       	ldd	r23, Y+22	; 0x16
    4e84:	8f 89       	ldd	r24, Y+23	; 0x17
    4e86:	98 8d       	ldd	r25, Y+24	; 0x18
    4e88:	2b ea       	ldi	r18, 0xAB	; 171
    4e8a:	3a ea       	ldi	r19, 0xAA	; 170
    4e8c:	4a e2       	ldi	r20, 0x2A	; 42
    4e8e:	50 e4       	ldi	r21, 0x40	; 64
    4e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e94:	dc 01       	movw	r26, r24
    4e96:	cb 01       	movw	r24, r22
    4e98:	89 8b       	std	Y+17, r24	; 0x11
    4e9a:	9a 8b       	std	Y+18, r25	; 0x12
    4e9c:	ab 8b       	std	Y+19, r26	; 0x13
    4e9e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4ea0:	69 89       	ldd	r22, Y+17	; 0x11
    4ea2:	7a 89       	ldd	r23, Y+18	; 0x12
    4ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	40 e8       	ldi	r20, 0x80	; 128
    4eae:	5f e3       	ldi	r21, 0x3F	; 63
    4eb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eb4:	88 23       	and	r24, r24
    4eb6:	1c f4       	brge	.+6      	; 0x4ebe <LCD_on+0x68>
		__ticks = 1;
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	88 8b       	std	Y+16, r24	; 0x10
    4ebc:	91 c0       	rjmp	.+290    	; 0x4fe0 <LCD_on+0x18a>
	else if (__tmp > 255)
    4ebe:	69 89       	ldd	r22, Y+17	; 0x11
    4ec0:	7a 89       	ldd	r23, Y+18	; 0x12
    4ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	4f e7       	ldi	r20, 0x7F	; 127
    4ecc:	53 e4       	ldi	r21, 0x43	; 67
    4ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ed2:	18 16       	cp	r1, r24
    4ed4:	0c f0       	brlt	.+2      	; 0x4ed8 <LCD_on+0x82>
    4ed6:	7b c0       	rjmp	.+246    	; 0x4fce <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    4ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    4eda:	7e 89       	ldd	r23, Y+22	; 0x16
    4edc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ede:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	4a e7       	ldi	r20, 0x7A	; 122
    4ee6:	54 e4       	ldi	r21, 0x44	; 68
    4ee8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4eec:	dc 01       	movw	r26, r24
    4eee:	cb 01       	movw	r24, r22
    4ef0:	8c 87       	std	Y+12, r24	; 0x0c
    4ef2:	9d 87       	std	Y+13, r25	; 0x0d
    4ef4:	ae 87       	std	Y+14, r26	; 0x0e
    4ef6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ef8:	6c 85       	ldd	r22, Y+12	; 0x0c
    4efa:	7d 85       	ldd	r23, Y+13	; 0x0d
    4efc:	8e 85       	ldd	r24, Y+14	; 0x0e
    4efe:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	4a ef       	ldi	r20, 0xFA	; 250
    4f06:	54 e4       	ldi	r21, 0x44	; 68
    4f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	88 87       	std	Y+8, r24	; 0x08
    4f12:	99 87       	std	Y+9, r25	; 0x09
    4f14:	aa 87       	std	Y+10, r26	; 0x0a
    4f16:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4f18:	68 85       	ldd	r22, Y+8	; 0x08
    4f1a:	79 85       	ldd	r23, Y+9	; 0x09
    4f1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	40 e8       	ldi	r20, 0x80	; 128
    4f26:	5f e3       	ldi	r21, 0x3F	; 63
    4f28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f2c:	88 23       	and	r24, r24
    4f2e:	2c f4       	brge	.+10     	; 0x4f3a <LCD_on+0xe4>
		__ticks = 1;
    4f30:	81 e0       	ldi	r24, 0x01	; 1
    4f32:	90 e0       	ldi	r25, 0x00	; 0
    4f34:	9f 83       	std	Y+7, r25	; 0x07
    4f36:	8e 83       	std	Y+6, r24	; 0x06
    4f38:	3f c0       	rjmp	.+126    	; 0x4fb8 <LCD_on+0x162>
	else if (__tmp > 65535)
    4f3a:	68 85       	ldd	r22, Y+8	; 0x08
    4f3c:	79 85       	ldd	r23, Y+9	; 0x09
    4f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f40:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f42:	20 e0       	ldi	r18, 0x00	; 0
    4f44:	3f ef       	ldi	r19, 0xFF	; 255
    4f46:	4f e7       	ldi	r20, 0x7F	; 127
    4f48:	57 e4       	ldi	r21, 0x47	; 71
    4f4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f4e:	18 16       	cp	r1, r24
    4f50:	4c f5       	brge	.+82     	; 0x4fa4 <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f52:	6c 85       	ldd	r22, Y+12	; 0x0c
    4f54:	7d 85       	ldd	r23, Y+13	; 0x0d
    4f56:	8e 85       	ldd	r24, Y+14	; 0x0e
    4f58:	9f 85       	ldd	r25, Y+15	; 0x0f
    4f5a:	20 e0       	ldi	r18, 0x00	; 0
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	40 e2       	ldi	r20, 0x20	; 32
    4f60:	51 e4       	ldi	r21, 0x41	; 65
    4f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f66:	dc 01       	movw	r26, r24
    4f68:	cb 01       	movw	r24, r22
    4f6a:	bc 01       	movw	r22, r24
    4f6c:	cd 01       	movw	r24, r26
    4f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f72:	dc 01       	movw	r26, r24
    4f74:	cb 01       	movw	r24, r22
    4f76:	9f 83       	std	Y+7, r25	; 0x07
    4f78:	8e 83       	std	Y+6, r24	; 0x06
    4f7a:	0f c0       	rjmp	.+30     	; 0x4f9a <LCD_on+0x144>
    4f7c:	88 ec       	ldi	r24, 0xC8	; 200
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	9d 83       	std	Y+5, r25	; 0x05
    4f82:	8c 83       	std	Y+4, r24	; 0x04
    4f84:	8c 81       	ldd	r24, Y+4	; 0x04
    4f86:	9d 81       	ldd	r25, Y+5	; 0x05
    4f88:	01 97       	sbiw	r24, 0x01	; 1
    4f8a:	f1 f7       	brne	.-4      	; 0x4f88 <LCD_on+0x132>
    4f8c:	9d 83       	std	Y+5, r25	; 0x05
    4f8e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f90:	8e 81       	ldd	r24, Y+6	; 0x06
    4f92:	9f 81       	ldd	r25, Y+7	; 0x07
    4f94:	01 97       	sbiw	r24, 0x01	; 1
    4f96:	9f 83       	std	Y+7, r25	; 0x07
    4f98:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    4f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    4f9e:	00 97       	sbiw	r24, 0x00	; 0
    4fa0:	69 f7       	brne	.-38     	; 0x4f7c <LCD_on+0x126>
    4fa2:	24 c0       	rjmp	.+72     	; 0x4fec <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fa4:	68 85       	ldd	r22, Y+8	; 0x08
    4fa6:	79 85       	ldd	r23, Y+9	; 0x09
    4fa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4faa:	9b 85       	ldd	r25, Y+11	; 0x0b
    4fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb0:	dc 01       	movw	r26, r24
    4fb2:	cb 01       	movw	r24, r22
    4fb4:	9f 83       	std	Y+7, r25	; 0x07
    4fb6:	8e 83       	std	Y+6, r24	; 0x06
    4fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    4fba:	9f 81       	ldd	r25, Y+7	; 0x07
    4fbc:	9b 83       	std	Y+3, r25	; 0x03
    4fbe:	8a 83       	std	Y+2, r24	; 0x02
    4fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    4fc4:	01 97       	sbiw	r24, 0x01	; 1
    4fc6:	f1 f7       	brne	.-4      	; 0x4fc4 <LCD_on+0x16e>
    4fc8:	9b 83       	std	Y+3, r25	; 0x03
    4fca:	8a 83       	std	Y+2, r24	; 0x02
    4fcc:	0f c0       	rjmp	.+30     	; 0x4fec <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4fce:	69 89       	ldd	r22, Y+17	; 0x11
    4fd0:	7a 89       	ldd	r23, Y+18	; 0x12
    4fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    4fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    4fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fda:	dc 01       	movw	r26, r24
    4fdc:	cb 01       	movw	r24, r22
    4fde:	88 8b       	std	Y+16, r24	; 0x10
    4fe0:	88 89       	ldd	r24, Y+16	; 0x10
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4fe4:	89 81       	ldd	r24, Y+1	; 0x01
    4fe6:	8a 95       	dec	r24
    4fe8:	f1 f7       	brne	.-4      	; 0x4fe6 <LCD_on+0x190>
    4fea:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    4fec:	68 96       	adiw	r28, 0x18	; 24
    4fee:	0f b6       	in	r0, 0x3f	; 63
    4ff0:	f8 94       	cli
    4ff2:	de bf       	out	0x3e, r29	; 62
    4ff4:	0f be       	out	0x3f, r0	; 63
    4ff6:	cd bf       	out	0x3d, r28	; 61
    4ff8:	cf 91       	pop	r28
    4ffa:	df 91       	pop	r29
    4ffc:	08 95       	ret

00004ffe <LCD_create_char>:

void LCD_create_char(u8* copy_pu8_char_data, u8 copy_u8_loc){
    4ffe:	df 93       	push	r29
    5000:	cf 93       	push	r28
    5002:	00 d0       	rcall	.+0      	; 0x5004 <LCD_create_char+0x6>
    5004:	0f 92       	push	r0
    5006:	cd b7       	in	r28, 0x3d	; 61
    5008:	de b7       	in	r29, 0x3e	; 62
    500a:	9a 83       	std	Y+2, r25	; 0x02
    500c:	89 83       	std	Y+1, r24	; 0x01
    500e:	6b 83       	std	Y+3, r22	; 0x03
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface

#endif
}
    5010:	0f 90       	pop	r0
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	cf 91       	pop	r28
    5018:	df 91       	pop	r29
    501a:	08 95       	ret

0000501c <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    501c:	df 93       	push	r29
    501e:	cf 93       	push	r28
    5020:	cd b7       	in	r28, 0x3d	; 61
    5022:	de b7       	in	r29, 0x3e	; 62
    5024:	69 97       	sbiw	r28, 0x19	; 25
    5026:	0f b6       	in	r0, 0x3f	; 63
    5028:	f8 94       	cli
    502a:	de bf       	out	0x3e, r29	; 62
    502c:	0f be       	out	0x3f, r0	; 63
    502e:	cd bf       	out	0x3d, r28	; 61
    5030:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// Wait more than 39 us
	_delay_us(50);
#elif _LCD_interface_ == _4bit_interface
	// Wait more than 39 us
	LCD_write_data_4bit(copy_u8_char);
    5032:	89 8d       	ldd	r24, Y+25	; 0x19
    5034:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <LCD_write_data_4bit>
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	a8 e4       	ldi	r26, 0x48	; 72
    503e:	b2 e4       	ldi	r27, 0x42	; 66
    5040:	8d 8b       	std	Y+21, r24	; 0x15
    5042:	9e 8b       	std	Y+22, r25	; 0x16
    5044:	af 8b       	std	Y+23, r26	; 0x17
    5046:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5048:	6d 89       	ldd	r22, Y+21	; 0x15
    504a:	7e 89       	ldd	r23, Y+22	; 0x16
    504c:	8f 89       	ldd	r24, Y+23	; 0x17
    504e:	98 8d       	ldd	r25, Y+24	; 0x18
    5050:	2b ea       	ldi	r18, 0xAB	; 171
    5052:	3a ea       	ldi	r19, 0xAA	; 170
    5054:	4a e2       	ldi	r20, 0x2A	; 42
    5056:	50 e4       	ldi	r21, 0x40	; 64
    5058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    505c:	dc 01       	movw	r26, r24
    505e:	cb 01       	movw	r24, r22
    5060:	89 8b       	std	Y+17, r24	; 0x11
    5062:	9a 8b       	std	Y+18, r25	; 0x12
    5064:	ab 8b       	std	Y+19, r26	; 0x13
    5066:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5068:	69 89       	ldd	r22, Y+17	; 0x11
    506a:	7a 89       	ldd	r23, Y+18	; 0x12
    506c:	8b 89       	ldd	r24, Y+19	; 0x13
    506e:	9c 89       	ldd	r25, Y+20	; 0x14
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e8       	ldi	r20, 0x80	; 128
    5076:	5f e3       	ldi	r21, 0x3F	; 63
    5078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    507c:	88 23       	and	r24, r24
    507e:	1c f4       	brge	.+6      	; 0x5086 <LCD_write_char+0x6a>
		__ticks = 1;
    5080:	81 e0       	ldi	r24, 0x01	; 1
    5082:	88 8b       	std	Y+16, r24	; 0x10
    5084:	91 c0       	rjmp	.+290    	; 0x51a8 <LCD_write_char+0x18c>
	else if (__tmp > 255)
    5086:	69 89       	ldd	r22, Y+17	; 0x11
    5088:	7a 89       	ldd	r23, Y+18	; 0x12
    508a:	8b 89       	ldd	r24, Y+19	; 0x13
    508c:	9c 89       	ldd	r25, Y+20	; 0x14
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	4f e7       	ldi	r20, 0x7F	; 127
    5094:	53 e4       	ldi	r21, 0x43	; 67
    5096:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    509a:	18 16       	cp	r1, r24
    509c:	0c f0       	brlt	.+2      	; 0x50a0 <LCD_write_char+0x84>
    509e:	7b c0       	rjmp	.+246    	; 0x5196 <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    50a0:	6d 89       	ldd	r22, Y+21	; 0x15
    50a2:	7e 89       	ldd	r23, Y+22	; 0x16
    50a4:	8f 89       	ldd	r24, Y+23	; 0x17
    50a6:	98 8d       	ldd	r25, Y+24	; 0x18
    50a8:	20 e0       	ldi	r18, 0x00	; 0
    50aa:	30 e0       	ldi	r19, 0x00	; 0
    50ac:	4a e7       	ldi	r20, 0x7A	; 122
    50ae:	54 e4       	ldi	r21, 0x44	; 68
    50b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    50b4:	dc 01       	movw	r26, r24
    50b6:	cb 01       	movw	r24, r22
    50b8:	8c 87       	std	Y+12, r24	; 0x0c
    50ba:	9d 87       	std	Y+13, r25	; 0x0d
    50bc:	ae 87       	std	Y+14, r26	; 0x0e
    50be:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    50c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    50c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    50c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	4a ef       	ldi	r20, 0xFA	; 250
    50ce:	54 e4       	ldi	r21, 0x44	; 68
    50d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	88 87       	std	Y+8, r24	; 0x08
    50da:	99 87       	std	Y+9, r25	; 0x09
    50dc:	aa 87       	std	Y+10, r26	; 0x0a
    50de:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    50e0:	68 85       	ldd	r22, Y+8	; 0x08
    50e2:	79 85       	ldd	r23, Y+9	; 0x09
    50e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    50e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	40 e8       	ldi	r20, 0x80	; 128
    50ee:	5f e3       	ldi	r21, 0x3F	; 63
    50f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50f4:	88 23       	and	r24, r24
    50f6:	2c f4       	brge	.+10     	; 0x5102 <LCD_write_char+0xe6>
		__ticks = 1;
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	9f 83       	std	Y+7, r25	; 0x07
    50fe:	8e 83       	std	Y+6, r24	; 0x06
    5100:	3f c0       	rjmp	.+126    	; 0x5180 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    5102:	68 85       	ldd	r22, Y+8	; 0x08
    5104:	79 85       	ldd	r23, Y+9	; 0x09
    5106:	8a 85       	ldd	r24, Y+10	; 0x0a
    5108:	9b 85       	ldd	r25, Y+11	; 0x0b
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	3f ef       	ldi	r19, 0xFF	; 255
    510e:	4f e7       	ldi	r20, 0x7F	; 127
    5110:	57 e4       	ldi	r21, 0x47	; 71
    5112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5116:	18 16       	cp	r1, r24
    5118:	4c f5       	brge	.+82     	; 0x516c <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    511a:	6c 85       	ldd	r22, Y+12	; 0x0c
    511c:	7d 85       	ldd	r23, Y+13	; 0x0d
    511e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5120:	9f 85       	ldd	r25, Y+15	; 0x0f
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	40 e2       	ldi	r20, 0x20	; 32
    5128:	51 e4       	ldi	r21, 0x41	; 65
    512a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    512e:	dc 01       	movw	r26, r24
    5130:	cb 01       	movw	r24, r22
    5132:	bc 01       	movw	r22, r24
    5134:	cd 01       	movw	r24, r26
    5136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	9f 83       	std	Y+7, r25	; 0x07
    5140:	8e 83       	std	Y+6, r24	; 0x06
    5142:	0f c0       	rjmp	.+30     	; 0x5162 <LCD_write_char+0x146>
    5144:	88 ec       	ldi	r24, 0xC8	; 200
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	9d 83       	std	Y+5, r25	; 0x05
    514a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    514c:	8c 81       	ldd	r24, Y+4	; 0x04
    514e:	9d 81       	ldd	r25, Y+5	; 0x05
    5150:	01 97       	sbiw	r24, 0x01	; 1
    5152:	f1 f7       	brne	.-4      	; 0x5150 <LCD_write_char+0x134>
    5154:	9d 83       	std	Y+5, r25	; 0x05
    5156:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5158:	8e 81       	ldd	r24, Y+6	; 0x06
    515a:	9f 81       	ldd	r25, Y+7	; 0x07
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	9f 83       	std	Y+7, r25	; 0x07
    5160:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5162:	8e 81       	ldd	r24, Y+6	; 0x06
    5164:	9f 81       	ldd	r25, Y+7	; 0x07
    5166:	00 97       	sbiw	r24, 0x00	; 0
    5168:	69 f7       	brne	.-38     	; 0x5144 <LCD_write_char+0x128>
    516a:	24 c0       	rjmp	.+72     	; 0x51b4 <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    516c:	68 85       	ldd	r22, Y+8	; 0x08
    516e:	79 85       	ldd	r23, Y+9	; 0x09
    5170:	8a 85       	ldd	r24, Y+10	; 0x0a
    5172:	9b 85       	ldd	r25, Y+11	; 0x0b
    5174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	9f 83       	std	Y+7, r25	; 0x07
    517e:	8e 83       	std	Y+6, r24	; 0x06
    5180:	8e 81       	ldd	r24, Y+6	; 0x06
    5182:	9f 81       	ldd	r25, Y+7	; 0x07
    5184:	9b 83       	std	Y+3, r25	; 0x03
    5186:	8a 83       	std	Y+2, r24	; 0x02
    5188:	8a 81       	ldd	r24, Y+2	; 0x02
    518a:	9b 81       	ldd	r25, Y+3	; 0x03
    518c:	01 97       	sbiw	r24, 0x01	; 1
    518e:	f1 f7       	brne	.-4      	; 0x518c <LCD_write_char+0x170>
    5190:	9b 83       	std	Y+3, r25	; 0x03
    5192:	8a 83       	std	Y+2, r24	; 0x02
    5194:	0f c0       	rjmp	.+30     	; 0x51b4 <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5196:	69 89       	ldd	r22, Y+17	; 0x11
    5198:	7a 89       	ldd	r23, Y+18	; 0x12
    519a:	8b 89       	ldd	r24, Y+19	; 0x13
    519c:	9c 89       	ldd	r25, Y+20	; 0x14
    519e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a2:	dc 01       	movw	r26, r24
    51a4:	cb 01       	movw	r24, r22
    51a6:	88 8b       	std	Y+16, r24	; 0x10
    51a8:	88 89       	ldd	r24, Y+16	; 0x10
    51aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    51ac:	89 81       	ldd	r24, Y+1	; 0x01
    51ae:	8a 95       	dec	r24
    51b0:	f1 f7       	brne	.-4      	; 0x51ae <LCD_write_char+0x192>
    51b2:	89 83       	std	Y+1, r24	; 0x01
	// Wait more than 39 us
	_delay_us(50);
#endif
}
    51b4:	69 96       	adiw	r28, 0x19	; 25
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	f8 94       	cli
    51ba:	de bf       	out	0x3e, r29	; 62
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	cd bf       	out	0x3d, r28	; 61
    51c0:	cf 91       	pop	r28
    51c2:	df 91       	pop	r29
    51c4:	08 95       	ret

000051c6 <LCD_write_str>:

void LCD_write_str(u8* copy_pu8_str_ref){
    51c6:	df 93       	push	r29
    51c8:	cf 93       	push	r28
    51ca:	00 d0       	rcall	.+0      	; 0x51cc <LCD_write_str+0x6>
    51cc:	0f 92       	push	r0
    51ce:	cd b7       	in	r28, 0x3d	; 61
    51d0:	de b7       	in	r29, 0x3e	; 62
    51d2:	9b 83       	std	Y+3, r25	; 0x03
    51d4:	8a 83       	std	Y+2, r24	; 0x02
	 *		copy_pu8_str_ref>> Pointer to the first element of the string.
	 *	
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
    51d6:	19 82       	std	Y+1, r1	; 0x01
    51d8:	0e c0       	rjmp	.+28     	; 0x51f6 <LCD_write_str+0x30>
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
    51da:	89 81       	ldd	r24, Y+1	; 0x01
    51dc:	28 2f       	mov	r18, r24
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	8a 81       	ldd	r24, Y+2	; 0x02
    51e2:	9b 81       	ldd	r25, Y+3	; 0x03
    51e4:	fc 01       	movw	r30, r24
    51e6:	e2 0f       	add	r30, r18
    51e8:	f3 1f       	adc	r31, r19
    51ea:	80 81       	ld	r24, Z
    51ec:	0e 94 0e 28 	call	0x501c	; 0x501c <LCD_write_char>
		// Increment the string index
		i++;
    51f0:	89 81       	ldd	r24, Y+1	; 0x01
    51f2:	8f 5f       	subi	r24, 0xFF	; 255
    51f4:	89 83       	std	Y+1, r24	; 0x01
	 *	Function does not return any values.
	 */
	// Create a counter for string indexing
	u8 i = 0;
	// Loop on the string till null terminator
	while(copy_pu8_str_ref[i] != null){
    51f6:	89 81       	ldd	r24, Y+1	; 0x01
    51f8:	28 2f       	mov	r18, r24
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	8a 81       	ldd	r24, Y+2	; 0x02
    51fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5200:	fc 01       	movw	r30, r24
    5202:	e2 0f       	add	r30, r18
    5204:	f3 1f       	adc	r31, r19
    5206:	80 81       	ld	r24, Z
    5208:	88 23       	and	r24, r24
    520a:	39 f7       	brne	.-50     	; 0x51da <LCD_write_str+0x14>
		// Display the curent character
		LCD_write_char(copy_pu8_str_ref[i]);
		// Increment the string index
		i++;
	}
}
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	0f 90       	pop	r0
    5212:	cf 91       	pop	r28
    5214:	df 91       	pop	r29
    5216:	08 95       	ret

00005218 <LCD_write_s32_number>:

void LCD_write_s32_number(s32 copy_s32_number){
    5218:	0f 93       	push	r16
    521a:	1f 93       	push	r17
    521c:	df 93       	push	r29
    521e:	cf 93       	push	r28
    5220:	cd b7       	in	r28, 0x3d	; 61
    5222:	de b7       	in	r29, 0x3e	; 62
    5224:	60 97       	sbiw	r28, 0x10	; 16
    5226:	0f b6       	in	r0, 0x3f	; 63
    5228:	f8 94       	cli
    522a:	de bf       	out	0x3e, r29	; 62
    522c:	0f be       	out	0x3f, r0	; 63
    522e:	cd bf       	out	0x3d, r28	; 61
    5230:	6d 87       	std	Y+13, r22	; 0x0d
    5232:	7e 87       	std	Y+14, r23	; 0x0e
    5234:	8f 87       	std	Y+15, r24	; 0x0f
    5236:	98 8b       	std	Y+16, r25	; 0x10
	 *		copy_s32_number>> The number to displayed.
	 *	
	 *	Function does not return any values.
	 */
	// Print zero if the original number is zero
	if(0 == copy_s32_number)
    5238:	8d 85       	ldd	r24, Y+13	; 0x0d
    523a:	9e 85       	ldd	r25, Y+14	; 0x0e
    523c:	af 85       	ldd	r26, Y+15	; 0x0f
    523e:	b8 89       	ldd	r27, Y+16	; 0x10
    5240:	00 97       	sbiw	r24, 0x00	; 0
    5242:	a1 05       	cpc	r26, r1
    5244:	b1 05       	cpc	r27, r1
    5246:	21 f4       	brne	.+8      	; 0x5250 <LCD_write_s32_number+0x38>
		LCD_write_char('0');
    5248:	80 e3       	ldi	r24, 0x30	; 48
    524a:	0e 94 0e 28 	call	0x501c	; 0x501c <LCD_write_char>
    524e:	18 c0       	rjmp	.+48     	; 0x5280 <LCD_write_s32_number+0x68>
	// Check if the number is negative to print sign
	else if(0 > copy_s32_number){
    5250:	8d 85       	ldd	r24, Y+13	; 0x0d
    5252:	9e 85       	ldd	r25, Y+14	; 0x0e
    5254:	af 85       	ldd	r26, Y+15	; 0x0f
    5256:	b8 89       	ldd	r27, Y+16	; 0x10
    5258:	bb 23       	and	r27, r27
    525a:	94 f4       	brge	.+36     	; 0x5280 <LCD_write_s32_number+0x68>
		// Print the negative sign
		LCD_write_char('-');
    525c:	8d e2       	ldi	r24, 0x2D	; 45
    525e:	0e 94 0e 28 	call	0x501c	; 0x501c <LCD_write_char>
		// Conver the number to positive
		copy_s32_number *= -1;
    5262:	8d 85       	ldd	r24, Y+13	; 0x0d
    5264:	9e 85       	ldd	r25, Y+14	; 0x0e
    5266:	af 85       	ldd	r26, Y+15	; 0x0f
    5268:	b8 89       	ldd	r27, Y+16	; 0x10
    526a:	b0 95       	com	r27
    526c:	a0 95       	com	r26
    526e:	90 95       	com	r25
    5270:	81 95       	neg	r24
    5272:	9f 4f       	sbci	r25, 0xFF	; 255
    5274:	af 4f       	sbci	r26, 0xFF	; 255
    5276:	bf 4f       	sbci	r27, 0xFF	; 255
    5278:	8d 87       	std	Y+13, r24	; 0x0d
    527a:	9e 87       	std	Y+14, r25	; 0x0e
    527c:	af 87       	std	Y+15, r26	; 0x0f
    527e:	b8 8b       	std	Y+16, r27	; 0x10
	}
	// Start printing the given number
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
    5280:	1a 82       	std	Y+2, r1	; 0x02
    5282:	2d c0       	rjmp	.+90     	; 0x52de <LCD_write_s32_number+0xc6>
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
		// Store the units in the container in the current index
		val_container[counter]= copy_s32_number%10;
    5284:	8a 81       	ldd	r24, Y+2	; 0x02
    5286:	08 2f       	mov	r16, r24
    5288:	10 e0       	ldi	r17, 0x00	; 0
    528a:	8d 85       	ldd	r24, Y+13	; 0x0d
    528c:	9e 85       	ldd	r25, Y+14	; 0x0e
    528e:	af 85       	ldd	r26, Y+15	; 0x0f
    5290:	b8 89       	ldd	r27, Y+16	; 0x10
    5292:	2a e0       	ldi	r18, 0x0A	; 10
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	40 e0       	ldi	r20, 0x00	; 0
    5298:	50 e0       	ldi	r21, 0x00	; 0
    529a:	bc 01       	movw	r22, r24
    529c:	cd 01       	movw	r24, r26
    529e:	0e 94 56 33 	call	0x66ac	; 0x66ac <__divmodsi4>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	28 2f       	mov	r18, r24
    52a8:	ce 01       	movw	r24, r28
    52aa:	03 96       	adiw	r24, 0x03	; 3
    52ac:	fc 01       	movw	r30, r24
    52ae:	e0 0f       	add	r30, r16
    52b0:	f1 1f       	adc	r31, r17
    52b2:	20 83       	st	Z, r18
		// Remove the stored unit from the original number
		copy_s32_number /= 10;
    52b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52b8:	af 85       	ldd	r26, Y+15	; 0x0f
    52ba:	b8 89       	ldd	r27, Y+16	; 0x10
    52bc:	2a e0       	ldi	r18, 0x0A	; 10
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	40 e0       	ldi	r20, 0x00	; 0
    52c2:	50 e0       	ldi	r21, 0x00	; 0
    52c4:	bc 01       	movw	r22, r24
    52c6:	cd 01       	movw	r24, r26
    52c8:	0e 94 56 33 	call	0x66ac	; 0x66ac <__divmodsi4>
    52cc:	da 01       	movw	r26, r20
    52ce:	c9 01       	movw	r24, r18
    52d0:	8d 87       	std	Y+13, r24	; 0x0d
    52d2:	9e 87       	std	Y+14, r25	; 0x0e
    52d4:	af 87       	std	Y+15, r26	; 0x0f
    52d6:	b8 8b       	std	Y+16, r27	; 0x10
		// Increment the index
		counter++;
    52d8:	8a 81       	ldd	r24, Y+2	; 0x02
    52da:	8f 5f       	subi	r24, 0xFF	; 255
    52dc:	8a 83       	std	Y+2, r24	; 0x02
	// Create a container for storing the nunmber
	u8 val_container[10];
	// Create counter to exit with the exact index
	u8 counter= 0;
	// Loop till the end of the number or overflow the container
	while((10 >= counter)  && (0 != copy_s32_number)){
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	8b 30       	cpi	r24, 0x0B	; 11
    52e2:	40 f4       	brcc	.+16     	; 0x52f4 <LCD_write_s32_number+0xdc>
    52e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52e8:	af 85       	ldd	r26, Y+15	; 0x0f
    52ea:	b8 89       	ldd	r27, Y+16	; 0x10
    52ec:	00 97       	sbiw	r24, 0x00	; 0
    52ee:	a1 05       	cpc	r26, r1
    52f0:	b1 05       	cpc	r27, r1
    52f2:	41 f6       	brne	.-112    	; 0x5284 <LCD_write_s32_number+0x6c>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	89 83       	std	Y+1, r24	; 0x01
    52f8:	14 c0       	rjmp	.+40     	; 0x5322 <LCD_write_s32_number+0x10a>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
    52fa:	8a 81       	ldd	r24, Y+2	; 0x02
    52fc:	28 2f       	mov	r18, r24
    52fe:	30 e0       	ldi	r19, 0x00	; 0
    5300:	89 81       	ldd	r24, Y+1	; 0x01
    5302:	88 2f       	mov	r24, r24
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	28 1b       	sub	r18, r24
    5308:	39 0b       	sbc	r19, r25
    530a:	ce 01       	movw	r24, r28
    530c:	03 96       	adiw	r24, 0x03	; 3
    530e:	fc 01       	movw	r30, r24
    5310:	e2 0f       	add	r30, r18
    5312:	f3 1f       	adc	r31, r19
    5314:	80 81       	ld	r24, Z
    5316:	80 5d       	subi	r24, 0xD0	; 208
    5318:	0e 94 0e 28 	call	0x501c	; 0x501c <LCD_write_char>
		copy_s32_number /= 10;
		// Increment the index
		counter++;
	}
	// Print the number in the container in reverse order
	for(u8 i= 1; i < (counter+1); i++){ //1, 2, 3, 4, 5
    531c:	89 81       	ldd	r24, Y+1	; 0x01
    531e:	8f 5f       	subi	r24, 0xFF	; 255
    5320:	89 83       	std	Y+1, r24	; 0x01
    5322:	89 81       	ldd	r24, Y+1	; 0x01
    5324:	28 2f       	mov	r18, r24
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	8a 81       	ldd	r24, Y+2	; 0x02
    532a:	88 2f       	mov	r24, r24
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	01 96       	adiw	r24, 0x01	; 1
    5330:	28 17       	cp	r18, r24
    5332:	39 07       	cpc	r19, r25
    5334:	14 f3       	brlt	.-60     	; 0x52fa <LCD_write_s32_number+0xe2>
		LCD_write_char(val_container[counter-i]+'0'); //4, 3, 2, 1, 0
	}
}
    5336:	60 96       	adiw	r28, 0x10	; 16
    5338:	0f b6       	in	r0, 0x3f	; 63
    533a:	f8 94       	cli
    533c:	de bf       	out	0x3e, r29	; 62
    533e:	0f be       	out	0x3f, r0	; 63
    5340:	cd bf       	out	0x3d, r28	; 61
    5342:	cf 91       	pop	r28
    5344:	df 91       	pop	r29
    5346:	1f 91       	pop	r17
    5348:	0f 91       	pop	r16
    534a:	08 95       	ret

0000534c <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_u8_floating_point){
    534c:	ef 92       	push	r14
    534e:	ff 92       	push	r15
    5350:	0f 93       	push	r16
    5352:	1f 93       	push	r17
    5354:	df 93       	push	r29
    5356:	cf 93       	push	r28
    5358:	cd b7       	in	r28, 0x3d	; 61
    535a:	de b7       	in	r29, 0x3e	; 62
    535c:	2d 97       	sbiw	r28, 0x0d	; 13
    535e:	0f b6       	in	r0, 0x3f	; 63
    5360:	f8 94       	cli
    5362:	de bf       	out	0x3e, r29	; 62
    5364:	0f be       	out	0x3f, r0	; 63
    5366:	cd bf       	out	0x3d, r28	; 61
    5368:	69 87       	std	Y+9, r22	; 0x09
    536a:	7a 87       	std	Y+10, r23	; 0x0a
    536c:	8b 87       	std	Y+11, r24	; 0x0b
    536e:	9c 87       	std	Y+12, r25	; 0x0c
    5370:	4d 87       	std	Y+13, r20	; 0x0d
	 *		copy_u8_floating_point>> Required floating point to display.
	 *	
	 *	Function does not return any values.
	 */
	// Get the decimal value
	s32 int_val = (s32)copy_f32_number;
    5372:	69 85       	ldd	r22, Y+9	; 0x09
    5374:	7a 85       	ldd	r23, Y+10	; 0x0a
    5376:	8b 85       	ldd	r24, Y+11	; 0x0b
    5378:	9c 85       	ldd	r25, Y+12	; 0x0c
    537a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    537e:	dc 01       	movw	r26, r24
    5380:	cb 01       	movw	r24, r22
    5382:	8d 83       	std	Y+5, r24	; 0x05
    5384:	9e 83       	std	Y+6, r25	; 0x06
    5386:	af 83       	std	Y+7, r26	; 0x07
    5388:	b8 87       	std	Y+8, r27	; 0x08
	// Get the floating value
	s32 float_val = (s32)((copy_f32_number - (f32)int_val) * LCD_pow(10, copy_u8_floating_point));
    538a:	6d 81       	ldd	r22, Y+5	; 0x05
    538c:	7e 81       	ldd	r23, Y+6	; 0x06
    538e:	8f 81       	ldd	r24, Y+7	; 0x07
    5390:	98 85       	ldd	r25, Y+8	; 0x08
    5392:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5396:	9b 01       	movw	r18, r22
    5398:	ac 01       	movw	r20, r24
    539a:	69 85       	ldd	r22, Y+9	; 0x09
    539c:	7a 85       	ldd	r23, Y+10	; 0x0a
    539e:	8b 85       	ldd	r24, Y+11	; 0x0b
    53a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    53a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	7c 01       	movw	r14, r24
    53ac:	8d 01       	movw	r16, r26
    53ae:	8a e0       	ldi	r24, 0x0A	; 10
    53b0:	6d 85       	ldd	r22, Y+13	; 0x0d
    53b2:	0e 94 38 08 	call	0x1070	; 0x1070 <LCD_pow>
    53b6:	dc 01       	movw	r26, r24
    53b8:	cb 01       	movw	r24, r22
    53ba:	bc 01       	movw	r22, r24
    53bc:	cd 01       	movw	r24, r26
    53be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    53c2:	9b 01       	movw	r18, r22
    53c4:	ac 01       	movw	r20, r24
    53c6:	c8 01       	movw	r24, r16
    53c8:	b7 01       	movw	r22, r14
    53ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	bc 01       	movw	r22, r24
    53d4:	cd 01       	movw	r24, r26
    53d6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    53da:	dc 01       	movw	r26, r24
    53dc:	cb 01       	movw	r24, r22
    53de:	89 83       	std	Y+1, r24	; 0x01
    53e0:	9a 83       	std	Y+2, r25	; 0x02
    53e2:	ab 83       	std	Y+3, r26	; 0x03
    53e4:	bc 83       	std	Y+4, r27	; 0x04
	// Print the decimal value
	LCD_write_s32_number(int_val);
    53e6:	8d 81       	ldd	r24, Y+5	; 0x05
    53e8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ea:	af 81       	ldd	r26, Y+7	; 0x07
    53ec:	b8 85       	ldd	r27, Y+8	; 0x08
    53ee:	bc 01       	movw	r22, r24
    53f0:	cd 01       	movw	r24, r26
    53f2:	0e 94 0c 29 	call	0x5218	; 0x5218 <LCD_write_s32_number>
	// Print the decimal point
	LCD_write_char('.');
    53f6:	8e e2       	ldi	r24, 0x2E	; 46
    53f8:	0e 94 0e 28 	call	0x501c	; 0x501c <LCD_write_char>
	// Print the floating value after making sure its postive
	LCD_write_s32_number((float_val&(~(1<<7))));
    53fc:	89 81       	ldd	r24, Y+1	; 0x01
    53fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5400:	ab 81       	ldd	r26, Y+3	; 0x03
    5402:	bc 81       	ldd	r27, Y+4	; 0x04
    5404:	8f 77       	andi	r24, 0x7F	; 127
    5406:	bc 01       	movw	r22, r24
    5408:	cd 01       	movw	r24, r26
    540a:	0e 94 0c 29 	call	0x5218	; 0x5218 <LCD_write_s32_number>
	//LCD_wtire_s32_number((float_val > 0) ? float_val : (-1*float_val));
}
    540e:	2d 96       	adiw	r28, 0x0d	; 13
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	f8 94       	cli
    5414:	de bf       	out	0x3e, r29	; 62
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	cd bf       	out	0x3d, r28	; 61
    541a:	cf 91       	pop	r28
    541c:	df 91       	pop	r29
    541e:	1f 91       	pop	r17
    5420:	0f 91       	pop	r16
    5422:	ff 90       	pop	r15
    5424:	ef 90       	pop	r14
    5426:	08 95       	ret

00005428 <I2C_void_master_init>:
	I2C_SL_P_cond_ack = 0xA0				// Slave mode:: stop condition or repeated start hase been recived followed by acknowledged
};

/******************************************************************************/
/* Functions implementation section */
void I2C_void_master_init(u8 I2C_SLA){
    5428:	df 93       	push	r29
    542a:	cf 93       	push	r28
    542c:	0f 92       	push	r0
    542e:	cd b7       	in	r28, 0x3d	; 61
    5430:	de b7       	in	r29, 0x3e	; 62
    5432:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	// Set the bit rate regester
	I2C_TWBR = I2C_TWBR_val;
    5434:	e0 e2       	ldi	r30, 0x20	; 32
    5436:	f0 e0       	ldi	r31, 0x00	; 0
    5438:	80 e2       	ldi	r24, 0x20	; 32
    543a:	80 83       	st	Z, r24
	// set the prescaler register
	I2C_TWSR = I2C_TWPS_val;
    543c:	e1 e2       	ldi	r30, 0x21	; 33
    543e:	f0 e0       	ldi	r31, 0x00	; 0
    5440:	10 82       	st	Z, r1
	// Set the slave address, and enable general call recognition bit
	I2C_TWAR = ((I2C_SLA << 1) | 1);
    5442:	e2 e2       	ldi	r30, 0x22	; 34
    5444:	f0 e0       	ldi	r31, 0x00	; 0
    5446:	89 81       	ldd	r24, Y+1	; 0x01
    5448:	88 2f       	mov	r24, r24
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	88 0f       	add	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	81 60       	ori	r24, 0x01	; 1
    5452:	80 83       	st	Z, r24
	// initiate I2C perepheral and configure the register
	I2C_TWCR = ((I2C_enable << I2C_TWCR_TWEA) | (I2C_disable << I2C_TWCR_TWSTA) | (I2C_disable << I2C_TWCR_TWSTO) | (I2C_enable << I2C_TWCR_TWWC) | (I2C_enable << I2C_TWCR_TWEN) | (I2C_enable << I2C_TWCR_TWIE));
    5454:	e6 e5       	ldi	r30, 0x56	; 86
    5456:	f0 e0       	ldi	r31, 0x00	; 0
    5458:	8d e4       	ldi	r24, 0x4D	; 77
    545a:	80 83       	st	Z, r24
	// Enable global intrrupt
	I2C_SREG |= (I2C_enable << I2C_glob_int);
    545c:	af e5       	ldi	r26, 0x5F	; 95
    545e:	b0 e0       	ldi	r27, 0x00	; 0
    5460:	ef e5       	ldi	r30, 0x5F	; 95
    5462:	f0 e0       	ldi	r31, 0x00	; 0
    5464:	80 81       	ld	r24, Z
    5466:	80 68       	ori	r24, 0x80	; 128
    5468:	8c 93       	st	X, r24
	// Set mode to scilent
	I2C_mode = I2C_silent;
    546a:	8f ef       	ldi	r24, 0xFF	; 255
    546c:	80 93 da 01 	sts	0x01DA, r24
}
    5470:	0f 90       	pop	r0
    5472:	cf 91       	pop	r28
    5474:	df 91       	pop	r29
    5476:	08 95       	ret

00005478 <I2C_void_slave_init>:


void I2C_void_slave_init(u8 I2C_SLA){
    5478:	df 93       	push	r29
    547a:	cf 93       	push	r28
    547c:	0f 92       	push	r0
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
    5482:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */

}
    5484:	0f 90       	pop	r0
    5486:	cf 91       	pop	r28
    5488:	df 91       	pop	r29
    548a:	08 95       	ret

0000548c <I2C_get_status_word>:


u8 I2C_get_status_word(void ){
    548c:	df 93       	push	r29
    548e:	cf 93       	push	r28
    5490:	cd b7       	in	r28, 0x3d	; 61
    5492:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	return (I2C_TWSR & I2C_TWS_mask);
    5494:	e1 e2       	ldi	r30, 0x21	; 33
    5496:	f0 e0       	ldi	r31, 0x00	; 0
    5498:	80 81       	ld	r24, Z
    549a:	88 7f       	andi	r24, 0xF8	; 248
}
    549c:	cf 91       	pop	r28
    549e:	df 91       	pop	r29
    54a0:	08 95       	ret

000054a2 <I2C_Arb_lost_respond>:


void I2C_Arb_lost_respond(void ){
    54a2:	df 93       	push	r29
    54a4:	cf 93       	push	r28
    54a6:	00 d0       	rcall	.+0      	; 0x54a8 <I2C_Arb_lost_respond+0x6>
    54a8:	cd b7       	in	r28, 0x3d	; 61
    54aa:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	switch(I2C_get_status_word()){
    54ac:	0e 94 46 2a 	call	0x548c	; 0x548c <I2C_get_status_word>
    54b0:	28 2f       	mov	r18, r24
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	3a 83       	std	Y+2, r19	; 0x02
    54b6:	29 83       	std	Y+1, r18	; 0x01
    54b8:	89 81       	ldd	r24, Y+1	; 0x01
    54ba:	9a 81       	ldd	r25, Y+2	; 0x02
    54bc:	88 36       	cpi	r24, 0x68	; 104
    54be:	91 05       	cpc	r25, r1
    54c0:	e9 f0       	breq	.+58     	; 0x54fc <I2C_Arb_lost_respond+0x5a>
    54c2:	29 81       	ldd	r18, Y+1	; 0x01
    54c4:	3a 81       	ldd	r19, Y+2	; 0x02
    54c6:	29 36       	cpi	r18, 0x69	; 105
    54c8:	31 05       	cpc	r19, r1
    54ca:	34 f4       	brge	.+12     	; 0x54d8 <I2C_Arb_lost_respond+0x36>
    54cc:	89 81       	ldd	r24, Y+1	; 0x01
    54ce:	9a 81       	ldd	r25, Y+2	; 0x02
    54d0:	88 33       	cpi	r24, 0x38	; 56
    54d2:	91 05       	cpc	r25, r1
    54d4:	61 f0       	breq	.+24     	; 0x54ee <I2C_Arb_lost_respond+0x4c>
    54d6:	23 c0       	rjmp	.+70     	; 0x551e <I2C_Arb_lost_respond+0x7c>
    54d8:	29 81       	ldd	r18, Y+1	; 0x01
    54da:	3a 81       	ldd	r19, Y+2	; 0x02
    54dc:	28 37       	cpi	r18, 0x78	; 120
    54de:	31 05       	cpc	r19, r1
    54e0:	c9 f0       	breq	.+50     	; 0x5514 <I2C_Arb_lost_respond+0x72>
    54e2:	89 81       	ldd	r24, Y+1	; 0x01
    54e4:	9a 81       	ldd	r25, Y+2	; 0x02
    54e6:	80 3b       	cpi	r24, 0xB0	; 176
    54e8:	91 05       	cpc	r25, r1
    54ea:	71 f0       	breq	.+28     	; 0x5508 <I2C_Arb_lost_respond+0x66>
    54ec:	18 c0       	rjmp	.+48     	; 0x551e <I2C_Arb_lost_respond+0x7c>
	case (I2C_Arb_lost):
		I2C_void_master_start_comm(copy_ptr_master_data_frame);
    54ee:	80 91 d3 01 	lds	r24, 0x01D3
    54f2:	90 91 d4 01 	lds	r25, 0x01D4
    54f6:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <I2C_void_master_start_comm>
    54fa:	11 c0       	rjmp	.+34     	; 0x551e <I2C_Arb_lost_respond+0x7c>
	break;
	case (I2C_Arb_lost_SLA_W):
		I2C_mode = I2C_slave_recive;
    54fc:	80 e6       	ldi	r24, 0x60	; 96
    54fe:	80 93 da 01 	sts	0x01DA, r24
		I2C_slave_recive_respond();
    5502:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <I2C_slave_recive_respond>
    5506:	0b c0       	rjmp	.+22     	; 0x551e <I2C_Arb_lost_respond+0x7c>
	break;
	case (I2C_Arb_lost_SLA_R):
		I2C_mode = I2C_slave_transmit;
    5508:	88 ea       	ldi	r24, 0xA8	; 168
    550a:	80 93 da 01 	sts	0x01DA, r24
		I2C_slave_transmit_respond();
    550e:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <I2C_slave_transmit_respond>
    5512:	05 c0       	rjmp	.+10     	; 0x551e <I2C_Arb_lost_respond+0x7c>
	break;
	case (I2C_Arb_lost_SLA_gen_call):
		I2C_mode = I2C_slave_recive;
    5514:	80 e6       	ldi	r24, 0x60	; 96
    5516:	80 93 da 01 	sts	0x01DA, r24
		I2C_slave_recive_respond();
    551a:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <I2C_slave_recive_respond>
	break;
	}
}
    551e:	0f 90       	pop	r0
    5520:	0f 90       	pop	r0
    5522:	cf 91       	pop	r28
    5524:	df 91       	pop	r29
    5526:	08 95       	ret

00005528 <I2C_master_transmit_respond>:


void I2C_master_transmit_respond(void ){
    5528:	df 93       	push	r29
    552a:	cf 93       	push	r28
    552c:	00 d0       	rcall	.+0      	; 0x552e <I2C_master_transmit_respond+0x6>
    552e:	0f 92       	push	r0
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	static u8 data_frame_index = I2C_S_frame;
	switch(I2C_get_status_word()){
    5534:	0e 94 46 2a 	call	0x548c	; 0x548c <I2C_get_status_word>
    5538:	28 2f       	mov	r18, r24
    553a:	30 e0       	ldi	r19, 0x00	; 0
    553c:	3b 83       	std	Y+3, r19	; 0x03
    553e:	2a 83       	std	Y+2, r18	; 0x02
    5540:	8a 81       	ldd	r24, Y+2	; 0x02
    5542:	9b 81       	ldd	r25, Y+3	; 0x03
    5544:	88 31       	cpi	r24, 0x18	; 24
    5546:	91 05       	cpc	r25, r1
    5548:	09 f4       	brne	.+2      	; 0x554c <I2C_master_transmit_respond+0x24>
    554a:	69 c0       	rjmp	.+210    	; 0x561e <I2C_master_transmit_respond+0xf6>
    554c:	2a 81       	ldd	r18, Y+2	; 0x02
    554e:	3b 81       	ldd	r19, Y+3	; 0x03
    5550:	29 31       	cpi	r18, 0x19	; 25
    5552:	31 05       	cpc	r19, r1
    5554:	5c f4       	brge	.+22     	; 0x556c <I2C_master_transmit_respond+0x44>
    5556:	8a 81       	ldd	r24, Y+2	; 0x02
    5558:	9b 81       	ldd	r25, Y+3	; 0x03
    555a:	88 30       	cpi	r24, 0x08	; 8
    555c:	91 05       	cpc	r25, r1
    555e:	c9 f0       	breq	.+50     	; 0x5592 <I2C_master_transmit_respond+0x6a>
    5560:	2a 81       	ldd	r18, Y+2	; 0x02
    5562:	3b 81       	ldd	r19, Y+3	; 0x03
    5564:	20 31       	cpi	r18, 0x10	; 16
    5566:	31 05       	cpc	r19, r1
    5568:	b9 f1       	breq	.+110    	; 0x55d8 <I2C_master_transmit_respond+0xb0>
    556a:	e6 c1       	rjmp	.+972    	; 0x5938 <I2C_master_transmit_respond+0x410>
    556c:	8a 81       	ldd	r24, Y+2	; 0x02
    556e:	9b 81       	ldd	r25, Y+3	; 0x03
    5570:	88 32       	cpi	r24, 0x28	; 40
    5572:	91 05       	cpc	r25, r1
    5574:	09 f4       	brne	.+2      	; 0x5578 <I2C_master_transmit_respond+0x50>
    5576:	6f c0       	rjmp	.+222    	; 0x5656 <I2C_master_transmit_respond+0x12e>
    5578:	2a 81       	ldd	r18, Y+2	; 0x02
    557a:	3b 81       	ldd	r19, Y+3	; 0x03
    557c:	20 33       	cpi	r18, 0x30	; 48
    557e:	31 05       	cpc	r19, r1
    5580:	09 f4       	brne	.+2      	; 0x5584 <I2C_master_transmit_respond+0x5c>
    5582:	82 c1       	rjmp	.+772    	; 0x5888 <I2C_master_transmit_respond+0x360>
    5584:	8a 81       	ldd	r24, Y+2	; 0x02
    5586:	9b 81       	ldd	r25, Y+3	; 0x03
    5588:	80 32       	cpi	r24, 0x20	; 32
    558a:	91 05       	cpc	r25, r1
    558c:	09 f4       	brne	.+2      	; 0x5590 <I2C_master_transmit_respond+0x68>
    558e:	23 c1       	rjmp	.+582    	; 0x57d6 <I2C_master_transmit_respond+0x2ae>
    5590:	d3 c1       	rjmp	.+934    	; 0x5938 <I2C_master_transmit_respond+0x410>
		// Master Transmit mode:: start condition acknowledged
		case (I2C_S_cond_ack):
			// Load SLA+W in the data register
			I2C_TWDR = copy_ptr_master_data_frame[data_frame_index];
    5592:	a3 e2       	ldi	r26, 0x23	; 35
    5594:	b0 e0       	ldi	r27, 0x00	; 0
    5596:	20 91 d3 01 	lds	r18, 0x01D3
    559a:	30 91 d4 01 	lds	r19, 0x01D4
    559e:	80 91 d5 01 	lds	r24, 0x01D5
    55a2:	88 2f       	mov	r24, r24
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	f9 01       	movw	r30, r18
    55a8:	e8 0f       	add	r30, r24
    55aa:	f9 1f       	adc	r31, r25
    55ac:	80 81       	ld	r24, Z
    55ae:	8c 93       	st	X, r24
			// Clear start condition bit
			clr_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    55b0:	a6 e5       	ldi	r26, 0x56	; 86
    55b2:	b0 e0       	ldi	r27, 0x00	; 0
    55b4:	e6 e5       	ldi	r30, 0x56	; 86
    55b6:	f0 e0       	ldi	r31, 0x00	; 0
    55b8:	80 81       	ld	r24, Z
    55ba:	8f 7d       	andi	r24, 0xDF	; 223
    55bc:	8c 93       	st	X, r24
			// Increment the frame index pointing to next byte in the frame
			data_frame_index++;
    55be:	80 91 d5 01 	lds	r24, 0x01D5
    55c2:	8f 5f       	subi	r24, 0xFF	; 255
    55c4:	80 93 d5 01 	sts	0x01D5, r24
			// Clearing TWI interrupt flage
			set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    55c8:	a6 e5       	ldi	r26, 0x56	; 86
    55ca:	b0 e0       	ldi	r27, 0x00	; 0
    55cc:	e6 e5       	ldi	r30, 0x56	; 86
    55ce:	f0 e0       	ldi	r31, 0x00	; 0
    55d0:	80 81       	ld	r24, Z
    55d2:	80 68       	ori	r24, 0x80	; 128
    55d4:	8c 93       	st	X, r24
    55d6:	b7 c1       	rjmp	.+878    	; 0x5946 <I2C_master_transmit_respond+0x41e>
		break;
		// Master Recive mode:: start condition acknowledged
		case (I2C_RS_cond_ack):
			// Load SLA+W in the data register
			I2C_TWDR = copy_ptr_master_data_frame[data_frame_index];
    55d8:	a3 e2       	ldi	r26, 0x23	; 35
    55da:	b0 e0       	ldi	r27, 0x00	; 0
    55dc:	20 91 d3 01 	lds	r18, 0x01D3
    55e0:	30 91 d4 01 	lds	r19, 0x01D4
    55e4:	80 91 d5 01 	lds	r24, 0x01D5
    55e8:	88 2f       	mov	r24, r24
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	f9 01       	movw	r30, r18
    55ee:	e8 0f       	add	r30, r24
    55f0:	f9 1f       	adc	r31, r25
    55f2:	80 81       	ld	r24, Z
    55f4:	8c 93       	st	X, r24
			// Clear start condition bit
			clr_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    55f6:	a6 e5       	ldi	r26, 0x56	; 86
    55f8:	b0 e0       	ldi	r27, 0x00	; 0
    55fa:	e6 e5       	ldi	r30, 0x56	; 86
    55fc:	f0 e0       	ldi	r31, 0x00	; 0
    55fe:	80 81       	ld	r24, Z
    5600:	8f 7d       	andi	r24, 0xDF	; 223
    5602:	8c 93       	st	X, r24
			// Increment the frame index pointing to next byte in the frame
			data_frame_index++;
    5604:	80 91 d5 01 	lds	r24, 0x01D5
    5608:	8f 5f       	subi	r24, 0xFF	; 255
    560a:	80 93 d5 01 	sts	0x01D5, r24
			// Clearing TWI interrupt flage
			set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    560e:	a6 e5       	ldi	r26, 0x56	; 86
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	e6 e5       	ldi	r30, 0x56	; 86
    5614:	f0 e0       	ldi	r31, 0x00	; 0
    5616:	80 81       	ld	r24, Z
    5618:	80 68       	ori	r24, 0x80	; 128
    561a:	8c 93       	st	X, r24
    561c:	94 c1       	rjmp	.+808    	; 0x5946 <I2C_master_transmit_respond+0x41e>
		break;
		// Slave mode:: write condition acknowledged
		case (I2C_SLA_W_ack):
			// Load the first data byte
			I2C_TWDR = copy_ptr_master_data_frame[data_frame_index];
    561e:	a3 e2       	ldi	r26, 0x23	; 35
    5620:	b0 e0       	ldi	r27, 0x00	; 0
    5622:	20 91 d3 01 	lds	r18, 0x01D3
    5626:	30 91 d4 01 	lds	r19, 0x01D4
    562a:	80 91 d5 01 	lds	r24, 0x01D5
    562e:	88 2f       	mov	r24, r24
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	f9 01       	movw	r30, r18
    5634:	e8 0f       	add	r30, r24
    5636:	f9 1f       	adc	r31, r25
    5638:	80 81       	ld	r24, Z
    563a:	8c 93       	st	X, r24
			// Increment the frame index pointing to next byte in the frame
			data_frame_index++;
    563c:	80 91 d5 01 	lds	r24, 0x01D5
    5640:	8f 5f       	subi	r24, 0xFF	; 255
    5642:	80 93 d5 01 	sts	0x01D5, r24
			// Clearing TWI interrupt flage
			set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5646:	a6 e5       	ldi	r26, 0x56	; 86
    5648:	b0 e0       	ldi	r27, 0x00	; 0
    564a:	e6 e5       	ldi	r30, 0x56	; 86
    564c:	f0 e0       	ldi	r31, 0x00	; 0
    564e:	80 81       	ld	r24, Z
    5650:	80 68       	ori	r24, 0x80	; 128
    5652:	8c 93       	st	X, r24
    5654:	78 c1       	rjmp	.+752    	; 0x5946 <I2C_master_transmit_respond+0x41e>
		break;
		// Master mode:: data byte transmitted followed by acknowledged
		case (I2C_DB_t_ack):
			// Chaeck for termination states if the next move is stop condition or tha maxmum frame bytes has been reached.
			if((copy_ptr_master_data_frame[data_frame_index] == I2C_end_frame) || (data_frame_index > I2C_max_frame)){
    5656:	20 91 d3 01 	lds	r18, 0x01D3
    565a:	30 91 d4 01 	lds	r19, 0x01D4
    565e:	80 91 d5 01 	lds	r24, 0x01D5
    5662:	88 2f       	mov	r24, r24
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	f9 01       	movw	r30, r18
    5668:	e8 0f       	add	r30, r24
    566a:	f9 1f       	adc	r31, r25
    566c:	80 81       	ld	r24, Z
    566e:	8f 3f       	cpi	r24, 0xFF	; 255
    5670:	21 f0       	breq	.+8      	; 0x567a <I2C_master_transmit_respond+0x152>
    5672:	80 91 d5 01 	lds	r24, 0x01D5
    5676:	89 30       	cpi	r24, 0x09	; 9
    5678:	c0 f0       	brcs	.+48     	; 0x56aa <I2C_master_transmit_respond+0x182>
				// Send stop condition
				set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    567a:	a6 e5       	ldi	r26, 0x56	; 86
    567c:	b0 e0       	ldi	r27, 0x00	; 0
    567e:	e6 e5       	ldi	r30, 0x56	; 86
    5680:	f0 e0       	ldi	r31, 0x00	; 0
    5682:	80 81       	ld	r24, Z
    5684:	80 61       	ori	r24, 0x10	; 16
    5686:	8c 93       	st	X, r24
				// Reset I2C mode flag
				I2C_mode = I2C_silent;
    5688:	8f ef       	ldi	r24, 0xFF	; 255
    568a:	80 93 da 01 	sts	0x01DA, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    568e:	10 92 d5 01 	sts	0x01D5, r1
				// Reset the frame pointer
				copy_ptr_master_data_frame = NULL;
    5692:	10 92 d4 01 	sts	0x01D4, r1
    5696:	10 92 d3 01 	sts	0x01D3, r1
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    569a:	a6 e5       	ldi	r26, 0x56	; 86
    569c:	b0 e0       	ldi	r27, 0x00	; 0
    569e:	e6 e5       	ldi	r30, 0x56	; 86
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	80 81       	ld	r24, Z
    56a4:	80 68       	ori	r24, 0x80	; 128
    56a6:	8c 93       	st	X, r24
    56a8:	4e c1       	rjmp	.+668    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			// Check if the next byte is indecator to repeated start or not
			else if(copy_ptr_master_data_frame[data_frame_index] == I2C_repeated_start){
    56aa:	20 91 d3 01 	lds	r18, 0x01D3
    56ae:	30 91 d4 01 	lds	r19, 0x01D4
    56b2:	80 91 d5 01 	lds	r24, 0x01D5
    56b6:	88 2f       	mov	r24, r24
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	f9 01       	movw	r30, r18
    56bc:	e8 0f       	add	r30, r24
    56be:	f9 1f       	adc	r31, r25
    56c0:	80 81       	ld	r24, Z
    56c2:	8e 3f       	cpi	r24, 0xFE	; 254
    56c4:	09 f0       	breq	.+2      	; 0x56c8 <I2C_master_transmit_respond+0x1a0>
    56c6:	3e c0       	rjmp	.+124    	; 0x5744 <I2C_master_transmit_respond+0x21c>
				// Reset the frame pointer pointing to the new address
				copy_ptr_master_data_frame += ++data_frame_index;
    56c8:	20 91 d3 01 	lds	r18, 0x01D3
    56cc:	30 91 d4 01 	lds	r19, 0x01D4
    56d0:	80 91 d5 01 	lds	r24, 0x01D5
    56d4:	8f 5f       	subi	r24, 0xFF	; 255
    56d6:	80 93 d5 01 	sts	0x01D5, r24
    56da:	80 91 d5 01 	lds	r24, 0x01D5
    56de:	88 2f       	mov	r24, r24
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	82 0f       	add	r24, r18
    56e4:	93 1f       	adc	r25, r19
    56e6:	90 93 d4 01 	sts	0x01D4, r25
    56ea:	80 93 d3 01 	sts	0x01D3, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    56ee:	10 92 d5 01 	sts	0x01D5, r1
				// Set I2C mode flag to master mode R/W
				I2C_mode = ((get_bit(copy_ptr_master_data_frame[data_frame_index], 0) == 0) ? I2C_master_transmit : I2C_master_recive);
    56f2:	20 91 d3 01 	lds	r18, 0x01D3
    56f6:	30 91 d4 01 	lds	r19, 0x01D4
    56fa:	80 91 d5 01 	lds	r24, 0x01D5
    56fe:	88 2f       	mov	r24, r24
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	f9 01       	movw	r30, r18
    5704:	e8 0f       	add	r30, r24
    5706:	f9 1f       	adc	r31, r25
    5708:	80 81       	ld	r24, Z
    570a:	88 2f       	mov	r24, r24
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	81 70       	andi	r24, 0x01	; 1
    5710:	90 70       	andi	r25, 0x00	; 0
    5712:	00 97       	sbiw	r24, 0x00	; 0
    5714:	19 f4       	brne	.+6      	; 0x571c <I2C_master_transmit_respond+0x1f4>
    5716:	92 e0       	ldi	r25, 0x02	; 2
    5718:	99 83       	std	Y+1, r25	; 0x01
    571a:	02 c0       	rjmp	.+4      	; 0x5720 <I2C_master_transmit_respond+0x1f8>
    571c:	24 e0       	ldi	r18, 0x04	; 4
    571e:	29 83       	std	Y+1, r18	; 0x01
    5720:	39 81       	ldd	r19, Y+1	; 0x01
    5722:	30 93 da 01 	sts	0x01DA, r19
				// Send repeated start
				set_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    5726:	a6 e5       	ldi	r26, 0x56	; 86
    5728:	b0 e0       	ldi	r27, 0x00	; 0
    572a:	e6 e5       	ldi	r30, 0x56	; 86
    572c:	f0 e0       	ldi	r31, 0x00	; 0
    572e:	80 81       	ld	r24, Z
    5730:	80 62       	ori	r24, 0x20	; 32
    5732:	8c 93       	st	X, r24
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5734:	a6 e5       	ldi	r26, 0x56	; 86
    5736:	b0 e0       	ldi	r27, 0x00	; 0
    5738:	e6 e5       	ldi	r30, 0x56	; 86
    573a:	f0 e0       	ldi	r31, 0x00	; 0
    573c:	80 81       	ld	r24, Z
    573e:	80 68       	ori	r24, 0x80	; 128
    5740:	8c 93       	st	X, r24
    5742:	01 c1       	rjmp	.+514    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			else if(copy_ptr_master_data_frame[data_frame_index] == I2C_253_None){
    5744:	20 91 d3 01 	lds	r18, 0x01D3
    5748:	30 91 d4 01 	lds	r19, 0x01D4
    574c:	80 91 d5 01 	lds	r24, 0x01D5
    5750:	88 2f       	mov	r24, r24
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	f9 01       	movw	r30, r18
    5756:	e8 0f       	add	r30, r24
    5758:	f9 1f       	adc	r31, r25
    575a:	80 81       	ld	r24, Z
    575c:	8d 3f       	cpi	r24, 0xFD	; 253
    575e:	09 f4       	brne	.+2      	; 0x5762 <I2C_master_transmit_respond+0x23a>
    5760:	f2 c0       	rjmp	.+484    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			else if(copy_ptr_master_data_frame[data_frame_index] == I2C_252_None){
    5762:	20 91 d3 01 	lds	r18, 0x01D3
    5766:	30 91 d4 01 	lds	r19, 0x01D4
    576a:	80 91 d5 01 	lds	r24, 0x01D5
    576e:	88 2f       	mov	r24, r24
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	f9 01       	movw	r30, r18
    5774:	e8 0f       	add	r30, r24
    5776:	f9 1f       	adc	r31, r25
    5778:	80 81       	ld	r24, Z
    577a:	8c 3f       	cpi	r24, 0xFC	; 252
    577c:	09 f4       	brne	.+2      	; 0x5780 <I2C_master_transmit_respond+0x258>
    577e:	e3 c0       	rjmp	.+454    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			else if(copy_ptr_master_data_frame[data_frame_index] == I2C_251_None){
    5780:	20 91 d3 01 	lds	r18, 0x01D3
    5784:	30 91 d4 01 	lds	r19, 0x01D4
    5788:	80 91 d5 01 	lds	r24, 0x01D5
    578c:	88 2f       	mov	r24, r24
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	f9 01       	movw	r30, r18
    5792:	e8 0f       	add	r30, r24
    5794:	f9 1f       	adc	r31, r25
    5796:	80 81       	ld	r24, Z
    5798:	8b 3f       	cpi	r24, 0xFB	; 251
    579a:	09 f4       	brne	.+2      	; 0x579e <I2C_master_transmit_respond+0x276>
    579c:	d4 c0       	rjmp	.+424    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			// if the noext byte is not termintion or any other condition then its data to be send
			else{
				// Load the data byte
				I2C_TWDR = copy_ptr_master_data_frame[data_frame_index];
    579e:	a3 e2       	ldi	r26, 0x23	; 35
    57a0:	b0 e0       	ldi	r27, 0x00	; 0
    57a2:	20 91 d3 01 	lds	r18, 0x01D3
    57a6:	30 91 d4 01 	lds	r19, 0x01D4
    57aa:	80 91 d5 01 	lds	r24, 0x01D5
    57ae:	88 2f       	mov	r24, r24
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	f9 01       	movw	r30, r18
    57b4:	e8 0f       	add	r30, r24
    57b6:	f9 1f       	adc	r31, r25
    57b8:	80 81       	ld	r24, Z
    57ba:	8c 93       	st	X, r24
				// Increment the frame index pointing to next byte in the frame
				data_frame_index++;
    57bc:	80 91 d5 01 	lds	r24, 0x01D5
    57c0:	8f 5f       	subi	r24, 0xFF	; 255
    57c2:	80 93 d5 01 	sts	0x01D5, r24
				// Clearing TWI interrupt flag
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    57c6:	a6 e5       	ldi	r26, 0x56	; 86
    57c8:	b0 e0       	ldi	r27, 0x00	; 0
    57ca:	e6 e5       	ldi	r30, 0x56	; 86
    57cc:	f0 e0       	ldi	r31, 0x00	; 0
    57ce:	80 81       	ld	r24, Z
    57d0:	80 68       	ori	r24, 0x80	; 128
    57d2:	8c 93       	st	X, r24
    57d4:	b8 c0       	rjmp	.+368    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
		break;
		// Master mode:: SLA+W recived followed by not acknowledged
		case (I2C_SLA_W_nack):
			// Update Error code to resend the SLA+W
			if(err_handle == I2C_no_err){
    57d6:	80 91 d2 01 	lds	r24, 0x01D2
    57da:	88 23       	and	r24, r24
    57dc:	21 f5       	brne	.+72     	; 0x5826 <I2C_master_transmit_respond+0x2fe>
				// Resend SLA+W
				err_handle = I2C_20_R0;
    57de:	82 e0       	ldi	r24, 0x02	; 2
    57e0:	80 93 d2 01 	sts	0x01D2, r24
				// Load SLA+W in the data register
				I2C_TWDR = copy_ptr_master_data_frame[--data_frame_index];
    57e4:	a3 e2       	ldi	r26, 0x23	; 35
    57e6:	b0 e0       	ldi	r27, 0x00	; 0
    57e8:	20 91 d3 01 	lds	r18, 0x01D3
    57ec:	30 91 d4 01 	lds	r19, 0x01D4
    57f0:	80 91 d5 01 	lds	r24, 0x01D5
    57f4:	81 50       	subi	r24, 0x01	; 1
    57f6:	80 93 d5 01 	sts	0x01D5, r24
    57fa:	80 91 d5 01 	lds	r24, 0x01D5
    57fe:	88 2f       	mov	r24, r24
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	f9 01       	movw	r30, r18
    5804:	e8 0f       	add	r30, r24
    5806:	f9 1f       	adc	r31, r25
    5808:	80 81       	ld	r24, Z
    580a:	8c 93       	st	X, r24
				// Increment the frame index pointing to next byte in the frame
				data_frame_index++;
    580c:	80 91 d5 01 	lds	r24, 0x01D5
    5810:	8f 5f       	subi	r24, 0xFF	; 255
    5812:	80 93 d5 01 	sts	0x01D5, r24
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5816:	a6 e5       	ldi	r26, 0x56	; 86
    5818:	b0 e0       	ldi	r27, 0x00	; 0
    581a:	e6 e5       	ldi	r30, 0x56	; 86
    581c:	f0 e0       	ldi	r31, 0x00	; 0
    581e:	80 81       	ld	r24, Z
    5820:	80 68       	ori	r24, 0x80	; 128
    5822:	8c 93       	st	X, r24
    5824:	90 c0       	rjmp	.+288    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			// Update Error code to repeated start sent
			else if(err_handle == I2C_20_R0){
    5826:	80 91 d2 01 	lds	r24, 0x01D2
    582a:	82 30       	cpi	r24, 0x02	; 2
    582c:	69 f4       	brne	.+26     	; 0x5848 <I2C_master_transmit_respond+0x320>
				// Send repeated start
				err_handle = I2C_20_R1;
    582e:	84 e0       	ldi	r24, 0x04	; 4
    5830:	80 93 d2 01 	sts	0x01D2, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    5834:	10 92 d5 01 	sts	0x01D5, r1
				// Send repeated start
				set_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    5838:	a6 e5       	ldi	r26, 0x56	; 86
    583a:	b0 e0       	ldi	r27, 0x00	; 0
    583c:	e6 e5       	ldi	r30, 0x56	; 86
    583e:	f0 e0       	ldi	r31, 0x00	; 0
    5840:	80 81       	ld	r24, Z
    5842:	80 62       	ori	r24, 0x20	; 32
    5844:	8c 93       	st	X, r24
    5846:	7f c0       	rjmp	.+254    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			// Update Error code to stop communication as slave does not respond
			else if(err_handle == I2C_20_R1){
    5848:	80 91 d2 01 	lds	r24, 0x01D2
    584c:	84 30       	cpi	r24, 0x04	; 4
    584e:	09 f0       	breq	.+2      	; 0x5852 <I2C_master_transmit_respond+0x32a>
    5850:	7a c0       	rjmp	.+244    	; 0x5946 <I2C_master_transmit_respond+0x41e>
				// Send stop codondition
				err_handle = I2C_20_R2;
    5852:	86 e0       	ldi	r24, 0x06	; 6
    5854:	80 93 d2 01 	sts	0x01D2, r24
				// Send stop condition
				set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5858:	a6 e5       	ldi	r26, 0x56	; 86
    585a:	b0 e0       	ldi	r27, 0x00	; 0
    585c:	e6 e5       	ldi	r30, 0x56	; 86
    585e:	f0 e0       	ldi	r31, 0x00	; 0
    5860:	80 81       	ld	r24, Z
    5862:	80 61       	ori	r24, 0x10	; 16
    5864:	8c 93       	st	X, r24
				// Reset I2C mode flag
				I2C_mode = I2C_silent;
    5866:	8f ef       	ldi	r24, 0xFF	; 255
    5868:	80 93 da 01 	sts	0x01DA, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    586c:	10 92 d5 01 	sts	0x01D5, r1
				// Reset the frame pointer
				copy_ptr_master_data_frame = NULL;
    5870:	10 92 d4 01 	sts	0x01D4, r1
    5874:	10 92 d3 01 	sts	0x01D3, r1
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5878:	a6 e5       	ldi	r26, 0x56	; 86
    587a:	b0 e0       	ldi	r27, 0x00	; 0
    587c:	e6 e5       	ldi	r30, 0x56	; 86
    587e:	f0 e0       	ldi	r31, 0x00	; 0
    5880:	80 81       	ld	r24, Z
    5882:	80 68       	ori	r24, 0x80	; 128
    5884:	8c 93       	st	X, r24
    5886:	5f c0       	rjmp	.+190    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
		break;
		// Updete Error code to resend the data byte
		case (I2C_DB_t_nack):
			if(err_handle == I2C_no_err){
    5888:	80 91 d2 01 	lds	r24, 0x01D2
    588c:	88 23       	and	r24, r24
    588e:	21 f5       	brne	.+72     	; 0x58d8 <I2C_master_transmit_respond+0x3b0>
				// Resend the data byte (n)
				err_handle = I2C_30_R0;
    5890:	88 e0       	ldi	r24, 0x08	; 8
    5892:	80 93 d2 01 	sts	0x01D2, r24
				// Load the data byte
				I2C_TWDR = copy_ptr_master_data_frame[--data_frame_index];
    5896:	a3 e2       	ldi	r26, 0x23	; 35
    5898:	b0 e0       	ldi	r27, 0x00	; 0
    589a:	20 91 d3 01 	lds	r18, 0x01D3
    589e:	30 91 d4 01 	lds	r19, 0x01D4
    58a2:	80 91 d5 01 	lds	r24, 0x01D5
    58a6:	81 50       	subi	r24, 0x01	; 1
    58a8:	80 93 d5 01 	sts	0x01D5, r24
    58ac:	80 91 d5 01 	lds	r24, 0x01D5
    58b0:	88 2f       	mov	r24, r24
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	f9 01       	movw	r30, r18
    58b6:	e8 0f       	add	r30, r24
    58b8:	f9 1f       	adc	r31, r25
    58ba:	80 81       	ld	r24, Z
    58bc:	8c 93       	st	X, r24
				// Increment the frame index pointing to next byte in the frame
				data_frame_index++;
    58be:	80 91 d5 01 	lds	r24, 0x01D5
    58c2:	8f 5f       	subi	r24, 0xFF	; 255
    58c4:	80 93 d5 01 	sts	0x01D5, r24
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    58c8:	a6 e5       	ldi	r26, 0x56	; 86
    58ca:	b0 e0       	ldi	r27, 0x00	; 0
    58cc:	e6 e5       	ldi	r30, 0x56	; 86
    58ce:	f0 e0       	ldi	r31, 0x00	; 0
    58d0:	80 81       	ld	r24, Z
    58d2:	80 68       	ori	r24, 0x80	; 128
    58d4:	8c 93       	st	X, r24
    58d6:	37 c0       	rjmp	.+110    	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			// Update Error code to retpeated start sent
			else if(err_handle == I2C_30_R0){
    58d8:	80 91 d2 01 	lds	r24, 0x01D2
    58dc:	88 30       	cpi	r24, 0x08	; 8
    58de:	69 f4       	brne	.+26     	; 0x58fa <I2C_master_transmit_respond+0x3d2>
				// Send repeated start
				err_handle = I2C_30_R1;
    58e0:	8a e0       	ldi	r24, 0x0A	; 10
    58e2:	80 93 d2 01 	sts	0x01D2, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    58e6:	10 92 d5 01 	sts	0x01D5, r1
				// Send repeated start
				set_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    58ea:	a6 e5       	ldi	r26, 0x56	; 86
    58ec:	b0 e0       	ldi	r27, 0x00	; 0
    58ee:	e6 e5       	ldi	r30, 0x56	; 86
    58f0:	f0 e0       	ldi	r31, 0x00	; 0
    58f2:	80 81       	ld	r24, Z
    58f4:	80 62       	ori	r24, 0x20	; 32
    58f6:	8c 93       	st	X, r24
    58f8:	26 c0       	rjmp	.+76     	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
			// Update Error code to stop communication as slave does not respond
			else if(err_handle == I2C_30_R1){
    58fa:	80 91 d2 01 	lds	r24, 0x01D2
    58fe:	8a 30       	cpi	r24, 0x0A	; 10
    5900:	11 f5       	brne	.+68     	; 0x5946 <I2C_master_transmit_respond+0x41e>
				// Send stop condition
				err_handle = I2C_30_R2;
    5902:	8c e0       	ldi	r24, 0x0C	; 12
    5904:	80 93 d2 01 	sts	0x01D2, r24
				// Send stop condition
				set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5908:	a6 e5       	ldi	r26, 0x56	; 86
    590a:	b0 e0       	ldi	r27, 0x00	; 0
    590c:	e6 e5       	ldi	r30, 0x56	; 86
    590e:	f0 e0       	ldi	r31, 0x00	; 0
    5910:	80 81       	ld	r24, Z
    5912:	80 61       	ori	r24, 0x10	; 16
    5914:	8c 93       	st	X, r24
				// Reset I2C mode flag
				I2C_mode = I2C_silent;
    5916:	8f ef       	ldi	r24, 0xFF	; 255
    5918:	80 93 da 01 	sts	0x01DA, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    591c:	10 92 d5 01 	sts	0x01D5, r1
				// Reset the frame pointer
				copy_ptr_master_data_frame = NULL;
    5920:	10 92 d4 01 	sts	0x01D4, r1
    5924:	10 92 d3 01 	sts	0x01D3, r1
				// Clearing TWI interrupt flag
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5928:	a6 e5       	ldi	r26, 0x56	; 86
    592a:	b0 e0       	ldi	r27, 0x00	; 0
    592c:	e6 e5       	ldi	r30, 0x56	; 86
    592e:	f0 e0       	ldi	r31, 0x00	; 0
    5930:	80 81       	ld	r24, Z
    5932:	80 68       	ori	r24, 0x80	; 128
    5934:	8c 93       	st	X, r24
    5936:	07 c0       	rjmp	.+14     	; 0x5946 <I2C_master_transmit_respond+0x41e>
			}
		break;
		default:
			// Reset the frame index
			data_frame_index = I2C_S_frame;
    5938:	10 92 d5 01 	sts	0x01D5, r1
			// Reset I2C mode flag
			I2C_mode =I2C_silent;
    593c:	8f ef       	ldi	r24, 0xFF	; 255
    593e:	80 93 da 01 	sts	0x01DA, r24
			// Check the case after arrbitration is lost
			I2C_Arb_lost_respond();
    5942:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <I2C_Arb_lost_respond>
		break;
	}
}
    5946:	0f 90       	pop	r0
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	cf 91       	pop	r28
    594e:	df 91       	pop	r29
    5950:	08 95       	ret

00005952 <I2C_master_recive_respond>:


void I2C_master_recive_respond(void ){
    5952:	df 93       	push	r29
    5954:	cf 93       	push	r28
    5956:	00 d0       	rcall	.+0      	; 0x5958 <I2C_master_recive_respond+0x6>
    5958:	00 d0       	rcall	.+0      	; 0x595a <I2C_master_recive_respond+0x8>
    595a:	cd b7       	in	r28, 0x3d	; 61
    595c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	static u8 data_frame_index = I2C_S_frame;
	static u8 recived_data_index = I2C_D_frame_St;
	switch (I2C_get_status_word()){
    595e:	0e 94 46 2a 	call	0x548c	; 0x548c <I2C_get_status_word>
    5962:	28 2f       	mov	r18, r24
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	3c 83       	std	Y+4, r19	; 0x04
    5968:	2b 83       	std	Y+3, r18	; 0x03
    596a:	4b 81       	ldd	r20, Y+3	; 0x03
    596c:	5c 81       	ldd	r21, Y+4	; 0x04
    596e:	40 34       	cpi	r20, 0x40	; 64
    5970:	51 05       	cpc	r21, r1
    5972:	09 f4       	brne	.+2      	; 0x5976 <I2C_master_recive_respond+0x24>
    5974:	69 c0       	rjmp	.+210    	; 0x5a48 <I2C_master_recive_respond+0xf6>
    5976:	8b 81       	ldd	r24, Y+3	; 0x03
    5978:	9c 81       	ldd	r25, Y+4	; 0x04
    597a:	81 34       	cpi	r24, 0x41	; 65
    597c:	91 05       	cpc	r25, r1
    597e:	5c f4       	brge	.+22     	; 0x5996 <I2C_master_recive_respond+0x44>
    5980:	2b 81       	ldd	r18, Y+3	; 0x03
    5982:	3c 81       	ldd	r19, Y+4	; 0x04
    5984:	28 30       	cpi	r18, 0x08	; 8
    5986:	31 05       	cpc	r19, r1
    5988:	c9 f0       	breq	.+50     	; 0x59bc <I2C_master_recive_respond+0x6a>
    598a:	4b 81       	ldd	r20, Y+3	; 0x03
    598c:	5c 81       	ldd	r21, Y+4	; 0x04
    598e:	40 31       	cpi	r20, 0x10	; 16
    5990:	51 05       	cpc	r21, r1
    5992:	b9 f1       	breq	.+110    	; 0x5a02 <I2C_master_recive_respond+0xb0>
    5994:	cb c1       	rjmp	.+918    	; 0x5d2c <I2C_master_recive_respond+0x3da>
    5996:	8b 81       	ldd	r24, Y+3	; 0x03
    5998:	9c 81       	ldd	r25, Y+4	; 0x04
    599a:	80 35       	cpi	r24, 0x50	; 80
    599c:	91 05       	cpc	r25, r1
    599e:	09 f4       	brne	.+2      	; 0x59a2 <I2C_master_recive_respond+0x50>
    59a0:	79 c0       	rjmp	.+242    	; 0x5a94 <I2C_master_recive_respond+0x142>
    59a2:	2b 81       	ldd	r18, Y+3	; 0x03
    59a4:	3c 81       	ldd	r19, Y+4	; 0x04
    59a6:	28 35       	cpi	r18, 0x58	; 88
    59a8:	31 05       	cpc	r19, r1
    59aa:	09 f4       	brne	.+2      	; 0x59ae <I2C_master_recive_respond+0x5c>
    59ac:	13 c1       	rjmp	.+550    	; 0x5bd4 <I2C_master_recive_respond+0x282>
    59ae:	4b 81       	ldd	r20, Y+3	; 0x03
    59b0:	5c 81       	ldd	r21, Y+4	; 0x04
    59b2:	48 34       	cpi	r20, 0x48	; 72
    59b4:	51 05       	cpc	r21, r1
    59b6:	09 f4       	brne	.+2      	; 0x59ba <I2C_master_recive_respond+0x68>
    59b8:	b1 c0       	rjmp	.+354    	; 0x5b1c <I2C_master_recive_respond+0x1ca>
    59ba:	b8 c1       	rjmp	.+880    	; 0x5d2c <I2C_master_recive_respond+0x3da>
		// Master mode:: Start condition sent
		case (I2C_S_cond_ack):
			// Load SLA+W in the data register
			I2C_TWDR = copy_ptr_master_data_frame[data_frame_index];
    59bc:	a3 e2       	ldi	r26, 0x23	; 35
    59be:	b0 e0       	ldi	r27, 0x00	; 0
    59c0:	20 91 d3 01 	lds	r18, 0x01D3
    59c4:	30 91 d4 01 	lds	r19, 0x01D4
    59c8:	80 91 d7 01 	lds	r24, 0x01D7
    59cc:	88 2f       	mov	r24, r24
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	f9 01       	movw	r30, r18
    59d2:	e8 0f       	add	r30, r24
    59d4:	f9 1f       	adc	r31, r25
    59d6:	80 81       	ld	r24, Z
    59d8:	8c 93       	st	X, r24
			// Clear start condition bit
			clr_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    59da:	a6 e5       	ldi	r26, 0x56	; 86
    59dc:	b0 e0       	ldi	r27, 0x00	; 0
    59de:	e6 e5       	ldi	r30, 0x56	; 86
    59e0:	f0 e0       	ldi	r31, 0x00	; 0
    59e2:	80 81       	ld	r24, Z
    59e4:	8f 7d       	andi	r24, 0xDF	; 223
    59e6:	8c 93       	st	X, r24
			// Increment the frame index pointing to next byte in the frame
			data_frame_index++;
    59e8:	80 91 d7 01 	lds	r24, 0x01D7
    59ec:	8f 5f       	subi	r24, 0xFF	; 255
    59ee:	80 93 d7 01 	sts	0x01D7, r24
			// Clearing TWI interrupt flage
			set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    59f2:	a6 e5       	ldi	r26, 0x56	; 86
    59f4:	b0 e0       	ldi	r27, 0x00	; 0
    59f6:	e6 e5       	ldi	r30, 0x56	; 86
    59f8:	f0 e0       	ldi	r31, 0x00	; 0
    59fa:	80 81       	ld	r24, Z
    59fc:	80 68       	ori	r24, 0x80	; 128
    59fe:	8c 93       	st	X, r24
    5a00:	9c c1       	rjmp	.+824    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
		break;
		// Master Recive mode:: repeated start condition acknowledged
		case (I2C_RS_cond_ack):
			// Load SLA+W in the data register
			I2C_TWDR = copy_ptr_master_data_frame[data_frame_index];
    5a02:	a3 e2       	ldi	r26, 0x23	; 35
    5a04:	b0 e0       	ldi	r27, 0x00	; 0
    5a06:	20 91 d3 01 	lds	r18, 0x01D3
    5a0a:	30 91 d4 01 	lds	r19, 0x01D4
    5a0e:	80 91 d7 01 	lds	r24, 0x01D7
    5a12:	88 2f       	mov	r24, r24
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	f9 01       	movw	r30, r18
    5a18:	e8 0f       	add	r30, r24
    5a1a:	f9 1f       	adc	r31, r25
    5a1c:	80 81       	ld	r24, Z
    5a1e:	8c 93       	st	X, r24
			// Clear start condition bit
			clr_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    5a20:	a6 e5       	ldi	r26, 0x56	; 86
    5a22:	b0 e0       	ldi	r27, 0x00	; 0
    5a24:	e6 e5       	ldi	r30, 0x56	; 86
    5a26:	f0 e0       	ldi	r31, 0x00	; 0
    5a28:	80 81       	ld	r24, Z
    5a2a:	8f 7d       	andi	r24, 0xDF	; 223
    5a2c:	8c 93       	st	X, r24
			// Increment the frame index pointing to next byte in the frame
			data_frame_index++;
    5a2e:	80 91 d7 01 	lds	r24, 0x01D7
    5a32:	8f 5f       	subi	r24, 0xFF	; 255
    5a34:	80 93 d7 01 	sts	0x01D7, r24
			// Clearing TWI interrupt flage
			set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5a38:	a6 e5       	ldi	r26, 0x56	; 86
    5a3a:	b0 e0       	ldi	r27, 0x00	; 0
    5a3c:	e6 e5       	ldi	r30, 0x56	; 86
    5a3e:	f0 e0       	ldi	r31, 0x00	; 0
    5a40:	80 81       	ld	r24, Z
    5a42:	80 68       	ori	r24, 0x80	; 128
    5a44:	8c 93       	st	X, r24
    5a46:	79 c1       	rjmp	.+754    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
		break;
		// Master mode:: SLA+R reccived followed by acknowledged
		case (I2C_SLA_R_ack):
			// Save data size
			if (--copy_ptr_master_data_frame[data_frame_index] > I2C_D_frame_max)
    5a48:	20 91 d3 01 	lds	r18, 0x01D3
    5a4c:	30 91 d4 01 	lds	r19, 0x01D4
    5a50:	80 91 d7 01 	lds	r24, 0x01D7
    5a54:	88 2f       	mov	r24, r24
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	f9 01       	movw	r30, r18
    5a5a:	e8 0f       	add	r30, r24
    5a5c:	f9 1f       	adc	r31, r25
    5a5e:	80 81       	ld	r24, Z
    5a60:	81 50       	subi	r24, 0x01	; 1
    5a62:	80 83       	st	Z, r24
    5a64:	80 81       	ld	r24, Z
    5a66:	88 30       	cpi	r24, 0x08	; 8
    5a68:	68 f0       	brcs	.+26     	; 0x5a84 <I2C_master_recive_respond+0x132>
				copy_ptr_master_data_frame[data_frame_index] = I2C_D_frame_max;
    5a6a:	20 91 d3 01 	lds	r18, 0x01D3
    5a6e:	30 91 d4 01 	lds	r19, 0x01D4
    5a72:	80 91 d7 01 	lds	r24, 0x01D7
    5a76:	88 2f       	mov	r24, r24
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	f9 01       	movw	r30, r18
    5a7c:	e8 0f       	add	r30, r24
    5a7e:	f9 1f       	adc	r31, r25
    5a80:	87 e0       	ldi	r24, 0x07	; 7
    5a82:	80 83       	st	Z, r24
			// Clearing TWI interrupt flage
			set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5a84:	a6 e5       	ldi	r26, 0x56	; 86
    5a86:	b0 e0       	ldi	r27, 0x00	; 0
    5a88:	e6 e5       	ldi	r30, 0x56	; 86
    5a8a:	f0 e0       	ldi	r31, 0x00	; 0
    5a8c:	80 81       	ld	r24, Z
    5a8e:	80 68       	ori	r24, 0x80	; 128
    5a90:	8c 93       	st	X, r24
    5a92:	53 c1       	rjmp	.+678    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
		break;
		// Master mode:: data byte recived follwed by acknowledged
		case (I2C_DB_r_ack):
			// Recive current data byte
			I2C_buffered_data[recived_data_index++] = I2C_TWDR;
    5a94:	30 91 d6 01 	lds	r19, 0x01D6
    5a98:	83 2f       	mov	r24, r19
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	e3 e2       	ldi	r30, 0x23	; 35
    5a9e:	f0 e0       	ldi	r31, 0x00	; 0
    5aa0:	20 81       	ld	r18, Z
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	e6 53       	subi	r30, 0x36	; 54
    5aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    5aa8:	20 83       	st	Z, r18
    5aaa:	83 2f       	mov	r24, r19
    5aac:	8f 5f       	subi	r24, 0xFF	; 255
    5aae:	80 93 d6 01 	sts	0x01D6, r24
			// Check the next move if its recived data or not
			if ((copy_ptr_master_data_frame[data_frame_index] - recived_data_index) > I2C_D_frame_St){
    5ab2:	20 91 d3 01 	lds	r18, 0x01D3
    5ab6:	30 91 d4 01 	lds	r19, 0x01D4
    5aba:	80 91 d7 01 	lds	r24, 0x01D7
    5abe:	88 2f       	mov	r24, r24
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	f9 01       	movw	r30, r18
    5ac4:	e8 0f       	add	r30, r24
    5ac6:	f9 1f       	adc	r31, r25
    5ac8:	80 81       	ld	r24, Z
    5aca:	28 2f       	mov	r18, r24
    5acc:	30 e0       	ldi	r19, 0x00	; 0
    5ace:	80 91 d6 01 	lds	r24, 0x01D6
    5ad2:	88 2f       	mov	r24, r24
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	a9 01       	movw	r20, r18
    5ad8:	48 1b       	sub	r20, r24
    5ada:	59 0b       	sbc	r21, r25
    5adc:	ca 01       	movw	r24, r20
    5ade:	18 16       	cp	r1, r24
    5ae0:	19 06       	cpc	r1, r25
    5ae2:	44 f4       	brge	.+16     	; 0x5af4 <I2C_master_recive_respond+0x1a2>
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5ae4:	a6 e5       	ldi	r26, 0x56	; 86
    5ae6:	b0 e0       	ldi	r27, 0x00	; 0
    5ae8:	e6 e5       	ldi	r30, 0x56	; 86
    5aea:	f0 e0       	ldi	r31, 0x00	; 0
    5aec:	80 81       	ld	r24, Z
    5aee:	80 68       	ori	r24, 0x80	; 128
    5af0:	8c 93       	st	X, r24
    5af2:	23 c1       	rjmp	.+582    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			}
			else{
				data_frame_index++;
    5af4:	80 91 d7 01 	lds	r24, 0x01D7
    5af8:	8f 5f       	subi	r24, 0xFF	; 255
    5afa:	80 93 d7 01 	sts	0x01D7, r24
				// sent not acknowledged in the next recive
				clr_bit(I2C_TWCR, I2C_TWCR_TWEA);
    5afe:	a6 e5       	ldi	r26, 0x56	; 86
    5b00:	b0 e0       	ldi	r27, 0x00	; 0
    5b02:	e6 e5       	ldi	r30, 0x56	; 86
    5b04:	f0 e0       	ldi	r31, 0x00	; 0
    5b06:	80 81       	ld	r24, Z
    5b08:	8f 7b       	andi	r24, 0xBF	; 191
    5b0a:	8c 93       	st	X, r24
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5b0c:	a6 e5       	ldi	r26, 0x56	; 86
    5b0e:	b0 e0       	ldi	r27, 0x00	; 0
    5b10:	e6 e5       	ldi	r30, 0x56	; 86
    5b12:	f0 e0       	ldi	r31, 0x00	; 0
    5b14:	80 81       	ld	r24, Z
    5b16:	80 68       	ori	r24, 0x80	; 128
    5b18:	8c 93       	st	X, r24
    5b1a:	0f c1       	rjmp	.+542    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			}
		break;
		case (I2C_SLA_R_nack):
			if(err_handle == I2C_no_err){
    5b1c:	80 91 d2 01 	lds	r24, 0x01D2
    5b20:	88 23       	and	r24, r24
    5b22:	21 f5       	brne	.+72     	; 0x5b6c <I2C_master_recive_respond+0x21a>
				// save error code for resend SLA+R
				err_handle = I2C_48_R0;
    5b24:	8e e0       	ldi	r24, 0x0E	; 14
    5b26:	80 93 d2 01 	sts	0x01D2, r24
				// Load SLA+W in the data register
				I2C_TWDR = copy_ptr_master_data_frame[--data_frame_index];
    5b2a:	a3 e2       	ldi	r26, 0x23	; 35
    5b2c:	b0 e0       	ldi	r27, 0x00	; 0
    5b2e:	20 91 d3 01 	lds	r18, 0x01D3
    5b32:	30 91 d4 01 	lds	r19, 0x01D4
    5b36:	80 91 d7 01 	lds	r24, 0x01D7
    5b3a:	81 50       	subi	r24, 0x01	; 1
    5b3c:	80 93 d7 01 	sts	0x01D7, r24
    5b40:	80 91 d7 01 	lds	r24, 0x01D7
    5b44:	88 2f       	mov	r24, r24
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	f9 01       	movw	r30, r18
    5b4a:	e8 0f       	add	r30, r24
    5b4c:	f9 1f       	adc	r31, r25
    5b4e:	80 81       	ld	r24, Z
    5b50:	8c 93       	st	X, r24
				// Increment the frame index pointing to next byte in the frame
				data_frame_index++;
    5b52:	80 91 d7 01 	lds	r24, 0x01D7
    5b56:	8f 5f       	subi	r24, 0xFF	; 255
    5b58:	80 93 d7 01 	sts	0x01D7, r24
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5b5c:	a6 e5       	ldi	r26, 0x56	; 86
    5b5e:	b0 e0       	ldi	r27, 0x00	; 0
    5b60:	e6 e5       	ldi	r30, 0x56	; 86
    5b62:	f0 e0       	ldi	r31, 0x00	; 0
    5b64:	80 81       	ld	r24, Z
    5b66:	80 68       	ori	r24, 0x80	; 128
    5b68:	8c 93       	st	X, r24
    5b6a:	e7 c0       	rjmp	.+462    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			}
			else if(err_handle == I2C_48_R0){
    5b6c:	80 91 d2 01 	lds	r24, 0x01D2
    5b70:	8e 30       	cpi	r24, 0x0E	; 14
    5b72:	81 f4       	brne	.+32     	; 0x5b94 <I2C_master_recive_respond+0x242>
				// Save error code for send repeated start condition
				err_handle = I2C_48_R1;
    5b74:	80 e1       	ldi	r24, 0x10	; 16
    5b76:	80 93 d2 01 	sts	0x01D2, r24
				// decrement the frame index and resen
				data_frame_index--;
    5b7a:	80 91 d7 01 	lds	r24, 0x01D7
    5b7e:	81 50       	subi	r24, 0x01	; 1
    5b80:	80 93 d7 01 	sts	0x01D7, r24
				// Send repeated start
				set_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    5b84:	a6 e5       	ldi	r26, 0x56	; 86
    5b86:	b0 e0       	ldi	r27, 0x00	; 0
    5b88:	e6 e5       	ldi	r30, 0x56	; 86
    5b8a:	f0 e0       	ldi	r31, 0x00	; 0
    5b8c:	80 81       	ld	r24, Z
    5b8e:	80 62       	ori	r24, 0x20	; 32
    5b90:	8c 93       	st	X, r24
    5b92:	d3 c0       	rjmp	.+422    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			}
			else if (err_handle == I2C_48_R1){
    5b94:	80 91 d2 01 	lds	r24, 0x01D2
    5b98:	80 31       	cpi	r24, 0x10	; 16
    5b9a:	09 f0       	breq	.+2      	; 0x5b9e <I2C_master_recive_respond+0x24c>
    5b9c:	ce c0       	rjmp	.+412    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
				// save error code for send stop condition
				err_handle = I2C_48_R2;
    5b9e:	82 e1       	ldi	r24, 0x12	; 18
    5ba0:	80 93 d2 01 	sts	0x01D2, r24
				// Send stop condition
				set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5ba4:	a6 e5       	ldi	r26, 0x56	; 86
    5ba6:	b0 e0       	ldi	r27, 0x00	; 0
    5ba8:	e6 e5       	ldi	r30, 0x56	; 86
    5baa:	f0 e0       	ldi	r31, 0x00	; 0
    5bac:	80 81       	ld	r24, Z
    5bae:	80 61       	ori	r24, 0x10	; 16
    5bb0:	8c 93       	st	X, r24
				// Reset I2C mode flag
				I2C_mode = I2C_silent;
    5bb2:	8f ef       	ldi	r24, 0xFF	; 255
    5bb4:	80 93 da 01 	sts	0x01DA, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    5bb8:	10 92 d7 01 	sts	0x01D7, r1
				// Reset the frame pointer
				copy_ptr_master_data_frame = NULL;
    5bbc:	10 92 d4 01 	sts	0x01D4, r1
    5bc0:	10 92 d3 01 	sts	0x01D3, r1
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5bc4:	a6 e5       	ldi	r26, 0x56	; 86
    5bc6:	b0 e0       	ldi	r27, 0x00	; 0
    5bc8:	e6 e5       	ldi	r30, 0x56	; 86
    5bca:	f0 e0       	ldi	r31, 0x00	; 0
    5bcc:	80 81       	ld	r24, Z
    5bce:	80 68       	ori	r24, 0x80	; 128
    5bd0:	8c 93       	st	X, r24
    5bd2:	b3 c0       	rjmp	.+358    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			}
		break;
		case (I2C_DB_r_nack):
			// check if its the end of frame code
			if(copy_ptr_master_data_frame[data_frame_index] == I2C_end_frame){
    5bd4:	20 91 d3 01 	lds	r18, 0x01D3
    5bd8:	30 91 d4 01 	lds	r19, 0x01D4
    5bdc:	80 91 d7 01 	lds	r24, 0x01D7
    5be0:	88 2f       	mov	r24, r24
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	f9 01       	movw	r30, r18
    5be6:	e8 0f       	add	r30, r24
    5be8:	f9 1f       	adc	r31, r25
    5bea:	80 81       	ld	r24, Z
    5bec:	8f 3f       	cpi	r24, 0xFF	; 255
    5bee:	39 f5       	brne	.+78     	; 0x5c3e <I2C_master_recive_respond+0x2ec>
				// Recive current data byte
				I2C_buffered_data[recived_data_index++] = I2C_TWDR;
    5bf0:	30 91 d6 01 	lds	r19, 0x01D6
    5bf4:	83 2f       	mov	r24, r19
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	e3 e2       	ldi	r30, 0x23	; 35
    5bfa:	f0 e0       	ldi	r31, 0x00	; 0
    5bfc:	20 81       	ld	r18, Z
    5bfe:	fc 01       	movw	r30, r24
    5c00:	e6 53       	subi	r30, 0x36	; 54
    5c02:	fe 4f       	sbci	r31, 0xFE	; 254
    5c04:	20 83       	st	Z, r18
    5c06:	83 2f       	mov	r24, r19
    5c08:	8f 5f       	subi	r24, 0xFF	; 255
    5c0a:	80 93 d6 01 	sts	0x01D6, r24
				// Reset I2C mode flag
				I2C_mode = I2C_silent;
    5c0e:	8f ef       	ldi	r24, 0xFF	; 255
    5c10:	80 93 da 01 	sts	0x01DA, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    5c14:	10 92 d7 01 	sts	0x01D7, r1
				// Reset the frame pointer
				copy_ptr_master_data_frame = NULL;
    5c18:	10 92 d4 01 	sts	0x01D4, r1
    5c1c:	10 92 d3 01 	sts	0x01D3, r1
				// Send stop condition
				set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5c20:	a6 e5       	ldi	r26, 0x56	; 86
    5c22:	b0 e0       	ldi	r27, 0x00	; 0
    5c24:	e6 e5       	ldi	r30, 0x56	; 86
    5c26:	f0 e0       	ldi	r31, 0x00	; 0
    5c28:	80 81       	ld	r24, Z
    5c2a:	80 61       	ori	r24, 0x10	; 16
    5c2c:	8c 93       	st	X, r24
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5c2e:	a6 e5       	ldi	r26, 0x56	; 86
    5c30:	b0 e0       	ldi	r27, 0x00	; 0
    5c32:	e6 e5       	ldi	r30, 0x56	; 86
    5c34:	f0 e0       	ldi	r31, 0x00	; 0
    5c36:	80 81       	ld	r24, Z
    5c38:	80 68       	ori	r24, 0x80	; 128
    5c3a:	8c 93       	st	X, r24
    5c3c:	7e c0       	rjmp	.+252    	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			}
			// check if its the repeated start code
			else if(copy_ptr_master_data_frame[data_frame_index] == I2C_repeated_start){
    5c3e:	20 91 d3 01 	lds	r18, 0x01D3
    5c42:	30 91 d4 01 	lds	r19, 0x01D4
    5c46:	80 91 d7 01 	lds	r24, 0x01D7
    5c4a:	88 2f       	mov	r24, r24
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	f9 01       	movw	r30, r18
    5c50:	e8 0f       	add	r30, r24
    5c52:	f9 1f       	adc	r31, r25
    5c54:	80 81       	ld	r24, Z
    5c56:	8e 3f       	cpi	r24, 0xFE	; 254
    5c58:	09 f0       	breq	.+2      	; 0x5c5c <I2C_master_recive_respond+0x30a>
    5c5a:	4d c0       	rjmp	.+154    	; 0x5cf6 <I2C_master_recive_respond+0x3a4>
				// Recive current data byte
				I2C_buffered_data[recived_data_index++] = I2C_TWDR;
    5c5c:	30 91 d6 01 	lds	r19, 0x01D6
    5c60:	83 2f       	mov	r24, r19
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	e3 e2       	ldi	r30, 0x23	; 35
    5c66:	f0 e0       	ldi	r31, 0x00	; 0
    5c68:	20 81       	ld	r18, Z
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	e6 53       	subi	r30, 0x36	; 54
    5c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c70:	20 83       	st	Z, r18
    5c72:	83 2f       	mov	r24, r19
    5c74:	8f 5f       	subi	r24, 0xFF	; 255
    5c76:	80 93 d6 01 	sts	0x01D6, r24
				// Reset the frame pointer pointing to the new address
				copy_ptr_master_data_frame += ++data_frame_index;
    5c7a:	20 91 d3 01 	lds	r18, 0x01D3
    5c7e:	30 91 d4 01 	lds	r19, 0x01D4
    5c82:	80 91 d7 01 	lds	r24, 0x01D7
    5c86:	8f 5f       	subi	r24, 0xFF	; 255
    5c88:	80 93 d7 01 	sts	0x01D7, r24
    5c8c:	80 91 d7 01 	lds	r24, 0x01D7
    5c90:	88 2f       	mov	r24, r24
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	82 0f       	add	r24, r18
    5c96:	93 1f       	adc	r25, r19
    5c98:	90 93 d4 01 	sts	0x01D4, r25
    5c9c:	80 93 d3 01 	sts	0x01D3, r24
				// Reset the frame index
				data_frame_index = I2C_S_frame;
    5ca0:	10 92 d7 01 	sts	0x01D7, r1
				// Set I2C mode flag to master mode R/W
				I2C_mode = ((get_bit(copy_ptr_master_data_frame[data_frame_index], 0) == 0) ? I2C_master_transmit : I2C_master_recive);
    5ca4:	20 91 d3 01 	lds	r18, 0x01D3
    5ca8:	30 91 d4 01 	lds	r19, 0x01D4
    5cac:	80 91 d7 01 	lds	r24, 0x01D7
    5cb0:	88 2f       	mov	r24, r24
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	f9 01       	movw	r30, r18
    5cb6:	e8 0f       	add	r30, r24
    5cb8:	f9 1f       	adc	r31, r25
    5cba:	80 81       	ld	r24, Z
    5cbc:	88 2f       	mov	r24, r24
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	81 70       	andi	r24, 0x01	; 1
    5cc2:	90 70       	andi	r25, 0x00	; 0
    5cc4:	00 97       	sbiw	r24, 0x00	; 0
    5cc6:	19 f4       	brne	.+6      	; 0x5cce <I2C_master_recive_respond+0x37c>
    5cc8:	52 e0       	ldi	r21, 0x02	; 2
    5cca:	5a 83       	std	Y+2, r21	; 0x02
    5ccc:	02 c0       	rjmp	.+4      	; 0x5cd2 <I2C_master_recive_respond+0x380>
    5cce:	84 e0       	ldi	r24, 0x04	; 4
    5cd0:	8a 83       	std	Y+2, r24	; 0x02
    5cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd4:	90 93 da 01 	sts	0x01DA, r25
				// Send repeated start
				set_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    5cd8:	a6 e5       	ldi	r26, 0x56	; 86
    5cda:	b0 e0       	ldi	r27, 0x00	; 0
    5cdc:	e6 e5       	ldi	r30, 0x56	; 86
    5cde:	f0 e0       	ldi	r31, 0x00	; 0
    5ce0:	80 81       	ld	r24, Z
    5ce2:	80 62       	ori	r24, 0x20	; 32
    5ce4:	8c 93       	st	X, r24
				// Clearing TWI interrupt flage
				set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5ce6:	a6 e5       	ldi	r26, 0x56	; 86
    5ce8:	b0 e0       	ldi	r27, 0x00	; 0
    5cea:	e6 e5       	ldi	r30, 0x56	; 86
    5cec:	f0 e0       	ldi	r31, 0x00	; 0
    5cee:	80 81       	ld	r24, Z
    5cf0:	80 68       	ori	r24, 0x80	; 128
    5cf2:	8c 93       	st	X, r24
    5cf4:	22 c0       	rjmp	.+68     	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			}
			else if(copy_ptr_master_data_frame[data_frame_index] == I2C_253_None){
    5cf6:	20 91 d3 01 	lds	r18, 0x01D3
    5cfa:	30 91 d4 01 	lds	r19, 0x01D4
    5cfe:	80 91 d7 01 	lds	r24, 0x01D7
    5d02:	88 2f       	mov	r24, r24
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	f9 01       	movw	r30, r18
    5d08:	e8 0f       	add	r30, r24
    5d0a:	f9 1f       	adc	r31, r25
    5d0c:	80 81       	ld	r24, Z
    5d0e:	8d 3f       	cpi	r24, 0xFD	; 253
    5d10:	a1 f0       	breq	.+40     	; 0x5d3a <I2C_master_recive_respond+0x3e8>

			}
			else if(copy_ptr_master_data_frame[data_frame_index] == I2C_252_None){
    5d12:	20 91 d3 01 	lds	r18, 0x01D3
    5d16:	30 91 d4 01 	lds	r19, 0x01D4
    5d1a:	80 91 d7 01 	lds	r24, 0x01D7
    5d1e:	88 2f       	mov	r24, r24
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	f9 01       	movw	r30, r18
    5d24:	e8 0f       	add	r30, r24
    5d26:	f9 1f       	adc	r31, r25
    5d28:	20 81       	ld	r18, Z
    5d2a:	07 c0       	rjmp	.+14     	; 0x5d3a <I2C_master_recive_respond+0x3e8>
			
			}
		break;
		default:
			// Reset the frame index
			data_frame_index = I2C_S_frame;
    5d2c:	10 92 d7 01 	sts	0x01D7, r1
			// Reset I2C mode flag
			I2C_mode =I2C_silent;
    5d30:	8f ef       	ldi	r24, 0xFF	; 255
    5d32:	80 93 da 01 	sts	0x01DA, r24
			// Check the case after arrbitration is lost
			I2C_Arb_lost_respond();
    5d36:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <I2C_Arb_lost_respond>
		break;
	}
}
    5d3a:	0f 90       	pop	r0
    5d3c:	0f 90       	pop	r0
    5d3e:	0f 90       	pop	r0
    5d40:	0f 90       	pop	r0
    5d42:	cf 91       	pop	r28
    5d44:	df 91       	pop	r29
    5d46:	08 95       	ret

00005d48 <I2C_void_master_start_comm>:


u8 I2C_void_master_start_comm(u8* copy_ptr_data_frame ){
    5d48:	df 93       	push	r29
    5d4a:	cf 93       	push	r28
    5d4c:	00 d0       	rcall	.+0      	; 0x5d4e <I2C_void_master_start_comm+0x6>
    5d4e:	00 d0       	rcall	.+0      	; 0x5d50 <I2C_void_master_start_comm+0x8>
    5d50:	cd b7       	in	r28, 0x3d	; 61
    5d52:	de b7       	in	r29, 0x3e	; 62
    5d54:	9a 83       	std	Y+2, r25	; 0x02
    5d56:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *
	 */
	// Check data frame validity and mode flag
	if((copy_ptr_data_frame[0] != I2C_end_frame) && (I2C_mode == I2C_silent)){
    5d58:	e9 81       	ldd	r30, Y+1	; 0x01
    5d5a:	fa 81       	ldd	r31, Y+2	; 0x02
    5d5c:	80 81       	ld	r24, Z
    5d5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5d60:	21 f1       	breq	.+72     	; 0x5daa <I2C_void_master_start_comm+0x62>
    5d62:	80 91 da 01 	lds	r24, 0x01DA
    5d66:	8f 3f       	cpi	r24, 0xFF	; 255
    5d68:	01 f5       	brne	.+64     	; 0x5daa <I2C_void_master_start_comm+0x62>
		// Set I2C mode flag to master mode R/W
		I2C_mode = ((get_bit(copy_ptr_data_frame[0], 0) == 0) ? I2C_master_transmit : I2C_master_recive);
    5d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    5d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    5d6e:	80 81       	ld	r24, Z
    5d70:	88 2f       	mov	r24, r24
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	81 70       	andi	r24, 0x01	; 1
    5d76:	90 70       	andi	r25, 0x00	; 0
    5d78:	00 97       	sbiw	r24, 0x00	; 0
    5d7a:	19 f4       	brne	.+6      	; 0x5d82 <I2C_void_master_start_comm+0x3a>
    5d7c:	82 e0       	ldi	r24, 0x02	; 2
    5d7e:	8c 83       	std	Y+4, r24	; 0x04
    5d80:	02 c0       	rjmp	.+4      	; 0x5d86 <I2C_void_master_start_comm+0x3e>
    5d82:	84 e0       	ldi	r24, 0x04	; 4
    5d84:	8c 83       	std	Y+4, r24	; 0x04
    5d86:	8c 81       	ldd	r24, Y+4	; 0x04
    5d88:	80 93 da 01 	sts	0x01DA, r24
		// Store the data frame pointer
		copy_ptr_master_data_frame = copy_ptr_data_frame;
    5d8c:	89 81       	ldd	r24, Y+1	; 0x01
    5d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d90:	90 93 d4 01 	sts	0x01D4, r25
    5d94:	80 93 d3 01 	sts	0x01D3, r24
		// Send start cond
		set_bit(I2C_TWCR, I2C_TWCR_TWSTA);
    5d98:	a6 e5       	ldi	r26, 0x56	; 86
    5d9a:	b0 e0       	ldi	r27, 0x00	; 0
    5d9c:	e6 e5       	ldi	r30, 0x56	; 86
    5d9e:	f0 e0       	ldi	r31, 0x00	; 0
    5da0:	80 81       	ld	r24, Z
    5da2:	80 62       	ori	r24, 0x20	; 32
    5da4:	8c 93       	st	X, r24
		// Return success code
		return 0;
    5da6:	1b 82       	std	Y+3, r1	; 0x03
    5da8:	02 c0       	rjmp	.+4      	; 0x5dae <I2C_void_master_start_comm+0x66>
	}
	else{
		// Return failed code
		return 1;
    5daa:	81 e0       	ldi	r24, 0x01	; 1
    5dac:	8b 83       	std	Y+3, r24	; 0x03
    5dae:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    5db0:	0f 90       	pop	r0
    5db2:	0f 90       	pop	r0
    5db4:	0f 90       	pop	r0
    5db6:	0f 90       	pop	r0
    5db8:	cf 91       	pop	r28
    5dba:	df 91       	pop	r29
    5dbc:	08 95       	ret

00005dbe <I2C_slave_transmit_respond>:


void I2C_slave_transmit_respond(void ){
    5dbe:	df 93       	push	r29
    5dc0:	cf 93       	push	r28
    5dc2:	00 d0       	rcall	.+0      	; 0x5dc4 <I2C_slave_transmit_respond+0x6>
    5dc4:	cd b7       	in	r28, 0x3d	; 61
    5dc6:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	static u8 data_frame_index = I2C_D_frame_St;
	switch(I2C_get_status_word()){
    5dc8:	0e 94 46 2a 	call	0x548c	; 0x548c <I2C_get_status_word>
    5dcc:	28 2f       	mov	r18, r24
    5dce:	30 e0       	ldi	r19, 0x00	; 0
    5dd0:	3a 83       	std	Y+2, r19	; 0x02
    5dd2:	29 83       	std	Y+1, r18	; 0x01
    5dd4:	89 81       	ldd	r24, Y+1	; 0x01
    5dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    5dd8:	88 3a       	cpi	r24, 0xA8	; 168
    5dda:	91 05       	cpc	r25, r1
    5ddc:	e9 f0       	breq	.+58     	; 0x5e18 <I2C_slave_transmit_respond+0x5a>
    5dde:	29 81       	ldd	r18, Y+1	; 0x01
    5de0:	3a 81       	ldd	r19, Y+2	; 0x02
    5de2:	29 3a       	cpi	r18, 0xA9	; 169
    5de4:	31 05       	cpc	r19, r1
    5de6:	6c f4       	brge	.+26     	; 0x5e02 <I2C_slave_transmit_respond+0x44>
    5de8:	89 81       	ldd	r24, Y+1	; 0x01
    5dea:	9a 81       	ldd	r25, Y+2	; 0x02
    5dec:	86 38       	cpi	r24, 0x86	; 134
    5dee:	91 05       	cpc	r25, r1
    5df0:	09 f4       	brne	.+2      	; 0x5df4 <I2C_slave_transmit_respond+0x36>
    5df2:	52 c0       	rjmp	.+164    	; 0x5e98 <I2C_slave_transmit_respond+0xda>
    5df4:	29 81       	ldd	r18, Y+1	; 0x01
    5df6:	3a 81       	ldd	r19, Y+2	; 0x02
    5df8:	20 3a       	cpi	r18, 0xA0	; 160
    5dfa:	31 05       	cpc	r19, r1
    5dfc:	09 f4       	brne	.+2      	; 0x5e00 <I2C_slave_transmit_respond+0x42>
    5dfe:	59 c0       	rjmp	.+178    	; 0x5eb2 <I2C_slave_transmit_respond+0xf4>
    5e00:	64 c0       	rjmp	.+200    	; 0x5eca <I2C_slave_transmit_respond+0x10c>
    5e02:	89 81       	ldd	r24, Y+1	; 0x01
    5e04:	9a 81       	ldd	r25, Y+2	; 0x02
    5e06:	88 3b       	cpi	r24, 0xB8	; 184
    5e08:	91 05       	cpc	r25, r1
    5e0a:	b9 f0       	breq	.+46     	; 0x5e3a <I2C_slave_transmit_respond+0x7c>
    5e0c:	29 81       	ldd	r18, Y+1	; 0x01
    5e0e:	3a 81       	ldd	r19, Y+2	; 0x02
    5e10:	28 3c       	cpi	r18, 0xC8	; 200
    5e12:	31 05       	cpc	r19, r1
    5e14:	a1 f1       	breq	.+104    	; 0x5e7e <I2C_slave_transmit_respond+0xc0>
    5e16:	59 c0       	rjmp	.+178    	; 0x5eca <I2C_slave_transmit_respond+0x10c>
	case (I2C_slave_transmit):
		// Send byte from the buffer
		I2C_TWDR = I2C_buffered_data[data_frame_index];
    5e18:	a3 e2       	ldi	r26, 0x23	; 35
    5e1a:	b0 e0       	ldi	r27, 0x00	; 0
    5e1c:	80 91 d8 01 	lds	r24, 0x01D8
    5e20:	88 2f       	mov	r24, r24
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	fc 01       	movw	r30, r24
    5e26:	e6 53       	subi	r30, 0x36	; 54
    5e28:	fe 4f       	sbci	r31, 0xFE	; 254
    5e2a:	80 81       	ld	r24, Z
    5e2c:	8c 93       	st	X, r24
		// Increment the frame index
		data_frame_index++;
    5e2e:	80 91 d8 01 	lds	r24, 0x01D8
    5e32:	8f 5f       	subi	r24, 0xFF	; 255
    5e34:	80 93 d8 01 	sts	0x01D8, r24
    5e38:	48 c0       	rjmp	.+144    	; 0x5eca <I2C_slave_transmit_respond+0x10c>
	break;
	case (I2C_SL_DB_t_ack):
		if (data_frame_index <= I2C_D_frame_max){
    5e3a:	80 91 d8 01 	lds	r24, 0x01D8
    5e3e:	88 30       	cpi	r24, 0x08	; 8
    5e40:	88 f4       	brcc	.+34     	; 0x5e64 <I2C_slave_transmit_respond+0xa6>
			// Send byte from the buffer
			I2C_TWDR = I2C_buffered_data[data_frame_index];
    5e42:	a3 e2       	ldi	r26, 0x23	; 35
    5e44:	b0 e0       	ldi	r27, 0x00	; 0
    5e46:	80 91 d8 01 	lds	r24, 0x01D8
    5e4a:	88 2f       	mov	r24, r24
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	fc 01       	movw	r30, r24
    5e50:	e6 53       	subi	r30, 0x36	; 54
    5e52:	fe 4f       	sbci	r31, 0xFE	; 254
    5e54:	80 81       	ld	r24, Z
    5e56:	8c 93       	st	X, r24
			// Increment the frame index
			data_frame_index++;
    5e58:	80 91 d8 01 	lds	r24, 0x01D8
    5e5c:	8f 5f       	subi	r24, 0xFF	; 255
    5e5e:	80 93 d8 01 	sts	0x01D8, r24
    5e62:	33 c0       	rjmp	.+102    	; 0x5eca <I2C_slave_transmit_respond+0x10c>
		}
		else{
			// Reset the data frame
			data_frame_index = I2C_D_frame_St;
    5e64:	10 92 d8 01 	sts	0x01D8, r1
			// Reset I2C mode flag
			I2C_mode = I2C_silent;
    5e68:	8f ef       	ldi	r24, 0xFF	; 255
    5e6a:	80 93 da 01 	sts	0x01DA, r24
			// Create an unaddresed slave mode
			set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5e6e:	a6 e5       	ldi	r26, 0x56	; 86
    5e70:	b0 e0       	ldi	r27, 0x00	; 0
    5e72:	e6 e5       	ldi	r30, 0x56	; 86
    5e74:	f0 e0       	ldi	r31, 0x00	; 0
    5e76:	80 81       	ld	r24, Z
    5e78:	80 61       	ori	r24, 0x10	; 16
    5e7a:	8c 93       	st	X, r24
    5e7c:	26 c0       	rjmp	.+76     	; 0x5eca <I2C_slave_transmit_respond+0x10c>
		}
	break;
	case (I2C_SL_DB_t_last_ack):
		// Reset the frame index
		data_frame_index = I2C_D_frame_St;
    5e7e:	10 92 d8 01 	sts	0x01D8, r1
		// Reset I2C mode flag
		I2C_mode = I2C_silent;
    5e82:	8f ef       	ldi	r24, 0xFF	; 255
    5e84:	80 93 da 01 	sts	0x01DA, r24
		// Create an unaddresed slave mode
		set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5e88:	a6 e5       	ldi	r26, 0x56	; 86
    5e8a:	b0 e0       	ldi	r27, 0x00	; 0
    5e8c:	e6 e5       	ldi	r30, 0x56	; 86
    5e8e:	f0 e0       	ldi	r31, 0x00	; 0
    5e90:	80 81       	ld	r24, Z
    5e92:	80 61       	ori	r24, 0x10	; 16
    5e94:	8c 93       	st	X, r24
    5e96:	19 c0       	rjmp	.+50     	; 0x5eca <I2C_slave_transmit_respond+0x10c>
	break;
	case (I2C_SL_DB_r_nack):
		// Reset the frame index
		data_frame_index = I2C_D_frame_St;
    5e98:	10 92 d8 01 	sts	0x01D8, r1
		// Reset I2C mode flag
		I2C_mode = I2C_silent;
    5e9c:	8f ef       	ldi	r24, 0xFF	; 255
    5e9e:	80 93 da 01 	sts	0x01DA, r24
		// Create an unaddresed slave mode
		set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5ea2:	a6 e5       	ldi	r26, 0x56	; 86
    5ea4:	b0 e0       	ldi	r27, 0x00	; 0
    5ea6:	e6 e5       	ldi	r30, 0x56	; 86
    5ea8:	f0 e0       	ldi	r31, 0x00	; 0
    5eaa:	80 81       	ld	r24, Z
    5eac:	80 61       	ori	r24, 0x10	; 16
    5eae:	8c 93       	st	X, r24
    5eb0:	0c c0       	rjmp	.+24     	; 0x5eca <I2C_slave_transmit_respond+0x10c>
	break;
	case (I2C_SL_P_cond_ack):
		// Reset the frame index
		data_frame_index = I2C_D_frame_St;
    5eb2:	10 92 d8 01 	sts	0x01D8, r1
		// Reset I2C mode flag
		I2C_mode = I2C_silent;
    5eb6:	8f ef       	ldi	r24, 0xFF	; 255
    5eb8:	80 93 da 01 	sts	0x01DA, r24
		// Create an unaddresed slave mode
		set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5ebc:	a6 e5       	ldi	r26, 0x56	; 86
    5ebe:	b0 e0       	ldi	r27, 0x00	; 0
    5ec0:	e6 e5       	ldi	r30, 0x56	; 86
    5ec2:	f0 e0       	ldi	r31, 0x00	; 0
    5ec4:	80 81       	ld	r24, Z
    5ec6:	80 61       	ori	r24, 0x10	; 16
    5ec8:	8c 93       	st	X, r24
	break;
	}
	// Clearing TWI interrupt flage
	set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    5eca:	a6 e5       	ldi	r26, 0x56	; 86
    5ecc:	b0 e0       	ldi	r27, 0x00	; 0
    5ece:	e6 e5       	ldi	r30, 0x56	; 86
    5ed0:	f0 e0       	ldi	r31, 0x00	; 0
    5ed2:	80 81       	ld	r24, Z
    5ed4:	80 68       	ori	r24, 0x80	; 128
    5ed6:	8c 93       	st	X, r24
}
    5ed8:	0f 90       	pop	r0
    5eda:	0f 90       	pop	r0
    5edc:	cf 91       	pop	r28
    5ede:	df 91       	pop	r29
    5ee0:	08 95       	ret

00005ee2 <I2C_slave_recive_respond>:


void I2C_slave_recive_respond(void ){
    5ee2:	df 93       	push	r29
    5ee4:	cf 93       	push	r28
    5ee6:	00 d0       	rcall	.+0      	; 0x5ee8 <I2C_slave_recive_respond+0x6>
    5ee8:	cd b7       	in	r28, 0x3d	; 61
    5eea:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	static u8 data_frame_index = I2C_D_frame_St;
	switch(I2C_get_status_word()){
    5eec:	0e 94 46 2a 	call	0x548c	; 0x548c <I2C_get_status_word>
    5ef0:	28 2f       	mov	r18, r24
    5ef2:	30 e0       	ldi	r19, 0x00	; 0
    5ef4:	3a 83       	std	Y+2, r19	; 0x02
    5ef6:	29 83       	std	Y+1, r18	; 0x01
    5ef8:	89 81       	ldd	r24, Y+1	; 0x01
    5efa:	9a 81       	ldd	r25, Y+2	; 0x02
    5efc:	86 38       	cpi	r24, 0x86	; 134
    5efe:	91 05       	cpc	r25, r1
    5f00:	09 f4       	brne	.+2      	; 0x5f04 <I2C_slave_recive_respond+0x22>
    5f02:	77 c0       	rjmp	.+238    	; 0x5ff2 <I2C_slave_recive_respond+0x110>
    5f04:	29 81       	ldd	r18, Y+1	; 0x01
    5f06:	3a 81       	ldd	r19, Y+2	; 0x02
    5f08:	27 38       	cpi	r18, 0x87	; 135
    5f0a:	31 05       	cpc	r19, r1
    5f0c:	5c f4       	brge	.+22     	; 0x5f24 <I2C_slave_recive_respond+0x42>
    5f0e:	89 81       	ldd	r24, Y+1	; 0x01
    5f10:	9a 81       	ldd	r25, Y+2	; 0x02
    5f12:	80 36       	cpi	r24, 0x60	; 96
    5f14:	91 05       	cpc	r25, r1
    5f16:	c1 f0       	breq	.+48     	; 0x5f48 <I2C_slave_recive_respond+0x66>
    5f18:	29 81       	ldd	r18, Y+1	; 0x01
    5f1a:	3a 81       	ldd	r19, Y+2	; 0x02
    5f1c:	20 38       	cpi	r18, 0x80	; 128
    5f1e:	31 05       	cpc	r19, r1
    5f20:	21 f1       	breq	.+72     	; 0x5f6a <I2C_slave_recive_respond+0x88>
    5f22:	8d c0       	rjmp	.+282    	; 0x603e <I2C_slave_recive_respond+0x15c>
    5f24:	89 81       	ldd	r24, Y+1	; 0x01
    5f26:	9a 81       	ldd	r25, Y+2	; 0x02
    5f28:	88 39       	cpi	r24, 0x98	; 152
    5f2a:	91 05       	cpc	r25, r1
    5f2c:	09 f4       	brne	.+2      	; 0x5f30 <I2C_slave_recive_respond+0x4e>
    5f2e:	6e c0       	rjmp	.+220    	; 0x600c <I2C_slave_recive_respond+0x12a>
    5f30:	29 81       	ldd	r18, Y+1	; 0x01
    5f32:	3a 81       	ldd	r19, Y+2	; 0x02
    5f34:	20 3a       	cpi	r18, 0xA0	; 160
    5f36:	31 05       	cpc	r19, r1
    5f38:	09 f4       	brne	.+2      	; 0x5f3c <I2C_slave_recive_respond+0x5a>
    5f3a:	75 c0       	rjmp	.+234    	; 0x6026 <I2C_slave_recive_respond+0x144>
    5f3c:	89 81       	ldd	r24, Y+1	; 0x01
    5f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f40:	80 39       	cpi	r24, 0x90	; 144
    5f42:	91 05       	cpc	r25, r1
    5f44:	a1 f1       	breq	.+104    	; 0x5fae <I2C_slave_recive_respond+0xcc>
    5f46:	7b c0       	rjmp	.+246    	; 0x603e <I2C_slave_recive_respond+0x15c>
	case (I2C_slave_recive):
		// Save recived byte in the buffer
		I2C_buffered_data[data_frame_index] = I2C_TWDR;
    5f48:	80 91 d9 01 	lds	r24, 0x01D9
    5f4c:	88 2f       	mov	r24, r24
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	e3 e2       	ldi	r30, 0x23	; 35
    5f52:	f0 e0       	ldi	r31, 0x00	; 0
    5f54:	20 81       	ld	r18, Z
    5f56:	fc 01       	movw	r30, r24
    5f58:	e6 53       	subi	r30, 0x36	; 54
    5f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f5c:	20 83       	st	Z, r18
		// Increment the frame index
		data_frame_index++;
    5f5e:	80 91 d9 01 	lds	r24, 0x01D9
    5f62:	8f 5f       	subi	r24, 0xFF	; 255
    5f64:	80 93 d9 01 	sts	0x01D9, r24
    5f68:	6a c0       	rjmp	.+212    	; 0x603e <I2C_slave_recive_respond+0x15c>
	break;
	case (I2C_SL_DB_r_ack):
		if (data_frame_index <= I2C_D_frame_max){
    5f6a:	80 91 d9 01 	lds	r24, 0x01D9
    5f6e:	88 30       	cpi	r24, 0x08	; 8
    5f70:	88 f4       	brcc	.+34     	; 0x5f94 <I2C_slave_recive_respond+0xb2>
			// Save recived byte in the buffer
			I2C_buffered_data[data_frame_index] = I2C_TWDR;
    5f72:	80 91 d9 01 	lds	r24, 0x01D9
    5f76:	88 2f       	mov	r24, r24
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	e3 e2       	ldi	r30, 0x23	; 35
    5f7c:	f0 e0       	ldi	r31, 0x00	; 0
    5f7e:	20 81       	ld	r18, Z
    5f80:	fc 01       	movw	r30, r24
    5f82:	e6 53       	subi	r30, 0x36	; 54
    5f84:	fe 4f       	sbci	r31, 0xFE	; 254
    5f86:	20 83       	st	Z, r18
			// Increment the frame index
			data_frame_index++;
    5f88:	80 91 d9 01 	lds	r24, 0x01D9
    5f8c:	8f 5f       	subi	r24, 0xFF	; 255
    5f8e:	80 93 d9 01 	sts	0x01D9, r24
    5f92:	55 c0       	rjmp	.+170    	; 0x603e <I2C_slave_recive_respond+0x15c>
		}
		else{
			// Reset the data frame
			data_frame_index = I2C_D_frame_St;
    5f94:	10 92 d9 01 	sts	0x01D9, r1
			// Reset I2C mode flag
			I2C_mode = I2C_silent;
    5f98:	8f ef       	ldi	r24, 0xFF	; 255
    5f9a:	80 93 da 01 	sts	0x01DA, r24
			// Create an unaddresed slave mode
			set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5f9e:	a6 e5       	ldi	r26, 0x56	; 86
    5fa0:	b0 e0       	ldi	r27, 0x00	; 0
    5fa2:	e6 e5       	ldi	r30, 0x56	; 86
    5fa4:	f0 e0       	ldi	r31, 0x00	; 0
    5fa6:	80 81       	ld	r24, Z
    5fa8:	80 61       	ori	r24, 0x10	; 16
    5faa:	8c 93       	st	X, r24
    5fac:	48 c0       	rjmp	.+144    	; 0x603e <I2C_slave_recive_respond+0x15c>
		}
	break;
	case (I2C_SL_DB_r_gen_ack):
		if (data_frame_index >= I2C_D_frame_max){
    5fae:	80 91 d9 01 	lds	r24, 0x01D9
    5fb2:	87 30       	cpi	r24, 0x07	; 7
    5fb4:	88 f0       	brcs	.+34     	; 0x5fd8 <I2C_slave_recive_respond+0xf6>
		// Save recived byte in the buffer
		I2C_buffered_data[data_frame_index] = I2C_TWDR;
    5fb6:	80 91 d9 01 	lds	r24, 0x01D9
    5fba:	88 2f       	mov	r24, r24
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	e3 e2       	ldi	r30, 0x23	; 35
    5fc0:	f0 e0       	ldi	r31, 0x00	; 0
    5fc2:	20 81       	ld	r18, Z
    5fc4:	fc 01       	movw	r30, r24
    5fc6:	e6 53       	subi	r30, 0x36	; 54
    5fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    5fca:	20 83       	st	Z, r18
		// Increment the frame index
		data_frame_index++;
    5fcc:	80 91 d9 01 	lds	r24, 0x01D9
    5fd0:	8f 5f       	subi	r24, 0xFF	; 255
    5fd2:	80 93 d9 01 	sts	0x01D9, r24
    5fd6:	33 c0       	rjmp	.+102    	; 0x603e <I2C_slave_recive_respond+0x15c>
		}
		else{
		// Reset the data frame
		data_frame_index = I2C_D_frame_St;
    5fd8:	10 92 d9 01 	sts	0x01D9, r1
		// Reset I2C mode flag
		I2C_mode = I2C_silent;
    5fdc:	8f ef       	ldi	r24, 0xFF	; 255
    5fde:	80 93 da 01 	sts	0x01DA, r24
		// Create an unaddresed slave mode
		set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5fe2:	a6 e5       	ldi	r26, 0x56	; 86
    5fe4:	b0 e0       	ldi	r27, 0x00	; 0
    5fe6:	e6 e5       	ldi	r30, 0x56	; 86
    5fe8:	f0 e0       	ldi	r31, 0x00	; 0
    5fea:	80 81       	ld	r24, Z
    5fec:	80 61       	ori	r24, 0x10	; 16
    5fee:	8c 93       	st	X, r24
    5ff0:	26 c0       	rjmp	.+76     	; 0x603e <I2C_slave_recive_respond+0x15c>
		}
	break;
	case (I2C_SL_DB_r_nack):
		// Reset the data frame
		data_frame_index = I2C_D_frame_St;
    5ff2:	10 92 d9 01 	sts	0x01D9, r1
		// Reset I2C mode flag
		I2C_mode = I2C_silent;
    5ff6:	8f ef       	ldi	r24, 0xFF	; 255
    5ff8:	80 93 da 01 	sts	0x01DA, r24
		// Create an unaddresed slave mode
		set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    5ffc:	a6 e5       	ldi	r26, 0x56	; 86
    5ffe:	b0 e0       	ldi	r27, 0x00	; 0
    6000:	e6 e5       	ldi	r30, 0x56	; 86
    6002:	f0 e0       	ldi	r31, 0x00	; 0
    6004:	80 81       	ld	r24, Z
    6006:	80 61       	ori	r24, 0x10	; 16
    6008:	8c 93       	st	X, r24
    600a:	19 c0       	rjmp	.+50     	; 0x603e <I2C_slave_recive_respond+0x15c>
	break;
	case (I2C_SL_DB_r_gen_nack):
		// Reset the data frame
		data_frame_index = I2C_D_frame_St;
    600c:	10 92 d9 01 	sts	0x01D9, r1
		// Reset I2C mode flag
		I2C_mode = I2C_silent;
    6010:	8f ef       	ldi	r24, 0xFF	; 255
    6012:	80 93 da 01 	sts	0x01DA, r24
		// Create an unaddresed slave mode
		set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    6016:	a6 e5       	ldi	r26, 0x56	; 86
    6018:	b0 e0       	ldi	r27, 0x00	; 0
    601a:	e6 e5       	ldi	r30, 0x56	; 86
    601c:	f0 e0       	ldi	r31, 0x00	; 0
    601e:	80 81       	ld	r24, Z
    6020:	80 61       	ori	r24, 0x10	; 16
    6022:	8c 93       	st	X, r24
    6024:	0c c0       	rjmp	.+24     	; 0x603e <I2C_slave_recive_respond+0x15c>
	break;
	case (I2C_SL_P_cond_ack):
		// Reset the data frame
		data_frame_index = I2C_D_frame_St;
    6026:	10 92 d9 01 	sts	0x01D9, r1
		// Reset I2C mode flag
		I2C_mode = I2C_silent;
    602a:	8f ef       	ldi	r24, 0xFF	; 255
    602c:	80 93 da 01 	sts	0x01DA, r24
		// Create an unaddresed slave mode
		set_bit(I2C_TWCR, I2C_TWCR_TWSTO);
    6030:	a6 e5       	ldi	r26, 0x56	; 86
    6032:	b0 e0       	ldi	r27, 0x00	; 0
    6034:	e6 e5       	ldi	r30, 0x56	; 86
    6036:	f0 e0       	ldi	r31, 0x00	; 0
    6038:	80 81       	ld	r24, Z
    603a:	80 61       	ori	r24, 0x10	; 16
    603c:	8c 93       	st	X, r24
	break;
	}
	// Clearing TWI interrupt flage
	set_bit(I2C_TWCR, I2C_TWCR_TWINT);
    603e:	a6 e5       	ldi	r26, 0x56	; 86
    6040:	b0 e0       	ldi	r27, 0x00	; 0
    6042:	e6 e5       	ldi	r30, 0x56	; 86
    6044:	f0 e0       	ldi	r31, 0x00	; 0
    6046:	80 81       	ld	r24, Z
    6048:	80 68       	ori	r24, 0x80	; 128
    604a:	8c 93       	st	X, r24
}
    604c:	0f 90       	pop	r0
    604e:	0f 90       	pop	r0
    6050:	cf 91       	pop	r28
    6052:	df 91       	pop	r29
    6054:	08 95       	ret

00006056 <I2C_u8_ptr_get_buffered_frame>:


u8* I2C_u8_ptr_get_buffered_frame(void ){
    6056:	df 93       	push	r29
    6058:	cf 93       	push	r28
    605a:	cd b7       	in	r28, 0x3d	; 61
    605c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	return I2C_buffered_data;
    605e:	8a ec       	ldi	r24, 0xCA	; 202
    6060:	91 e0       	ldi	r25, 0x01	; 1
}
    6062:	cf 91       	pop	r28
    6064:	df 91       	pop	r29
    6066:	08 95       	ret

00006068 <I2C_u8_void_set_buffered_frame>:


void I2C_u8_void_set_buffered_frame(u8* copy_ptr_buffered_data_frame){
    6068:	df 93       	push	r29
    606a:	cf 93       	push	r28
    606c:	00 d0       	rcall	.+0      	; 0x606e <I2C_u8_void_set_buffered_frame+0x6>
    606e:	0f 92       	push	r0
    6070:	cd b7       	in	r28, 0x3d	; 61
    6072:	de b7       	in	r29, 0x3e	; 62
    6074:	9b 83       	std	Y+3, r25	; 0x03
    6076:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 *
	 */
	for(u8 i= I2C_D_frame_St; i<= I2C_D_frame_max; i++)
    6078:	19 82       	std	Y+1, r1	; 0x01
    607a:	13 c0       	rjmp	.+38     	; 0x60a2 <I2C_u8_void_set_buffered_frame+0x3a>
		I2C_buffered_data[i] = copy_ptr_buffered_data_frame[i];
    607c:	89 81       	ldd	r24, Y+1	; 0x01
    607e:	48 2f       	mov	r20, r24
    6080:	50 e0       	ldi	r21, 0x00	; 0
    6082:	89 81       	ldd	r24, Y+1	; 0x01
    6084:	28 2f       	mov	r18, r24
    6086:	30 e0       	ldi	r19, 0x00	; 0
    6088:	8a 81       	ldd	r24, Y+2	; 0x02
    608a:	9b 81       	ldd	r25, Y+3	; 0x03
    608c:	fc 01       	movw	r30, r24
    608e:	e2 0f       	add	r30, r18
    6090:	f3 1f       	adc	r31, r19
    6092:	80 81       	ld	r24, Z
    6094:	fa 01       	movw	r30, r20
    6096:	e6 53       	subi	r30, 0x36	; 54
    6098:	fe 4f       	sbci	r31, 0xFE	; 254
    609a:	80 83       	st	Z, r24

void I2C_u8_void_set_buffered_frame(u8* copy_ptr_buffered_data_frame){
	/*
	 *
	 */
	for(u8 i= I2C_D_frame_St; i<= I2C_D_frame_max; i++)
    609c:	89 81       	ldd	r24, Y+1	; 0x01
    609e:	8f 5f       	subi	r24, 0xFF	; 255
    60a0:	89 83       	std	Y+1, r24	; 0x01
    60a2:	89 81       	ldd	r24, Y+1	; 0x01
    60a4:	88 30       	cpi	r24, 0x08	; 8
    60a6:	50 f3       	brcs	.-44     	; 0x607c <I2C_u8_void_set_buffered_frame+0x14>
		I2C_buffered_data[i] = copy_ptr_buffered_data_frame[i];
}
    60a8:	0f 90       	pop	r0
    60aa:	0f 90       	pop	r0
    60ac:	0f 90       	pop	r0
    60ae:	cf 91       	pop	r28
    60b0:	df 91       	pop	r29
    60b2:	08 95       	ret

000060b4 <__vector_19>:


void __vector_19(void ){
    60b4:	1f 92       	push	r1
    60b6:	0f 92       	push	r0
    60b8:	0f b6       	in	r0, 0x3f	; 63
    60ba:	0f 92       	push	r0
    60bc:	11 24       	eor	r1, r1
    60be:	2f 93       	push	r18
    60c0:	3f 93       	push	r19
    60c2:	4f 93       	push	r20
    60c4:	5f 93       	push	r21
    60c6:	6f 93       	push	r22
    60c8:	7f 93       	push	r23
    60ca:	8f 93       	push	r24
    60cc:	9f 93       	push	r25
    60ce:	af 93       	push	r26
    60d0:	bf 93       	push	r27
    60d2:	ef 93       	push	r30
    60d4:	ff 93       	push	r31
    60d6:	df 93       	push	r29
    60d8:	cf 93       	push	r28
    60da:	00 d0       	rcall	.+0      	; 0x60dc <__vector_19+0x28>
    60dc:	cd b7       	in	r28, 0x3d	; 61
    60de:	de b7       	in	r29, 0x3e	; 62
	/*
	 *
	 */
	if (I2C_mode == I2C_silent){
    60e0:	80 91 da 01 	lds	r24, 0x01DA
    60e4:	8f 3f       	cpi	r24, 0xFF	; 255
    60e6:	31 f4       	brne	.+12     	; 0x60f4 <__vector_19+0x40>
		I2C_mode = (I2C_TWSR & I2C_TWS_mask);
    60e8:	e1 e2       	ldi	r30, 0x21	; 33
    60ea:	f0 e0       	ldi	r31, 0x00	; 0
    60ec:	80 81       	ld	r24, Z
    60ee:	88 7f       	andi	r24, 0xF8	; 248
    60f0:	80 93 da 01 	sts	0x01DA, r24
	}
	switch(I2C_mode){
    60f4:	80 91 da 01 	lds	r24, 0x01DA
    60f8:	28 2f       	mov	r18, r24
    60fa:	30 e0       	ldi	r19, 0x00	; 0
    60fc:	3a 83       	std	Y+2, r19	; 0x02
    60fe:	29 83       	std	Y+1, r18	; 0x01
    6100:	89 81       	ldd	r24, Y+1	; 0x01
    6102:	9a 81       	ldd	r25, Y+2	; 0x02
    6104:	84 30       	cpi	r24, 0x04	; 4
    6106:	91 05       	cpc	r25, r1
    6108:	c9 f0       	breq	.+50     	; 0x613c <__vector_19+0x88>
    610a:	29 81       	ldd	r18, Y+1	; 0x01
    610c:	3a 81       	ldd	r19, Y+2	; 0x02
    610e:	25 30       	cpi	r18, 0x05	; 5
    6110:	31 05       	cpc	r19, r1
    6112:	34 f4       	brge	.+12     	; 0x6120 <__vector_19+0x6c>
    6114:	89 81       	ldd	r24, Y+1	; 0x01
    6116:	9a 81       	ldd	r25, Y+2	; 0x02
    6118:	82 30       	cpi	r24, 0x02	; 2
    611a:	91 05       	cpc	r25, r1
    611c:	61 f0       	breq	.+24     	; 0x6136 <__vector_19+0x82>
    611e:	16 c0       	rjmp	.+44     	; 0x614c <__vector_19+0x98>
    6120:	29 81       	ldd	r18, Y+1	; 0x01
    6122:	3a 81       	ldd	r19, Y+2	; 0x02
    6124:	20 36       	cpi	r18, 0x60	; 96
    6126:	31 05       	cpc	r19, r1
    6128:	79 f0       	breq	.+30     	; 0x6148 <__vector_19+0x94>
    612a:	89 81       	ldd	r24, Y+1	; 0x01
    612c:	9a 81       	ldd	r25, Y+2	; 0x02
    612e:	88 3a       	cpi	r24, 0xA8	; 168
    6130:	91 05       	cpc	r25, r1
    6132:	39 f0       	breq	.+14     	; 0x6142 <__vector_19+0x8e>
    6134:	0b c0       	rjmp	.+22     	; 0x614c <__vector_19+0x98>
		case I2C_master_transmit:
			I2C_master_transmit_respond();
    6136:	0e 94 94 2a 	call	0x5528	; 0x5528 <I2C_master_transmit_respond>
    613a:	08 c0       	rjmp	.+16     	; 0x614c <__vector_19+0x98>
			break;
		case I2C_master_recive:
			I2C_master_recive_respond();
    613c:	0e 94 a9 2c 	call	0x5952	; 0x5952 <I2C_master_recive_respond>
    6140:	05 c0       	rjmp	.+10     	; 0x614c <__vector_19+0x98>
			break;
		case I2C_slave_transmit:
			I2C_slave_transmit_respond();
    6142:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <I2C_slave_transmit_respond>
    6146:	02 c0       	rjmp	.+4      	; 0x614c <__vector_19+0x98>
			break;
		case I2C_slave_recive:
			I2C_slave_recive_respond();
    6148:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <I2C_slave_recive_respond>
			break;
	}
}
    614c:	0f 90       	pop	r0
    614e:	0f 90       	pop	r0
    6150:	cf 91       	pop	r28
    6152:	df 91       	pop	r29
    6154:	ff 91       	pop	r31
    6156:	ef 91       	pop	r30
    6158:	bf 91       	pop	r27
    615a:	af 91       	pop	r26
    615c:	9f 91       	pop	r25
    615e:	8f 91       	pop	r24
    6160:	7f 91       	pop	r23
    6162:	6f 91       	pop	r22
    6164:	5f 91       	pop	r21
    6166:	4f 91       	pop	r20
    6168:	3f 91       	pop	r19
    616a:	2f 91       	pop	r18
    616c:	0f 90       	pop	r0
    616e:	0f be       	out	0x3f, r0	; 63
    6170:	0f 90       	pop	r0
    6172:	1f 90       	pop	r1
    6174:	18 95       	reti

00006176 <DIO_void_set_port_dir>:


/* Implementing of the driver functions */
/* Set direction of PORTx functions */
void DIO_void_set_port_dir(u8 copy_u8_port_id, u8 port_dir_copy)
{
    6176:	df 93       	push	r29
    6178:	cf 93       	push	r28
    617a:	00 d0       	rcall	.+0      	; 0x617c <DIO_void_set_port_dir+0x6>
    617c:	cd b7       	in	r28, 0x3d	; 61
    617e:	de b7       	in	r29, 0x3e	; 62
    6180:	89 83       	std	Y+1, r24	; 0x01
    6182:	6a 83       	std	Y+2, r22	; 0x02
	 *						1: for output pin
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = port_dir_copy;
    6184:	89 81       	ldd	r24, Y+1	; 0x01
    6186:	88 2f       	mov	r24, r24
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	88 0f       	add	r24, r24
    618c:	99 1f       	adc	r25, r25
    618e:	fc 01       	movw	r30, r24
    6190:	ea 55       	subi	r30, 0x5A	; 90
    6192:	fe 4f       	sbci	r31, 0xFE	; 254
    6194:	01 90       	ld	r0, Z+
    6196:	f0 81       	ld	r31, Z
    6198:	e0 2d       	mov	r30, r0
    619a:	8a 81       	ldd	r24, Y+2	; 0x02
    619c:	80 83       	st	Z, r24
}
    619e:	0f 90       	pop	r0
    61a0:	0f 90       	pop	r0
    61a2:	cf 91       	pop	r28
    61a4:	df 91       	pop	r29
    61a6:	08 95       	ret

000061a8 <DIO_void_set_port_in_pullUp>:


void DIO_void_set_port_in_pullUp(u8 copy_u8_port_id)
{
    61a8:	df 93       	push	r29
    61aa:	cf 93       	push	r28
    61ac:	0f 92       	push	r0
    61ae:	cd b7       	in	r28, 0x3d	; 61
    61b0:	de b7       	in	r29, 0x3e	; 62
    61b2:	89 83       	std	Y+1, r24	; 0x01
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT Direction Register DDRx
	 */
	*(DIO_DDRx_REF[copy_u8_port_id]) = INPUT;
    61b4:	89 81       	ldd	r24, Y+1	; 0x01
    61b6:	88 2f       	mov	r24, r24
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	88 0f       	add	r24, r24
    61bc:	99 1f       	adc	r25, r25
    61be:	fc 01       	movw	r30, r24
    61c0:	ea 55       	subi	r30, 0x5A	; 90
    61c2:	fe 4f       	sbci	r31, 0xFE	; 254
    61c4:	01 90       	ld	r0, Z+
    61c6:	f0 81       	ld	r31, Z
    61c8:	e0 2d       	mov	r30, r0
    61ca:	10 82       	st	Z, r1
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    61cc:	89 81       	ldd	r24, Y+1	; 0x01
    61ce:	88 2f       	mov	r24, r24
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	88 0f       	add	r24, r24
    61d4:	99 1f       	adc	r25, r25
    61d6:	fc 01       	movw	r30, r24
    61d8:	e2 55       	subi	r30, 0x52	; 82
    61da:	fe 4f       	sbci	r31, 0xFE	; 254
    61dc:	01 90       	ld	r0, Z+
    61de:	f0 81       	ld	r31, Z
    61e0:	e0 2d       	mov	r30, r0
    61e2:	8f ef       	ldi	r24, 0xFF	; 255
    61e4:	80 83       	st	Z, r24
}
    61e6:	0f 90       	pop	r0
    61e8:	cf 91       	pop	r28
    61ea:	df 91       	pop	r29
    61ec:	08 95       	ret

000061ee <DIO_void_set_pin_dir>:


/* Set direction of PINx functions */
void DIO_void_set_pin_dir(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_dir_copy)
{
    61ee:	df 93       	push	r29
    61f0:	cf 93       	push	r28
    61f2:	00 d0       	rcall	.+0      	; 0x61f4 <DIO_void_set_pin_dir+0x6>
    61f4:	0f 92       	push	r0
    61f6:	cd b7       	in	r28, 0x3d	; 61
    61f8:	de b7       	in	r29, 0x3e	; 62
    61fa:	89 83       	std	Y+1, r24	; 0x01
    61fc:	6a 83       	std	Y+2, r22	; 0x02
    61fe:	4b 83       	std	Y+3, r20	; 0x03
	 *				   1: for output pin
	 *
	 * Function does not return any output, yet it affects the 
	 * pin in the PORT Direction Register DDRx
	 */	
	agn_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_dir_copy);
    6200:	8b 81       	ldd	r24, Y+3	; 0x03
    6202:	88 23       	and	r24, r24
    6204:	29 f1       	breq	.+74     	; 0x6250 <DIO_void_set_pin_dir+0x62>
    6206:	89 81       	ldd	r24, Y+1	; 0x01
    6208:	88 2f       	mov	r24, r24
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	88 0f       	add	r24, r24
    620e:	99 1f       	adc	r25, r25
    6210:	fc 01       	movw	r30, r24
    6212:	ea 55       	subi	r30, 0x5A	; 90
    6214:	fe 4f       	sbci	r31, 0xFE	; 254
    6216:	a0 81       	ld	r26, Z
    6218:	b1 81       	ldd	r27, Z+1	; 0x01
    621a:	89 81       	ldd	r24, Y+1	; 0x01
    621c:	88 2f       	mov	r24, r24
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	88 0f       	add	r24, r24
    6222:	99 1f       	adc	r25, r25
    6224:	fc 01       	movw	r30, r24
    6226:	ea 55       	subi	r30, 0x5A	; 90
    6228:	fe 4f       	sbci	r31, 0xFE	; 254
    622a:	01 90       	ld	r0, Z+
    622c:	f0 81       	ld	r31, Z
    622e:	e0 2d       	mov	r30, r0
    6230:	80 81       	ld	r24, Z
    6232:	48 2f       	mov	r20, r24
    6234:	8a 81       	ldd	r24, Y+2	; 0x02
    6236:	28 2f       	mov	r18, r24
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	81 e0       	ldi	r24, 0x01	; 1
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	02 2e       	mov	r0, r18
    6240:	02 c0       	rjmp	.+4      	; 0x6246 <DIO_void_set_pin_dir+0x58>
    6242:	88 0f       	add	r24, r24
    6244:	99 1f       	adc	r25, r25
    6246:	0a 94       	dec	r0
    6248:	e2 f7       	brpl	.-8      	; 0x6242 <DIO_void_set_pin_dir+0x54>
    624a:	84 2b       	or	r24, r20
    624c:	8c 93       	st	X, r24
    624e:	25 c0       	rjmp	.+74     	; 0x629a <DIO_void_set_pin_dir+0xac>
    6250:	89 81       	ldd	r24, Y+1	; 0x01
    6252:	88 2f       	mov	r24, r24
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	88 0f       	add	r24, r24
    6258:	99 1f       	adc	r25, r25
    625a:	fc 01       	movw	r30, r24
    625c:	ea 55       	subi	r30, 0x5A	; 90
    625e:	fe 4f       	sbci	r31, 0xFE	; 254
    6260:	a0 81       	ld	r26, Z
    6262:	b1 81       	ldd	r27, Z+1	; 0x01
    6264:	89 81       	ldd	r24, Y+1	; 0x01
    6266:	88 2f       	mov	r24, r24
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	88 0f       	add	r24, r24
    626c:	99 1f       	adc	r25, r25
    626e:	fc 01       	movw	r30, r24
    6270:	ea 55       	subi	r30, 0x5A	; 90
    6272:	fe 4f       	sbci	r31, 0xFE	; 254
    6274:	01 90       	ld	r0, Z+
    6276:	f0 81       	ld	r31, Z
    6278:	e0 2d       	mov	r30, r0
    627a:	80 81       	ld	r24, Z
    627c:	48 2f       	mov	r20, r24
    627e:	8a 81       	ldd	r24, Y+2	; 0x02
    6280:	28 2f       	mov	r18, r24
    6282:	30 e0       	ldi	r19, 0x00	; 0
    6284:	81 e0       	ldi	r24, 0x01	; 1
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	02 2e       	mov	r0, r18
    628a:	02 c0       	rjmp	.+4      	; 0x6290 <DIO_void_set_pin_dir+0xa2>
    628c:	88 0f       	add	r24, r24
    628e:	99 1f       	adc	r25, r25
    6290:	0a 94       	dec	r0
    6292:	e2 f7       	brpl	.-8      	; 0x628c <DIO_void_set_pin_dir+0x9e>
    6294:	80 95       	com	r24
    6296:	84 23       	and	r24, r20
    6298:	8c 93       	st	X, r24
}
    629a:	0f 90       	pop	r0
    629c:	0f 90       	pop	r0
    629e:	0f 90       	pop	r0
    62a0:	cf 91       	pop	r28
    62a2:	df 91       	pop	r29
    62a4:	08 95       	ret

000062a6 <DIO_void_set_pin_in_pullUP>:


void DIO_void_set_pin_in_pullUP(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    62a6:	df 93       	push	r29
    62a8:	cf 93       	push	r28
    62aa:	00 d0       	rcall	.+0      	; 0x62ac <DIO_void_set_pin_in_pullUP+0x6>
    62ac:	cd b7       	in	r28, 0x3d	; 61
    62ae:	de b7       	in	r29, 0x3e	; 62
    62b0:	89 83       	std	Y+1, r24	; 0x01
    62b2:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	pin in the PORT Direction Register DDRx					  
	 */
	clr_bit(*(DIO_DDRx_REF[copy_u8_port_id]), copy_u8_pin_num);
    62b4:	89 81       	ldd	r24, Y+1	; 0x01
    62b6:	88 2f       	mov	r24, r24
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	88 0f       	add	r24, r24
    62bc:	99 1f       	adc	r25, r25
    62be:	fc 01       	movw	r30, r24
    62c0:	ea 55       	subi	r30, 0x5A	; 90
    62c2:	fe 4f       	sbci	r31, 0xFE	; 254
    62c4:	a0 81       	ld	r26, Z
    62c6:	b1 81       	ldd	r27, Z+1	; 0x01
    62c8:	89 81       	ldd	r24, Y+1	; 0x01
    62ca:	88 2f       	mov	r24, r24
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	88 0f       	add	r24, r24
    62d0:	99 1f       	adc	r25, r25
    62d2:	fc 01       	movw	r30, r24
    62d4:	ea 55       	subi	r30, 0x5A	; 90
    62d6:	fe 4f       	sbci	r31, 0xFE	; 254
    62d8:	01 90       	ld	r0, Z+
    62da:	f0 81       	ld	r31, Z
    62dc:	e0 2d       	mov	r30, r0
    62de:	80 81       	ld	r24, Z
    62e0:	48 2f       	mov	r20, r24
    62e2:	8a 81       	ldd	r24, Y+2	; 0x02
    62e4:	28 2f       	mov	r18, r24
    62e6:	30 e0       	ldi	r19, 0x00	; 0
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	02 c0       	rjmp	.+4      	; 0x62f2 <DIO_void_set_pin_in_pullUP+0x4c>
    62ee:	88 0f       	add	r24, r24
    62f0:	99 1f       	adc	r25, r25
    62f2:	2a 95       	dec	r18
    62f4:	e2 f7       	brpl	.-8      	; 0x62ee <DIO_void_set_pin_in_pullUP+0x48>
    62f6:	80 95       	com	r24
    62f8:	84 23       	and	r24, r20
    62fa:	8c 93       	st	X, r24
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    62fc:	89 81       	ldd	r24, Y+1	; 0x01
    62fe:	88 2f       	mov	r24, r24
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	88 0f       	add	r24, r24
    6304:	99 1f       	adc	r25, r25
    6306:	fc 01       	movw	r30, r24
    6308:	e2 55       	subi	r30, 0x52	; 82
    630a:	fe 4f       	sbci	r31, 0xFE	; 254
    630c:	a0 81       	ld	r26, Z
    630e:	b1 81       	ldd	r27, Z+1	; 0x01
    6310:	89 81       	ldd	r24, Y+1	; 0x01
    6312:	88 2f       	mov	r24, r24
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	88 0f       	add	r24, r24
    6318:	99 1f       	adc	r25, r25
    631a:	fc 01       	movw	r30, r24
    631c:	e2 55       	subi	r30, 0x52	; 82
    631e:	fe 4f       	sbci	r31, 0xFE	; 254
    6320:	01 90       	ld	r0, Z+
    6322:	f0 81       	ld	r31, Z
    6324:	e0 2d       	mov	r30, r0
    6326:	80 81       	ld	r24, Z
    6328:	48 2f       	mov	r20, r24
    632a:	8a 81       	ldd	r24, Y+2	; 0x02
    632c:	28 2f       	mov	r18, r24
    632e:	30 e0       	ldi	r19, 0x00	; 0
    6330:	81 e0       	ldi	r24, 0x01	; 1
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	02 2e       	mov	r0, r18
    6336:	02 c0       	rjmp	.+4      	; 0x633c <DIO_void_set_pin_in_pullUP+0x96>
    6338:	88 0f       	add	r24, r24
    633a:	99 1f       	adc	r25, r25
    633c:	0a 94       	dec	r0
    633e:	e2 f7       	brpl	.-8      	; 0x6338 <DIO_void_set_pin_in_pullUP+0x92>
    6340:	84 2b       	or	r24, r20
    6342:	8c 93       	st	X, r24
}
    6344:	0f 90       	pop	r0
    6346:	0f 90       	pop	r0
    6348:	cf 91       	pop	r28
    634a:	df 91       	pop	r29
    634c:	08 95       	ret

0000634e <DIO_void_set_port>:


/* Assign Value to output PORTx functions */
void DIO_void_set_port(u8 copy_u8_port_id)
{
    634e:	df 93       	push	r29
    6350:	cf 93       	push	r28
    6352:	0f 92       	push	r0
    6354:	cd b7       	in	r28, 0x3d	; 61
    6356:	de b7       	in	r29, 0x3e	; 62
    6358:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = PORT_MAX;
    635a:	89 81       	ldd	r24, Y+1	; 0x01
    635c:	88 2f       	mov	r24, r24
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	88 0f       	add	r24, r24
    6362:	99 1f       	adc	r25, r25
    6364:	fc 01       	movw	r30, r24
    6366:	e2 55       	subi	r30, 0x52	; 82
    6368:	fe 4f       	sbci	r31, 0xFE	; 254
    636a:	01 90       	ld	r0, Z+
    636c:	f0 81       	ld	r31, Z
    636e:	e0 2d       	mov	r30, r0
    6370:	8f ef       	ldi	r24, 0xFF	; 255
    6372:	80 83       	st	Z, r24
}
    6374:	0f 90       	pop	r0
    6376:	cf 91       	pop	r28
    6378:	df 91       	pop	r29
    637a:	08 95       	ret

0000637c <DIO_void_clear_port>:


void DIO_void_clear_port(u8 copy_u8_port_id)
{
    637c:	df 93       	push	r29
    637e:	cf 93       	push	r28
    6380:	0f 92       	push	r0
    6382:	cd b7       	in	r28, 0x3d	; 61
    6384:	de b7       	in	r29, 0x3e	; 62
    6386:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = LOW;
    6388:	89 81       	ldd	r24, Y+1	; 0x01
    638a:	88 2f       	mov	r24, r24
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	88 0f       	add	r24, r24
    6390:	99 1f       	adc	r25, r25
    6392:	fc 01       	movw	r30, r24
    6394:	e2 55       	subi	r30, 0x52	; 82
    6396:	fe 4f       	sbci	r31, 0xFE	; 254
    6398:	01 90       	ld	r0, Z+
    639a:	f0 81       	ld	r31, Z
    639c:	e0 2d       	mov	r30, r0
    639e:	10 82       	st	Z, r1
}
    63a0:	0f 90       	pop	r0
    63a2:	cf 91       	pop	r28
    63a4:	df 91       	pop	r29
    63a6:	08 95       	ret

000063a8 <DIO_void_toggle_port>:


void DIO_void_toggle_port(u8 copy_u8_port_id)
{
    63a8:	df 93       	push	r29
    63aa:	cf 93       	push	r28
    63ac:	0f 92       	push	r0
    63ae:	cd b7       	in	r28, 0x3d	; 61
    63b0:	de b7       	in	r29, 0x3e	; 62
    63b2:	89 83       	std	Y+1, r24	; 0x01
	 *													 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) ^= PORT_MAX;
    63b4:	89 81       	ldd	r24, Y+1	; 0x01
    63b6:	88 2f       	mov	r24, r24
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	88 0f       	add	r24, r24
    63bc:	99 1f       	adc	r25, r25
    63be:	fc 01       	movw	r30, r24
    63c0:	e2 55       	subi	r30, 0x52	; 82
    63c2:	fe 4f       	sbci	r31, 0xFE	; 254
    63c4:	a0 81       	ld	r26, Z
    63c6:	b1 81       	ldd	r27, Z+1	; 0x01
    63c8:	89 81       	ldd	r24, Y+1	; 0x01
    63ca:	88 2f       	mov	r24, r24
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	88 0f       	add	r24, r24
    63d0:	99 1f       	adc	r25, r25
    63d2:	fc 01       	movw	r30, r24
    63d4:	e2 55       	subi	r30, 0x52	; 82
    63d6:	fe 4f       	sbci	r31, 0xFE	; 254
    63d8:	01 90       	ld	r0, Z+
    63da:	f0 81       	ld	r31, Z
    63dc:	e0 2d       	mov	r30, r0
    63de:	80 81       	ld	r24, Z
    63e0:	80 95       	com	r24
    63e2:	8c 93       	st	X, r24
}
    63e4:	0f 90       	pop	r0
    63e6:	cf 91       	pop	r28
    63e8:	df 91       	pop	r29
    63ea:	08 95       	ret

000063ec <DIO_void_assign_port>:


void DIO_void_assign_port(u8 copy_u8_port_id, u8 port_val)
{
    63ec:	df 93       	push	r29
    63ee:	cf 93       	push	r28
    63f0:	00 d0       	rcall	.+0      	; 0x63f2 <DIO_void_assign_port+0x6>
    63f2:	cd b7       	in	r28, 0x3d	; 61
    63f4:	de b7       	in	r29, 0x3e	; 62
    63f6:	89 83       	std	Y+1, r24	; 0x01
    63f8:	6a 83       	std	Y+2, r22	; 0x02
	 *												  	 (3, PORTD)
	 *	
	 *	Function does not return any output, yet it affects the 
	 *	PORT output Register PORTx							       
	 */
	*(DIO_PORTx_REF[copy_u8_port_id]) = port_val;
    63fa:	89 81       	ldd	r24, Y+1	; 0x01
    63fc:	88 2f       	mov	r24, r24
    63fe:	90 e0       	ldi	r25, 0x00	; 0
    6400:	88 0f       	add	r24, r24
    6402:	99 1f       	adc	r25, r25
    6404:	fc 01       	movw	r30, r24
    6406:	e2 55       	subi	r30, 0x52	; 82
    6408:	fe 4f       	sbci	r31, 0xFE	; 254
    640a:	01 90       	ld	r0, Z+
    640c:	f0 81       	ld	r31, Z
    640e:	e0 2d       	mov	r30, r0
    6410:	8a 81       	ldd	r24, Y+2	; 0x02
    6412:	80 83       	st	Z, r24
}
    6414:	0f 90       	pop	r0
    6416:	0f 90       	pop	r0
    6418:	cf 91       	pop	r28
    641a:	df 91       	pop	r29
    641c:	08 95       	ret

0000641e <DIO_void_set_pin>:


/* Assign Value to output PINx functions */
void DIO_void_set_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    641e:	df 93       	push	r29
    6420:	cf 93       	push	r28
    6422:	00 d0       	rcall	.+0      	; 0x6424 <DIO_void_set_pin+0x6>
    6424:	cd b7       	in	r28, 0x3d	; 61
    6426:	de b7       	in	r29, 0x3e	; 62
    6428:	89 83       	std	Y+1, r24	; 0x01
    642a:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	set_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    642c:	89 81       	ldd	r24, Y+1	; 0x01
    642e:	88 2f       	mov	r24, r24
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	88 0f       	add	r24, r24
    6434:	99 1f       	adc	r25, r25
    6436:	fc 01       	movw	r30, r24
    6438:	e2 55       	subi	r30, 0x52	; 82
    643a:	fe 4f       	sbci	r31, 0xFE	; 254
    643c:	a0 81       	ld	r26, Z
    643e:	b1 81       	ldd	r27, Z+1	; 0x01
    6440:	89 81       	ldd	r24, Y+1	; 0x01
    6442:	88 2f       	mov	r24, r24
    6444:	90 e0       	ldi	r25, 0x00	; 0
    6446:	88 0f       	add	r24, r24
    6448:	99 1f       	adc	r25, r25
    644a:	fc 01       	movw	r30, r24
    644c:	e2 55       	subi	r30, 0x52	; 82
    644e:	fe 4f       	sbci	r31, 0xFE	; 254
    6450:	01 90       	ld	r0, Z+
    6452:	f0 81       	ld	r31, Z
    6454:	e0 2d       	mov	r30, r0
    6456:	80 81       	ld	r24, Z
    6458:	48 2f       	mov	r20, r24
    645a:	8a 81       	ldd	r24, Y+2	; 0x02
    645c:	28 2f       	mov	r18, r24
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	81 e0       	ldi	r24, 0x01	; 1
    6462:	90 e0       	ldi	r25, 0x00	; 0
    6464:	02 2e       	mov	r0, r18
    6466:	02 c0       	rjmp	.+4      	; 0x646c <DIO_void_set_pin+0x4e>
    6468:	88 0f       	add	r24, r24
    646a:	99 1f       	adc	r25, r25
    646c:	0a 94       	dec	r0
    646e:	e2 f7       	brpl	.-8      	; 0x6468 <DIO_void_set_pin+0x4a>
    6470:	84 2b       	or	r24, r20
    6472:	8c 93       	st	X, r24
}
    6474:	0f 90       	pop	r0
    6476:	0f 90       	pop	r0
    6478:	cf 91       	pop	r28
    647a:	df 91       	pop	r29
    647c:	08 95       	ret

0000647e <DIO_void_clear_pin>:


void DIO_void_clear_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    647e:	df 93       	push	r29
    6480:	cf 93       	push	r28
    6482:	00 d0       	rcall	.+0      	; 0x6484 <DIO_void_clear_pin+0x6>
    6484:	cd b7       	in	r28, 0x3d	; 61
    6486:	de b7       	in	r29, 0x3e	; 62
    6488:	89 83       	std	Y+1, r24	; 0x01
    648a:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	clr_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    648c:	89 81       	ldd	r24, Y+1	; 0x01
    648e:	88 2f       	mov	r24, r24
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	88 0f       	add	r24, r24
    6494:	99 1f       	adc	r25, r25
    6496:	fc 01       	movw	r30, r24
    6498:	e2 55       	subi	r30, 0x52	; 82
    649a:	fe 4f       	sbci	r31, 0xFE	; 254
    649c:	a0 81       	ld	r26, Z
    649e:	b1 81       	ldd	r27, Z+1	; 0x01
    64a0:	89 81       	ldd	r24, Y+1	; 0x01
    64a2:	88 2f       	mov	r24, r24
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	88 0f       	add	r24, r24
    64a8:	99 1f       	adc	r25, r25
    64aa:	fc 01       	movw	r30, r24
    64ac:	e2 55       	subi	r30, 0x52	; 82
    64ae:	fe 4f       	sbci	r31, 0xFE	; 254
    64b0:	01 90       	ld	r0, Z+
    64b2:	f0 81       	ld	r31, Z
    64b4:	e0 2d       	mov	r30, r0
    64b6:	80 81       	ld	r24, Z
    64b8:	48 2f       	mov	r20, r24
    64ba:	8a 81       	ldd	r24, Y+2	; 0x02
    64bc:	28 2f       	mov	r18, r24
    64be:	30 e0       	ldi	r19, 0x00	; 0
    64c0:	81 e0       	ldi	r24, 0x01	; 1
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	02 2e       	mov	r0, r18
    64c6:	02 c0       	rjmp	.+4      	; 0x64cc <DIO_void_clear_pin+0x4e>
    64c8:	88 0f       	add	r24, r24
    64ca:	99 1f       	adc	r25, r25
    64cc:	0a 94       	dec	r0
    64ce:	e2 f7       	brpl	.-8      	; 0x64c8 <DIO_void_clear_pin+0x4a>
    64d0:	80 95       	com	r24
    64d2:	84 23       	and	r24, r20
    64d4:	8c 93       	st	X, r24
}
    64d6:	0f 90       	pop	r0
    64d8:	0f 90       	pop	r0
    64da:	cf 91       	pop	r28
    64dc:	df 91       	pop	r29
    64de:	08 95       	ret

000064e0 <DIO_void_toggle_pin>:


void DIO_void_toggle_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    64e0:	df 93       	push	r29
    64e2:	cf 93       	push	r28
    64e4:	00 d0       	rcall	.+0      	; 0x64e6 <DIO_void_toggle_pin+0x6>
    64e6:	cd b7       	in	r28, 0x3d	; 61
    64e8:	de b7       	in	r29, 0x3e	; 62
    64ea:	89 83       	std	Y+1, r24	; 0x01
    64ec:	6a 83       	std	Y+2, r22	; 0x02
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	tgl_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num);
    64ee:	89 81       	ldd	r24, Y+1	; 0x01
    64f0:	88 2f       	mov	r24, r24
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	88 0f       	add	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	fc 01       	movw	r30, r24
    64fa:	e2 55       	subi	r30, 0x52	; 82
    64fc:	fe 4f       	sbci	r31, 0xFE	; 254
    64fe:	a0 81       	ld	r26, Z
    6500:	b1 81       	ldd	r27, Z+1	; 0x01
    6502:	89 81       	ldd	r24, Y+1	; 0x01
    6504:	88 2f       	mov	r24, r24
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	88 0f       	add	r24, r24
    650a:	99 1f       	adc	r25, r25
    650c:	fc 01       	movw	r30, r24
    650e:	e2 55       	subi	r30, 0x52	; 82
    6510:	fe 4f       	sbci	r31, 0xFE	; 254
    6512:	01 90       	ld	r0, Z+
    6514:	f0 81       	ld	r31, Z
    6516:	e0 2d       	mov	r30, r0
    6518:	80 81       	ld	r24, Z
    651a:	48 2f       	mov	r20, r24
    651c:	8a 81       	ldd	r24, Y+2	; 0x02
    651e:	28 2f       	mov	r18, r24
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	81 e0       	ldi	r24, 0x01	; 1
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	02 2e       	mov	r0, r18
    6528:	02 c0       	rjmp	.+4      	; 0x652e <DIO_void_toggle_pin+0x4e>
    652a:	88 0f       	add	r24, r24
    652c:	99 1f       	adc	r25, r25
    652e:	0a 94       	dec	r0
    6530:	e2 f7       	brpl	.-8      	; 0x652a <DIO_void_toggle_pin+0x4a>
    6532:	84 27       	eor	r24, r20
    6534:	8c 93       	st	X, r24
}
    6536:	0f 90       	pop	r0
    6538:	0f 90       	pop	r0
    653a:	cf 91       	pop	r28
    653c:	df 91       	pop	r29
    653e:	08 95       	ret

00006540 <DIO_void_assign_pin>:


void DIO_void_assign_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num, u8 pin_val)
{
    6540:	df 93       	push	r29
    6542:	cf 93       	push	r28
    6544:	00 d0       	rcall	.+0      	; 0x6546 <DIO_void_assign_pin+0x6>
    6546:	0f 92       	push	r0
    6548:	cd b7       	in	r28, 0x3d	; 61
    654a:	de b7       	in	r29, 0x3e	; 62
    654c:	89 83       	std	Y+1, r24	; 0x01
    654e:	6a 83       	std	Y+2, r22	; 0x02
    6550:	4b 83       	std	Y+3, r20	; 0x03
	 *		copy_u8_pin_num>> pin number that needed to be set 0-7
	 *	
	 *	Function does not return any output, yet it affects 
	 *	given pin of the PORT output Register PORTx				   
	 */
	agn_bit(*(DIO_PORTx_REF[copy_u8_port_id]), copy_u8_pin_num, pin_val);
    6552:	8b 81       	ldd	r24, Y+3	; 0x03
    6554:	88 23       	and	r24, r24
    6556:	29 f1       	breq	.+74     	; 0x65a2 <DIO_void_assign_pin+0x62>
    6558:	89 81       	ldd	r24, Y+1	; 0x01
    655a:	88 2f       	mov	r24, r24
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	88 0f       	add	r24, r24
    6560:	99 1f       	adc	r25, r25
    6562:	fc 01       	movw	r30, r24
    6564:	e2 55       	subi	r30, 0x52	; 82
    6566:	fe 4f       	sbci	r31, 0xFE	; 254
    6568:	a0 81       	ld	r26, Z
    656a:	b1 81       	ldd	r27, Z+1	; 0x01
    656c:	89 81       	ldd	r24, Y+1	; 0x01
    656e:	88 2f       	mov	r24, r24
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	88 0f       	add	r24, r24
    6574:	99 1f       	adc	r25, r25
    6576:	fc 01       	movw	r30, r24
    6578:	e2 55       	subi	r30, 0x52	; 82
    657a:	fe 4f       	sbci	r31, 0xFE	; 254
    657c:	01 90       	ld	r0, Z+
    657e:	f0 81       	ld	r31, Z
    6580:	e0 2d       	mov	r30, r0
    6582:	80 81       	ld	r24, Z
    6584:	48 2f       	mov	r20, r24
    6586:	8a 81       	ldd	r24, Y+2	; 0x02
    6588:	28 2f       	mov	r18, r24
    658a:	30 e0       	ldi	r19, 0x00	; 0
    658c:	81 e0       	ldi	r24, 0x01	; 1
    658e:	90 e0       	ldi	r25, 0x00	; 0
    6590:	02 2e       	mov	r0, r18
    6592:	02 c0       	rjmp	.+4      	; 0x6598 <DIO_void_assign_pin+0x58>
    6594:	88 0f       	add	r24, r24
    6596:	99 1f       	adc	r25, r25
    6598:	0a 94       	dec	r0
    659a:	e2 f7       	brpl	.-8      	; 0x6594 <DIO_void_assign_pin+0x54>
    659c:	84 2b       	or	r24, r20
    659e:	8c 93       	st	X, r24
    65a0:	25 c0       	rjmp	.+74     	; 0x65ec <DIO_void_assign_pin+0xac>
    65a2:	89 81       	ldd	r24, Y+1	; 0x01
    65a4:	88 2f       	mov	r24, r24
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	88 0f       	add	r24, r24
    65aa:	99 1f       	adc	r25, r25
    65ac:	fc 01       	movw	r30, r24
    65ae:	e2 55       	subi	r30, 0x52	; 82
    65b0:	fe 4f       	sbci	r31, 0xFE	; 254
    65b2:	a0 81       	ld	r26, Z
    65b4:	b1 81       	ldd	r27, Z+1	; 0x01
    65b6:	89 81       	ldd	r24, Y+1	; 0x01
    65b8:	88 2f       	mov	r24, r24
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	88 0f       	add	r24, r24
    65be:	99 1f       	adc	r25, r25
    65c0:	fc 01       	movw	r30, r24
    65c2:	e2 55       	subi	r30, 0x52	; 82
    65c4:	fe 4f       	sbci	r31, 0xFE	; 254
    65c6:	01 90       	ld	r0, Z+
    65c8:	f0 81       	ld	r31, Z
    65ca:	e0 2d       	mov	r30, r0
    65cc:	80 81       	ld	r24, Z
    65ce:	48 2f       	mov	r20, r24
    65d0:	8a 81       	ldd	r24, Y+2	; 0x02
    65d2:	28 2f       	mov	r18, r24
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	81 e0       	ldi	r24, 0x01	; 1
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	02 2e       	mov	r0, r18
    65dc:	02 c0       	rjmp	.+4      	; 0x65e2 <DIO_void_assign_pin+0xa2>
    65de:	88 0f       	add	r24, r24
    65e0:	99 1f       	adc	r25, r25
    65e2:	0a 94       	dec	r0
    65e4:	e2 f7       	brpl	.-8      	; 0x65de <DIO_void_assign_pin+0x9e>
    65e6:	80 95       	com	r24
    65e8:	84 23       	and	r24, r20
    65ea:	8c 93       	st	X, r24
}
    65ec:	0f 90       	pop	r0
    65ee:	0f 90       	pop	r0
    65f0:	0f 90       	pop	r0
    65f2:	cf 91       	pop	r28
    65f4:	df 91       	pop	r29
    65f6:	08 95       	ret

000065f8 <DIO_u8_get_port>:


/* Get value from input PORTx functions */
u8 DIO_u8_get_port(u8 copy_u8_port_id)
{
    65f8:	df 93       	push	r29
    65fa:	cf 93       	push	r28
    65fc:	0f 92       	push	r0
    65fe:	cd b7       	in	r28, 0x3d	; 61
    6600:	de b7       	in	r29, 0x3e	; 62
    6602:	89 83       	std	Y+1, r24	; 0x01
	 *	
	 *	Function does not affect any regester it only gets
	 *	from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return *(DIO_PINx_REF[copy_u8_port_id]);
    6604:	89 81       	ldd	r24, Y+1	; 0x01
    6606:	88 2f       	mov	r24, r24
    6608:	90 e0       	ldi	r25, 0x00	; 0
    660a:	88 0f       	add	r24, r24
    660c:	99 1f       	adc	r25, r25
    660e:	fc 01       	movw	r30, r24
    6610:	e2 56       	subi	r30, 0x62	; 98
    6612:	fe 4f       	sbci	r31, 0xFE	; 254
    6614:	01 90       	ld	r0, Z+
    6616:	f0 81       	ld	r31, Z
    6618:	e0 2d       	mov	r30, r0
    661a:	80 81       	ld	r24, Z
}
    661c:	0f 90       	pop	r0
    661e:	cf 91       	pop	r28
    6620:	df 91       	pop	r29
    6622:	08 95       	ret

00006624 <DIO_u8_get_pin>:


/* Get value from input PINx functions */
u8 DIO_u8_get_pin(u8 copy_u8_port_id, u8 copy_u8_pin_num)
{
    6624:	df 93       	push	r29
    6626:	cf 93       	push	r28
    6628:	00 d0       	rcall	.+0      	; 0x662a <DIO_u8_get_pin+0x6>
    662a:	cd b7       	in	r28, 0x3d	; 61
    662c:	de b7       	in	r29, 0x3e	; 62
    662e:	89 83       	std	Y+1, r24	; 0x01
    6630:	6a 83       	std	Y+2, r22	; 0x02
	 *	
	 *	Function does not affect any regester it only gets the pin
	 *	value from the value in the input regester PINx of the 
	 *	given port                                                 
	 */
	return get_bit(*(DIO_PINx_REF[copy_u8_port_id]), copy_u8_pin_num);
    6632:	89 81       	ldd	r24, Y+1	; 0x01
    6634:	88 2f       	mov	r24, r24
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	88 0f       	add	r24, r24
    663a:	99 1f       	adc	r25, r25
    663c:	fc 01       	movw	r30, r24
    663e:	e2 56       	subi	r30, 0x62	; 98
    6640:	fe 4f       	sbci	r31, 0xFE	; 254
    6642:	01 90       	ld	r0, Z+
    6644:	f0 81       	ld	r31, Z
    6646:	e0 2d       	mov	r30, r0
    6648:	80 81       	ld	r24, Z
    664a:	28 2f       	mov	r18, r24
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	8a 81       	ldd	r24, Y+2	; 0x02
    6650:	88 2f       	mov	r24, r24
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	a9 01       	movw	r20, r18
    6656:	02 c0       	rjmp	.+4      	; 0x665c <DIO_u8_get_pin+0x38>
    6658:	55 95       	asr	r21
    665a:	47 95       	ror	r20
    665c:	8a 95       	dec	r24
    665e:	e2 f7       	brpl	.-8      	; 0x6658 <DIO_u8_get_pin+0x34>
    6660:	ca 01       	movw	r24, r20
    6662:	81 70       	andi	r24, 0x01	; 1
}
    6664:	0f 90       	pop	r0
    6666:	0f 90       	pop	r0
    6668:	cf 91       	pop	r28
    666a:	df 91       	pop	r29
    666c:	08 95       	ret

0000666e <__mulsi3>:
    666e:	62 9f       	mul	r22, r18
    6670:	d0 01       	movw	r26, r0
    6672:	73 9f       	mul	r23, r19
    6674:	f0 01       	movw	r30, r0
    6676:	82 9f       	mul	r24, r18
    6678:	e0 0d       	add	r30, r0
    667a:	f1 1d       	adc	r31, r1
    667c:	64 9f       	mul	r22, r20
    667e:	e0 0d       	add	r30, r0
    6680:	f1 1d       	adc	r31, r1
    6682:	92 9f       	mul	r25, r18
    6684:	f0 0d       	add	r31, r0
    6686:	83 9f       	mul	r24, r19
    6688:	f0 0d       	add	r31, r0
    668a:	74 9f       	mul	r23, r20
    668c:	f0 0d       	add	r31, r0
    668e:	65 9f       	mul	r22, r21
    6690:	f0 0d       	add	r31, r0
    6692:	99 27       	eor	r25, r25
    6694:	72 9f       	mul	r23, r18
    6696:	b0 0d       	add	r27, r0
    6698:	e1 1d       	adc	r30, r1
    669a:	f9 1f       	adc	r31, r25
    669c:	63 9f       	mul	r22, r19
    669e:	b0 0d       	add	r27, r0
    66a0:	e1 1d       	adc	r30, r1
    66a2:	f9 1f       	adc	r31, r25
    66a4:	bd 01       	movw	r22, r26
    66a6:	cf 01       	movw	r24, r30
    66a8:	11 24       	eor	r1, r1
    66aa:	08 95       	ret

000066ac <__divmodsi4>:
    66ac:	97 fb       	bst	r25, 7
    66ae:	09 2e       	mov	r0, r25
    66b0:	05 26       	eor	r0, r21
    66b2:	0e d0       	rcall	.+28     	; 0x66d0 <__divmodsi4_neg1>
    66b4:	57 fd       	sbrc	r21, 7
    66b6:	04 d0       	rcall	.+8      	; 0x66c0 <__divmodsi4_neg2>
    66b8:	14 d0       	rcall	.+40     	; 0x66e2 <__udivmodsi4>
    66ba:	0a d0       	rcall	.+20     	; 0x66d0 <__divmodsi4_neg1>
    66bc:	00 1c       	adc	r0, r0
    66be:	38 f4       	brcc	.+14     	; 0x66ce <__divmodsi4_exit>

000066c0 <__divmodsi4_neg2>:
    66c0:	50 95       	com	r21
    66c2:	40 95       	com	r20
    66c4:	30 95       	com	r19
    66c6:	21 95       	neg	r18
    66c8:	3f 4f       	sbci	r19, 0xFF	; 255
    66ca:	4f 4f       	sbci	r20, 0xFF	; 255
    66cc:	5f 4f       	sbci	r21, 0xFF	; 255

000066ce <__divmodsi4_exit>:
    66ce:	08 95       	ret

000066d0 <__divmodsi4_neg1>:
    66d0:	f6 f7       	brtc	.-4      	; 0x66ce <__divmodsi4_exit>
    66d2:	90 95       	com	r25
    66d4:	80 95       	com	r24
    66d6:	70 95       	com	r23
    66d8:	61 95       	neg	r22
    66da:	7f 4f       	sbci	r23, 0xFF	; 255
    66dc:	8f 4f       	sbci	r24, 0xFF	; 255
    66de:	9f 4f       	sbci	r25, 0xFF	; 255
    66e0:	08 95       	ret

000066e2 <__udivmodsi4>:
    66e2:	a1 e2       	ldi	r26, 0x21	; 33
    66e4:	1a 2e       	mov	r1, r26
    66e6:	aa 1b       	sub	r26, r26
    66e8:	bb 1b       	sub	r27, r27
    66ea:	fd 01       	movw	r30, r26
    66ec:	0d c0       	rjmp	.+26     	; 0x6708 <__udivmodsi4_ep>

000066ee <__udivmodsi4_loop>:
    66ee:	aa 1f       	adc	r26, r26
    66f0:	bb 1f       	adc	r27, r27
    66f2:	ee 1f       	adc	r30, r30
    66f4:	ff 1f       	adc	r31, r31
    66f6:	a2 17       	cp	r26, r18
    66f8:	b3 07       	cpc	r27, r19
    66fa:	e4 07       	cpc	r30, r20
    66fc:	f5 07       	cpc	r31, r21
    66fe:	20 f0       	brcs	.+8      	; 0x6708 <__udivmodsi4_ep>
    6700:	a2 1b       	sub	r26, r18
    6702:	b3 0b       	sbc	r27, r19
    6704:	e4 0b       	sbc	r30, r20
    6706:	f5 0b       	sbc	r31, r21

00006708 <__udivmodsi4_ep>:
    6708:	66 1f       	adc	r22, r22
    670a:	77 1f       	adc	r23, r23
    670c:	88 1f       	adc	r24, r24
    670e:	99 1f       	adc	r25, r25
    6710:	1a 94       	dec	r1
    6712:	69 f7       	brne	.-38     	; 0x66ee <__udivmodsi4_loop>
    6714:	60 95       	com	r22
    6716:	70 95       	com	r23
    6718:	80 95       	com	r24
    671a:	90 95       	com	r25
    671c:	9b 01       	movw	r18, r22
    671e:	ac 01       	movw	r20, r24
    6720:	bd 01       	movw	r22, r26
    6722:	cf 01       	movw	r24, r30
    6724:	08 95       	ret

00006726 <__prologue_saves__>:
    6726:	2f 92       	push	r2
    6728:	3f 92       	push	r3
    672a:	4f 92       	push	r4
    672c:	5f 92       	push	r5
    672e:	6f 92       	push	r6
    6730:	7f 92       	push	r7
    6732:	8f 92       	push	r8
    6734:	9f 92       	push	r9
    6736:	af 92       	push	r10
    6738:	bf 92       	push	r11
    673a:	cf 92       	push	r12
    673c:	df 92       	push	r13
    673e:	ef 92       	push	r14
    6740:	ff 92       	push	r15
    6742:	0f 93       	push	r16
    6744:	1f 93       	push	r17
    6746:	cf 93       	push	r28
    6748:	df 93       	push	r29
    674a:	cd b7       	in	r28, 0x3d	; 61
    674c:	de b7       	in	r29, 0x3e	; 62
    674e:	ca 1b       	sub	r28, r26
    6750:	db 0b       	sbc	r29, r27
    6752:	0f b6       	in	r0, 0x3f	; 63
    6754:	f8 94       	cli
    6756:	de bf       	out	0x3e, r29	; 62
    6758:	0f be       	out	0x3f, r0	; 63
    675a:	cd bf       	out	0x3d, r28	; 61
    675c:	09 94       	ijmp

0000675e <__epilogue_restores__>:
    675e:	2a 88       	ldd	r2, Y+18	; 0x12
    6760:	39 88       	ldd	r3, Y+17	; 0x11
    6762:	48 88       	ldd	r4, Y+16	; 0x10
    6764:	5f 84       	ldd	r5, Y+15	; 0x0f
    6766:	6e 84       	ldd	r6, Y+14	; 0x0e
    6768:	7d 84       	ldd	r7, Y+13	; 0x0d
    676a:	8c 84       	ldd	r8, Y+12	; 0x0c
    676c:	9b 84       	ldd	r9, Y+11	; 0x0b
    676e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6770:	b9 84       	ldd	r11, Y+9	; 0x09
    6772:	c8 84       	ldd	r12, Y+8	; 0x08
    6774:	df 80       	ldd	r13, Y+7	; 0x07
    6776:	ee 80       	ldd	r14, Y+6	; 0x06
    6778:	fd 80       	ldd	r15, Y+5	; 0x05
    677a:	0c 81       	ldd	r16, Y+4	; 0x04
    677c:	1b 81       	ldd	r17, Y+3	; 0x03
    677e:	aa 81       	ldd	r26, Y+2	; 0x02
    6780:	b9 81       	ldd	r27, Y+1	; 0x01
    6782:	ce 0f       	add	r28, r30
    6784:	d1 1d       	adc	r29, r1
    6786:	0f b6       	in	r0, 0x3f	; 63
    6788:	f8 94       	cli
    678a:	de bf       	out	0x3e, r29	; 62
    678c:	0f be       	out	0x3f, r0	; 63
    678e:	cd bf       	out	0x3d, r28	; 61
    6790:	ed 01       	movw	r28, r26
    6792:	08 95       	ret

00006794 <_exit>:
    6794:	f8 94       	cli

00006796 <__stop_program>:
    6796:	ff cf       	rjmp	.-2      	; 0x6796 <__stop_program>
